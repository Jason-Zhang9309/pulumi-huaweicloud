// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a DDS database role resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject("instanceId");
 * const roleName = config.requireObject("roleName");
 * const dbName = config.requireObject("dbName");
 * const ownedRoleName = config.requireObject("ownedRoleName");
 * const ownedRoleDbName = config.requireObject("ownedRoleDbName");
 * const test = new huaweicloud.dds.DatabaseRole("test", {
 *     instanceId: instanceId,
 *     dbName: dbName,
 *     roles: [{
 *         name: ownedRoleName,
 *         dbName: ownedRoleDbName,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DDS database roles can be imported using the `instance_id`, `db_name` and `name` separated by slashes (/), e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Dds/databaseRole:DatabaseRole test <instance_id>/<db_name>/<name>
 * ```
 */
export class DatabaseRole extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseRoleState, opts?: pulumi.CustomResourceOptions): DatabaseRole {
        return new DatabaseRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Dds/databaseRole:DatabaseRole';

    /**
     * Returns true if the given object is an instance of DatabaseRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseRole.__pulumiType;
    }

    /**
     * Specifies the database name to which this owned role belongs.
     * Changing this parameter will create a new role.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * The list of database privileges owned by the current role, includes all privileges
     * inherited by owned roles. The inheritedPrivileges structure is documented below.
     */
    public /*out*/ readonly inheritedPrivileges!: pulumi.Output<outputs.Dds.DatabaseRoleInheritedPrivilege[]>;
    /**
     * Specifies the DDS instance ID to which the role belongs.
     * Changing this parameter will create a new role.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the name of role owned by the current role.
     * The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
     * allowed. Changing this parameter will create a new role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of database privileges owned by the current role.
     * The privileges structure is documented below.
     */
    public /*out*/ readonly privileges!: pulumi.Output<outputs.Dds.DatabaseRolePrivilege[]>;
    /**
     * Specifies the region where the DDS instance is located.
     * Changing this parameter will create a new role.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the list of roles owned by the current role.
     * The roles structure is documented below.
     * Changing this parameter will create a new role.
     */
    public readonly roles!: pulumi.Output<outputs.Dds.DatabaseRoleRole[]>;

    /**
     * Create a DatabaseRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseRoleArgs | DatabaseRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseRoleState | undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["inheritedPrivileges"] = state ? state.inheritedPrivileges : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privileges"] = state ? state.privileges : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
        } else {
            const args = argsOrState as DatabaseRoleArgs | undefined;
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["inheritedPrivileges"] = undefined /*out*/;
            resourceInputs["privileges"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseRole resources.
 */
export interface DatabaseRoleState {
    /**
     * Specifies the database name to which this owned role belongs.
     * Changing this parameter will create a new role.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The list of database privileges owned by the current role, includes all privileges
     * inherited by owned roles. The inheritedPrivileges structure is documented below.
     */
    inheritedPrivileges?: pulumi.Input<pulumi.Input<inputs.Dds.DatabaseRoleInheritedPrivilege>[]>;
    /**
     * Specifies the DDS instance ID to which the role belongs.
     * Changing this parameter will create a new role.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the name of role owned by the current role.
     * The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
     * allowed. Changing this parameter will create a new role.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of database privileges owned by the current role.
     * The privileges structure is documented below.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.Dds.DatabaseRolePrivilege>[]>;
    /**
     * Specifies the region where the DDS instance is located.
     * Changing this parameter will create a new role.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the list of roles owned by the current role.
     * The roles structure is documented below.
     * Changing this parameter will create a new role.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.Dds.DatabaseRoleRole>[]>;
}

/**
 * The set of arguments for constructing a DatabaseRole resource.
 */
export interface DatabaseRoleArgs {
    /**
     * Specifies the database name to which this owned role belongs.
     * Changing this parameter will create a new role.
     */
    dbName: pulumi.Input<string>;
    /**
     * Specifies the DDS instance ID to which the role belongs.
     * Changing this parameter will create a new role.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the name of role owned by the current role.
     * The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
     * allowed. Changing this parameter will create a new role.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region where the DDS instance is located.
     * Changing this parameter will create a new role.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the list of roles owned by the current role.
     * The roles structure is documented below.
     * Changing this parameter will create a new role.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.Dds.DatabaseRoleRole>[]>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * GaussDB mysql proxy management within HuaweiCoud.
 *
 * ## Example Usage
 * ### create a proxy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject("instanceId");
 * const proxy1 = new huaweicloud.gaussdb.MysqlProxy("proxy1", {
 *     instanceId: instanceId,
 *     flavor: "gaussdb.proxy.xlarge.arm.2",
 *     nodeNum: 3,
 * });
 * ```
 *
 * ## Import
 *
 * GaussDB instance can be imported using the instance `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:GaussDB/mysqlProxy:MysqlProxy proxy_1 ee678f40-ce8e-4d0c-8221-38dead426f06
 * ```
 */
export class MysqlProxy extends pulumi.CustomResource {
    /**
     * Get an existing MysqlProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlProxyState, opts?: pulumi.CustomResourceOptions): MysqlProxy {
        return new MysqlProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:GaussDB/mysqlProxy:MysqlProxy';

    /**
     * Returns true if the given object is an instance of MysqlProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlProxy.__pulumiType;
    }

    /**
     * Indicates the address of the proxy.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * Specifies the flavor of the proxy.
     * Changing this parameter will create a new resource.
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * Specifies the instance ID of the proxy.
     * Changing this parameter will create a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the node count of the proxy.
     */
    public readonly nodeNum!: pulumi.Output<number>;
    /**
     * Indicates the port of the proxy.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The region in which to create the GaussDB mysql proxy resource. If omitted,
     * the provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a MysqlProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlProxyArgs | MysqlProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlProxyState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["nodeNum"] = state ? state.nodeNum : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as MysqlProxyArgs | undefined;
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.nodeNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeNum'");
            }
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["nodeNum"] = args ? args.nodeNum : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MysqlProxy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MysqlProxy resources.
 */
export interface MysqlProxyState {
    /**
     * Indicates the address of the proxy.
     */
    address?: pulumi.Input<string>;
    /**
     * Specifies the flavor of the proxy.
     * Changing this parameter will create a new resource.
     */
    flavor?: pulumi.Input<string>;
    /**
     * Specifies the instance ID of the proxy.
     * Changing this parameter will create a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the node count of the proxy.
     */
    nodeNum?: pulumi.Input<number>;
    /**
     * Indicates the port of the proxy.
     */
    port?: pulumi.Input<number>;
    /**
     * The region in which to create the GaussDB mysql proxy resource. If omitted,
     * the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlProxy resource.
 */
export interface MysqlProxyArgs {
    /**
     * Specifies the flavor of the proxy.
     * Changing this parameter will create a new resource.
     */
    flavor: pulumi.Input<string>;
    /**
     * Specifies the instance ID of the proxy.
     * Changing this parameter will create a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the node count of the proxy.
     */
    nodeNum: pulumi.Input<number>;
    /**
     * The region in which to create the GaussDB mysql proxy resource. If omitted,
     * the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an RDS database copy resource within HuaweiCloud.
 *
 * > **NOTE:** Deleting RDS SQLServer database copy is not supported. If you destroy a resource of RDS SQLServer database
 *   copy, it is only removed from the state, but still remains in the cloud. And the instance doesn't return to the state
 *   before modifying.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject("instanceId");
 * const test = new huaweicloud.rds.SqlserverDatabaseCopy("test", {
 *     instanceId: instanceId,
 *     procedureName: "copy_database",
 *     dbNameSource: "test_db_source",
 *     dbNameTarget: "test_db_target",
 * });
 * ```
 */
export class SqlserverDatabaseCopy extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverDatabaseCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverDatabaseCopyState, opts?: pulumi.CustomResourceOptions): SqlserverDatabaseCopy {
        return new SqlserverDatabaseCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Rds/sqlserverDatabaseCopy:SqlserverDatabaseCopy';

    /**
     * Returns true if the given object is an instance of SqlserverDatabaseCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverDatabaseCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverDatabaseCopy.__pulumiType;
    }

    /**
     * Specifies the name of the source database.
     */
    public readonly dbNameSource!: pulumi.Output<string>;
    /**
     * Specifies the name of the target database.
     */
    public readonly dbNameTarget!: pulumi.Output<string>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the RDS instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the operation name. Value options: **copy_database**.
     */
    public readonly procedureName!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a SqlserverDatabaseCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverDatabaseCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverDatabaseCopyArgs | SqlserverDatabaseCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverDatabaseCopyState | undefined;
            resourceInputs["dbNameSource"] = state ? state.dbNameSource : undefined;
            resourceInputs["dbNameTarget"] = state ? state.dbNameTarget : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["procedureName"] = state ? state.procedureName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as SqlserverDatabaseCopyArgs | undefined;
            if ((!args || args.dbNameSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNameSource'");
            }
            if ((!args || args.dbNameTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNameTarget'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.procedureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'procedureName'");
            }
            resourceInputs["dbNameSource"] = args ? args.dbNameSource : undefined;
            resourceInputs["dbNameTarget"] = args ? args.dbNameTarget : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["procedureName"] = args ? args.procedureName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverDatabaseCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlserverDatabaseCopy resources.
 */
export interface SqlserverDatabaseCopyState {
    /**
     * Specifies the name of the source database.
     */
    dbNameSource?: pulumi.Input<string>;
    /**
     * Specifies the name of the target database.
     */
    dbNameTarget?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the operation name. Value options: **copy_database**.
     */
    procedureName?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlserverDatabaseCopy resource.
 */
export interface SqlserverDatabaseCopyArgs {
    /**
     * Specifies the name of the source database.
     */
    dbNameSource: pulumi.Input<string>;
    /**
     * Specifies the name of the target database.
     */
    dbNameTarget: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the operation name. Value options: **copy_database**.
     */
    procedureName: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
}

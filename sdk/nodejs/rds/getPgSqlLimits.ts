// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get the list of RDS PostgreSQL SQL limits.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject("instanceId");
 * const dbName = config.requireObject("dbName");
 * const test = huaweicloud.Rds.getPgSqlLimits({
 *     instanceId: instanceId,
 *     dbName: dbName,
 * });
 * ```
 */
export function getPgSqlLimits(args: GetPgSqlLimitsArgs, opts?: pulumi.InvokeOptions): Promise<GetPgSqlLimitsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Rds/getPgSqlLimits:getPgSqlLimits", {
        "dbName": args.dbName,
        "instanceId": args.instanceId,
        "isEffective": args.isEffective,
        "maxConcurrency": args.maxConcurrency,
        "maxWaiting": args.maxWaiting,
        "queryId": args.queryId,
        "queryString": args.queryString,
        "region": args.region,
        "searchPath": args.searchPath,
        "sqlLimitId": args.sqlLimitId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPgSqlLimits.
 */
export interface GetPgSqlLimitsArgs {
    /**
     * Specifies the name of the database.
     */
    dbName: string;
    /**
     * Specifies the ID of RDS PostgreSQL instance.
     */
    instanceId: string;
    /**
     * Specifies whether the SQL limit is effective.
     */
    isEffective?: string;
    /**
     * Specifies the number of SQL statements executed simultaneously.
     */
    maxConcurrency?: string;
    /**
     * Specifies the max waiting time in seconds.
     */
    maxWaiting?: string;
    /**
     * Specifies the query ID.
     */
    queryId?: string;
    /**
     * Specifies the text form of SQL statement.
     */
    queryString?: string;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the query order for names that are not schema qualified.
     */
    searchPath?: string;
    /**
     * Specifies the ID of SQL limit.
     */
    sqlLimitId?: string;
}

/**
 * A collection of values returned by getPgSqlLimits.
 */
export interface GetPgSqlLimitsResult {
    readonly dbName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    /**
     * Indicates whether the SQL limit is effective.
     */
    readonly isEffective?: string;
    /**
     * Indicates the number of SQL statements executed simultaneously.
     */
    readonly maxConcurrency?: string;
    /**
     * Indicates the max waiting time in seconds.
     */
    readonly maxWaiting?: string;
    /**
     * Indicates the query ID.
     */
    readonly queryId?: string;
    /**
     * Indicates the text form of SQL statement.
     */
    readonly queryString?: string;
    readonly region: string;
    /**
     * Indicates the query order for names that are not schema qualified.
     */
    readonly searchPath?: string;
    readonly sqlLimitId?: string;
    /**
     * Indicates the list of SQL limits.
     */
    readonly sqlLimits: outputs.Rds.GetPgSqlLimitsSqlLimit[];
}

export function getPgSqlLimitsOutput(args: GetPgSqlLimitsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPgSqlLimitsResult> {
    return pulumi.output(args).apply(a => getPgSqlLimits(a, opts))
}

/**
 * A collection of arguments for invoking getPgSqlLimits.
 */
export interface GetPgSqlLimitsOutputArgs {
    /**
     * Specifies the name of the database.
     */
    dbName: pulumi.Input<string>;
    /**
     * Specifies the ID of RDS PostgreSQL instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies whether the SQL limit is effective.
     */
    isEffective?: pulumi.Input<string>;
    /**
     * Specifies the number of SQL statements executed simultaneously.
     */
    maxConcurrency?: pulumi.Input<string>;
    /**
     * Specifies the max waiting time in seconds.
     */
    maxWaiting?: pulumi.Input<string>;
    /**
     * Specifies the query ID.
     */
    queryId?: pulumi.Input<string>;
    /**
     * Specifies the text form of SQL statement.
     */
    queryString?: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the query order for names that are not schema qualified.
     */
    searchPath?: pulumi.Input<string>;
    /**
     * Specifies the ID of SQL limit.
     */
    sqlLimitId?: pulumi.Input<string>;
}

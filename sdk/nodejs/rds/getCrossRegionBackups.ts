// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get the list of RDS cross-region backups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject("instanceId");
 * const backupType = config.requireObject("backupType");
 * const test = huaweicloud.Rds.getCrossRegionBackups({
 *     instanceId: instanceId,
 *     backupType: backupType,
 * });
 * ```
 */
export function getCrossRegionBackups(args: GetCrossRegionBackupsArgs, opts?: pulumi.InvokeOptions): Promise<GetCrossRegionBackupsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Rds/getCrossRegionBackups:getCrossRegionBackups", {
        "backupId": args.backupId,
        "backupType": args.backupType,
        "beginTime": args.beginTime,
        "endTime": args.endTime,
        "instanceId": args.instanceId,
        "name": args.name,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getCrossRegionBackups.
 */
export interface GetCrossRegionBackupsArgs {
    /**
     * Specifies the ID of the cross-region backup.
     */
    backupId?: string;
    /**
     * Specifies the type of the cross-region backup.
     * Value options:
     * + **auto**: automated full backup. Microsoft SQL Server only supports the query of this backup type.
     * + **incremental**: automated incremental backup.
     */
    backupType: string;
    /**
     * Specifies the start time for obtaining the cross-region backup list.
     * The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `endTime`.
     */
    beginTime?: string;
    /**
     * Specifies the end time for obtaining the cross-region backup list.
     * The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
     * This parameter must be used together with `beginTime`.
     */
    endTime?: string;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId: string;
    /**
     * Specifies the name of the cross-region backup.
     */
    name?: string;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the status of the cross-region backup.
     * Value options:
     * + **BUILDING**: Backup in progress
     * + **COMPLETED**: Backup completed
     * + **FAILED**: Backup failed
     * + **DELETING**: Backup being deleted
     */
    status?: string;
}

/**
 * A collection of values returned by getCrossRegionBackups.
 */
export interface GetCrossRegionBackupsResult {
    readonly backupId?: string;
    readonly backupType: string;
    /**
     * Indicates the list of the cross-region backups.
     */
    readonly backups: outputs.Rds.GetCrossRegionBackupsBackup[];
    /**
     * Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format
     */
    readonly beginTime?: string;
    /**
     * Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ"** format.
     */
    readonly endTime?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates the ID of the RDS Instance.
     */
    readonly instanceId: string;
    /**
     * Indicates the database to be backed up for Microsoft SQL Server.
     */
    readonly name?: string;
    readonly region: string;
    /**
     * Indicates the status of the cross-region backup.
     */
    readonly status?: string;
}

export function getCrossRegionBackupsOutput(args: GetCrossRegionBackupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCrossRegionBackupsResult> {
    return pulumi.output(args).apply(a => getCrossRegionBackups(a, opts))
}

/**
 * A collection of arguments for invoking getCrossRegionBackups.
 */
export interface GetCrossRegionBackupsOutputArgs {
    /**
     * Specifies the ID of the cross-region backup.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Specifies the type of the cross-region backup.
     * Value options:
     * + **auto**: automated full backup. Microsoft SQL Server only supports the query of this backup type.
     * + **incremental**: automated incremental backup.
     */
    backupType: pulumi.Input<string>;
    /**
     * Specifies the start time for obtaining the cross-region backup list.
     * The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `endTime`.
     */
    beginTime?: pulumi.Input<string>;
    /**
     * Specifies the end time for obtaining the cross-region backup list.
     * The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
     * This parameter must be used together with `beginTime`.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the name of the cross-region backup.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the status of the cross-region backup.
     * Value options:
     * + **BUILDING**: Backup in progress
     * + **COMPLETED**: Backup completed
     * + **FAILED**: Backup failed
     * + **DELETING**: Backup being deleted
     */
    status?: pulumi.Input<string>;
}

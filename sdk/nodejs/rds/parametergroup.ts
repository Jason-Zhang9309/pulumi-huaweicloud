// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a RDS ParameterGroup resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const pg1 = new huaweicloud.Rds.Parametergroup("pg_1", {
 *     datastore: {
 *         type: "mysql",
 *         version: "5.6",
 *     },
 *     description: "description_1",
 *     values: {
 *         autocommit: "OFF",
 *         max_connections: "10",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Parameter groups can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Rds/parametergroup:Parametergroup pg_1 7117d38e-4c8f-4624-a505-bd96b97d024c
 * ```
 */
export class Parametergroup extends pulumi.CustomResource {
    /**
     * Get an existing Parametergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ParametergroupState, opts?: pulumi.CustomResourceOptions): Parametergroup {
        return new Parametergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Rds/parametergroup:Parametergroup';

    /**
     * Returns true if the given object is an instance of Parametergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Parametergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Parametergroup.__pulumiType;
    }

    /**
     * Indicates the parameter configuration defined by users based on the default parameters
     * groups.
     */
    public /*out*/ readonly configurationParameters!: pulumi.Output<outputs.Rds.ParametergroupConfigurationParameter[]>;
    /**
     * Database object. The database object structure is documented below. Changing
     * this creates a new parameter group.
     */
    public readonly datastore!: pulumi.Output<outputs.Rds.ParametergroupDatastore>;
    /**
     * The parameter group description. It contains a maximum of 256 characters and cannot
     * contain the following special characters:>!<"&'= the value is left blank by default.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The parameter group name. It contains a maximum of 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    /**
     * Parameter group values key/value pairs defined by users based on the default parameter
     * groups.
     */
    public readonly values!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Parametergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ParametergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ParametergroupArgs | ParametergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ParametergroupState | undefined;
            resourceInputs["configurationParameters"] = state ? state.configurationParameters : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as ParametergroupArgs | undefined;
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["configurationParameters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Parametergroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Parametergroup resources.
 */
export interface ParametergroupState {
    /**
     * Indicates the parameter configuration defined by users based on the default parameters
     * groups.
     */
    configurationParameters?: pulumi.Input<pulumi.Input<inputs.Rds.ParametergroupConfigurationParameter>[]>;
    /**
     * Database object. The database object structure is documented below. Changing
     * this creates a new parameter group.
     */
    datastore?: pulumi.Input<inputs.Rds.ParametergroupDatastore>;
    /**
     * The parameter group description. It contains a maximum of 256 characters and cannot
     * contain the following special characters:>!<"&'= the value is left blank by default.
     */
    description?: pulumi.Input<string>;
    /**
     * The parameter group name. It contains a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Parameter group values key/value pairs defined by users based on the default parameter
     * groups.
     */
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Parametergroup resource.
 */
export interface ParametergroupArgs {
    /**
     * Database object. The database object structure is documented below. Changing
     * this creates a new parameter group.
     */
    datastore: pulumi.Input<inputs.Rds.ParametergroupDatastore>;
    /**
     * The parameter group description. It contains a maximum of 256 characters and cannot
     * contain the following special characters:>!<"&'= the value is left blank by default.
     */
    description?: pulumi.Input<string>;
    /**
     * The parameter group name. It contains a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Parameter group values key/value pairs defined by users based on the default parameter
     * groups.
     */
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

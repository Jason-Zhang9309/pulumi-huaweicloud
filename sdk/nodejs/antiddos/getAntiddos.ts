// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * !> **WARNING:** It has been deprecated.
 *
 * Query the Anti-DDos resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const eipId = config.requireObject("eipId");
 * const antiddos = huaweicloud.AntiDDos.getAntiddos({
 *     floatingIpId: eipId,
 * });
 * ```
 */
export function getAntiddos(args?: GetAntiddosArgs, opts?: pulumi.InvokeOptions): Promise<GetAntiddosResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:AntiDDos/getAntiddos:getAntiddos", {
        "floatingIpAddress": args.floatingIpAddress,
        "floatingIpId": args.floatingIpId,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAntiddos.
 */
export interface GetAntiddosArgs {
    /**
     * The Elastic IP address.
     */
    floatingIpAddress?: string;
    /**
     * The Elastic IP ID.
     */
    floatingIpId?: string;
    /**
     * The region in which to obtain the Antiddos client. If omitted, the provider-level region
     * will be used.
     */
    region?: string;
    /**
     * The defense status.
     */
    status?: string;
}

/**
 * A collection of values returned by getAntiddos.
 */
export interface GetAntiddosResult {
    /**
     * The Attack traffic in (bit/s).
     */
    readonly bpsAttacks: number[];
    /**
     * The inbound traffic in (bit/s).
     */
    readonly bpsIns: number[];
    /**
     * The end time of cleaning and blackhole event.
     */
    readonly endTimes: number[];
    readonly floatingIpAddress: string;
    readonly floatingIpId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The EIP type.
     */
    readonly networkType: string;
    /**
     * The Start time.
     */
    readonly periodStarts: number[];
    /**
     * The attack packet rate (number of packets per second).
     */
    readonly ppsAttacks: number[];
    /**
     * The inbound packet rate (number of packets per second).
     */
    readonly ppsIns: number[];
    readonly region: string;
    /**
     * The start time of cleaning and blackhole event.
     */
    readonly startTimes: number[];
    readonly status: string;
    /**
     * The total traffic.
     */
    readonly totalBps: number[];
    /**
     * The total packet rate.
     */
    readonly totalPps: number[];
    /**
     * The traffic cleaning status.
     */
    readonly trafficCleaningStatuses: number[];
    /**
     * The traffic at the triggering point.
     */
    readonly triggerBps: number[];
    /**
     * The HTTP request rate at the triggering point.
     */
    readonly triggerHttpPps: number[];
    /**
     * The packet rate at the triggering point.
     */
    readonly triggerPps: number[];
}

export function getAntiddosOutput(args?: GetAntiddosOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAntiddosResult> {
    return pulumi.output(args).apply(a => getAntiddos(a, opts))
}

/**
 * A collection of arguments for invoking getAntiddos.
 */
export interface GetAntiddosOutputArgs {
    /**
     * The Elastic IP address.
     */
    floatingIpAddress?: pulumi.Input<string>;
    /**
     * The Elastic IP ID.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the Antiddos client. If omitted, the provider-level region
     * will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * The defense status.
     */
    status?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages CSS thesaurus resource within HuaweiCloud
 *
 * > Only one thesaurus resource can be created for the specified cluster.
 *
 * ## Example Usage
 * ### Create a thesaurus
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject("clusterId");
 * const bucketName = config.requireObject("bucketName");
 * const bucketObjKey = config.requireObject("bucketObjKey");
 * const test = new huaweicloud.css.Thesaurus("test", {
 *     clusterId: clusterId,
 *     bucketName: bucketName,
 *     mainObject: bucketObjKey,
 * });
 * ```
 *
 * ## Import
 *
 * CSS thesaurus can be imported by `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Css/thesaurus:Thesaurus test <id>
 * ```
 */
export class Thesaurus extends pulumi.CustomResource {
    /**
     * Get an existing Thesaurus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThesaurusState, opts?: pulumi.CustomResourceOptions): Thesaurus {
        return new Thesaurus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Css/thesaurus:Thesaurus';

    /**
     * Returns true if the given object is an instance of Thesaurus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Thesaurus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Thesaurus.__pulumiType;
    }

    /**
     * Specifies the OBS bucket where the thesaurus files are stored
     * (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Specifies the CSS cluster ID for configuring the thesaurus.
     * Changing this parameter will create a new resource.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Specifies the path of the main thesaurus file object.
     */
    public readonly mainObject!: pulumi.Output<string>;
    /**
     * The region in which to create the thesaurus resource. If omitted, the
     * provider-level region will be used. Changing this creates a new thesaurus resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the status of the thesaurus loading
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the path of the stop word library file object.
     */
    public readonly stopObject!: pulumi.Output<string>;
    /**
     * Specifies the path of the synonyms thesaurus file object.
     */
    public readonly synonymObject!: pulumi.Output<string>;
    /**
     * Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Thesaurus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThesaurusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThesaurusArgs | ThesaurusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThesaurusState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["mainObject"] = state ? state.mainObject : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stopObject"] = state ? state.stopObject : undefined;
            resourceInputs["synonymObject"] = state ? state.synonymObject : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ThesaurusArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["mainObject"] = args ? args.mainObject : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["stopObject"] = args ? args.stopObject : undefined;
            resourceInputs["synonymObject"] = args ? args.synonymObject : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Thesaurus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Thesaurus resources.
 */
export interface ThesaurusState {
    /**
     * Specifies the OBS bucket where the thesaurus files are stored
     * (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Specifies the CSS cluster ID for configuring the thesaurus.
     * Changing this parameter will create a new resource.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies the path of the main thesaurus file object.
     */
    mainObject?: pulumi.Input<string>;
    /**
     * The region in which to create the thesaurus resource. If omitted, the
     * provider-level region will be used. Changing this creates a new thesaurus resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the status of the thesaurus loading
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the path of the stop word library file object.
     */
    stopObject?: pulumi.Input<string>;
    /**
     * Specifies the path of the synonyms thesaurus file object.
     */
    synonymObject?: pulumi.Input<string>;
    /**
     * Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Thesaurus resource.
 */
export interface ThesaurusArgs {
    /**
     * Specifies the OBS bucket where the thesaurus files are stored
     * (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
     */
    bucketName: pulumi.Input<string>;
    /**
     * Specifies the CSS cluster ID for configuring the thesaurus.
     * Changing this parameter will create a new resource.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the path of the main thesaurus file object.
     */
    mainObject?: pulumi.Input<string>;
    /**
     * The region in which to create the thesaurus resource. If omitted, the
     * provider-level region will be used. Changing this creates a new thesaurus resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the path of the stop word library file object.
     */
    stopObject?: pulumi.Input<string>;
    /**
     * Specifies the path of the synonyms thesaurus file object.
     */
    synonymObject?: pulumi.Input<string>;
}

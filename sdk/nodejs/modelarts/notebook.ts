// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages ModelArts notebook resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const notebookName = config.requireObject("notebookName");
 * const keyPairName = config.requireObject("keyPairName");
 * const ip = config.requireObject("ip");
 * const notebook = new huaweicloud.modelarts.Notebook("notebook", {
 *     flavorId: "modelarts.vm.cpu.2u",
 *     imageId: "e1a07296-22a8-4f05-8bc8-e936c8e54090",
 *     allowedAccessIps: [ip],
 *     keyPair: keyPairName,
 *     volume: {
 *         type: "EFS",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The notebook can be imported by `id`.
 *
 * ```sh
 *  $ pulumi import huaweicloud:ModelArts/notebook:Notebook test b11b407c-e604-4e8d-8bc4-92398320b847
 * ```
 */
export class Notebook extends pulumi.CustomResource {
    /**
     * Get an existing Notebook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotebookState, opts?: pulumi.CustomResourceOptions): Notebook {
        return new Notebook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:ModelArts/notebook:Notebook';

    /**
     * Returns true if the given object is an instance of Notebook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notebook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notebook.__pulumiType;
    }

    /**
     * Specifies public IP addresses that are allowed for remote SSH access.
     * If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
     */
    public readonly allowedAccessIps!: pulumi.Output<string[] | undefined>;
    /**
     * Whether enabled the notebook instance to automatically stop.
     */
    public /*out*/ readonly autoStopEnabled!: pulumi.Output<boolean>;
    /**
     * The notebook creation time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies the description of notebook. It contains a maximum of 512 characters and
     * cannot contain special characters `&<>"'/`.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the flavor ID. The options are as follows:
     * - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
     * discovery.
     * - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
     * applications.
     * - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
     * training and debugging.
     * - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * Specifies the image ID of notebook.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The image name.
     */
    public /*out*/ readonly imageName!: pulumi.Output<string>;
    /**
     * The image path in swr.
     */
    public /*out*/ readonly imageSwrPath!: pulumi.Output<string>;
    /**
     * The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
     */
    public /*out*/ readonly imageType!: pulumi.Output<string>;
    /**
     * Specifies the key pair name for remote SSH access.
     * Changing this parameter will create a new resource.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    /**
     * An array of storages which mount to the notebook. Structure is documented below.
     */
    public /*out*/ readonly mountStorages!: pulumi.Output<outputs.ModelArts.NotebookMountStorage[]>;
    /**
     * Specifies the name of the notebook. The name consists of 1 to 64 characters,
     * starting with a letter. Only letters, digits and underscores (_) are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the ID of Dedicated resource pool which the notebook used.
     * Changing this parameter will create a new resource.
     */
    public readonly poolId!: pulumi.Output<string | undefined>;
    /**
     * The name of Dedicated resource pool which the notebook used.
     */
    public /*out*/ readonly poolName!: pulumi.Output<string>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The uri for remote SSH access.
     * * `volume/mount_path` - The local mount path of volume.
     */
    public /*out*/ readonly sshUri!: pulumi.Output<string>;
    /**
     * The status of mount.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The notebook update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The web url of the notebook.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Specifies the volume information. Structure is documented below.
     */
    public readonly volume!: pulumi.Output<outputs.ModelArts.NotebookVolume>;
    /**
     * Specifies the workspace ID which the notebook belongs to.
     * The default value is `0`. Changing this parameter will create a new resource.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Notebook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotebookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotebookArgs | NotebookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotebookState | undefined;
            resourceInputs["allowedAccessIps"] = state ? state.allowedAccessIps : undefined;
            resourceInputs["autoStopEnabled"] = state ? state.autoStopEnabled : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageSwrPath"] = state ? state.imageSwrPath : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["mountStorages"] = state ? state.mountStorages : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sshUri"] = state ? state.sshUri : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as NotebookArgs | undefined;
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.volume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            resourceInputs["allowedAccessIps"] = args ? args.allowedAccessIps : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["autoStopEnabled"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["imageSwrPath"] = undefined /*out*/;
            resourceInputs["imageType"] = undefined /*out*/;
            resourceInputs["mountStorages"] = undefined /*out*/;
            resourceInputs["poolName"] = undefined /*out*/;
            resourceInputs["sshUri"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notebook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notebook resources.
 */
export interface NotebookState {
    /**
     * Specifies public IP addresses that are allowed for remote SSH access.
     * If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
     */
    allowedAccessIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether enabled the notebook instance to automatically stop.
     */
    autoStopEnabled?: pulumi.Input<boolean>;
    /**
     * The notebook creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of notebook. It contains a maximum of 512 characters and
     * cannot contain special characters `&<>"'/`.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID. The options are as follows:
     * - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
     * discovery.
     * - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
     * applications.
     * - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
     * training and debugging.
     * - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies the image ID of notebook.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * The image path in swr.
     */
    imageSwrPath?: pulumi.Input<string>;
    /**
     * The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Specifies the key pair name for remote SSH access.
     * Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * An array of storages which mount to the notebook. Structure is documented below.
     */
    mountStorages?: pulumi.Input<pulumi.Input<inputs.ModelArts.NotebookMountStorage>[]>;
    /**
     * Specifies the name of the notebook. The name consists of 1 to 64 characters,
     * starting with a letter. Only letters, digits and underscores (_) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of Dedicated resource pool which the notebook used.
     * Changing this parameter will create a new resource.
     */
    poolId?: pulumi.Input<string>;
    /**
     * The name of Dedicated resource pool which the notebook used.
     */
    poolName?: pulumi.Input<string>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The uri for remote SSH access.
     * * `volume/mount_path` - The local mount path of volume.
     */
    sshUri?: pulumi.Input<string>;
    /**
     * The status of mount.
     */
    status?: pulumi.Input<string>;
    /**
     * The notebook update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The web url of the notebook.
     */
    url?: pulumi.Input<string>;
    /**
     * Specifies the volume information. Structure is documented below.
     */
    volume?: pulumi.Input<inputs.ModelArts.NotebookVolume>;
    /**
     * Specifies the workspace ID which the notebook belongs to.
     * The default value is `0`. Changing this parameter will create a new resource.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Notebook resource.
 */
export interface NotebookArgs {
    /**
     * Specifies public IP addresses that are allowed for remote SSH access.
     * If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
     */
    allowedAccessIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the description of notebook. It contains a maximum of 512 characters and
     * cannot contain special characters `&<>"'/`.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID. The options are as follows:
     * - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
     * discovery.
     * - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
     * applications.
     * - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
     * training and debugging.
     * - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     * - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
     * and debugging.
     */
    flavorId: pulumi.Input<string>;
    /**
     * Specifies the image ID of notebook.
     */
    imageId: pulumi.Input<string>;
    /**
     * Specifies the key pair name for remote SSH access.
     * Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the name of the notebook. The name consists of 1 to 64 characters,
     * starting with a letter. Only letters, digits and underscores (_) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of Dedicated resource pool which the notebook used.
     * Changing this parameter will create a new resource.
     */
    poolId?: pulumi.Input<string>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the volume information. Structure is documented below.
     */
    volume: pulumi.Input<inputs.ModelArts.NotebookVolume>;
    /**
     * Specifies the workspace ID which the notebook belongs to.
     * The default value is `0`. Changing this parameter will create a new resource.
     */
    workspaceId?: pulumi.Input<string>;
}

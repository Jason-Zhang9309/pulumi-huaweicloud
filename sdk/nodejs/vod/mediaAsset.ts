// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a VOD media asset resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### Upload media asset from OBS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const bucketName = config.requireObject("bucketName");
 * const objectPath = config.requireObject("objectPath");
 * const test = new huaweicloud.vod.MediaAsset("test", {
 *     mediaType: "MP4",
 *     inputBucket: bucketName,
 *     inputPath: objectPath,
 *     description: "test video",
 *     labels: "test_label_1,test_lable_2,test_label_3",
 *     thumbnail: {
 *         type: "time",
 *         time: 1,
 *     },
 * });
 * ```
 * ### Upload media asset by URL
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const mediaUrl = config.requireObject("mediaUrl");
 * const test = new huaweicloud.vod.MediaAsset("test", {
 *     mediaType: "MP4",
 *     url: mediaUrl,
 *     description: "test video",
 *     labels: "test_label_1,test_lable_2,test_label_3",
 *     thumbnail: {
 *         type: "time",
 *         time: 1,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The media asset can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Vod/mediaAsset:MediaAsset test 8754976729b8a2ba745d01036edded2b
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`url`, `input_bucket`, `input_path`, `output_bucket`, `output_path`, `storage_mode`, `template_group_name`, `workflow_name`, `publish`, `auto_encrypt`, `auto_preload`, `review_template_id`, `thumbnail`. It is generally recommended running `terraform plan` after importing a media asset. You can then decide if changes should be applied to the media asset, or the resource definition should be updated to align with the media asset. Also you can ignore changes as below. resource "huaweicloud_vod_media_asset" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  url, input_bucket, input_path, output_bucket, output_path, storage_mode, template_group_name,
 *
 *  workflow_name, publish, auto_encrypt, auto_preload, review_template_id, thumbnail,
 *
 *  ]
 *
 *  } }
 */
export class MediaAsset extends pulumi.CustomResource {
    /**
     * Get an existing MediaAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaAssetState, opts?: pulumi.CustomResourceOptions): MediaAsset {
        return new MediaAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Vod/mediaAsset:MediaAsset';

    /**
     * Returns true if the given object is an instance of MediaAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaAsset.__pulumiType;
    }

    /**
     * Specifies whether to automatically encrypt the media. If set to **true**,
     * `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    public readonly autoEncrypt!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    public readonly autoPreload!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the category ID of the media asset. Default to: **-1**, which means the media
     * asset will be categorized into the 'Other' category of system presets.
     */
    public readonly categoryId!: pulumi.Output<number>;
    /**
     * The category name of the media asset.
     */
    public /*out*/ readonly categoryName!: pulumi.Output<string>;
    /**
     * Specifies the media asset description, which contains a maximum of 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the OBS bucket name of media source file.
     * Either this field or `url` must be specified. Changing this creates a new resource.
     */
    public readonly inputBucket!: pulumi.Output<string | undefined>;
    /**
     * Specifies the media source file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    public readonly inputPath!: pulumi.Output<string | undefined>;
    /**
     * Specifies the labels of the media asset, which contains a maximum of 16 labels
     * separated by commas.
     */
    public readonly labels!: pulumi.Output<string | undefined>;
    /**
     * The name of the media file.
     */
    public /*out*/ readonly mediaName!: pulumi.Output<string>;
    /**
     * Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
     * **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
     * **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
     * **M4R**, **WV**, **MP2**. Changing this creates a new resource.
     */
    public readonly mediaType!: pulumi.Output<string>;
    /**
     * The URL of original media file.
     */
    public /*out*/ readonly mediaUrl!: pulumi.Output<string>;
    /**
     * Specifies the media asset name, which contains a maximum of 128 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the output OBS bucket name.
     * Changing this creates a new resource.
     */
    public readonly outputBucket!: pulumi.Output<string | undefined>;
    /**
     * Specifies the output file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    public readonly outputPath!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to publish the media. Defaults to: **false**.
     */
    public readonly publish!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the review template ID. Changing this creates a new resource.
     */
    public readonly reviewTemplateId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the storage mode. The value can be:
     * + **0**: copy the media file to VOD bucket.
     * + **1**: save the media file in user bucket.
     */
    public readonly storageMode!: pulumi.Output<number | undefined>;
    /**
     * Specifies the transcoding template group name. If not empty,
     * the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
     */
    public readonly templateGroupName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the review thumbnail configurations.
     * The object structure is documented below. Changing this creates a new resource.
     */
    public readonly thumbnail!: pulumi.Output<outputs.Vod.MediaAssetThumbnail | undefined>;
    /**
     * Specifies the URL of media source file. Currently only http and https protocols
     * are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Specifies the workflow name. If not empty, the uploaded media will be
     * processed with the specified workflow. Changing this creates a new resource.
     */
    public readonly workflowName!: pulumi.Output<string | undefined>;

    /**
     * Create a MediaAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaAssetArgs | MediaAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaAssetState | undefined;
            resourceInputs["autoEncrypt"] = state ? state.autoEncrypt : undefined;
            resourceInputs["autoPreload"] = state ? state.autoPreload : undefined;
            resourceInputs["categoryId"] = state ? state.categoryId : undefined;
            resourceInputs["categoryName"] = state ? state.categoryName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inputBucket"] = state ? state.inputBucket : undefined;
            resourceInputs["inputPath"] = state ? state.inputPath : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mediaName"] = state ? state.mediaName : undefined;
            resourceInputs["mediaType"] = state ? state.mediaType : undefined;
            resourceInputs["mediaUrl"] = state ? state.mediaUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputBucket"] = state ? state.outputBucket : undefined;
            resourceInputs["outputPath"] = state ? state.outputPath : undefined;
            resourceInputs["publish"] = state ? state.publish : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reviewTemplateId"] = state ? state.reviewTemplateId : undefined;
            resourceInputs["storageMode"] = state ? state.storageMode : undefined;
            resourceInputs["templateGroupName"] = state ? state.templateGroupName : undefined;
            resourceInputs["thumbnail"] = state ? state.thumbnail : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["workflowName"] = state ? state.workflowName : undefined;
        } else {
            const args = argsOrState as MediaAssetArgs | undefined;
            if ((!args || args.mediaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaType'");
            }
            resourceInputs["autoEncrypt"] = args ? args.autoEncrypt : undefined;
            resourceInputs["autoPreload"] = args ? args.autoPreload : undefined;
            resourceInputs["categoryId"] = args ? args.categoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputBucket"] = args ? args.inputBucket : undefined;
            resourceInputs["inputPath"] = args ? args.inputPath : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mediaType"] = args ? args.mediaType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputBucket"] = args ? args.outputBucket : undefined;
            resourceInputs["outputPath"] = args ? args.outputPath : undefined;
            resourceInputs["publish"] = args ? args.publish : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reviewTemplateId"] = args ? args.reviewTemplateId : undefined;
            resourceInputs["storageMode"] = args ? args.storageMode : undefined;
            resourceInputs["templateGroupName"] = args ? args.templateGroupName : undefined;
            resourceInputs["thumbnail"] = args ? args.thumbnail : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
            resourceInputs["categoryName"] = undefined /*out*/;
            resourceInputs["mediaName"] = undefined /*out*/;
            resourceInputs["mediaUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaAsset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MediaAsset resources.
 */
export interface MediaAssetState {
    /**
     * Specifies whether to automatically encrypt the media. If set to **true**,
     * `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    autoEncrypt?: pulumi.Input<boolean>;
    /**
     * Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    autoPreload?: pulumi.Input<boolean>;
    /**
     * Specifies the category ID of the media asset. Default to: **-1**, which means the media
     * asset will be categorized into the 'Other' category of system presets.
     */
    categoryId?: pulumi.Input<number>;
    /**
     * The category name of the media asset.
     */
    categoryName?: pulumi.Input<string>;
    /**
     * Specifies the media asset description, which contains a maximum of 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the OBS bucket name of media source file.
     * Either this field or `url` must be specified. Changing this creates a new resource.
     */
    inputBucket?: pulumi.Input<string>;
    /**
     * Specifies the media source file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    inputPath?: pulumi.Input<string>;
    /**
     * Specifies the labels of the media asset, which contains a maximum of 16 labels
     * separated by commas.
     */
    labels?: pulumi.Input<string>;
    /**
     * The name of the media file.
     */
    mediaName?: pulumi.Input<string>;
    /**
     * Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
     * **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
     * **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
     * **M4R**, **WV**, **MP2**. Changing this creates a new resource.
     */
    mediaType?: pulumi.Input<string>;
    /**
     * The URL of original media file.
     */
    mediaUrl?: pulumi.Input<string>;
    /**
     * Specifies the media asset name, which contains a maximum of 128 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the output OBS bucket name.
     * Changing this creates a new resource.
     */
    outputBucket?: pulumi.Input<string>;
    /**
     * Specifies the output file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    outputPath?: pulumi.Input<string>;
    /**
     * Specifies whether to publish the media. Defaults to: **false**.
     */
    publish?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the review template ID. Changing this creates a new resource.
     */
    reviewTemplateId?: pulumi.Input<string>;
    /**
     * Specifies the storage mode. The value can be:
     * + **0**: copy the media file to VOD bucket.
     * + **1**: save the media file in user bucket.
     */
    storageMode?: pulumi.Input<number>;
    /**
     * Specifies the transcoding template group name. If not empty,
     * the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
     */
    templateGroupName?: pulumi.Input<string>;
    /**
     * Specifies the review thumbnail configurations.
     * The object structure is documented below. Changing this creates a new resource.
     */
    thumbnail?: pulumi.Input<inputs.Vod.MediaAssetThumbnail>;
    /**
     * Specifies the URL of media source file. Currently only http and https protocols
     * are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
     */
    url?: pulumi.Input<string>;
    /**
     * Specifies the workflow name. If not empty, the uploaded media will be
     * processed with the specified workflow. Changing this creates a new resource.
     */
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MediaAsset resource.
 */
export interface MediaAssetArgs {
    /**
     * Specifies whether to automatically encrypt the media. If set to **true**,
     * `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    autoEncrypt?: pulumi.Input<boolean>;
    /**
     * Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
     * Changing this creates a new resource.
     */
    autoPreload?: pulumi.Input<boolean>;
    /**
     * Specifies the category ID of the media asset. Default to: **-1**, which means the media
     * asset will be categorized into the 'Other' category of system presets.
     */
    categoryId?: pulumi.Input<number>;
    /**
     * Specifies the media asset description, which contains a maximum of 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the OBS bucket name of media source file.
     * Either this field or `url` must be specified. Changing this creates a new resource.
     */
    inputBucket?: pulumi.Input<string>;
    /**
     * Specifies the media source file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    inputPath?: pulumi.Input<string>;
    /**
     * Specifies the labels of the media asset, which contains a maximum of 16 labels
     * separated by commas.
     */
    labels?: pulumi.Input<string>;
    /**
     * Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
     * **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
     * **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
     * **M4R**, **WV**, **MP2**. Changing this creates a new resource.
     */
    mediaType: pulumi.Input<string>;
    /**
     * Specifies the media asset name, which contains a maximum of 128 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the output OBS bucket name.
     * Changing this creates a new resource.
     */
    outputBucket?: pulumi.Input<string>;
    /**
     * Specifies the output file path in the OBS bucket.
     * Changing this creates a new resource.
     */
    outputPath?: pulumi.Input<string>;
    /**
     * Specifies whether to publish the media. Defaults to: **false**.
     */
    publish?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the review template ID. Changing this creates a new resource.
     */
    reviewTemplateId?: pulumi.Input<string>;
    /**
     * Specifies the storage mode. The value can be:
     * + **0**: copy the media file to VOD bucket.
     * + **1**: save the media file in user bucket.
     */
    storageMode?: pulumi.Input<number>;
    /**
     * Specifies the transcoding template group name. If not empty,
     * the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
     */
    templateGroupName?: pulumi.Input<string>;
    /**
     * Specifies the review thumbnail configurations.
     * The object structure is documented below. Changing this creates a new resource.
     */
    thumbnail?: pulumi.Input<inputs.Vod.MediaAssetThumbnail>;
    /**
     * Specifies the URL of media source file. Currently only http and https protocols
     * are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
     */
    url?: pulumi.Input<string>;
    /**
     * Specifies the workflow name. If not empty, the uploaded media will be
     * processed with the specified workflow. Changing this creates a new resource.
     */
    workflowName?: pulumi.Input<string>;
}

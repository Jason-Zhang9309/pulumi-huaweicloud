// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VOD watermark template resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const test = new huaweicloud.Vod.WatermarkTemplate("test", {
 *     height: "0.1",
 *     horizontalOffset: "0.05",
 *     imageFile: "./test.PNG",
 *     imageProcess: "ORIGINAL",
 *     imageType: "PNG",
 *     position: "TOPLEFT",
 *     verticalOffset: "0.05",
 *     width: "0.1",
 * });
 * ```
 *
 * ## Import
 *
 * The template can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Vod/watermarkTemplate:WatermarkTemplate test 81ac58796e25842ee2e90a904aa8a719
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`image_file`. It is generally recommended running `terraform plan` after importing a watermark template. You can then decide if changes should be applied to the watermark template, or the resource definition should be updated to align with the watermark template. Also you can ignore changes as below. resource "huaweicloud_vod_watermark_template" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  image_file,
 *
 *  ]
 *
 *  } }
 */
export class WatermarkTemplate extends pulumi.CustomResource {
    /**
     * Get an existing WatermarkTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WatermarkTemplateState, opts?: pulumi.CustomResourceOptions): WatermarkTemplate {
        return new WatermarkTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Vod/watermarkTemplate:WatermarkTemplate';

    /**
     * Returns true if the given object is an instance of WatermarkTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WatermarkTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WatermarkTemplate.__pulumiType;
    }

    /**
     * Specifies height ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    public readonly height!: pulumi.Output<string | undefined>;
    /**
     * Specifies horizontal offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    public readonly horizontalOffset!: pulumi.Output<string | undefined>;
    /**
     * Specifies the image file name, e.g. './test.png'.
     * Changing this creates a new resource.
     */
    public readonly imageFile!: pulumi.Output<string>;
    /**
     * Specifies the image process. The valid values are:  
     * + **TRANSPARENT**: make the background color transparent.
     * + **ORIGINAL**: only simple scaling, no other processing.
     * + **GRAYED**: make the color image grayed.
     */
    public readonly imageProcess!: pulumi.Output<string | undefined>;
    /**
     * Specifies the image file type. The valid values are **PNG**, **JPG**
     * and **JPEG**. Changing this creates a new resource.
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * The watermark image URL.
     */
    public /*out*/ readonly imageUrl!: pulumi.Output<string>;
    /**
     * Specifies the template name, which contains a maximum of 128 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the location of the watermark. The valid values are **TOPRIGHT**,
     * **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
     */
    public readonly position!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the watermark duration (Unit: second). The value is a digit
     * greater than or equal to **0**. By default, the watermark lasts until the end of the video.
     */
    public readonly timelineDuration!: pulumi.Output<string | undefined>;
    /**
     * Specifies the watermark start time (Unit: second). The value is a digit
     * greater than or equal to **0**. Defaults to: **0**.
     */
    public readonly timelineStart!: pulumi.Output<string | undefined>;
    /**
     * Specifies vertical offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    public readonly verticalOffset!: pulumi.Output<string | undefined>;
    /**
     * The watermark type.
     */
    public /*out*/ readonly watermarkType!: pulumi.Output<string>;
    /**
     * Specifies width ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    public readonly width!: pulumi.Output<string | undefined>;

    /**
     * Create a WatermarkTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WatermarkTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WatermarkTemplateArgs | WatermarkTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WatermarkTemplateState | undefined;
            resourceInputs["height"] = state ? state.height : undefined;
            resourceInputs["horizontalOffset"] = state ? state.horizontalOffset : undefined;
            resourceInputs["imageFile"] = state ? state.imageFile : undefined;
            resourceInputs["imageProcess"] = state ? state.imageProcess : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timelineDuration"] = state ? state.timelineDuration : undefined;
            resourceInputs["timelineStart"] = state ? state.timelineStart : undefined;
            resourceInputs["verticalOffset"] = state ? state.verticalOffset : undefined;
            resourceInputs["watermarkType"] = state ? state.watermarkType : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as WatermarkTemplateArgs | undefined;
            if ((!args || args.imageFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageFile'");
            }
            if ((!args || args.imageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageType'");
            }
            resourceInputs["height"] = args ? args.height : undefined;
            resourceInputs["horizontalOffset"] = args ? args.horizontalOffset : undefined;
            resourceInputs["imageFile"] = args ? args.imageFile : undefined;
            resourceInputs["imageProcess"] = args ? args.imageProcess : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timelineDuration"] = args ? args.timelineDuration : undefined;
            resourceInputs["timelineStart"] = args ? args.timelineStart : undefined;
            resourceInputs["verticalOffset"] = args ? args.verticalOffset : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
            resourceInputs["imageUrl"] = undefined /*out*/;
            resourceInputs["watermarkType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WatermarkTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WatermarkTemplate resources.
 */
export interface WatermarkTemplateState {
    /**
     * Specifies height ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    height?: pulumi.Input<string>;
    /**
     * Specifies horizontal offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    horizontalOffset?: pulumi.Input<string>;
    /**
     * Specifies the image file name, e.g. './test.png'.
     * Changing this creates a new resource.
     */
    imageFile?: pulumi.Input<string>;
    /**
     * Specifies the image process. The valid values are:  
     * + **TRANSPARENT**: make the background color transparent.
     * + **ORIGINAL**: only simple scaling, no other processing.
     * + **GRAYED**: make the color image grayed.
     */
    imageProcess?: pulumi.Input<string>;
    /**
     * Specifies the image file type. The valid values are **PNG**, **JPG**
     * and **JPEG**. Changing this creates a new resource.
     */
    imageType?: pulumi.Input<string>;
    /**
     * The watermark image URL.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Specifies the template name, which contains a maximum of 128 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the location of the watermark. The valid values are **TOPRIGHT**,
     * **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
     */
    position?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the watermark duration (Unit: second). The value is a digit
     * greater than or equal to **0**. By default, the watermark lasts until the end of the video.
     */
    timelineDuration?: pulumi.Input<string>;
    /**
     * Specifies the watermark start time (Unit: second). The value is a digit
     * greater than or equal to **0**. Defaults to: **0**.
     */
    timelineStart?: pulumi.Input<string>;
    /**
     * Specifies vertical offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    verticalOffset?: pulumi.Input<string>;
    /**
     * The watermark type.
     */
    watermarkType?: pulumi.Input<string>;
    /**
     * Specifies width ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WatermarkTemplate resource.
 */
export interface WatermarkTemplateArgs {
    /**
     * Specifies height ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    height?: pulumi.Input<string>;
    /**
     * Specifies horizontal offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    horizontalOffset?: pulumi.Input<string>;
    /**
     * Specifies the image file name, e.g. './test.png'.
     * Changing this creates a new resource.
     */
    imageFile: pulumi.Input<string>;
    /**
     * Specifies the image process. The valid values are:  
     * + **TRANSPARENT**: make the background color transparent.
     * + **ORIGINAL**: only simple scaling, no other processing.
     * + **GRAYED**: make the color image grayed.
     */
    imageProcess?: pulumi.Input<string>;
    /**
     * Specifies the image file type. The valid values are **PNG**, **JPG**
     * and **JPEG**. Changing this creates a new resource.
     */
    imageType: pulumi.Input<string>;
    /**
     * Specifies the template name, which contains a maximum of 128 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the location of the watermark. The valid values are **TOPRIGHT**,
     * **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
     */
    position?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the watermark duration (Unit: second). The value is a digit
     * greater than or equal to **0**. By default, the watermark lasts until the end of the video.
     */
    timelineDuration?: pulumi.Input<string>;
    /**
     * Specifies the watermark start time (Unit: second). The value is a digit
     * greater than or equal to **0**. Defaults to: **0**.
     */
    timelineStart?: pulumi.Input<string>;
    /**
     * Specifies vertical offset ratio of the watermark image relative to the
     * output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0**.
     */
    verticalOffset?: pulumi.Input<string>;
    /**
     * Specifies width ratio of the watermark image relative to the output video.
     * The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
     * automatically discarded. Defaults to: **0.01**.
     */
    width?: pulumi.Input<string>;
}

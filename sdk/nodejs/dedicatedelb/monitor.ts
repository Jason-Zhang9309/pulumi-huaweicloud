// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an ELB monitor resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const monitor1 = new huaweicloud.dedicatedelb.Monitor("monitor1", {
 *     protocol: "HTTP",
 *     interval: 30,
 *     timeout: 15,
 *     maxRetries: 10,
 *     urlPath: "/api",
 *     port: 8888,
 *     poolId: huaweicloud_elb_pool.test.id,
 * });
 * ```
 *
 * ## Import
 *
 * ELB monitor can be imported using the monitor ID, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:DedicatedElb/monitor:Monitor monitor_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:DedicatedElb/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * The Domain Name of the Monitor.
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * The time, in seconds, between sending probes to members.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Number of permissible ping failures before changing the member's status to INACTIVE.
     * Must be a number between 1 and 10.
     */
    public readonly maxRetries!: pulumi.Output<number>;
    /**
     * The id of the pool that this monitor will be assigned to.
     */
    public readonly poolId!: pulumi.Output<string>;
    /**
     * Specifies the health check port. The value ranges from 1 to 65535.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The type of probe, which is TCP, HTTP, or HTTPS, that is sent by the load
     * balancer to verify the member state. Changing this creates a new monitor.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The region in which to create the ELB monitor resource. If omitted, the
     * provider-level region will be used. Changing this creates a new monitor.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Maximum number of seconds for a monitor to wait for a ping reply before it times out. The
     * value must be less than the delay value.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or
     * HTTPS.
     */
    public readonly urlPath!: pulumi.Output<string>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.maxRetries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxRetries'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * The Domain Name of the Monitor.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The time, in seconds, between sending probes to members.
     */
    interval?: pulumi.Input<number>;
    /**
     * Number of permissible ping failures before changing the member's status to INACTIVE.
     * Must be a number between 1 and 10.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * The id of the pool that this monitor will be assigned to.
     */
    poolId?: pulumi.Input<string>;
    /**
     * Specifies the health check port. The value ranges from 1 to 65535.
     */
    port?: pulumi.Input<number>;
    /**
     * The type of probe, which is TCP, HTTP, or HTTPS, that is sent by the load
     * balancer to verify the member state. Changing this creates a new monitor.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB monitor resource. If omitted, the
     * provider-level region will be used. Changing this creates a new monitor.
     */
    region?: pulumi.Input<string>;
    /**
     * Maximum number of seconds for a monitor to wait for a ping reply before it times out. The
     * value must be less than the delay value.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or
     * HTTPS.
     */
    urlPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * The Domain Name of the Monitor.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The time, in seconds, between sending probes to members.
     */
    interval: pulumi.Input<number>;
    /**
     * Number of permissible ping failures before changing the member's status to INACTIVE.
     * Must be a number between 1 and 10.
     */
    maxRetries: pulumi.Input<number>;
    /**
     * The id of the pool that this monitor will be assigned to.
     */
    poolId: pulumi.Input<string>;
    /**
     * Specifies the health check port. The value ranges from 1 to 65535.
     */
    port?: pulumi.Input<number>;
    /**
     * The type of probe, which is TCP, HTTP, or HTTPS, that is sent by the load
     * balancer to verify the member state. Changing this creates a new monitor.
     */
    protocol: pulumi.Input<string>;
    /**
     * The region in which to create the ELB monitor resource. If omitted, the
     * provider-level region will be used. Changing this creates a new monitor.
     */
    region?: pulumi.Input<string>;
    /**
     * Maximum number of seconds for a monitor to wait for a ping reply before it times out. The
     * value must be less than the delay value.
     */
    timeout: pulumi.Input<number>;
    /**
     * Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or
     * HTTPS.
     */
    urlPath?: pulumi.Input<string>;
}

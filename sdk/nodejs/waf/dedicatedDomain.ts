// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a dedicated mode domain resource within HuaweiCloud.
 *
 * > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
 * used. The dedicated mode domain name resource can be used in Dedicated Mode and ELB Mode.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const certificatedId = config.requireObject("certificatedId");
 * const vpcId = config.requireObject("vpcId");
 * const enterpriseProjectId = config.requireObject("enterpriseProjectId");
 * const domain1 = new huaweicloud.waf.DedicatedDomain("domain1", {
 *     domain: "www.example.com",
 *     certificateId: certificatedId,
 *     enterpriseProjectId: enterpriseProjectId,
 *     servers: [{
 *         clientProtocol: "HTTPS",
 *         serverProtocol: "HTTP",
 *         address: "192.168.1.100",
 *         port: 8080,
 *         type: "ipv4",
 *         vpcId: vpcId,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * There are two ways to import WAF dedicated domain state. * Using the `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Waf/dedicatedDomain:DedicatedDomain test <id>
 * ```
 *
 *  * Using `id` and `enterprise_project_id`, separated by a slash, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Waf/dedicatedDomain:DedicatedDomain test <id>/<enterprise_project_id>
 * ```
 */
export class DedicatedDomain extends pulumi.CustomResource {
    /**
     * Get an existing DedicatedDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DedicatedDomainState, opts?: pulumi.CustomResourceOptions): DedicatedDomain {
        return new DedicatedDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Waf/dedicatedDomain:DedicatedDomain';

    /**
     * Returns true if the given object is an instance of DedicatedDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DedicatedDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DedicatedDomain.__pulumiType;
    }

    /**
     * Whether a domain name is connected to WAF. Valid values are:
     */
    public /*out*/ readonly accessStatus!: pulumi.Output<number>;
    /**
     * The alarm page of domain. Valid values are:
     */
    public /*out*/ readonly alarmPage!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
     * is set to HTTPS.
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * The name of the certificate used by the domain name.
     */
    public /*out*/ readonly certificateName!: pulumi.Output<string>;
    /**
     * Specifies the cipher suite of domain. The options include `cipher1`, `cipher2`,
     * `cipher3`, `cipher4`, `cipherDefault`.
     */
    public readonly cipher!: pulumi.Output<string>;
    /**
     * The compliance certifications of the domain, values are:
     */
    public /*out*/ readonly complianceCertification!: pulumi.Output<{[key: string]: boolean}>;
    /**
     * Specifies the protected domain name or IP address (port allowed). For example,
     * `www.example.com` or `*.example.com` or `www.example.com:89`. Changing this creates a new domain.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Specifies the enterprise project ID of WAF dedicated domain.
     * Changing this parameter will create a new resource.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to retain the policy when deleting a domain name.
     * Defaults to `true`.
     */
    public readonly keepPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the status of the PCI 3DS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    public readonly pci3ds!: pulumi.Output<boolean>;
    /**
     * Specifies the status of the PCI DSS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    public readonly pciDss!: pulumi.Output<boolean>;
    /**
     * Specifies the policy ID associated with the domain. If not specified, a new policy
     * will be created automatically.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The protection status of domain, `0`: suspended, `1`: enabled.
     * Default value is `1`.
     */
    public readonly protectStatus!: pulumi.Output<number>;
    /**
     * The protocol type of the client. The options are `HTTP` and `HTTPS`.
     */
    public /*out*/ readonly protocol!: pulumi.Output<string>;
    /**
     * Specifies whether a proxy is configured. Default value is `false`.
     */
    public readonly proxy!: pulumi.Output<boolean | undefined>;
    /**
     * The region in which to create the dedicated mode domain resource. If omitted,
     * the provider-level region will be used. Changing this setting will push a new domain.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The server configuration list of the domain. A maximum of 80 can be configured.
     * The object structure is documented below.
     */
    public readonly servers!: pulumi.Output<outputs.Waf.DedicatedDomainServer[]>;
    /**
     * Specifies the minimum required TLS version. The options include `TLS v1.0`, `TLS v1.1`,
     * `TLS v1.2`.
     */
    public readonly tls!: pulumi.Output<string>;
    /**
     * The traffic identifier of domain. Valid values are:
     */
    public /*out*/ readonly trafficIdentifier!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a DedicatedDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DedicatedDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DedicatedDomainArgs | DedicatedDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DedicatedDomainState | undefined;
            resourceInputs["accessStatus"] = state ? state.accessStatus : undefined;
            resourceInputs["alarmPage"] = state ? state.alarmPage : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["complianceCertification"] = state ? state.complianceCertification : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["keepPolicy"] = state ? state.keepPolicy : undefined;
            resourceInputs["pci3ds"] = state ? state.pci3ds : undefined;
            resourceInputs["pciDss"] = state ? state.pciDss : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["protectStatus"] = state ? state.protectStatus : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
            resourceInputs["trafficIdentifier"] = state ? state.trafficIdentifier : undefined;
        } else {
            const args = argsOrState as DedicatedDomainArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["keepPolicy"] = args ? args.keepPolicy : undefined;
            resourceInputs["pci3ds"] = args ? args.pci3ds : undefined;
            resourceInputs["pciDss"] = args ? args.pciDss : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["protectStatus"] = args ? args.protectStatus : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
            resourceInputs["accessStatus"] = undefined /*out*/;
            resourceInputs["alarmPage"] = undefined /*out*/;
            resourceInputs["certificateName"] = undefined /*out*/;
            resourceInputs["complianceCertification"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["trafficIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DedicatedDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DedicatedDomain resources.
 */
export interface DedicatedDomainState {
    /**
     * Whether a domain name is connected to WAF. Valid values are:
     */
    accessStatus?: pulumi.Input<number>;
    /**
     * The alarm page of domain. Valid values are:
     */
    alarmPage?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
     * is set to HTTPS.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The name of the certificate used by the domain name.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * Specifies the cipher suite of domain. The options include `cipher1`, `cipher2`,
     * `cipher3`, `cipher4`, `cipherDefault`.
     */
    cipher?: pulumi.Input<string>;
    /**
     * The compliance certifications of the domain, values are:
     */
    complianceCertification?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Specifies the protected domain name or IP address (port allowed). For example,
     * `www.example.com` or `*.example.com` or `www.example.com:89`. Changing this creates a new domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of WAF dedicated domain.
     * Changing this parameter will create a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether to retain the policy when deleting a domain name.
     * Defaults to `true`.
     */
    keepPolicy?: pulumi.Input<boolean>;
    /**
     * Specifies the status of the PCI 3DS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    pci3ds?: pulumi.Input<boolean>;
    /**
     * Specifies the status of the PCI DSS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    pciDss?: pulumi.Input<boolean>;
    /**
     * Specifies the policy ID associated with the domain. If not specified, a new policy
     * will be created automatically.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection status of domain, `0`: suspended, `1`: enabled.
     * Default value is `1`.
     */
    protectStatus?: pulumi.Input<number>;
    /**
     * The protocol type of the client. The options are `HTTP` and `HTTPS`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies whether a proxy is configured. Default value is `false`.
     */
    proxy?: pulumi.Input<boolean>;
    /**
     * The region in which to create the dedicated mode domain resource. If omitted,
     * the provider-level region will be used. Changing this setting will push a new domain.
     */
    region?: pulumi.Input<string>;
    /**
     * The server configuration list of the domain. A maximum of 80 can be configured.
     * The object structure is documented below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.Waf.DedicatedDomainServer>[]>;
    /**
     * Specifies the minimum required TLS version. The options include `TLS v1.0`, `TLS v1.1`,
     * `TLS v1.2`.
     */
    tls?: pulumi.Input<string>;
    /**
     * The traffic identifier of domain. Valid values are:
     */
    trafficIdentifier?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DedicatedDomain resource.
 */
export interface DedicatedDomainArgs {
    /**
     * Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
     * is set to HTTPS.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Specifies the cipher suite of domain. The options include `cipher1`, `cipher2`,
     * `cipher3`, `cipher4`, `cipherDefault`.
     */
    cipher?: pulumi.Input<string>;
    /**
     * Specifies the protected domain name or IP address (port allowed). For example,
     * `www.example.com` or `*.example.com` or `www.example.com:89`. Changing this creates a new domain.
     */
    domain: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of WAF dedicated domain.
     * Changing this parameter will create a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether to retain the policy when deleting a domain name.
     * Defaults to `true`.
     */
    keepPolicy?: pulumi.Input<boolean>;
    /**
     * Specifies the status of the PCI 3DS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    pci3ds?: pulumi.Input<boolean>;
    /**
     * Specifies the status of the PCI DSS compliance certification check. The options
     * include `true` and `false`. This parameter must be used together with tls and cipher.
     */
    pciDss?: pulumi.Input<boolean>;
    /**
     * Specifies the policy ID associated with the domain. If not specified, a new policy
     * will be created automatically.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection status of domain, `0`: suspended, `1`: enabled.
     * Default value is `1`.
     */
    protectStatus?: pulumi.Input<number>;
    /**
     * Specifies whether a proxy is configured. Default value is `false`.
     */
    proxy?: pulumi.Input<boolean>;
    /**
     * The region in which to create the dedicated mode domain resource. If omitted,
     * the provider-level region will be used. Changing this setting will push a new domain.
     */
    region?: pulumi.Input<string>;
    /**
     * The server configuration list of the domain. A maximum of 80 can be configured.
     * The object structure is documented below.
     */
    servers: pulumi.Input<pulumi.Input<inputs.Waf.DedicatedDomainServer>[]>;
    /**
     * Specifies the minimum required TLS version. The options include `TLS v1.0`, `TLS v1.1`,
     * `TLS v1.2`.
     */
    tls?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a WAF policy resource within HuaweiCloud.
 *
 * > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
 * used. The policy resource can be used in Cloud Mode, Dedicated Mode and ELB Mode.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const policy1 = new huaweicloud.Waf.Policy("policy_1", {
 *     level: 2,
 *     protectionMode: "log",
 * });
 * ```
 *
 * ## Import
 *
 * Policies can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Waf/policy:Policy policy_2 25e1df831bea4022a6e22bebe678915a
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Waf/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * The detection mode in Precise Protection.
     * + `true`: full detection, Full detection finishes all threat detections before blocking requests that meet Precise
     * Protection specified conditions.
     * + `false`: instant detection. Instant detection immediately ends threat detection after blocking a request that
     * meets Precise Protection specified conditions.
     */
    public /*out*/ readonly fullDetection!: pulumi.Output<boolean>;
    /**
     * Specifies the protection level. Defaults to `2`. Valid values are:
     * + `1`: low
     * + `2`: medium
     * + `3`: high
     */
    public readonly level!: pulumi.Output<number>;
    /**
     * Specifies the policy name. The maximum length is 256 characters. Only digits, letters,
     * underscores(_), and hyphens(-) are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The protection switches. The options object structure is documented below.
     */
    public /*out*/ readonly options!: pulumi.Output<outputs.Waf.PolicyOption[]>;
    /**
     * Specifies the protective action after a rule is matched. Defaults to `log`.
     * Valid values are:
     * + `block`: WAF blocks and logs detected attacks.
     * + `log`: WAF logs detected attacks only.
     */
    public readonly protectionMode!: pulumi.Output<string>;
    /**
     * The region in which to create the WAF policy resource. If omitted, the
     * provider-level region will be used. Changing this setting will push a new certificate.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["fullDetection"] = state ? state.fullDetection : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["protectionMode"] = state ? state.protectionMode : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectionMode"] = args ? args.protectionMode : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["fullDetection"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * The detection mode in Precise Protection.
     * + `true`: full detection, Full detection finishes all threat detections before blocking requests that meet Precise
     * Protection specified conditions.
     * + `false`: instant detection. Instant detection immediately ends threat detection after blocking a request that
     * meets Precise Protection specified conditions.
     */
    fullDetection?: pulumi.Input<boolean>;
    /**
     * Specifies the protection level. Defaults to `2`. Valid values are:
     * + `1`: low
     * + `2`: medium
     * + `3`: high
     */
    level?: pulumi.Input<number>;
    /**
     * Specifies the policy name. The maximum length is 256 characters. Only digits, letters,
     * underscores(_), and hyphens(-) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * The protection switches. The options object structure is documented below.
     */
    options?: pulumi.Input<pulumi.Input<inputs.Waf.PolicyOption>[]>;
    /**
     * Specifies the protective action after a rule is matched. Defaults to `log`.
     * Valid values are:
     * + `block`: WAF blocks and logs detected attacks.
     * + `log`: WAF logs detected attacks only.
     */
    protectionMode?: pulumi.Input<string>;
    /**
     * The region in which to create the WAF policy resource. If omitted, the
     * provider-level region will be used. Changing this setting will push a new certificate.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Specifies the protection level. Defaults to `2`. Valid values are:
     * + `1`: low
     * + `2`: medium
     * + `3`: high
     */
    level?: pulumi.Input<number>;
    /**
     * Specifies the policy name. The maximum length is 256 characters. Only digits, letters,
     * underscores(_), and hyphens(-) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the protective action after a rule is matched. Defaults to `log`.
     * Valid values are:
     * + `block`: WAF blocks and logs detected attacks.
     * + `log`: WAF logs detected attacks only.
     */
    protectionMode?: pulumi.Input<string>;
    /**
     * The region in which to create the WAF policy resource. If omitted, the
     * provider-level region will be used. Changing this setting will push a new certificate.
     */
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a CCE cluster resource.
 *
 * ## Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const myvpc = new huaweicloud.vpc.Vpc("myvpc", {cidr: "192.168.0.0/16"});
 * const mysubnet = new huaweicloud.vpc.Subnet("mysubnet", {
 *     cidr: "192.168.0.0/16",
 *     gatewayIp: "192.168.0.1",
 *     primaryDns: "100.125.1.250",
 *     secondaryDns: "100.125.21.250",
 *     vpcId: myvpc.id,
 * });
 * const cluster = new huaweicloud.cce.Cluster("cluster", {
 *     flavorId: "cce.s1.small",
 *     vpcId: myvpc.id,
 *     subnetId: mysubnet.id,
 *     containerNetworkType: "overlay_l2",
 * });
 * ```
 *
 * ## Cluster With Eip
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const myvpc = new huaweicloud.vpc.Vpc("myvpc", {cidr: "192.168.0.0/16"});
 * const mysubnet = new huaweicloud.vpc.Subnet("mysubnet", {
 *     cidr: "192.168.0.0/16",
 *     gatewayIp: "192.168.0.1",
 *     primaryDns: "100.125.1.250",
 *     secondaryDns: "100.125.21.250",
 *     vpcId: myvpc.id,
 * });
 * const myeip = new huaweicloud.vpc.Eip("myeip", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         name: "test",
 *         size: 8,
 *         shareType: "PER",
 *         chargeMode: "traffic",
 *     },
 * });
 * const cluster = new huaweicloud.cce.Cluster("cluster", {
 *     clusterType: "VirtualMachine",
 *     flavorId: "cce.s1.small",
 *     vpcId: myvpc.id,
 *     subnetId: mysubnet.id,
 *     containerNetworkType: "overlay_l2",
 *     authenticationMode: "rbac",
 *     eip: myeip.address,
 * });
 * ```
 *
 * ## Import
 *
 * Cluster can be imported using the cluster ID, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cce/cluster:Cluster huaweicloud_cce_cluster.cluster_1 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`delete_efs`, `delete_eni`, `delete_evs`, `delete_net`, `delete_obs`, `delete_sfs` and `delete_all`. It is generally recommended running `terraform plan` after importing an CCE cluster. You can then decide if changes should be applied to the cluster, or the resource definition should be updated to align with the cluster. Also you can ignore changes as below. resource "huaweicloud_cce_cluster" "cluster_1" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  delete_efs, delete_obs,
 *
 *  ]
 *
 *  } }
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cce/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly authenticatingProxyCa!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly authenticatingProxyCert!: pulumi.Output<string | undefined>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly authenticatingProxyPrivateKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly authenticationMode!: pulumi.Output<string | undefined>;
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and
     * **false**. Changing this parameter will create a new cluster resource.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use charging_mode instead
     */
    public readonly billingMode!: pulumi.Output<number>;
    /**
     * The certificate clusters. Structure is documented below.
     */
    public /*out*/ readonly certificateClusters!: pulumi.Output<outputs.Cce.ClusterCertificateCluster[]>;
    /**
     * The certificate users. Structure is documented below.
     */
    public /*out*/ readonly certificateUsers!: pulumi.Output<outputs.Cce.ClusterCertificateUser[]>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    public readonly clusterType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    public readonly clusterVersion!: pulumi.Output<string>;
    /**
     * Specifies the container network segment.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly containerNetworkCidr!: pulumi.Output<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    public readonly containerNetworkType!: pulumi.Output<string>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    public readonly deleteAll!: pulumi.Output<string | undefined>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    public readonly deleteEfs!: pulumi.Output<string | undefined>;
    public readonly deleteEni!: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    public readonly deleteEvs!: pulumi.Output<string | undefined>;
    public readonly deleteNet!: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    public readonly deleteObs!: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    public readonly deleteSfs!: pulumi.Output<string | undefined>;
    /**
     * Specifies the cluster description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    public readonly eip!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ENI network segment. Specified when creating a CCE
     * Turbo cluster. Changing this parameter will create a new cluster resource.
     */
    public readonly eniSubnetCidr!: pulumi.Output<string>;
    /**
     * Specifies the ENI subnet ID. Specified when creating a CCE Turbo
     * cluster. Changing this parameter will create a new cluster resource.
     */
    public readonly eniSubnetId!: pulumi.Output<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the cluster specifications.
     * Changing this parameter will create a new cluster resource.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     */
    public readonly hibernate!: pulumi.Output<boolean | undefined>;
    public readonly highwaySubnetId!: pulumi.Output<string>;
    /**
     * Raw Kubernetes config to be used by kubectl and other compatible tools.
     */
    public /*out*/ readonly kubeConfigRaw!: pulumi.Output<string>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     */
    public readonly kubeProxyMode!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    public readonly masters!: pulumi.Output<outputs.Cce.ClusterMaster[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    public readonly multiAz!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the cluster name.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Security group ID of the cluster.
     */
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly serviceNetworkCidr!: pulumi.Output<string>;
    /**
     * Cluster status information.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["authenticatingProxyCa"] = state ? state.authenticatingProxyCa : undefined;
            resourceInputs["authenticatingProxyCert"] = state ? state.authenticatingProxyCert : undefined;
            resourceInputs["authenticatingProxyPrivateKey"] = state ? state.authenticatingProxyPrivateKey : undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["certificateClusters"] = state ? state.certificateClusters : undefined;
            resourceInputs["certificateUsers"] = state ? state.certificateUsers : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["containerNetworkCidr"] = state ? state.containerNetworkCidr : undefined;
            resourceInputs["containerNetworkType"] = state ? state.containerNetworkType : undefined;
            resourceInputs["deleteAll"] = state ? state.deleteAll : undefined;
            resourceInputs["deleteEfs"] = state ? state.deleteEfs : undefined;
            resourceInputs["deleteEni"] = state ? state.deleteEni : undefined;
            resourceInputs["deleteEvs"] = state ? state.deleteEvs : undefined;
            resourceInputs["deleteNet"] = state ? state.deleteNet : undefined;
            resourceInputs["deleteObs"] = state ? state.deleteObs : undefined;
            resourceInputs["deleteSfs"] = state ? state.deleteSfs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["eniSubnetCidr"] = state ? state.eniSubnetCidr : undefined;
            resourceInputs["eniSubnetId"] = state ? state.eniSubnetId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hibernate"] = state ? state.hibernate : undefined;
            resourceInputs["highwaySubnetId"] = state ? state.highwaySubnetId : undefined;
            resourceInputs["kubeConfigRaw"] = state ? state.kubeConfigRaw : undefined;
            resourceInputs["kubeProxyMode"] = state ? state.kubeProxyMode : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["masters"] = state ? state.masters : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["serviceNetworkCidr"] = state ? state.serviceNetworkCidr : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.containerNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerNetworkType'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["authenticatingProxyCa"] = args ? args.authenticatingProxyCa : undefined;
            resourceInputs["authenticatingProxyCert"] = args ? args.authenticatingProxyCert : undefined;
            resourceInputs["authenticatingProxyPrivateKey"] = args ? args.authenticatingProxyPrivateKey : undefined;
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["containerNetworkCidr"] = args ? args.containerNetworkCidr : undefined;
            resourceInputs["containerNetworkType"] = args ? args.containerNetworkType : undefined;
            resourceInputs["deleteAll"] = args ? args.deleteAll : undefined;
            resourceInputs["deleteEfs"] = args ? args.deleteEfs : undefined;
            resourceInputs["deleteEni"] = args ? args.deleteEni : undefined;
            resourceInputs["deleteEvs"] = args ? args.deleteEvs : undefined;
            resourceInputs["deleteNet"] = args ? args.deleteNet : undefined;
            resourceInputs["deleteObs"] = args ? args.deleteObs : undefined;
            resourceInputs["deleteSfs"] = args ? args.deleteSfs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["eniSubnetCidr"] = args ? args.eniSubnetCidr : undefined;
            resourceInputs["eniSubnetId"] = args ? args.eniSubnetId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hibernate"] = args ? args.hibernate : undefined;
            resourceInputs["highwaySubnetId"] = args ? args.highwaySubnetId : undefined;
            resourceInputs["kubeProxyMode"] = args ? args.kubeProxyMode : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["masters"] = args ? args.masters : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceNetworkCidr"] = args ? args.serviceNetworkCidr : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["certificateClusters"] = undefined /*out*/;
            resourceInputs["certificateUsers"] = undefined /*out*/;
            resourceInputs["kubeConfigRaw"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCa?: pulumi.Input<string>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCert?: pulumi.Input<string>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    authenticationMode?: pulumi.Input<string>;
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and
     * **false**. Changing this parameter will create a new cluster resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use charging_mode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * The certificate clusters. Structure is documented below.
     */
    certificateClusters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateCluster>[]>;
    /**
     * The certificate users. Structure is documented below.
     */
    certificateUsers?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateUser>[]>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Specifies the container network segment.
     * Changing this parameter will create a new cluster resource.
     */
    containerNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    containerNetworkType?: pulumi.Input<string>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteAll?: pulumi.Input<string>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEfs?: pulumi.Input<string>;
    deleteEni?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEvs?: pulumi.Input<string>;
    deleteNet?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteObs?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteSfs?: pulumi.Input<string>;
    /**
     * Specifies the cluster description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    eip?: pulumi.Input<string>;
    /**
     * Specifies the ENI network segment. Specified when creating a CCE
     * Turbo cluster. Changing this parameter will create a new cluster resource.
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * Specifies the ENI subnet ID. Specified when creating a CCE Turbo
     * cluster. Changing this parameter will create a new cluster resource.
     */
    eniSubnetId?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     * Changing this parameter will create a new cluster resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new cluster resource.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the cluster specifications.
     * Changing this parameter will create a new cluster resource.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     */
    hibernate?: pulumi.Input<boolean>;
    highwaySubnetId?: pulumi.Input<string>;
    /**
     * Raw Kubernetes config to be used by kubectl and other compatible tools.
     */
    kubeConfigRaw?: pulumi.Input<string>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     */
    kubeProxyMode?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Specifies the cluster name.
     * Changing this parameter will create a new cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Security group ID of the cluster.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    serviceNetworkCidr?: pulumi.Input<string>;
    /**
     * Cluster status information.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     * Changing this parameter will create a new cluster resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCa?: pulumi.Input<string>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCert?: pulumi.Input<string>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    authenticationMode?: pulumi.Input<string>;
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and
     * **false**. Changing this parameter will create a new cluster resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use charging_mode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Specifies the container network segment.
     * Changing this parameter will create a new cluster resource.
     */
    containerNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    containerNetworkType: pulumi.Input<string>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteAll?: pulumi.Input<string>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEfs?: pulumi.Input<string>;
    deleteEni?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEvs?: pulumi.Input<string>;
    deleteNet?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteObs?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteSfs?: pulumi.Input<string>;
    /**
     * Specifies the cluster description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    eip?: pulumi.Input<string>;
    /**
     * Specifies the ENI network segment. Specified when creating a CCE
     * Turbo cluster. Changing this parameter will create a new cluster resource.
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * Specifies the ENI subnet ID. Specified when creating a CCE Turbo
     * cluster. Changing this parameter will create a new cluster resource.
     */
    eniSubnetId?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     * Changing this parameter will create a new cluster resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new cluster resource.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the cluster specifications.
     * Changing this parameter will create a new cluster resource.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     */
    flavorId: pulumi.Input<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     */
    hibernate?: pulumi.Input<boolean>;
    highwaySubnetId?: pulumi.Input<string>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     */
    kubeProxyMode?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Specifies the cluster name.
     * Changing this parameter will create a new cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    serviceNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     * Changing this parameter will create a new cluster resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    vpcId: pulumi.Input<string>;
}

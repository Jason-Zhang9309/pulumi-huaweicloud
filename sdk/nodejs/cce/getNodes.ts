// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get a list of CCE nodes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject("clusterId");
 * const nodeName = config.requireObject("nodeName");
 * const node = huaweicloud.Cce.getNodes({
 *     clusterId: clusterId,
 *     name: nodeName,
 * });
 * ```
 */
export function getNodes(args: GetNodesArgs, opts?: pulumi.InvokeOptions): Promise<GetNodesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Cce/getNodes:getNodes", {
        "clusterId": args.clusterId,
        "name": args.name,
        "nodeId": args.nodeId,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodes.
 */
export interface GetNodesArgs {
    /**
     * Specifies the ID of CCE cluster.
     */
    clusterId: string;
    /**
     * Specifies the of the node.
     */
    name?: string;
    /**
     * Specifies the ID of the node.
     */
    nodeId?: string;
    /**
     * Specifies the region in which to obtain the CCE nodes. If omitted, the provider-level
     * region will be used.
     */
    region?: string;
    /**
     * Specifies the status of the node.
     */
    status?: string;
}

/**
 * A collection of values returned by getNodes.
 */
export interface GetNodesResult {
    readonly clusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates a list of IDs of all CCE nodes found.
     */
    readonly ids: string[];
    /**
     * The name of the node.
     */
    readonly name?: string;
    readonly nodeId?: string;
    /**
     * Indicates a list of CCE nodes found. Structure is documented below.
     */
    readonly nodes: outputs.Cce.GetNodesNode[];
    readonly region: string;
    /**
     * The state of the node.
     */
    readonly status?: string;
}

export function getNodesOutput(args: GetNodesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodesResult> {
    return pulumi.output(args).apply(a => getNodes(a, opts))
}

/**
 * A collection of arguments for invoking getNodes.
 */
export interface GetNodesOutputArgs {
    /**
     * Specifies the ID of CCE cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the of the node.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the node.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to obtain the CCE nodes. If omitted, the provider-level
     * region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the status of the node.
     */
    status?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this resource to upgrade a CCE cluster within HuaweiCloud.
 *
 * ## Example Usage
 */
export class ClusterUpgrade extends pulumi.CustomResource {
    /**
     * Get an existing ClusterUpgrade resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterUpgradeState, opts?: pulumi.CustomResourceOptions): ClusterUpgrade {
        return new ClusterUpgrade(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cce/clusterUpgrade:ClusterUpgrade';

    /**
     * Returns true if the given object is an instance of ClusterUpgrade.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterUpgrade {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterUpgrade.__pulumiType;
    }

    /**
     * Specifies the add-on configuration list
     * The addons structure is documented below.
     */
    public readonly addons!: pulumi.Output<outputs.Cce.ClusterUpgradeAddon[] | undefined>;
    /**
     * Specifies the cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the upgrade sequence of nodes in the node pools.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is a json string which indicates the priority of nodes in this pool. Please check the example.
     */
    public readonly nodeOrder!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the upgrade sequence of node pools, in key-value pairs.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is the priority of the node pool. **0** indicating the lowest priority.
     * A larger value indicates a higher priority.
     */
    public readonly nodepoolOrder!: pulumi.Output<{[key: string]: number} | undefined>;
    /**
     * The region in which to create the CCE cluster upgrade resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the upgrade strategy.
     * The strategy structure is documented below.
     */
    public readonly strategy!: pulumi.Output<outputs.Cce.ClusterUpgradeStrategy>;
    /**
     * Specifies the target version.
     */
    public readonly targetVersion!: pulumi.Output<string>;

    /**
     * Create a ClusterUpgrade resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterUpgradeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterUpgradeArgs | ClusterUpgradeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterUpgradeState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["nodeOrder"] = state ? state.nodeOrder : undefined;
            resourceInputs["nodepoolOrder"] = state ? state.nodepoolOrder : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["targetVersion"] = state ? state.targetVersion : undefined;
        } else {
            const args = argsOrState as ClusterUpgradeArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            if ((!args || args.targetVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetVersion'");
            }
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["nodeOrder"] = args ? args.nodeOrder : undefined;
            resourceInputs["nodepoolOrder"] = args ? args.nodepoolOrder : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["targetVersion"] = args ? args.targetVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterUpgrade.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterUpgrade resources.
 */
export interface ClusterUpgradeState {
    /**
     * Specifies the add-on configuration list
     * The addons structure is documented below.
     */
    addons?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterUpgradeAddon>[]>;
    /**
     * Specifies the cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the upgrade sequence of nodes in the node pools.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is a json string which indicates the priority of nodes in this pool. Please check the example.
     */
    nodeOrder?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the upgrade sequence of node pools, in key-value pairs.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is the priority of the node pool. **0** indicating the lowest priority.
     * A larger value indicates a higher priority.
     */
    nodepoolOrder?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * The region in which to create the CCE cluster upgrade resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the upgrade strategy.
     * The strategy structure is documented below.
     */
    strategy?: pulumi.Input<inputs.Cce.ClusterUpgradeStrategy>;
    /**
     * Specifies the target version.
     */
    targetVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterUpgrade resource.
 */
export interface ClusterUpgradeArgs {
    /**
     * Specifies the add-on configuration list
     * The addons structure is documented below.
     */
    addons?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterUpgradeAddon>[]>;
    /**
     * Specifies the cluster ID.
     */
    clusterId: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the upgrade sequence of nodes in the node pools.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is a json string which indicates the priority of nodes in this pool. Please check the example.
     */
    nodeOrder?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the upgrade sequence of node pools, in key-value pairs.
     * The key is the node pool ID, **DefaultPool** indicates the default pool.
     * The value is the priority of the node pool. **0** indicating the lowest priority.
     * A larger value indicates a higher priority.
     */
    nodepoolOrder?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * The region in which to create the CCE cluster upgrade resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the upgrade strategy.
     * The strategy structure is documented below.
     */
    strategy: pulumi.Input<inputs.Cce.ClusterUpgradeStrategy>;
    /**
     * Specifies the target version.
     */
    targetVersion: pulumi.Input<string>;
}

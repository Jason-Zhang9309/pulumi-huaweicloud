// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to revoke the certificate of a CCE cluster within HuaweiCloud.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject("clusterId");
 * const userId = config.requireObject("userId");
 * const test = new huaweicloud.cce.ClusterCertificateRevoke("test", {
 *     clusterId: clusterId,
 *     userId: userId,
 * });
 * ```
 *
 * > Deleting certificate revoke resource is not supported, it will only be removed from the state.
 */
export class ClusterCertificateRevoke extends pulumi.CustomResource {
    /**
     * Get an existing ClusterCertificateRevoke resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterCertificateRevokeState, opts?: pulumi.CustomResourceOptions): ClusterCertificateRevoke {
        return new ClusterCertificateRevoke(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cce/clusterCertificateRevoke:ClusterCertificateRevoke';

    /**
     * Returns true if the given object is an instance of ClusterCertificateRevoke.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterCertificateRevoke {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterCertificateRevoke.__pulumiType;
    }

    /**
     * Specifies the agency ID.
     */
    public readonly agencyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the node sync resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the user ID.
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a ClusterCertificateRevoke resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterCertificateRevokeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterCertificateRevokeArgs | ClusterCertificateRevokeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterCertificateRevokeState | undefined;
            resourceInputs["agencyId"] = state ? state.agencyId : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ClusterCertificateRevokeArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["agencyId"] = args ? args.agencyId : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterCertificateRevoke.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterCertificateRevoke resources.
 */
export interface ClusterCertificateRevokeState {
    /**
     * Specifies the agency ID.
     */
    agencyId?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the node sync resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the user ID.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterCertificateRevoke resource.
 */
export interface ClusterCertificateRevokeArgs {
    /**
     * Specifies the agency ID.
     */
    agencyId?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     */
    clusterId: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the node sync resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the user ID.
     */
    userId?: pulumi.Input<string>;
}

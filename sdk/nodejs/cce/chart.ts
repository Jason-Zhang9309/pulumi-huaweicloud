// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a CCE chart resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### Basic Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const test = new huaweicloud.Cce.Chart("test", {
 *     content: "./kube-prometheus-stack-55.4.1.tgz",
 *     parameters: "{\"override\":true,\"skip_lint\":true,\"source\":\"package\"}",
 * });
 * ```
 *
 * ## Import
 *
 * CCE chart can be imported using the `id`, e.g.bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cce/chart:Chart test 19413aa0-9fe4-11ee-83b0-0255ac10026b
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`content` and `parameters`. It is generally recommended running `terraform plan` after importing an CCE chart. You can then decide if changes should be applied to the chart, or the resource definition should be updated to align with the chart. Also you can ignore changes as below. hcl resource "huaweicloud_cce_chart" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  content, parameters,
 *
 *  ]
 *
 *  } }
 */
export class Chart extends pulumi.CustomResource {
    /**
     * Get an existing Chart resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChartState, opts?: pulumi.CustomResourceOptions): Chart {
        return new Chart(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cce/chart:Chart';

    /**
     * Returns true if the given object is an instance of Chart.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Chart {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Chart.__pulumiType;
    }

    /**
     * The chart url.
     */
    public /*out*/ readonly chartUrl!: pulumi.Output<string>;
    /**
     * Specifies the path of the chart package to be uploaded.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The create time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the chart.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The instruction of the chart.
     */
    public /*out*/ readonly instruction!: pulumi.Output<string>;
    /**
     * The chart name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies the parameters of the CCE chart.
     */
    public readonly parameters!: pulumi.Output<string | undefined>;
    /**
     * Whether the chart is public.
     */
    public /*out*/ readonly public!: pulumi.Output<boolean>;
    /**
     * Specifies the region in which to create the CCE chart resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The source of the chart.
     */
    public /*out*/ readonly source!: pulumi.Output<string>;
    /**
     * The traslate source of the chart.
     */
    public /*out*/ readonly translate!: pulumi.Output<string>;
    /**
     * The update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The value of the chart.
     */
    public /*out*/ readonly value!: pulumi.Output<string>;
    /**
     * The chart version.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a Chart resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChartArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChartArgs | ChartState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChartState | undefined;
            resourceInputs["chartUrl"] = state ? state.chartUrl : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instruction"] = state ? state.instruction : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["translate"] = state ? state.translate : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ChartArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["chartUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["instruction"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["translate"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Chart.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Chart resources.
 */
export interface ChartState {
    /**
     * The chart url.
     */
    chartUrl?: pulumi.Input<string>;
    /**
     * Specifies the path of the chart package to be uploaded.
     */
    content?: pulumi.Input<string>;
    /**
     * The create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the chart.
     */
    description?: pulumi.Input<string>;
    /**
     * The instruction of the chart.
     */
    instruction?: pulumi.Input<string>;
    /**
     * The chart name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the parameters of the CCE chart.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Whether the chart is public.
     */
    public?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to create the CCE chart resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The source of the chart.
     */
    source?: pulumi.Input<string>;
    /**
     * The traslate source of the chart.
     */
    translate?: pulumi.Input<string>;
    /**
     * The update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The value of the chart.
     */
    value?: pulumi.Input<string>;
    /**
     * The chart version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Chart resource.
 */
export interface ChartArgs {
    /**
     * Specifies the path of the chart package to be uploaded.
     */
    content: pulumi.Input<string>;
    /**
     * Specifies the parameters of the CCE chart.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE chart resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
     */
    region?: pulumi.Input<string>;
}

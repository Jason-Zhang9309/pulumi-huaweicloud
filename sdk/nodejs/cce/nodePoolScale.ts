// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to scale the CCE node pool within HuaweiCloud.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject("clusterId");
 * const nodepoolId = config.requireObject("nodepoolId");
 * const test = new huaweicloud.cce.NodePoolScale("test", {
 *     clusterId: clusterId,
 *     nodepoolId: nodepoolId,
 *     scaleGroups: ["default"],
 *     desiredNodeCount: 2,
 * });
 * ```
 *
 * > Deleting node pool scale is not supported, it will only be removed from the state.
 */
export class NodePoolScale extends pulumi.CustomResource {
    /**
     * Get an existing NodePoolScale resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolScaleState, opts?: pulumi.CustomResourceOptions): NodePoolScale {
        return new NodePoolScale(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cce/nodePoolScale:NodePoolScale';

    /**
     * Returns true if the given object is an instance of NodePoolScale.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePoolScale {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePoolScale.__pulumiType;
    }

    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the charging mode of the nodes.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Specifies the number of desired nodes.
     */
    public readonly desiredNodeCount!: pulumi.Output<number>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the node pool ID.
     */
    public readonly nodepoolId!: pulumi.Output<string>;
    /**
     * Specifies the charging period of the nodes.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the nodes.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the node pool scale resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the scalable checking.
     * The value can be **instant** and **async**, defaults to **instant**.
     */
    public readonly scalableChecking!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IDs of scale groups to scale.
     * **default** indicates the default group.
     */
    public readonly scaleGroups!: pulumi.Output<string[]>;

    /**
     * Create a NodePoolScale resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolScaleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolScaleArgs | NodePoolScaleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolScaleState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["desiredNodeCount"] = state ? state.desiredNodeCount : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["nodepoolId"] = state ? state.nodepoolId : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scalableChecking"] = state ? state.scalableChecking : undefined;
            resourceInputs["scaleGroups"] = state ? state.scaleGroups : undefined;
        } else {
            const args = argsOrState as NodePoolScaleArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.desiredNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredNodeCount'");
            }
            if ((!args || args.nodepoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodepoolId'");
            }
            if ((!args || args.scaleGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleGroups'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["desiredNodeCount"] = args ? args.desiredNodeCount : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["nodepoolId"] = args ? args.nodepoolId : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scalableChecking"] = args ? args.scalableChecking : undefined;
            resourceInputs["scaleGroups"] = args ? args.scaleGroups : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodePoolScale.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePoolScale resources.
 */
export interface NodePoolScaleState {
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the nodes.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies the number of desired nodes.
     */
    desiredNodeCount?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the node pool ID.
     */
    nodepoolId?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the nodes.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the nodes.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the node pool scale resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scalable checking.
     * The value can be **instant** and **async**, defaults to **instant**.
     */
    scalableChecking?: pulumi.Input<string>;
    /**
     * Specifies the IDs of scale groups to scale.
     * **default** indicates the default group.
     */
    scaleGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NodePoolScale resource.
 */
export interface NodePoolScaleArgs {
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the nodes.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the number of desired nodes.
     */
    desiredNodeCount: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the node pool ID.
     */
    nodepoolId: pulumi.Input<string>;
    /**
     * Specifies the charging period of the nodes.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the nodes.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the node pool scale resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scalable checking.
     * The value can be **instant** and **async**, defaults to **instant**.
     */
    scalableChecking?: pulumi.Input<string>;
    /**
     * Specifies the IDs of scale groups to scale.
     * **default** indicates the default group.
     */
    scaleGroups: pulumi.Input<pulumi.Input<string>[]>;
}

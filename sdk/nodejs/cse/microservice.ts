// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a dedicated microservice resource within HuaweiCloud.
 *
 * > 1. Before creating a configuration, make sure the engine has enabled the rules shown in the appendix
 * >       table.
 * >       <br/> 2. When deleting a microservice, all instances under it will also be deleted together.
 *
 * ## Example Usage
 * ## Appendix
 *
 * <a name="microserviceDefaultEngineAccessRules"></a>
 * Security group rules required to access the engine:
 * (Remote is not the minimum range and can be adjusted according to business needs)
 *
 * | Direction | Priority | Action | Protocol | Ports         | Ethertype | Remote                |
 * | --------- | -------- | ------ | -------- | ------------- | --------- | --------------------- |
 * | Ingress   | 1        | Allow  | ICMP     | All           | Ipv6      | ::/0                  |
 * | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv6      | ::/0                  |
 * | Ingress   | 1        | Allow  | All      | All           | Ipv6      | cse-engine-default-sg |
 * | Ingress   | 1        | Allow  | ICMP     | All           | Ipv4      | 0.0.0.0/0             |
 * | Ingress   | 1        | Allow  | TCP      | 30100-30130   | Ipv4      | 0.0.0.0/0             |
 * | Ingress   | 1        | Allow  | All      | All           | Ipv4      | cse-engine-default-sg |
 * | Egress    | 100      | Allow  | All      | All           | Ipv6      | ::/0                  |
 * | Egress    | 100      | Allow  | All      | All           | Ipv4      | 0.0.0.0/0             |
 *
 * ## Import
 *
 * Microservices can be imported using related `auth_address`, `connect_address` and their `id`, separated by the slashes (/), e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>
 * ```
 *
 *  If you enabled the **RBAC** authorization, you also need to provide the account name (`admin_user`) and password (`admin_pass`) of the microservice engine. All fields separated by the slashes (/), e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cse/microservice:Microservice test <auth_address>/<connect_address>/<id>/<admin_user>/<admin_pass>
 * ```
 *
 *  The single quotes (') or backslashes (\\) can help you solve the problem of special characters reporting errors on bash. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cse/microservice:Microservice test https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test\!123
 * ```
 *
 *  bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cse/microservice:Microservice test 'https://124.70.26.32:30100/https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test!123'
 * ```
 */
export class Microservice extends pulumi.CustomResource {
    /**
     * Get an existing Microservice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MicroserviceState, opts?: pulumi.CustomResourceOptions): Microservice {
        return new Microservice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cse/microservice:Microservice';

    /**
     * Returns true if the given object is an instance of Microservice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Microservice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Microservice.__pulumiType;
    }

    /**
     * Specifies the account password for **RBAC** login.
     * The password format must meet the following conditions:
     * + Must be `8` to `32` characters long.
     * + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
     * (-~!@#%^*_=+?$&()|<>{}[]).
     * + Cannot be the account name or account name spelled backwards.
     * + The password can only start with a letter.
     */
    public readonly adminPass!: pulumi.Output<string | undefined>;
    /**
     * Specifies the account name for **RBAC** login.
     * Changing this will create a new resource.
     */
    public readonly adminUser!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the dedicated microservice application.
     * Changing this will create a new microservice.
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * Specifies the address that used to request the access token.  
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    public readonly authAddress!: pulumi.Output<string>;
    /**
     * Specifies the address that used to access engine and manages
     * microservice.
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    public readonly connectAddress!: pulumi.Output<string>;
    /**
     * Specifies the description of the dedicated microservice.
     * The description can contain a maximum of `256` characters.
     * Changing this will create a new microservice.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the environment (stage) type.
     * The valid values are **development**, **testing**, **acceptance** and **production**.
     * If omitted, the microservice will be deployed in an empty environment.
     * Changing this will create a new microservice.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * Specifies the microservice level.
     * The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
     */
    public readonly level!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the dedicated microservice.
     * The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
     * allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The microservice status. The values supports **UP** and **DOWN**.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the version of the dedicated microservice.
     * Changing this will create a new microservice.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Microservice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MicroserviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MicroserviceArgs | MicroserviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MicroserviceState | undefined;
            resourceInputs["adminPass"] = state ? state.adminPass : undefined;
            resourceInputs["adminUser"] = state ? state.adminUser : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["authAddress"] = state ? state.authAddress : undefined;
            resourceInputs["connectAddress"] = state ? state.connectAddress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MicroserviceArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.connectAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectAddress'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["adminPass"] = args ? args.adminPass : undefined;
            resourceInputs["adminUser"] = args ? args.adminUser : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["authAddress"] = args ? args.authAddress : undefined;
            resourceInputs["connectAddress"] = args ? args.connectAddress : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Microservice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Microservice resources.
 */
export interface MicroserviceState {
    /**
     * Specifies the account password for **RBAC** login.
     * The password format must meet the following conditions:
     * + Must be `8` to `32` characters long.
     * + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
     * (-~!@#%^*_=+?$&()|<>{}[]).
     * + Cannot be the account name or account name spelled backwards.
     * + The password can only start with a letter.
     */
    adminPass?: pulumi.Input<string>;
    /**
     * Specifies the account name for **RBAC** login.
     * Changing this will create a new resource.
     */
    adminUser?: pulumi.Input<string>;
    /**
     * Specifies the name of the dedicated microservice application.
     * Changing this will create a new microservice.
     */
    appName?: pulumi.Input<string>;
    /**
     * Specifies the address that used to request the access token.  
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    authAddress?: pulumi.Input<string>;
    /**
     * Specifies the address that used to access engine and manages
     * microservice.
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    connectAddress?: pulumi.Input<string>;
    /**
     * Specifies the description of the dedicated microservice.
     * The description can contain a maximum of `256` characters.
     * Changing this will create a new microservice.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the environment (stage) type.
     * The valid values are **development**, **testing**, **acceptance** and **production**.
     * If omitted, the microservice will be deployed in an empty environment.
     * Changing this will create a new microservice.
     */
    environment?: pulumi.Input<string>;
    /**
     * Specifies the microservice level.
     * The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
     */
    level?: pulumi.Input<string>;
    /**
     * Specifies the name of the dedicated microservice.
     * The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
     * allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
     */
    name?: pulumi.Input<string>;
    /**
     * The microservice status. The values supports **UP** and **DOWN**.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the version of the dedicated microservice.
     * Changing this will create a new microservice.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Microservice resource.
 */
export interface MicroserviceArgs {
    /**
     * Specifies the account password for **RBAC** login.
     * The password format must meet the following conditions:
     * + Must be `8` to `32` characters long.
     * + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
     * (-~!@#%^*_=+?$&()|<>{}[]).
     * + Cannot be the account name or account name spelled backwards.
     * + The password can only start with a letter.
     */
    adminPass?: pulumi.Input<string>;
    /**
     * Specifies the account name for **RBAC** login.
     * Changing this will create a new resource.
     */
    adminUser?: pulumi.Input<string>;
    /**
     * Specifies the name of the dedicated microservice application.
     * Changing this will create a new microservice.
     */
    appName: pulumi.Input<string>;
    /**
     * Specifies the address that used to request the access token.  
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    authAddress?: pulumi.Input<string>;
    /**
     * Specifies the address that used to access engine and manages
     * microservice.
     * Usually is the connection address of service center.
     * Changing this will create a new resource.
     */
    connectAddress: pulumi.Input<string>;
    /**
     * Specifies the description of the dedicated microservice.
     * The description can contain a maximum of `256` characters.
     * Changing this will create a new microservice.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the environment (stage) type.
     * The valid values are **development**, **testing**, **acceptance** and **production**.
     * If omitted, the microservice will be deployed in an empty environment.
     * Changing this will create a new microservice.
     */
    environment?: pulumi.Input<string>;
    /**
     * Specifies the microservice level.
     * The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
     */
    level?: pulumi.Input<string>;
    /**
     * Specifies the name of the dedicated microservice.
     * The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
     * allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the version of the dedicated microservice.
     * Changing this will create a new microservice.
     */
    version: pulumi.Input<string>;
}

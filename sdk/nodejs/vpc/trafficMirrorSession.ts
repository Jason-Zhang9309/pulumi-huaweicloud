// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VPC traffic mirror session resource within HuaweiCloud.
 *
 * ## Import
 *
 * The traffic mirror session can be imported using `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession test <id>
 * ```
 */
export class TrafficMirrorSession extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions): TrafficMirrorSession {
        return new TrafficMirrorSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession';

    /**
     * Returns true if the given object is an instance of TrafficMirrorSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorSession.__pulumiType;
    }

    /**
     * The creation time of the traffic mirror session.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies the description of the traffic mirror session.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the mirror session is enabled. Defaults to **true**.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the traffic mirror session.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the maximum transmission unit (MTU).
     * The valid value is range from `1` to `1,460`, defaults to `96`.
     */
    public readonly packetLength!: pulumi.Output<number>;
    /**
     * Specifies the mirror session priority. The value range is **1-32766**.
     * A smaller value indicates a higher priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the traffic mirror filter ID used in the session.
     */
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;
    /**
     * Specifies the mirror source IDs.
     * An elastic network interface can be used as a mirror source.
     */
    public readonly trafficMirrorSources!: pulumi.Output<string[]>;
    /**
     * Specifies the mirror target ID.
     */
    public readonly trafficMirrorTargetId!: pulumi.Output<string>;
    /**
     * Specifies the mirror target type. The value can be:
     * + **eni**: elastic network interface;
     * + **elb**: private network load balancer;
     */
    public readonly trafficMirrorTargetType!: pulumi.Output<string>;
    /**
     * Specifies the mirror source type. The value can be **eni**(elastic network interface).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The latest update time of the traffic mirror session.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the VNI, which is used to distinguish mirrored traffic of
     * different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
     */
    public readonly virtualNetworkId!: pulumi.Output<number>;

    /**
     * Create a TrafficMirrorSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorSessionArgs | TrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMirrorSessionState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetLength"] = state ? state.packetLength : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
            resourceInputs["trafficMirrorSources"] = state ? state.trafficMirrorSources : undefined;
            resourceInputs["trafficMirrorTargetId"] = state ? state.trafficMirrorTargetId : undefined;
            resourceInputs["trafficMirrorTargetType"] = state ? state.trafficMirrorTargetType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as TrafficMirrorSessionArgs | undefined;
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            if ((!args || args.trafficMirrorSources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorSources'");
            }
            if ((!args || args.trafficMirrorTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetId'");
            }
            if ((!args || args.trafficMirrorTargetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetLength"] = args ? args.packetLength : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            resourceInputs["trafficMirrorSources"] = args ? args.trafficMirrorSources : undefined;
            resourceInputs["trafficMirrorTargetId"] = args ? args.trafficMirrorTargetId : undefined;
            resourceInputs["trafficMirrorTargetType"] = args ? args.trafficMirrorTargetType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMirrorSession.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorSession resources.
 */
export interface TrafficMirrorSessionState {
    /**
     * The creation time of the traffic mirror session.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of the traffic mirror session.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the mirror session is enabled. Defaults to **true**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the traffic mirror session.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the maximum transmission unit (MTU).
     * The valid value is range from `1` to `1,460`, defaults to `96`.
     */
    packetLength?: pulumi.Input<number>;
    /**
     * Specifies the mirror session priority. The value range is **1-32766**.
     * A smaller value indicates a higher priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the traffic mirror filter ID used in the session.
     */
    trafficMirrorFilterId?: pulumi.Input<string>;
    /**
     * Specifies the mirror source IDs.
     * An elastic network interface can be used as a mirror source.
     */
    trafficMirrorSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the mirror target ID.
     */
    trafficMirrorTargetId?: pulumi.Input<string>;
    /**
     * Specifies the mirror target type. The value can be:
     * + **eni**: elastic network interface;
     * + **elb**: private network load balancer;
     */
    trafficMirrorTargetType?: pulumi.Input<string>;
    /**
     * Specifies the mirror source type. The value can be **eni**(elastic network interface).
     */
    type?: pulumi.Input<string>;
    /**
     * The latest update time of the traffic mirror session.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the VNI, which is used to distinguish mirrored traffic of
     * different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
     */
    virtualNetworkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TrafficMirrorSession resource.
 */
export interface TrafficMirrorSessionArgs {
    /**
     * Specifies the description of the traffic mirror session.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the mirror session is enabled. Defaults to **true**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the traffic mirror session.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the maximum transmission unit (MTU).
     * The valid value is range from `1` to `1,460`, defaults to `96`.
     */
    packetLength?: pulumi.Input<number>;
    /**
     * Specifies the mirror session priority. The value range is **1-32766**.
     * A smaller value indicates a higher priority.
     */
    priority: pulumi.Input<number>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the traffic mirror filter ID used in the session.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
    /**
     * Specifies the mirror source IDs.
     * An elastic network interface can be used as a mirror source.
     */
    trafficMirrorSources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the mirror target ID.
     */
    trafficMirrorTargetId: pulumi.Input<string>;
    /**
     * Specifies the mirror target type. The value can be:
     * + **eni**: elastic network interface;
     * + **elb**: private network load balancer;
     */
    trafficMirrorTargetType: pulumi.Input<string>;
    /**
     * Specifies the mirror source type. The value can be **eni**(elastic network interface).
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the VNI, which is used to distinguish mirrored traffic of
     * different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
     */
    virtualNetworkId?: pulumi.Input<number>;
}

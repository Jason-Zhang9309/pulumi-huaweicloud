// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VPC subnet private IP resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.requireObject("subnetId");
 * const ipAddress = config.requireObject("ipAddress");
 * const test = new huaweicloud.vpc.SubnetPrivateIp("test", {
 *     subnetId: subnetId,
 *     ipAddress: ipAddress,
 * });
 * ```
 *
 * ## Import
 *
 * The private IP can be imported using the `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp test <id>
 * ```
 */
export class SubnetPrivateIp extends pulumi.CustomResource {
    /**
     * Get an existing SubnetPrivateIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetPrivateIpState, opts?: pulumi.CustomResourceOptions): SubnetPrivateIp {
        return new SubnetPrivateIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp';

    /**
     * Returns true if the given object is an instance of SubnetPrivateIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubnetPrivateIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubnetPrivateIp.__pulumiType;
    }

    /**
     * The resource using the private IP address. The parameter is left blank if it is not used.
     */
    public /*out*/ readonly deviceOwner!: pulumi.Output<string>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IP address. The value must be an unused address
     * within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the ID of the subnet to which the private IP belongs.
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a SubnetPrivateIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetPrivateIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetPrivateIpArgs | SubnetPrivateIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetPrivateIpState | undefined;
            resourceInputs["deviceOwner"] = state ? state.deviceOwner : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as SubnetPrivateIpArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["deviceOwner"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubnetPrivateIp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubnetPrivateIp resources.
 */
export interface SubnetPrivateIpState {
    /**
     * The resource using the private IP address. The parameter is left blank if it is not used.
     */
    deviceOwner?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the IP address. The value must be an unused address
     * within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet to which the private IP belongs.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubnetPrivateIp resource.
 */
export interface SubnetPrivateIpArgs {
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the IP address. The value must be an unused address
     * within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet to which the private IP belongs.
     */
    subnetId: pulumi.Input<string>;
}

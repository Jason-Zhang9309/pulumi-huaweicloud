// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VPC network interface resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject("name");
 * const subnetId = config.requireObject("subnetId");
 * const test = new huaweicloud.vpc.NetworkInterface("test", {subnetId: subnetId});
 * ```
 *
 * ## Import
 *
 * The network interface can be imported using `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Vpc/networkInterface:NetworkInterface test <id>
 * ```
 */
export class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): NetworkInterface {
        return new NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Vpc/networkInterface:NetworkInterface';

    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }

    /**
     * Specifies an array of IP addresses that can be active on the
     * network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
     * check switch is turned off.
     */
    public readonly allowedAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates the availability zone to which the network interface belongs.
     */
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Indicates the ID of the device to which the network interface belongs.
     */
    public /*out*/ readonly deviceId!: pulumi.Output<string>;
    /**
     * Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
     */
    public /*out*/ readonly deviceOwner!: pulumi.Output<string>;
    /**
     * Specifies the DHCP lease time. The value format of value is "Xh",
     * the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
     */
    public readonly dhcpLeaseTime!: pulumi.Output<string>;
    /**
     * Indicates the default private network DNS name of the primary NIC.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * Indicates whether to enable EFI.
     */
    public /*out*/ readonly enableEfi!: pulumi.Output<boolean>;
    /**
     * Specifies the network interface IPv4 address.
     * Changing this creates a new resource.
     */
    public readonly fixedIpV4!: pulumi.Output<string>;
    /**
     * Indicates the ID of the instance to which the network interface belongs.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Indicates the type of the instance to which the network interface belongs.
     */
    public /*out*/ readonly instanceType!: pulumi.Output<string>;
    /**
     * Indicates the Shared bandwidth ID bound to IPv6 network interface.
     */
    public /*out*/ readonly ipv6BandwidthId!: pulumi.Output<string>;
    /**
     * Indicates the network interface MAC address.
     */
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    /**
     * Specifies the network interface name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether the security option is enabled for the network interface.
     * If the option is not enabled, the security group and DHCP snooping do not take effect.
     */
    public /*out*/ readonly portSecurityEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more security group IDs.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Indicates the network interface status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the ID of the subnet to which the network interface belongs.
     * Changing this creates a new resource.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Specifies the network interface tags in the format of key-value pairs.
     * This parameter can only be used in **cn-south-2** for now.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfaceArgs | NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInterfaceState | undefined;
            resourceInputs["allowedAddresses"] = state ? state.allowedAddresses : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["deviceOwner"] = state ? state.deviceOwner : undefined;
            resourceInputs["dhcpLeaseTime"] = state ? state.dhcpLeaseTime : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["enableEfi"] = state ? state.enableEfi : undefined;
            resourceInputs["fixedIpV4"] = state ? state.fixedIpV4 : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipv6BandwidthId"] = state ? state.ipv6BandwidthId : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portSecurityEnabled"] = state ? state.portSecurityEnabled : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetworkInterfaceArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["allowedAddresses"] = args ? args.allowedAddresses : undefined;
            resourceInputs["dhcpLeaseTime"] = args ? args.dhcpLeaseTime : undefined;
            resourceInputs["fixedIpV4"] = args ? args.fixedIpV4 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["deviceId"] = undefined /*out*/;
            resourceInputs["deviceOwner"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["enableEfi"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["ipv6BandwidthId"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["portSecurityEnabled"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterface resources.
 */
export interface NetworkInterfaceState {
    /**
     * Specifies an array of IP addresses that can be active on the
     * network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
     * check switch is turned off.
     */
    allowedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the availability zone to which the network interface belongs.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Indicates the ID of the device to which the network interface belongs.
     */
    deviceId?: pulumi.Input<string>;
    /**
     * Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
     */
    deviceOwner?: pulumi.Input<string>;
    /**
     * Specifies the DHCP lease time. The value format of value is "Xh",
     * the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
     */
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * Indicates the default private network DNS name of the primary NIC.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Indicates whether to enable EFI.
     */
    enableEfi?: pulumi.Input<boolean>;
    /**
     * Specifies the network interface IPv4 address.
     * Changing this creates a new resource.
     */
    fixedIpV4?: pulumi.Input<string>;
    /**
     * Indicates the ID of the instance to which the network interface belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Indicates the type of the instance to which the network interface belongs.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Indicates the Shared bandwidth ID bound to IPv6 network interface.
     */
    ipv6BandwidthId?: pulumi.Input<string>;
    /**
     * Indicates the network interface MAC address.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Specifies the network interface name.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the security option is enabled for the network interface.
     * If the option is not enabled, the security group and DHCP snooping do not take effect.
     */
    portSecurityEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more security group IDs.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the network interface status.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet to which the network interface belongs.
     * Changing this creates a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the network interface tags in the format of key-value pairs.
     * This parameter can only be used in **cn-south-2** for now.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NetworkInterface resource.
 */
export interface NetworkInterfaceArgs {
    /**
     * Specifies an array of IP addresses that can be active on the
     * network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
     * check switch is turned off.
     */
    allowedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the DHCP lease time. The value format of value is "Xh",
     * the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
     */
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * Specifies the network interface IPv4 address.
     * Changing this creates a new resource.
     */
    fixedIpV4?: pulumi.Input<string>;
    /**
     * Specifies the network interface name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more security group IDs.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the ID of the subnet to which the network interface belongs.
     * Changing this creates a new resource.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Specifies the network interface tags in the format of key-value pairs.
     * This parameter can only be used in **cn-south-2** for now.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get the traffic mirror filters.
 *
 * ## Example Usage
 * ### query traffic mirror filter list
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const filterTest1 = pulumi.output(huaweicloud.Vpc.getTrafficMirrorFilters());
 * ```
 * ### query traffic mirror filter by name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const filterTest2 = pulumi.output(huaweicloud.Vpc.getTrafficMirrorFilters({
 *     name: "test-filter",
 * }));
 * ```
 */
export function getTrafficMirrorFilters(args?: GetTrafficMirrorFiltersArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficMirrorFiltersResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Vpc/getTrafficMirrorFilters:getTrafficMirrorFilters", {
        "name": args.name,
        "region": args.region,
        "trafficMirrorFilterId": args.trafficMirrorFilterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrafficMirrorFilters.
 */
export interface GetTrafficMirrorFiltersArgs {
    /**
     * Specifies the name of the traffic mirror filter.
     */
    name?: string;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the ID of the traffic mirror filter.
     */
    trafficMirrorFilterId?: string;
}

/**
 * A collection of values returned by getTrafficMirrorFilters.
 */
export interface GetTrafficMirrorFiltersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Traffic mirror filter name.
     */
    readonly name?: string;
    readonly region: string;
    /**
     * Traffic mirror filter ID.
     */
    readonly trafficMirrorFilterId?: string;
    /**
     * List of traffic mirror filters.
     */
    readonly trafficMirrorFilters: outputs.Vpc.GetTrafficMirrorFiltersTrafficMirrorFilter[];
}

export function getTrafficMirrorFiltersOutput(args?: GetTrafficMirrorFiltersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficMirrorFiltersResult> {
    return pulumi.output(args).apply(a => getTrafficMirrorFilters(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficMirrorFilters.
 */
export interface GetTrafficMirrorFiltersOutputArgs {
    /**
     * Specifies the name of the traffic mirror filter.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the ID of the traffic mirror filter.
     */
    trafficMirrorFilterId?: pulumi.Input<string>;
}

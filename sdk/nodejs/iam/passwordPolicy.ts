// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const enhanced = new huaweicloud.Iam.PasswordPolicy("enhanced", {
 *     minimumPasswordLength: 12,
 *     numberOfRecentPasswordsDisallowed: 2,
 *     passwordCharCombination: 4,
 *     passwordValidityPeriod: 180,
 * });
 * ```
 *
 * ## Import
 *
 * Identity password policy can be imported using the account ID or domain ID, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Iam/passwordPolicy:PasswordPolicy example <your account ID>
 * ```
 */
export class PasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordPolicyState, opts?: pulumi.CustomResourceOptions): PasswordPolicy {
        return new PasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Iam/passwordPolicy:PasswordPolicy';

    /**
     * Returns true if the given object is an instance of PasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordPolicy.__pulumiType;
    }

    /**
     * Specifies the maximum number of times that a character is allowed
     * to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
     * consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
     * identical characters are not allowed in a password.
     */
    public readonly maximumConsecutiveIdenticalChars!: pulumi.Output<number>;
    /**
     * The maximum number of characters that a password can contain.
     */
    public /*out*/ readonly maximumPasswordLength!: pulumi.Output<number>;
    /**
     * Specifies the minimum period (minutes) after which users are allowed to make
     * a password change. The value ranges from `0` to `1,440` and defaults to `0`.
     */
    public readonly minimumPasswordAge!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of characters that a password must contain.
     * The value ranges from `6` to `32` and defaults to `8`.
     */
    public readonly minimumPasswordLength!: pulumi.Output<number | undefined>;
    /**
     * Specifies the member of previously used passwords that are
     * not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
     * set the last three passwords that the user has previously used when setting a new password.
     */
    public readonly numberOfRecentPasswordsDisallowed!: pulumi.Output<number | undefined>;
    /**
     * Specifies the minimum number of character types that a password must contain.
     * The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
     * uppercase letters, lowercase letters, digits, and special characters.
     */
    public readonly passwordCharCombination!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether the password can be the username or the username
     * spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
     * be used as a password.
     */
    public readonly passwordNotUsernameOrInvert!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the password validity period (days).
     * The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
     */
    public readonly passwordValidityPeriod!: pulumi.Output<number>;

    /**
     * Create a PasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordPolicyArgs | PasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordPolicyState | undefined;
            resourceInputs["maximumConsecutiveIdenticalChars"] = state ? state.maximumConsecutiveIdenticalChars : undefined;
            resourceInputs["maximumPasswordLength"] = state ? state.maximumPasswordLength : undefined;
            resourceInputs["minimumPasswordAge"] = state ? state.minimumPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = state ? state.minimumPasswordLength : undefined;
            resourceInputs["numberOfRecentPasswordsDisallowed"] = state ? state.numberOfRecentPasswordsDisallowed : undefined;
            resourceInputs["passwordCharCombination"] = state ? state.passwordCharCombination : undefined;
            resourceInputs["passwordNotUsernameOrInvert"] = state ? state.passwordNotUsernameOrInvert : undefined;
            resourceInputs["passwordValidityPeriod"] = state ? state.passwordValidityPeriod : undefined;
        } else {
            const args = argsOrState as PasswordPolicyArgs | undefined;
            resourceInputs["maximumConsecutiveIdenticalChars"] = args ? args.maximumConsecutiveIdenticalChars : undefined;
            resourceInputs["minimumPasswordAge"] = args ? args.minimumPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = args ? args.minimumPasswordLength : undefined;
            resourceInputs["numberOfRecentPasswordsDisallowed"] = args ? args.numberOfRecentPasswordsDisallowed : undefined;
            resourceInputs["passwordCharCombination"] = args ? args.passwordCharCombination : undefined;
            resourceInputs["passwordNotUsernameOrInvert"] = args ? args.passwordNotUsernameOrInvert : undefined;
            resourceInputs["passwordValidityPeriod"] = args ? args.passwordValidityPeriod : undefined;
            resourceInputs["maximumPasswordLength"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PasswordPolicy resources.
 */
export interface PasswordPolicyState {
    /**
     * Specifies the maximum number of times that a character is allowed
     * to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
     * consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
     * identical characters are not allowed in a password.
     */
    maximumConsecutiveIdenticalChars?: pulumi.Input<number>;
    /**
     * The maximum number of characters that a password can contain.
     */
    maximumPasswordLength?: pulumi.Input<number>;
    /**
     * Specifies the minimum period (minutes) after which users are allowed to make
     * a password change. The value ranges from `0` to `1,440` and defaults to `0`.
     */
    minimumPasswordAge?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of characters that a password must contain.
     * The value ranges from `6` to `32` and defaults to `8`.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Specifies the member of previously used passwords that are
     * not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
     * set the last three passwords that the user has previously used when setting a new password.
     */
    numberOfRecentPasswordsDisallowed?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of character types that a password must contain.
     * The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
     * uppercase letters, lowercase letters, digits, and special characters.
     */
    passwordCharCombination?: pulumi.Input<number>;
    /**
     * Specifies whether the password can be the username or the username
     * spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
     * be used as a password.
     */
    passwordNotUsernameOrInvert?: pulumi.Input<boolean>;
    /**
     * Specifies the password validity period (days).
     * The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
     */
    passwordValidityPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PasswordPolicy resource.
 */
export interface PasswordPolicyArgs {
    /**
     * Specifies the maximum number of times that a character is allowed
     * to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
     * consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
     * identical characters are not allowed in a password.
     */
    maximumConsecutiveIdenticalChars?: pulumi.Input<number>;
    /**
     * Specifies the minimum period (minutes) after which users are allowed to make
     * a password change. The value ranges from `0` to `1,440` and defaults to `0`.
     */
    minimumPasswordAge?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of characters that a password must contain.
     * The value ranges from `6` to `32` and defaults to `8`.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Specifies the member of previously used passwords that are
     * not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
     * set the last three passwords that the user has previously used when setting a new password.
     */
    numberOfRecentPasswordsDisallowed?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of character types that a password must contain.
     * The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
     * uppercase letters, lowercase letters, digits, and special characters.
     */
    passwordCharCombination?: pulumi.Input<number>;
    /**
     * Specifies whether the password can be the username or the username
     * spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
     * be used as a password.
     */
    passwordNotUsernameOrInvert?: pulumi.Input<boolean>;
    /**
     * Specifies the password validity period (days).
     * The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
     */
    passwordValidityPeriod?: pulumi.Input<number>;
}

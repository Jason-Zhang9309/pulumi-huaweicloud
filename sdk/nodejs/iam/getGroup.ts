// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get details of the specified IAM user group.
 *
 * > You *must* have IAM read privileges to use this data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const group = pulumi.output(huaweicloud.Iam.getGroup({
 *     name: "my_group",
 * }));
 * ```
 */
export function getGroup(args?: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Iam/getGroup:getGroup", {
        "description": args.description,
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupArgs {
    /**
     * Specifies the description of the identity group.
     */
    description?: string;
    /**
     * Specifies the ID of the identity group.
     */
    id?: string;
    /**
     * Specifies the name of the identity group.
     */
    name?: string;
}

/**
 * A collection of values returned by getGroup.
 */
export interface GetGroupResult {
    /**
     * Indicates the description of the IAM user.
     */
    readonly description: string;
    /**
     * Indicates the domain the group belongs to.
     */
    readonly domainId: string;
    /**
     * Indicates the ID of the User.
     */
    readonly id: string;
    /**
     * Indicates the IAM user name.
     */
    readonly name: string;
    /**
     * Indicates the users the group contains. Structure is documented below.
     */
    readonly users: outputs.Iam.GetGroupUser[];
}

export function getGroupOutput(args?: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply(a => getGroup(a, opts))
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupOutputArgs {
    /**
     * Specifies the description of the identity group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the identity group.
     */
    id?: pulumi.Input<string>;
    /**
     * Specifies the name of the identity group.
     */
    name?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this resource to register or unregister the Workspace service in HuaweiCloud.
 *
 * ## Example Usage
 * ### Register the Workspace service and use local authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.requireObject("vpcId");
 * const networkIds = config.requireObject("networkIds");
 * const test = new huaweicloud.workspace.Service("test", {
 *     accessMode: "INTERNET",
 *     vpcId: vpcId,
 *     networkIds: networkIds,
 * });
 * ```
 * ## Appendix
 *
 * <a name="secgroupRulesForAdDomainConnection"></a>
 * If a firewall is deployed between Windows AD and the Workspace service, you need to open the following ports on the
 * firewall for the desktops of Workspace service to connect to Windows AD or DNS:
 *
 * | Protocol | Ports | Usage |
 * | ---- | ---- | ---- |
 * | TCP | 135 | RPC protocol (required for LDAP, Distributed File System, and Distributed File Replication) |
 * | UDP | 137 | NetBIOS name resolution (required by the network login service) |
 * | UDP | 138 | NetBIOS datagram service (distributed file system, network login and other services need to use this port) |
 * | TCP | 139 | NetBIOS-SSN Service (Network Basic I/O Interface) |
 * | TCP | 445 | NetBIOS-SSN Service (Network Basic I/O Interface) |
 * | UDP | 445 | NetBIOS-SSN Service (Network Basic I/O Interface) |
 * | TCP | 49152-65535 | RPC dynamic ports (ports that are not hardened and open by AD. If AD is hardened, ports 50152-51151 need to be opened) |
 * | UDP | 49152-65535 | RPC dynamic ports (ports that are not hardened and open by AD. If AD is hardened, ports 50152-51151 need to be opened) |
 * | TCP | 88 | Kerberos Key Distribution Center Service |
 * | UDP | 88 | Kerberos Key Distribution Center Service |
 * | UDP | 123 | Port used by NTP service |
 * | TCP | 389 | LDAP server |
 * | UDP | 389 | LDAP server |
 * | TCP | 464 | Kerberos authentication protocol |
 * | UDP | 464 | Kerberos Authentication Protocol |
 * | UDP | 500 | isakmp |
 * | TCP | 593 | RPC over HTTP |
 * | TCP | 636 | LDAP SSL |
 * | TCP | 53 | DNS server |
 * | UDP | 53 | DNS server |
 *
 * ## Import
 *
 * Service can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Workspace/service:Service test fd3f81cb-d95f-43ce-b342-81b6b5dcadda
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Workspace/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Specifies the access mode of Workspace service.
     * The valid values are as follows:
     * + **INTERNET**: internet access.
     * + **DEDICATED**: dedicated line access.
     * + **BOTH**: both internet access and dedicated access are supported.
     */
    public readonly accessMode!: pulumi.Output<string>;
    /**
     * Specifies the configuration of AD domain.
     * Required if `authType` is **LOCAL_AD**. Make sure that the selected VPC network and the network to which AD
     * belongs can be connected. The object structure is documented below.
     */
    public readonly adDomain!: pulumi.Output<outputs.Workspace.ServiceAdDomain>;
    /**
     * Specifies the authentication type of Workspace service.
     * The valid values are as follows:
     * + **LITE_AS**: Local authentication.
     * + **LOCAL_AD**: Connect to AD domain.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * The subnet segments of the dedicated access.
     */
    public readonly dedicatedSubnets!: pulumi.Output<string[]>;
    /**
     * The desktop security group automatically created under the specified VPC after the service
     * is registered. The object structure is documented below.
     */
    public /*out*/ readonly desktopSecurityGroups!: pulumi.Output<outputs.Workspace.ServiceDesktopSecurityGroup[]>;
    /**
     * Specifies the enterprise ID.
     * The enterprise ID is the unique identification in the Workspace service.
     * If omitted, the system will automatically generate an enterprise ID.
     * The ID can contain `1` to `32` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    public readonly enterpriseId!: pulumi.Output<string>;
    /**
     * The management component security group automatically created under the specified
     * VPC after the service is registered. The object structure is documented below.
     */
    public /*out*/ readonly infrastructureSecurityGroups!: pulumi.Output<outputs.Workspace.ServiceInfrastructureSecurityGroup[]>;
    /**
     * The internet access address.
     * This attribute is returned only when the accessMode is **INTERNET** or **BOTH**.
     */
    public /*out*/ readonly internetAccessAddress!: pulumi.Output<string>;
    /**
     * Specifies the internet access port.
     * The valid value is range from `1,025` to `65,535`.
     */
    public readonly internetAccessPort!: pulumi.Output<number>;
    /**
     * The subnet segment of the management component.
     */
    public readonly managementSubnetCidr!: pulumi.Output<string>;
    /**
     * The network ID list of subnets that the service have.
     * The subnets corresponding to this parameter must be included in the VPC resource corresponding to `vpcId`.
     * These subnet segments cannot conflict with `172.16.0.0/12`.
     */
    public readonly networkIds!: pulumi.Output<string[]>;
    /**
     * The region in which to register the Workspace service.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The current status of the Workspace service.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the VPC ID to which the service belongs.
     * Changing this will create a new resource.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["adDomain"] = state ? state.adDomain : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["dedicatedSubnets"] = state ? state.dedicatedSubnets : undefined;
            resourceInputs["desktopSecurityGroups"] = state ? state.desktopSecurityGroups : undefined;
            resourceInputs["enterpriseId"] = state ? state.enterpriseId : undefined;
            resourceInputs["infrastructureSecurityGroups"] = state ? state.infrastructureSecurityGroups : undefined;
            resourceInputs["internetAccessAddress"] = state ? state.internetAccessAddress : undefined;
            resourceInputs["internetAccessPort"] = state ? state.internetAccessPort : undefined;
            resourceInputs["managementSubnetCidr"] = state ? state.managementSubnetCidr : undefined;
            resourceInputs["networkIds"] = state ? state.networkIds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.accessMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessMode'");
            }
            if ((!args || args.networkIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["adDomain"] = args ? args.adDomain : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["dedicatedSubnets"] = args ? args.dedicatedSubnets : undefined;
            resourceInputs["enterpriseId"] = args ? args.enterpriseId : undefined;
            resourceInputs["internetAccessPort"] = args ? args.internetAccessPort : undefined;
            resourceInputs["managementSubnetCidr"] = args ? args.managementSubnetCidr : undefined;
            resourceInputs["networkIds"] = args ? args.networkIds : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["desktopSecurityGroups"] = undefined /*out*/;
            resourceInputs["infrastructureSecurityGroups"] = undefined /*out*/;
            resourceInputs["internetAccessAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Specifies the access mode of Workspace service.
     * The valid values are as follows:
     * + **INTERNET**: internet access.
     * + **DEDICATED**: dedicated line access.
     * + **BOTH**: both internet access and dedicated access are supported.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Specifies the configuration of AD domain.
     * Required if `authType` is **LOCAL_AD**. Make sure that the selected VPC network and the network to which AD
     * belongs can be connected. The object structure is documented below.
     */
    adDomain?: pulumi.Input<inputs.Workspace.ServiceAdDomain>;
    /**
     * Specifies the authentication type of Workspace service.
     * The valid values are as follows:
     * + **LITE_AS**: Local authentication.
     * + **LOCAL_AD**: Connect to AD domain.
     */
    authType?: pulumi.Input<string>;
    /**
     * The subnet segments of the dedicated access.
     */
    dedicatedSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The desktop security group automatically created under the specified VPC after the service
     * is registered. The object structure is documented below.
     */
    desktopSecurityGroups?: pulumi.Input<pulumi.Input<inputs.Workspace.ServiceDesktopSecurityGroup>[]>;
    /**
     * Specifies the enterprise ID.
     * The enterprise ID is the unique identification in the Workspace service.
     * If omitted, the system will automatically generate an enterprise ID.
     * The ID can contain `1` to `32` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    enterpriseId?: pulumi.Input<string>;
    /**
     * The management component security group automatically created under the specified
     * VPC after the service is registered. The object structure is documented below.
     */
    infrastructureSecurityGroups?: pulumi.Input<pulumi.Input<inputs.Workspace.ServiceInfrastructureSecurityGroup>[]>;
    /**
     * The internet access address.
     * This attribute is returned only when the accessMode is **INTERNET** or **BOTH**.
     */
    internetAccessAddress?: pulumi.Input<string>;
    /**
     * Specifies the internet access port.
     * The valid value is range from `1,025` to `65,535`.
     */
    internetAccessPort?: pulumi.Input<number>;
    /**
     * The subnet segment of the management component.
     */
    managementSubnetCidr?: pulumi.Input<string>;
    /**
     * The network ID list of subnets that the service have.
     * The subnets corresponding to this parameter must be included in the VPC resource corresponding to `vpcId`.
     * These subnet segments cannot conflict with `172.16.0.0/12`.
     */
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to register the Workspace service.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The current status of the Workspace service.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the VPC ID to which the service belongs.
     * Changing this will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Specifies the access mode of Workspace service.
     * The valid values are as follows:
     * + **INTERNET**: internet access.
     * + **DEDICATED**: dedicated line access.
     * + **BOTH**: both internet access and dedicated access are supported.
     */
    accessMode: pulumi.Input<string>;
    /**
     * Specifies the configuration of AD domain.
     * Required if `authType` is **LOCAL_AD**. Make sure that the selected VPC network and the network to which AD
     * belongs can be connected. The object structure is documented below.
     */
    adDomain?: pulumi.Input<inputs.Workspace.ServiceAdDomain>;
    /**
     * Specifies the authentication type of Workspace service.
     * The valid values are as follows:
     * + **LITE_AS**: Local authentication.
     * + **LOCAL_AD**: Connect to AD domain.
     */
    authType?: pulumi.Input<string>;
    /**
     * The subnet segments of the dedicated access.
     */
    dedicatedSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the enterprise ID.
     * The enterprise ID is the unique identification in the Workspace service.
     * If omitted, the system will automatically generate an enterprise ID.
     * The ID can contain `1` to `32` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    enterpriseId?: pulumi.Input<string>;
    /**
     * Specifies the internet access port.
     * The valid value is range from `1,025` to `65,535`.
     */
    internetAccessPort?: pulumi.Input<number>;
    /**
     * The subnet segment of the management component.
     */
    managementSubnetCidr?: pulumi.Input<string>;
    /**
     * The network ID list of subnets that the service have.
     * The subnets corresponding to this parameter must be included in the VPC resource corresponding to `vpcId`.
     * These subnet segments cannot conflict with `172.16.0.0/12`.
     */
    networkIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to register the Workspace service.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the VPC ID to which the service belongs.
     * Changing this will create a new resource.
     */
    vpcId: pulumi.Input<string>;
}

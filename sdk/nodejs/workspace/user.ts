// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Workspace user resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### Create a user that never expires
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const userName = config.requireObject("userName");
 * const emailAddress = config.requireObject("emailAddress");
 * const test = new huaweicloud.workspace.User("test", {
 *     email: emailAddress,
 *     accountExpires: "0",
 *     passwordNeverExpires: false,
 *     enableChangePassword: true,
 *     nextLoginChangePassword: true,
 *     disabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Workspace/user:User test a96e632a399d452eb29e5091e0af806a
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Workspace/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Specifies the user's valid period configuration.
     * + Never expires: **0**.
     * + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
     * The times is in local time, depending on the timezone.
     */
    public readonly accountExpires!: pulumi.Output<string | undefined>;
    /**
     * Specifies the description of user. The maximum length is `255` characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the user is disabled.
     * Defualts to **false**.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the email address of user. The value can contain `1` to `64` characters.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Specifies whether to allow password modification.
     * Defualts to **true**.
     */
    public readonly enableChangePassword!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user is locked.
     */
    public /*out*/ readonly locked!: pulumi.Output<boolean>;
    /**
     * Specifies the user name.
     * + Pure numeric: the valid length is between `1` and `20`.
     * + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
     * dots (.) are allowed. The name must start with a letter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether the next login requires a password reset.
     * Defualts to **true**.
     */
    public readonly nextLoginChangePassword!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the password will never expires.
     * Defualts to **false**.
     */
    public readonly passwordNeverExpires!: pulumi.Output<boolean | undefined>;
    /**
     * The region in which to create the Workspace user resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The number of desktops the user has.
     */
    public /*out*/ readonly totalDesktops!: pulumi.Output<number>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accountExpires"] = state ? state.accountExpires : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enableChangePassword"] = state ? state.enableChangePassword : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextLoginChangePassword"] = state ? state.nextLoginChangePassword : undefined;
            resourceInputs["passwordNeverExpires"] = state ? state.passwordNeverExpires : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["totalDesktops"] = state ? state.totalDesktops : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["accountExpires"] = args ? args.accountExpires : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enableChangePassword"] = args ? args.enableChangePassword : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nextLoginChangePassword"] = args ? args.nextLoginChangePassword : undefined;
            resourceInputs["passwordNeverExpires"] = args ? args.passwordNeverExpires : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["totalDesktops"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Specifies the user's valid period configuration.
     * + Never expires: **0**.
     * + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
     * The times is in local time, depending on the timezone.
     */
    accountExpires?: pulumi.Input<string>;
    /**
     * Specifies the description of user. The maximum length is `255` characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the user is disabled.
     * Defualts to **false**.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Specifies the email address of user. The value can contain `1` to `64` characters.
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies whether to allow password modification.
     * Defualts to **true**.
     */
    enableChangePassword?: pulumi.Input<boolean>;
    /**
     * Whether the user is locked.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Specifies the user name.
     * + Pure numeric: the valid length is between `1` and `20`.
     * + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
     * dots (.) are allowed. The name must start with a letter.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the next login requires a password reset.
     * Defualts to **true**.
     */
    nextLoginChangePassword?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password will never expires.
     * Defualts to **false**.
     */
    passwordNeverExpires?: pulumi.Input<boolean>;
    /**
     * The region in which to create the Workspace user resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The number of desktops the user has.
     */
    totalDesktops?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Specifies the user's valid period configuration.
     * + Never expires: **0**.
     * + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
     * The times is in local time, depending on the timezone.
     */
    accountExpires?: pulumi.Input<string>;
    /**
     * Specifies the description of user. The maximum length is `255` characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the user is disabled.
     * Defualts to **false**.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Specifies the email address of user. The value can contain `1` to `64` characters.
     */
    email: pulumi.Input<string>;
    /**
     * Specifies whether to allow password modification.
     * Defualts to **true**.
     */
    enableChangePassword?: pulumi.Input<boolean>;
    /**
     * Specifies the user name.
     * + Pure numeric: the valid length is between `1` and `20`.
     * + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
     * dots (.) are allowed. The name must start with a letter.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the next login requires a password reset.
     * Defualts to **true**.
     */
    nextLoginChangePassword?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password will never expires.
     * Defualts to **false**.
     */
    passwordNeverExpires?: pulumi.Input<boolean>;
    /**
     * The region in which to create the Workspace user resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Workspace desktop resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Desktops can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Workspace/desktop:Desktop test 339d2539-e945-4090-a08d-c16badc0c6bb
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response. The missing attributes include`nic` and `user_email`. It is generally recommended running `terraform plan` after importing a desktop. You can then decide if changes should be applied to the desktop, or the resource definition should be updated to align with the desktop. Also you can ignore changes as below. resource "huaweicloud_workspace_desktop" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  user_email, nic,
 *
 *  ]
 *
 *  } }
 */
export class Desktop extends pulumi.CustomResource {
    /**
     * Get an existing Desktop resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DesktopState, opts?: pulumi.CustomResourceOptions): Desktop {
        return new Desktop(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Workspace/desktop:Desktop';

    /**
     * Returns true if the given object is an instance of Desktop.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Desktop {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Desktop.__pulumiType;
    }

    /**
     * Specifies the availability zone where the desktop is located.
     * Changing this will create a new resource.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the configuration of data volumes.
     * The object structure is documented below.
     */
    public readonly dataVolumes!: pulumi.Output<outputs.Workspace.DesktopDataVolume[]>;
    /**
     * Specifies whether to delete user associated with this desktop after deleting it.
     * The user can only be successfully deleted if the user has no other desktops.
     */
    public readonly deleteUser!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether to send emails to user mailbox during important
     * operations. Changing this will create a new resource.
     */
    public readonly emailNotification!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the flavor ID of desktop.
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * Specifies the image ID to create the desktop.
     * Changing this will create a new resource.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Specifies the image type. The valid values are as follows:
     * + **market**: The market image.
     * + **gold**: The public image.
     * + **private**: The private image.
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * Specifies the desktop name.
     * The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
     * The name must start with a letter or digit and cannot end with a hyphen.
     * Changing this will create a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the NIC information corresponding to the desktop.
     * The object structure is documented below. Changing this will create a new resource.
     */
    public readonly nics!: pulumi.Output<outputs.Workspace.DesktopNic[] | undefined>;
    /**
     * The region in which to create the Workspace desktop resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the configuration of system volume.
     * The object structure is documented below.
     */
    public readonly rootVolume!: pulumi.Output<outputs.Workspace.DesktopRootVolume>;
    /**
     * Specifies the ID list of security groups.
     * In addition to the custom security group, it must also contain a security group called **WorkspaceUserSecurityGroup**.
     * Changing this will create a new resource.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * Specifies the key/value pairs of the desktop.
     * Changing this will create a new resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the user email.
     * Some operations on the desktop (such as creation, deletion) will notify the user by sending an email.
     * Changing this will create a new resource.
     */
    public readonly userEmail!: pulumi.Output<string>;
    /**
     * Specifies the user group to which the desktop belongs.
     * The valid values are as follows:
     * + **sudo**: Linux administrator group.
     * + **default**: Linux default user group.
     * + **administrators**: Windows administrator group.
     * + **users**: Windows standard user group.
     */
    public readonly userGroup!: pulumi.Output<string>;
    /**
     * Specifies the user name to which the desktop belongs.
     * The name can contain `1` to `20` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     * The name must start with a letter. Changing this will create a new resource.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * Specifies the VPC ID to which the desktop belongs.
     * Changing this will create a new resource.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Desktop resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DesktopArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DesktopArgs | DesktopState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DesktopState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["deleteUser"] = state ? state.deleteUser : undefined;
            resourceInputs["emailNotification"] = state ? state.emailNotification : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nics"] = state ? state.nics : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolume"] = state ? state.rootVolume : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEmail"] = state ? state.userEmail : undefined;
            resourceInputs["userGroup"] = state ? state.userGroup : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DesktopArgs | undefined;
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.imageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageType'");
            }
            if ((!args || args.rootVolume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            if ((!args || args.userEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userEmail'");
            }
            if ((!args || args.userGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroup'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["deleteUser"] = args ? args.deleteUser : undefined;
            resourceInputs["emailNotification"] = args ? args.emailNotification : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nics"] = args ? args.nics : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootVolume"] = args ? args.rootVolume : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEmail"] = args ? args.userEmail : undefined;
            resourceInputs["userGroup"] = args ? args.userGroup : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Desktop.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Desktop resources.
 */
export interface DesktopState {
    /**
     * Specifies the availability zone where the desktop is located.
     * Changing this will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the configuration of data volumes.
     * The object structure is documented below.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Workspace.DesktopDataVolume>[]>;
    /**
     * Specifies whether to delete user associated with this desktop after deleting it.
     * The user can only be successfully deleted if the user has no other desktops.
     */
    deleteUser?: pulumi.Input<boolean>;
    /**
     * Specifies whether to send emails to user mailbox during important
     * operations. Changing this will create a new resource.
     */
    emailNotification?: pulumi.Input<boolean>;
    /**
     * Specifies the flavor ID of desktop.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies the image ID to create the desktop.
     * Changing this will create a new resource.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Specifies the image type. The valid values are as follows:
     * + **market**: The market image.
     * + **gold**: The public image.
     * + **private**: The private image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Specifies the desktop name.
     * The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
     * The name must start with a letter or digit and cannot end with a hyphen.
     * Changing this will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the NIC information corresponding to the desktop.
     * The object structure is documented below. Changing this will create a new resource.
     */
    nics?: pulumi.Input<pulumi.Input<inputs.Workspace.DesktopNic>[]>;
    /**
     * The region in which to create the Workspace desktop resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of system volume.
     * The object structure is documented below.
     */
    rootVolume?: pulumi.Input<inputs.Workspace.DesktopRootVolume>;
    /**
     * Specifies the ID list of security groups.
     * In addition to the custom security group, it must also contain a security group called **WorkspaceUserSecurityGroup**.
     * Changing this will create a new resource.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key/value pairs of the desktop.
     * Changing this will create a new resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the user email.
     * Some operations on the desktop (such as creation, deletion) will notify the user by sending an email.
     * Changing this will create a new resource.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * Specifies the user group to which the desktop belongs.
     * The valid values are as follows:
     * + **sudo**: Linux administrator group.
     * + **default**: Linux default user group.
     * + **administrators**: Windows administrator group.
     * + **users**: Windows standard user group.
     */
    userGroup?: pulumi.Input<string>;
    /**
     * Specifies the user name to which the desktop belongs.
     * The name can contain `1` to `20` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     * The name must start with a letter. Changing this will create a new resource.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies the VPC ID to which the desktop belongs.
     * Changing this will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Desktop resource.
 */
export interface DesktopArgs {
    /**
     * Specifies the availability zone where the desktop is located.
     * Changing this will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the configuration of data volumes.
     * The object structure is documented below.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Workspace.DesktopDataVolume>[]>;
    /**
     * Specifies whether to delete user associated with this desktop after deleting it.
     * The user can only be successfully deleted if the user has no other desktops.
     */
    deleteUser?: pulumi.Input<boolean>;
    /**
     * Specifies whether to send emails to user mailbox during important
     * operations. Changing this will create a new resource.
     */
    emailNotification?: pulumi.Input<boolean>;
    /**
     * Specifies the flavor ID of desktop.
     */
    flavorId: pulumi.Input<string>;
    /**
     * Specifies the image ID to create the desktop.
     * Changing this will create a new resource.
     */
    imageId: pulumi.Input<string>;
    /**
     * Specifies the image type. The valid values are as follows:
     * + **market**: The market image.
     * + **gold**: The public image.
     * + **private**: The private image.
     */
    imageType: pulumi.Input<string>;
    /**
     * Specifies the desktop name.
     * The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
     * The name must start with a letter or digit and cannot end with a hyphen.
     * Changing this will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the NIC information corresponding to the desktop.
     * The object structure is documented below. Changing this will create a new resource.
     */
    nics?: pulumi.Input<pulumi.Input<inputs.Workspace.DesktopNic>[]>;
    /**
     * The region in which to create the Workspace desktop resource.
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of system volume.
     * The object structure is documented below.
     */
    rootVolume: pulumi.Input<inputs.Workspace.DesktopRootVolume>;
    /**
     * Specifies the ID list of security groups.
     * In addition to the custom security group, it must also contain a security group called **WorkspaceUserSecurityGroup**.
     * Changing this will create a new resource.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key/value pairs of the desktop.
     * Changing this will create a new resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the user email.
     * Some operations on the desktop (such as creation, deletion) will notify the user by sending an email.
     * Changing this will create a new resource.
     */
    userEmail: pulumi.Input<string>;
    /**
     * Specifies the user group to which the desktop belongs.
     * The valid values are as follows:
     * + **sudo**: Linux administrator group.
     * + **default**: Linux default user group.
     * + **administrators**: Windows administrator group.
     * + **users**: Windows standard user group.
     */
    userGroup: pulumi.Input<string>;
    /**
     * Specifies the user name to which the desktop belongs.
     * The name can contain `1` to `20` characters, only letters, digits, hyphens (-) and underscores (_) are allowed.
     * The name must start with a letter. Changing this will create a new resource.
     */
    userName: pulumi.Input<string>;
    /**
     * Specifies the VPC ID to which the desktop belongs.
     * Changing this will create a new resource.
     */
    vpcId: pulumi.Input<string>;
}

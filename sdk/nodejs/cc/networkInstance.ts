// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a network instance resource within HuaweiCloud.
 *
 * Load VPCs or virtual gateways to the cloud connection. If you load virtual gateways, your on-premises data center
 * can access multiple VPCs to build a hybrid cloud.
 *
 * Each network instance can be loaded onto only one cloud connection.
 *
 * ## Import
 *
 * The network instance can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cc/networkInstance:NetworkInstance test 0ce123456a00f2591fabc00385ff1234
 * ```
 */
export class NetworkInstance extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInstanceState, opts?: pulumi.CustomResourceOptions): NetworkInstance {
        return new NetworkInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cc/networkInstance:NetworkInstance';

    /**
     * Returns true if the given object is an instance of NetworkInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInstance.__pulumiType;
    }

    /**
     * List of routes advertised by the VPC or virtual gateway.
     */
    public readonly cidrs!: pulumi.Output<string[]>;
    /**
     * Cloud connection ID.
     */
    public readonly cloudConnectionId!: pulumi.Output<string>;
    /**
     * The description about the network instance.  
     * The description can contain a maximum of 255 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Account ID.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * Account ID of the VPC or virtual gateway.
     */
    public readonly instanceDomainId!: pulumi.Output<string>;
    /**
     * ID of the VPC or virtual gateway to be loaded to the cloud connection.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The network instance name.  
     * The name can contain 1 to 64 characters, only letters, Chinese characters, digits, hyphens (-),
     * underscores (_) and dots (.).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID of the VPC or virtual gateway.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Region ID of the VPC or virtual gateway.
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * Network instance status.  
     * The options are as follows:
     * + **ACTIVE**: The network instance is available.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type of the network instance to be loaded to the cloud connection.  
     * The options are as follows:
     * + **vpc**: Virtual Private Cloud.
     * + **vgw**: virtual gateway.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInstanceArgs | NetworkInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInstanceState | undefined;
            resourceInputs["cidrs"] = state ? state.cidrs : undefined;
            resourceInputs["cloudConnectionId"] = state ? state.cloudConnectionId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["instanceDomainId"] = state ? state.instanceDomainId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkInstanceArgs | undefined;
            if ((!args || args.cidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrs'");
            }
            if ((!args || args.cloudConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudConnectionId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cidrs"] = args ? args.cidrs : undefined;
            resourceInputs["cloudConnectionId"] = args ? args.cloudConnectionId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceDomainId"] = args ? args.instanceDomainId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInstance resources.
 */
export interface NetworkInstanceState {
    /**
     * List of routes advertised by the VPC or virtual gateway.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud connection ID.
     */
    cloudConnectionId?: pulumi.Input<string>;
    /**
     * The description about the network instance.  
     * The description can contain a maximum of 255 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Account ID.
     */
    domainId?: pulumi.Input<string>;
    /**
     * Account ID of the VPC or virtual gateway.
     */
    instanceDomainId?: pulumi.Input<string>;
    /**
     * ID of the VPC or virtual gateway to be loaded to the cloud connection.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The network instance name.  
     * The name can contain 1 to 64 characters, only letters, Chinese characters, digits, hyphens (-),
     * underscores (_) and dots (.).
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID of the VPC or virtual gateway.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Region ID of the VPC or virtual gateway.
     */
    regionId?: pulumi.Input<string>;
    /**
     * Network instance status.  
     * The options are as follows:
     * + **ACTIVE**: The network instance is available.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the network instance to be loaded to the cloud connection.  
     * The options are as follows:
     * + **vpc**: Virtual Private Cloud.
     * + **vgw**: virtual gateway.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkInstance resource.
 */
export interface NetworkInstanceArgs {
    /**
     * List of routes advertised by the VPC or virtual gateway.
     */
    cidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud connection ID.
     */
    cloudConnectionId: pulumi.Input<string>;
    /**
     * The description about the network instance.  
     * The description can contain a maximum of 255 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Account ID of the VPC or virtual gateway.
     */
    instanceDomainId?: pulumi.Input<string>;
    /**
     * ID of the VPC or virtual gateway to be loaded to the cloud connection.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The network instance name.  
     * The name can contain 1 to 64 characters, only letters, Chinese characters, digits, hyphens (-),
     * underscores (_) and dots (.).
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID of the VPC or virtual gateway.
     */
    projectId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Region ID of the VPC or virtual gateway.
     */
    regionId: pulumi.Input<string>;
    /**
     * Type of the network instance to be loaded to the cloud connection.  
     * The options are as follows:
     * + **vpc**: Virtual Private Cloud.
     * + **vgw**: virtual gateway.
     */
    type: pulumi.Input<string>;
}

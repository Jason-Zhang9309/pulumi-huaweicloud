// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a link resource within HuaweiCloud. A link enables the CDM cluster to read data from and write data to
 *  a data source.
 *
 * ## Example Usage
 * ### Link to MySql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const mysqlLinkName = config.requireObject("mysqlLinkName");
 * const cdmClusterId = config.requireObject("cdmClusterId");
 * const mysqlHost = config.requireObject("mysqlHost");
 * const dbName = config.requireObject("dbName");
 * const dbPassword = config.requireObject("dbPassword");
 * const mysqlLink = new huaweicloud.cdm.Link("mysqlLink", {
 *     connector: "generic-jdbc-connector",
 *     clusterId: cdmClusterId,
 *     config: {
 *         databaseType: "MYSQL",
 *         host: mysqlHost,
 *         port: "3306",
 *         database: dbName,
 *         username: _var.username,
 *     },
 *     password: dbPassword,
 * });
 * ```
 *
 * ## Import
 *
 * The link can be imported by `id`, It is composed of the ID of CDM cluster and the name of job, separated by a slash.
 *
 * For example, bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cdm/link:Link test b11b407c-e604-4e8d-8bc4-92398320b847/linkName
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`password` and `secret_key`. It is generally recommended running `terraform plan` after importing an instance. You can then decide if changes should be applied to the instance, or the resource definition should be updated to align with the instance. Also you can ignore changes as below. hcl resource "huaweicloud_cdm_link" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  password, secret_key,
 *
 *  ]
 *
 *  } }
 */
export class Link extends pulumi.CustomResource {
    /**
     * Get an existing Link resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkState, opts?: pulumi.CustomResourceOptions): Link {
        return new Link(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cdm/link:Link';

    /**
     * Returns true if the given object is an instance of Link.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Link {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Link.__pulumiType;
    }

    /**
     * Specifies access key for accessing the data sources.
     */
    public readonly accessKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the id of CDM cluster which this link belongs to.
     * Changing this parameter will create a new resource.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Specifies the link configuration parameters. Each type of the data source to be connected
     * has different configuration parameters, please refer to the document link below.
     */
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the connector that is classified based on the type of the data
     * source to be connected. Changing this parameter will create a new resource. The options are as follows:
     */
    public readonly connector!: pulumi.Output<string>;
    /**
     * Specifies whether to enable the link. The default value is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the link.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the password for accessing the data sources.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies security key for accessing the data sources.
     */
    public readonly secretKey!: pulumi.Output<string | undefined>;

    /**
     * Create a Link resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkArgs | LinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
        } else {
            const args = argsOrState as LinkArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.connector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connector'");
            }
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connector"] = args ? args.connector : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretKey"] = args ? args.secretKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Link.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Link resources.
 */
export interface LinkState {
    /**
     * Specifies access key for accessing the data sources.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Specifies the id of CDM cluster which this link belongs to.
     * Changing this parameter will create a new resource.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies the link configuration parameters. Each type of the data source to be connected
     * has different configuration parameters, please refer to the document link below.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the connector that is classified based on the type of the data
     * source to be connected. Changing this parameter will create a new resource. The options are as follows:
     */
    connector?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the link. The default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the link.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password for accessing the data sources.
     */
    password?: pulumi.Input<string>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies security key for accessing the data sources.
     */
    secretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Link resource.
 */
export interface LinkArgs {
    /**
     * Specifies access key for accessing the data sources.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Specifies the id of CDM cluster which this link belongs to.
     * Changing this parameter will create a new resource.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the link configuration parameters. Each type of the data source to be connected
     * has different configuration parameters, please refer to the document link below.
     */
    config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the connector that is classified based on the type of the data
     * source to be connected. Changing this parameter will create a new resource. The options are as follows:
     */
    connector: pulumi.Input<string>;
    /**
     * Specifies whether to enable the link. The default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the link.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password for accessing the data sources.
     */
    password?: pulumi.Input<string>;
    /**
     * The region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies security key for accessing the data sources.
     */
    secretKey?: pulumi.Input<string>;
}

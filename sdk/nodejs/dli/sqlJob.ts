// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages DLI SQL job resource within HuaweiCloud
 *
 * ## Example Usage
 * ### Create a Sql job
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const databaseName = config.requireObject("databaseName");
 * const queueName = config.requireObject("queueName");
 * const sql = config.requireObject("sql");
 * const test = new huaweicloud.dli.SqlJob("test", {
 *     sql: sql,
 *     databaseName: databaseName,
 *     queueName: queueName,
 * });
 * ```
 *
 * ## Import
 *
 * DLI SQL job can be imported by `id`. For example,
 *
 * ```sh
 *  $ pulumi import huaweicloud:Dli/sqlJob:SqlJob example 7f803d70-c533-469f-8431-e378f3e97123
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`conf`, `rows` and `schema`. It is generally recommended running `terraform plan` after importing a resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also you can ignore changes as below. resource "huaweicloud_dli_sql_job" "test" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  conf, rows, schema
 *
 *  ]
 *
 *  } }
 */
export class SqlJob extends pulumi.CustomResource {
    /**
     * Get an existing SqlJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlJobState, opts?: pulumi.CustomResourceOptions): SqlJob {
        return new SqlJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Dli/sqlJob:SqlJob';

    /**
     * Returns true if the given object is an instance of SqlJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlJob.__pulumiType;
    }

    /**
     * Specifies the configuration parameters for the SQL job. Changing this parameter
     * will create a new resource. Structure is documented below.
     */
    public readonly conf!: pulumi.Output<outputs.Dli.SqlJobConf | undefined>;
    /**
     * Specifies the database where the SQL is executed. This argument does
     * not need to be configured during database creation. Changing this parameter will create a new resource.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * Job running duration (unit: millisecond).
     */
    public /*out*/ readonly duration!: pulumi.Output<number>;
    /**
     * Type of a job, Includes **DDL**, **DCL**, **IMPORT**, **EXPORT**, **QUERY**, **INSERT**,
     * **DATA_MIGRATION**, **UPDATE**, **DELETE**, **RESTART_QUEUE** and **SCALE_QUEUE**.
     */
    public /*out*/ readonly jobType!: pulumi.Output<string>;
    /**
     * User who submits a job.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Specifies queue which this job to be submitted belongs.
     * Changing this parameter will create a new resource.
     */
    public readonly queueName!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the DLI table resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * When the statement type is DDL, results of the DDL are displayed.
     */
    public /*out*/ readonly rows!: pulumi.Output<string[][]>;
    /**
     * When the statement type is DDL, the column name and type of DDL are displayed.
     */
    public /*out*/ readonly schemas!: pulumi.Output<{[key: string]: string}[]>;
    /**
     * Specifies SQL statement that you want to execute.
     * Changing this parameter will create a new resource.
     */
    public readonly sql!: pulumi.Output<string>;
    /**
     * Time when a job is started, in RFC-3339 format. e.g. `2019-10-12T07:20:50.52Z`
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * Status of a job, including **RUNNING**, **SCALING**, **LAUNCHING**, **FINISHED**, **FAILED**,
     * and **CANCELLED.**
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies label of a Job. Changing this parameter will create a new resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SqlJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlJobArgs | SqlJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlJobState | undefined;
            resourceInputs["conf"] = state ? state.conf : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rows"] = state ? state.rows : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SqlJobArgs | undefined;
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            resourceInputs["conf"] = args ? args.conf : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["jobType"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["rows"] = undefined /*out*/;
            resourceInputs["schemas"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlJob resources.
 */
export interface SqlJobState {
    /**
     * Specifies the configuration parameters for the SQL job. Changing this parameter
     * will create a new resource. Structure is documented below.
     */
    conf?: pulumi.Input<inputs.Dli.SqlJobConf>;
    /**
     * Specifies the database where the SQL is executed. This argument does
     * not need to be configured during database creation. Changing this parameter will create a new resource.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Job running duration (unit: millisecond).
     */
    duration?: pulumi.Input<number>;
    /**
     * Type of a job, Includes **DDL**, **DCL**, **IMPORT**, **EXPORT**, **QUERY**, **INSERT**,
     * **DATA_MIGRATION**, **UPDATE**, **DELETE**, **RESTART_QUEUE** and **SCALE_QUEUE**.
     */
    jobType?: pulumi.Input<string>;
    /**
     * User who submits a job.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies queue which this job to be submitted belongs.
     * Changing this parameter will create a new resource.
     */
    queueName?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the DLI table resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * When the statement type is DDL, results of the DDL are displayed.
     */
    rows?: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * When the statement type is DDL, the column name and type of DDL are displayed.
     */
    schemas?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Specifies SQL statement that you want to execute.
     * Changing this parameter will create a new resource.
     */
    sql?: pulumi.Input<string>;
    /**
     * Time when a job is started, in RFC-3339 format. e.g. `2019-10-12T07:20:50.52Z`
     */
    startTime?: pulumi.Input<string>;
    /**
     * Status of a job, including **RUNNING**, **SCALING**, **LAUNCHING**, **FINISHED**, **FAILED**,
     * and **CANCELLED.**
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies label of a Job. Changing this parameter will create a new resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SqlJob resource.
 */
export interface SqlJobArgs {
    /**
     * Specifies the configuration parameters for the SQL job. Changing this parameter
     * will create a new resource. Structure is documented below.
     */
    conf?: pulumi.Input<inputs.Dli.SqlJobConf>;
    /**
     * Specifies the database where the SQL is executed. This argument does
     * not need to be configured during database creation. Changing this parameter will create a new resource.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Specifies queue which this job to be submitted belongs.
     * Changing this parameter will create a new resource.
     */
    queueName?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the DLI table resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies SQL statement that you want to execute.
     * Changing this parameter will create a new resource.
     */
    sql: pulumi.Input<string>;
    /**
     * Specifies label of a Job. Changing this parameter will create a new resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

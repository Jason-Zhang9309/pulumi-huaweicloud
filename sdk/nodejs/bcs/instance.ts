// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Bcs/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The agent addresses and port numbers on the user data plane of the BCS service.
     * * `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
     * * `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
     * `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
     * * `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
     * the organization, and the numerator is the number of normal peers.
     * * `peer_orgs/address/domain_port` - The domain name address.
     * * `peer_orgs/address/ip_port` - The IP address.
     * * `kafka/name` - The Kafka instance name.
     */
    public /*out*/ readonly agentPortalAddresses!: pulumi.Output<string[]>;
    /**
     * Specifies the configuration of block generation. The blockInfo object
     * structure is documented below.
     */
    public readonly blockInfo!: pulumi.Output<outputs.Bcs.InstanceBlockInfo | undefined>;
    /**
     * Specifies the blockchain type of the BCS instance. Valid values
     * are `private` and  `union`. Default is `private`. Changing this will create a new instance.
     */
    public readonly blockchainType!: pulumi.Output<string>;
    /**
     * Specifies the ID of the CCE cluster to attach to the BCS instance. The
     * BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
     * deploying the BCS service. Changing this will create a new instance.
     */
    public readonly cceClusterId!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more channels to attach to the BCS instance. If
     * omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
     * instance. The channels object structure is documented below.
     */
    public readonly channels!: pulumi.Output<outputs.Bcs.InstanceChannel[]>;
    public /*out*/ readonly clusterType!: pulumi.Output<string>;
    /**
     * Specifies the consensus algorithm used by the BCS instance. The valid
     * values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
     * and `etcdraft`. Changing this will create a new instance.
     */
    public readonly consensus!: pulumi.Output<string>;
    /**
     * Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
     * will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
     * object structure is documented below.
     */
    public readonly couchdb!: pulumi.Output<outputs.Bcs.InstanceCouchdb | undefined>;
    /**
     * Whether the BCS instance is deployed across regions.
     */
    public /*out*/ readonly crossRegionSupport!: pulumi.Output<boolean>;
    public readonly databaseType!: pulumi.Output<string>;
    /**
     * Specified whether to delete the associated OBS bucket when deleting BCS instance.
     * `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
     */
    public readonly deleteObs!: pulumi.Output<boolean | undefined>;
    /**
     * Specified whether to delete the associated SFS resources when deleting BCS
     * instance. Default is false.
     */
    public readonly deleteStorage!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
     * . Changing this will create a new instance.
     */
    public readonly edition!: pulumi.Output<number>;
    /**
     * Specifies whether to use the EIP of the CCE to bind the BCS instance.
     * Changing this will create a new instance. Defalut is true.
     */
    public readonly eipEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the ID of the enterprise project that the BCS
     * instance belong to. Changing this will create a new instance.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies version of fabric for the BCS instance. Valid values
     * are `1.4` and `2.0`
     * Changing this will create a new instance.
     */
    public readonly fabricVersion!: pulumi.Output<string>;
    /**
     * Specifies the kafka configuration for the BCS instance. Changing this will create
     * a new instance. The kafka object structure is documented below.
     */
    public readonly kafka!: pulumi.Output<outputs.Bcs.InstanceKafka | undefined>;
    /**
     * Specifies the name of the channel. Changing this creates a new instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The version of an old BCS service.
     */
    public /*out*/ readonly oldServiceVersion!: pulumi.Output<string>;
    /**
     * Specifies the number of peers in the orderer organizaion. Changing this
     * will create a new instance.
     */
    public readonly ordererNodeNum!: pulumi.Output<number>;
    /**
     * Specifies the storage capacity of peer organization. Changing this will
     * create a new instance.
     * + The minimum storage capacity of `efs` volume type is 500GB.
     */
    public readonly orgDiskSize!: pulumi.Output<number>;
    /**
     * Specifies the password of the couch datebase. The password consists of 8 to
     * 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
     * charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more Peer organizations to attach to the BCS
     * instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
     * named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
     */
    public readonly peerOrgs!: pulumi.Output<outputs.Bcs.InstancePeerOrg[]>;
    /**
     * The deployment type of the BCS instance.
     */
    public /*out*/ readonly purchaseType!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the instance. If omitted, the
     * provider-level region will be used. Changing this will create a new instance.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specified whether to add RESTful API support. Changing this will
     * create a new instance.
     */
    public readonly restfulApiSupport!: pulumi.Output<boolean>;
    /**
     * Whether rollback is supported when the BCS service fails to br upgraded.
     */
    public /*out*/ readonly rollbackSupport!: pulumi.Output<boolean>;
    /**
     * Specifies the secutity mechanism used by the BCS instance. Valid
     * values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
     * algorithm). Default is `ECDSA`. Changing this will create a new instance.
     */
    public readonly securityMechanism!: pulumi.Output<string>;
    /**
     * Specifies the information about the SFS Turbo file system. Changing this will
     * create a new instance. The sfsTurbo object structure is documented below.
     */
    public readonly sfsTurbo!: pulumi.Output<outputs.Bcs.InstanceSfsTurbo | undefined>;
    /**
     * The status of the BCS instance.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specified whether to add Trusted computing platform. Changing this will create
     * a new instance.
     */
    public readonly tc3Need!: pulumi.Output<boolean>;
    /**
     * The service verison of the BCS instance.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * Specifies the storage volume type to attach to each organization of the
     * BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
     */
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["agentPortalAddresses"] = state ? state.agentPortalAddresses : undefined;
            resourceInputs["blockInfo"] = state ? state.blockInfo : undefined;
            resourceInputs["blockchainType"] = state ? state.blockchainType : undefined;
            resourceInputs["cceClusterId"] = state ? state.cceClusterId : undefined;
            resourceInputs["channels"] = state ? state.channels : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["consensus"] = state ? state.consensus : undefined;
            resourceInputs["couchdb"] = state ? state.couchdb : undefined;
            resourceInputs["crossRegionSupport"] = state ? state.crossRegionSupport : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["deleteObs"] = state ? state.deleteObs : undefined;
            resourceInputs["deleteStorage"] = state ? state.deleteStorage : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["eipEnable"] = state ? state.eipEnable : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["fabricVersion"] = state ? state.fabricVersion : undefined;
            resourceInputs["kafka"] = state ? state.kafka : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oldServiceVersion"] = state ? state.oldServiceVersion : undefined;
            resourceInputs["ordererNodeNum"] = state ? state.ordererNodeNum : undefined;
            resourceInputs["orgDiskSize"] = state ? state.orgDiskSize : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["peerOrgs"] = state ? state.peerOrgs : undefined;
            resourceInputs["purchaseType"] = state ? state.purchaseType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["restfulApiSupport"] = state ? state.restfulApiSupport : undefined;
            resourceInputs["rollbackSupport"] = state ? state.rollbackSupport : undefined;
            resourceInputs["securityMechanism"] = state ? state.securityMechanism : undefined;
            resourceInputs["sfsTurbo"] = state ? state.sfsTurbo : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tc3Need"] = state ? state.tc3Need : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.cceClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cceClusterId'");
            }
            if ((!args || args.consensus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consensus'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.enterpriseProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enterpriseProjectId'");
            }
            if ((!args || args.fabricVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fabricVersion'");
            }
            if ((!args || args.ordererNodeNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ordererNodeNum'");
            }
            if ((!args || args.orgDiskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgDiskSize'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.volumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["blockInfo"] = args ? args.blockInfo : undefined;
            resourceInputs["blockchainType"] = args ? args.blockchainType : undefined;
            resourceInputs["cceClusterId"] = args ? args.cceClusterId : undefined;
            resourceInputs["channels"] = args ? args.channels : undefined;
            resourceInputs["consensus"] = args ? args.consensus : undefined;
            resourceInputs["couchdb"] = args ? args.couchdb : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["deleteObs"] = args ? args.deleteObs : undefined;
            resourceInputs["deleteStorage"] = args ? args.deleteStorage : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["eipEnable"] = args ? args.eipEnable : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["fabricVersion"] = args ? args.fabricVersion : undefined;
            resourceInputs["kafka"] = args ? args.kafka : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ordererNodeNum"] = args ? args.ordererNodeNum : undefined;
            resourceInputs["orgDiskSize"] = args ? args.orgDiskSize : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["peerOrgs"] = args ? args.peerOrgs : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["restfulApiSupport"] = args ? args.restfulApiSupport : undefined;
            resourceInputs["securityMechanism"] = args ? args.securityMechanism : undefined;
            resourceInputs["sfsTurbo"] = args ? args.sfsTurbo : undefined;
            resourceInputs["tc3Need"] = args ? args.tc3Need : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["agentPortalAddresses"] = undefined /*out*/;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["crossRegionSupport"] = undefined /*out*/;
            resourceInputs["oldServiceVersion"] = undefined /*out*/;
            resourceInputs["purchaseType"] = undefined /*out*/;
            resourceInputs["rollbackSupport"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The agent addresses and port numbers on the user data plane of the BCS service.
     * * `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
     * * `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
     * `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
     * * `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
     * the organization, and the numerator is the number of normal peers.
     * * `peer_orgs/address/domain_port` - The domain name address.
     * * `peer_orgs/address/ip_port` - The IP address.
     * * `kafka/name` - The Kafka instance name.
     */
    agentPortalAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration of block generation. The blockInfo object
     * structure is documented below.
     */
    blockInfo?: pulumi.Input<inputs.Bcs.InstanceBlockInfo>;
    /**
     * Specifies the blockchain type of the BCS instance. Valid values
     * are `private` and  `union`. Default is `private`. Changing this will create a new instance.
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * Specifies the ID of the CCE cluster to attach to the BCS instance. The
     * BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
     * deploying the BCS service. Changing this will create a new instance.
     */
    cceClusterId?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more channels to attach to the BCS instance. If
     * omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
     * instance. The channels object structure is documented below.
     */
    channels?: pulumi.Input<pulumi.Input<inputs.Bcs.InstanceChannel>[]>;
    clusterType?: pulumi.Input<string>;
    /**
     * Specifies the consensus algorithm used by the BCS instance. The valid
     * values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
     * and `etcdraft`. Changing this will create a new instance.
     */
    consensus?: pulumi.Input<string>;
    /**
     * Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
     * will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
     * object structure is documented below.
     */
    couchdb?: pulumi.Input<inputs.Bcs.InstanceCouchdb>;
    /**
     * Whether the BCS instance is deployed across regions.
     */
    crossRegionSupport?: pulumi.Input<boolean>;
    databaseType?: pulumi.Input<string>;
    /**
     * Specified whether to delete the associated OBS bucket when deleting BCS instance.
     * `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
     */
    deleteObs?: pulumi.Input<boolean>;
    /**
     * Specified whether to delete the associated SFS resources when deleting BCS
     * instance. Default is false.
     */
    deleteStorage?: pulumi.Input<boolean>;
    /**
     * Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
     * . Changing this will create a new instance.
     */
    edition?: pulumi.Input<number>;
    /**
     * Specifies whether to use the EIP of the CCE to bind the BCS instance.
     * Changing this will create a new instance. Defalut is true.
     */
    eipEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the enterprise project that the BCS
     * instance belong to. Changing this will create a new instance.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies version of fabric for the BCS instance. Valid values
     * are `1.4` and `2.0`
     * Changing this will create a new instance.
     */
    fabricVersion?: pulumi.Input<string>;
    /**
     * Specifies the kafka configuration for the BCS instance. Changing this will create
     * a new instance. The kafka object structure is documented below.
     */
    kafka?: pulumi.Input<inputs.Bcs.InstanceKafka>;
    /**
     * Specifies the name of the channel. Changing this creates a new instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of an old BCS service.
     */
    oldServiceVersion?: pulumi.Input<string>;
    /**
     * Specifies the number of peers in the orderer organizaion. Changing this
     * will create a new instance.
     */
    ordererNodeNum?: pulumi.Input<number>;
    /**
     * Specifies the storage capacity of peer organization. Changing this will
     * create a new instance.
     * + The minimum storage capacity of `efs` volume type is 500GB.
     */
    orgDiskSize?: pulumi.Input<number>;
    /**
     * Specifies the password of the couch datebase. The password consists of 8 to
     * 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
     * charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more Peer organizations to attach to the BCS
     * instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
     * named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
     */
    peerOrgs?: pulumi.Input<pulumi.Input<inputs.Bcs.InstancePeerOrg>[]>;
    /**
     * The deployment type of the BCS instance.
     */
    purchaseType?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the instance. If omitted, the
     * provider-level region will be used. Changing this will create a new instance.
     */
    region?: pulumi.Input<string>;
    /**
     * Specified whether to add RESTful API support. Changing this will
     * create a new instance.
     */
    restfulApiSupport?: pulumi.Input<boolean>;
    /**
     * Whether rollback is supported when the BCS service fails to br upgraded.
     */
    rollbackSupport?: pulumi.Input<boolean>;
    /**
     * Specifies the secutity mechanism used by the BCS instance. Valid
     * values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
     * algorithm). Default is `ECDSA`. Changing this will create a new instance.
     */
    securityMechanism?: pulumi.Input<string>;
    /**
     * Specifies the information about the SFS Turbo file system. Changing this will
     * create a new instance. The sfsTurbo object structure is documented below.
     */
    sfsTurbo?: pulumi.Input<inputs.Bcs.InstanceSfsTurbo>;
    /**
     * The status of the BCS instance.
     */
    status?: pulumi.Input<string>;
    /**
     * Specified whether to add Trusted computing platform. Changing this will create
     * a new instance.
     */
    tc3Need?: pulumi.Input<boolean>;
    /**
     * The service verison of the BCS instance.
     */
    version?: pulumi.Input<string>;
    /**
     * Specifies the storage volume type to attach to each organization of the
     * BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Specifies the configuration of block generation. The blockInfo object
     * structure is documented below.
     */
    blockInfo?: pulumi.Input<inputs.Bcs.InstanceBlockInfo>;
    /**
     * Specifies the blockchain type of the BCS instance. Valid values
     * are `private` and  `union`. Default is `private`. Changing this will create a new instance.
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * Specifies the ID of the CCE cluster to attach to the BCS instance. The
     * BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
     * deploying the BCS service. Changing this will create a new instance.
     */
    cceClusterId: pulumi.Input<string>;
    /**
     * Specifies an array of one or more channels to attach to the BCS instance. If
     * omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
     * instance. The channels object structure is documented below.
     */
    channels?: pulumi.Input<pulumi.Input<inputs.Bcs.InstanceChannel>[]>;
    /**
     * Specifies the consensus algorithm used by the BCS instance. The valid
     * values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
     * and `etcdraft`. Changing this will create a new instance.
     */
    consensus: pulumi.Input<string>;
    /**
     * Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
     * will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
     * object structure is documented below.
     */
    couchdb?: pulumi.Input<inputs.Bcs.InstanceCouchdb>;
    databaseType?: pulumi.Input<string>;
    /**
     * Specified whether to delete the associated OBS bucket when deleting BCS instance.
     * `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
     */
    deleteObs?: pulumi.Input<boolean>;
    /**
     * Specified whether to delete the associated SFS resources when deleting BCS
     * instance. Default is false.
     */
    deleteStorage?: pulumi.Input<boolean>;
    /**
     * Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
     * . Changing this will create a new instance.
     */
    edition: pulumi.Input<number>;
    /**
     * Specifies whether to use the EIP of the CCE to bind the BCS instance.
     * Changing this will create a new instance. Defalut is true.
     */
    eipEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the enterprise project that the BCS
     * instance belong to. Changing this will create a new instance.
     */
    enterpriseProjectId: pulumi.Input<string>;
    /**
     * Specifies version of fabric for the BCS instance. Valid values
     * are `1.4` and `2.0`
     * Changing this will create a new instance.
     */
    fabricVersion: pulumi.Input<string>;
    /**
     * Specifies the kafka configuration for the BCS instance. Changing this will create
     * a new instance. The kafka object structure is documented below.
     */
    kafka?: pulumi.Input<inputs.Bcs.InstanceKafka>;
    /**
     * Specifies the name of the channel. Changing this creates a new instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the number of peers in the orderer organizaion. Changing this
     * will create a new instance.
     */
    ordererNodeNum: pulumi.Input<number>;
    /**
     * Specifies the storage capacity of peer organization. Changing this will
     * create a new instance.
     * + The minimum storage capacity of `efs` volume type is 500GB.
     */
    orgDiskSize: pulumi.Input<number>;
    /**
     * Specifies the password of the couch datebase. The password consists of 8 to
     * 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
     * charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
     */
    password: pulumi.Input<string>;
    /**
     * Specifies an array of one or more Peer organizations to attach to the BCS
     * instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
     * named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
     */
    peerOrgs?: pulumi.Input<pulumi.Input<inputs.Bcs.InstancePeerOrg>[]>;
    /**
     * Specifies the region in which to create the instance. If omitted, the
     * provider-level region will be used. Changing this will create a new instance.
     */
    region?: pulumi.Input<string>;
    /**
     * Specified whether to add RESTful API support. Changing this will
     * create a new instance.
     */
    restfulApiSupport?: pulumi.Input<boolean>;
    /**
     * Specifies the secutity mechanism used by the BCS instance. Valid
     * values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
     * algorithm). Default is `ECDSA`. Changing this will create a new instance.
     */
    securityMechanism?: pulumi.Input<string>;
    /**
     * Specifies the information about the SFS Turbo file system. Changing this will
     * create a new instance. The sfsTurbo object structure is documented below.
     */
    sfsTurbo?: pulumi.Input<inputs.Bcs.InstanceSfsTurbo>;
    /**
     * Specified whether to add Trusted computing platform. Changing this will create
     * a new instance.
     */
    tc3Need?: pulumi.Input<boolean>;
    /**
     * Specifies the storage volume type to attach to each organization of the
     * BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
     */
    volumeType: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get a list of SMS source servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const serverName = config.requireObject("serverName");
 * const demo = huaweicloud.Sms.getSourceServers({
 *     name: serverName,
 * });
 * ```
 */
export function getSourceServers(args?: GetSourceServersArgs, opts?: pulumi.InvokeOptions): Promise<GetSourceServersResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Sms/getSourceServers:getSourceServers", {
        "id": args.id,
        "ip": args.ip,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getSourceServers.
 */
export interface GetSourceServersArgs {
    /**
     * Specifies the ID of the source server.
     */
    id?: string;
    /**
     * Specifies the IP address of the source server.
     */
    ip?: string;
    /**
     * Specifies the name of the source server.
     */
    name?: string;
    /**
     * Specifies the status of the source server.
     */
    state?: string;
}

/**
 * A collection of values returned by getSourceServers.
 */
export interface GetSourceServersResult {
    /**
     * The ID of the source server.
     */
    readonly id: string;
    /**
     * The IP address of the source server.
     */
    readonly ip?: string;
    /**
     * The disk name, for example, /dev/vda.
     */
    readonly name?: string;
    /**
     * An array of SMS source servers found. Structure is documented below.
     */
    readonly servers: outputs.Sms.GetSourceServersServer[];
    /**
     * The status of the source server.
     */
    readonly state?: string;
}

export function getSourceServersOutput(args?: GetSourceServersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSourceServersResult> {
    return pulumi.output(args).apply(a => getSourceServers(a, opts))
}

/**
 * A collection of arguments for invoking getSourceServers.
 */
export interface GetSourceServersOutputArgs {
    /**
     * Specifies the ID of the source server.
     */
    id?: pulumi.Input<string>;
    /**
     * Specifies the IP address of the source server.
     */
    ip?: pulumi.Input<string>;
    /**
     * Specifies the name of the source server.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the status of the source server.
     */
    state?: pulumi.Input<string>;
}

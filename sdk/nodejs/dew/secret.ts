// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages CSMS(Cloud Secret Management Service) secrets within HuaweiCloud.
 *
 * ## Example Usage
 * ### Encrypt Plaintext
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const test1 = new huaweicloud.Dew.Secret("test1", {
 *     secretText: "this is a password",
 * });
 * ```
 * ### Encrypt JSON Data
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const test2 = new huaweicloud.dew.Secret("test2", {secretText: JSON.stringify({
 *     username: "admin",
 *     password: "123456",
 * })});
 * ```
 * ### Encrypt String Binary
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const secretBinary = config.requireObject("secretBinary");
 * const test3 = new huaweicloud.dew.Secret("test3", {secretBinary: secretBinary});
 * ```
 *
 * ## Import
 *
 * CSMS secret can be imported using the ID and the name of secret, separated by a slash, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Dew/secret:Secret test <id>/<name>
 * ```
 */
export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Dew/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * Time when the CSMS secrets created, in UTC format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Specifies the description of a secret.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project ID to which the secret belongs.
     * If omitted, the default enterprise project will be used.
     * If the enterprise project function is not enabled, ignore this parameter.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the event list associated with the secret.
     * Currently, only one event can be associated.
     */
    public readonly eventSubscriptions!: pulumi.Output<string | undefined>;
    /**
     * Specifies the expiration time of a secret, `expireTime` can only be edited
     * when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
     * from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
     */
    public readonly expireTime!: pulumi.Output<number>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The latest version id.
     */
    public /*out*/ readonly latestVersion!: pulumi.Output<string>;
    /**
     * Specifies the secret name. The maximum length is 64 characters.
     * Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the CSMS secrets.
     * If omitted, the provider-level region will be used. Changing this setting will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
     * the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
     */
    public readonly secretBinary!: pulumi.Output<string | undefined>;
    /**
     * The secret ID in UUID format.
     */
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    /**
     * Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
     * it in the initial version of the secret. The maximum size is 32 KB.
     */
    public readonly secretText!: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of the secret.
     * Currently, only supported **COMMON**. The default value is **COMMON**.
     */
    public readonly secretType!: pulumi.Output<string>;
    /**
     * The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the tags of a CSMS secrets, key/value pair format.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The secret version status list.
     */
    public /*out*/ readonly versionStages!: pulumi.Output<string[]>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["eventSubscriptions"] = state ? state.eventSubscriptions : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretBinary"] = state ? state.secretBinary : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["secretText"] = state ? state.secretText : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["versionStages"] = state ? state.versionStages : undefined;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["eventSubscriptions"] = args ? args.eventSubscriptions : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretBinary"] = args ? args.secretBinary : undefined;
            resourceInputs["secretText"] = args ? args.secretText : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["versionStages"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * Time when the CSMS secrets created, in UTC format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies the description of a secret.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID to which the secret belongs.
     * If omitted, the default enterprise project will be used.
     * If the enterprise project function is not enabled, ignore this parameter.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the event list associated with the secret.
     * Currently, only one event can be associated.
     */
    eventSubscriptions?: pulumi.Input<string>;
    /**
     * Specifies the expiration time of a secret, `expireTime` can only be edited
     * when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
     * from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
     */
    expireTime?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The latest version id.
     */
    latestVersion?: pulumi.Input<string>;
    /**
     * Specifies the secret name. The maximum length is 64 characters.
     * Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CSMS secrets.
     * If omitted, the provider-level region will be used. Changing this setting will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
     * the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
     */
    secretBinary?: pulumi.Input<string>;
    /**
     * The secret ID in UUID format.
     */
    secretId?: pulumi.Input<string>;
    /**
     * Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
     * it in the initial version of the secret. The maximum size is 32 KB.
     */
    secretText?: pulumi.Input<string>;
    /**
     * Specifies the type of the secret.
     * Currently, only supported **COMMON**. The default value is **COMMON**.
     */
    secretType?: pulumi.Input<string>;
    /**
     * The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the tags of a CSMS secrets, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The secret version status list.
     */
    versionStages?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * Specifies the description of a secret.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID to which the secret belongs.
     * If omitted, the default enterprise project will be used.
     * If the enterprise project function is not enabled, ignore this parameter.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the event list associated with the secret.
     * Currently, only one event can be associated.
     */
    eventSubscriptions?: pulumi.Input<string>;
    /**
     * Specifies the expiration time of a secret, `expireTime` can only be edited
     * when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
     * from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
     */
    expireTime?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the secret name. The maximum length is 64 characters.
     * Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CSMS secrets.
     * If omitted, the provider-level region will be used. Changing this setting will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
     * the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
     */
    secretBinary?: pulumi.Input<string>;
    /**
     * Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
     * it in the initial version of the secret. The maximum size is 32 KB.
     */
    secretText?: pulumi.Input<string>;
    /**
     * Specifies the type of the secret.
     * Currently, only supported **COMMON**. The default value is **COMMON**.
     */
    secretType?: pulumi.Input<string>;
    /**
     * Specifies the tags of a CSMS secrets, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

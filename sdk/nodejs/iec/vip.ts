// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VIP resource within HuaweiCloud IEC.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const iecSubnetId = config.requireObject("iecSubnetId");
 * const vipTest = new huaweicloud.iec.Vip("vipTest", {subnetId: iecSubnetId});
 * ```
 *
 * ## Import
 *
 * IEC VIP can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Iec/vip:Vip vip_test 61fd8d31-8f92-4526-a5f5-07ec303e69e7
 * ```
 */
export class Vip extends pulumi.CustomResource {
    /**
     * Get an existing Vip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VipState, opts?: pulumi.CustomResourceOptions): Vip {
        return new Vip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Iec/vip:Vip';

    /**
     * Returns true if the given object is an instance of Vip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vip.__pulumiType;
    }

    /**
     * An array of IP addresses of the ports to attach the vip to.
     */
    public /*out*/ readonly allowedAddresses!: pulumi.Output<string[]>;
    /**
     * Specifies the IP address desired in the subnet for this vip.
     * If you don't specify it, an available IP address from the specified subnet will be allocated to this vip.
     * Changing this parameter creates a new vip resource.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The MAC address of the vip.
     */
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    /**
     * Specifies an array of IDs of the ports to attach the vip to.
     */
    public readonly portIds!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the ID of the network to which the vip belongs.
     * Changing this parameter creates a new vip resource.
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a Vip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VipArgs | VipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VipState | undefined;
            resourceInputs["allowedAddresses"] = state ? state.allowedAddresses : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["portIds"] = state ? state.portIds : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as VipArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["portIds"] = args ? args.portIds : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["allowedAddresses"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vip resources.
 */
export interface VipState {
    /**
     * An array of IP addresses of the ports to attach the vip to.
     */
    allowedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the IP address desired in the subnet for this vip.
     * If you don't specify it, an available IP address from the specified subnet will be allocated to this vip.
     * Changing this parameter creates a new vip resource.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The MAC address of the vip.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Specifies an array of IDs of the ports to attach the vip to.
     */
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the ID of the network to which the vip belongs.
     * Changing this parameter creates a new vip resource.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vip resource.
 */
export interface VipArgs {
    /**
     * Specifies the IP address desired in the subnet for this vip.
     * If you don't specify it, an available IP address from the specified subnet will be allocated to this vip.
     * Changing this parameter creates a new vip resource.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Specifies an array of IDs of the ports to attach the vip to.
     */
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the ID of the network to which the vip belongs.
     * Changing this parameter creates a new vip resource.
     */
    subnetId: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get the details of a specified IEC server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const serverName = config.requireObject("serverName");
 * const demo = huaweicloud.Iec.getServer({
 *     name: serverName,
 * });
 * ```
 */
export function getServer(args: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Iec/getServer:getServer", {
        "edgecloudId": args.edgecloudId,
        "name": args.name,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    /**
     * The ID of the edgecloud service.
     */
    edgecloudId?: string;
    /**
     * Specifies the IEC server name, which can be queried with a regular expression.
     */
    name: string;
    /**
     * Specifies the status of IEC server.
     */
    status?: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    /**
     * An array of site ID and operator for the IEC server. The object structure is documented below.
     */
    readonly coverageSites: outputs.Iec.GetServerCoverageSite[];
    /**
     * The ID of the edgecloud service.
     */
    readonly edgecloudId: string;
    /**
     * The Name of the edgecloud service.
     */
    readonly edgecloudName: string;
    /**
     * The flavor ID of the IEC server.
     */
    readonly flavorId: string;
    /**
     * The flavor name of the IEC server.
     */
    readonly flavorName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageId: string;
    /**
     * The image name of the IEC server.
     */
    readonly imageName: string;
    readonly keyPair: string;
    readonly name: string;
    /**
     * An array of one or more networks to attach to the IEC server. The object structure is documented below.
     */
    readonly nics: outputs.Iec.GetServerNic[];
    /**
     * The EIP address that is associted to the IEC server.
     */
    readonly publicIp: string;
    /**
     * An array of one or more security group IDs to associate with the IEC server.
     */
    readonly securityGroups: string[];
    readonly status: string;
    /**
     * The system disk voume ID.
     */
    readonly systemDiskId: string;
    readonly userData: string;
    /**
     * An array of one or more disks to attach to the IEC server. The object structure is documented
     * below.
     */
    readonly volumeAttacheds: outputs.Iec.GetServerVolumeAttached[];
    /**
     * The ID of vpc for the IEC server.
     */
    readonly vpcId: string;
}

export function getServerOutput(args: GetServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerResult> {
    return pulumi.output(args).apply(a => getServer(a, opts))
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    /**
     * The ID of the edgecloud service.
     */
    edgecloudId?: pulumi.Input<string>;
    /**
     * Specifies the IEC server name, which can be queried with a regular expression.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the status of IEC server.
     */
    status?: pulumi.Input<string>;
}

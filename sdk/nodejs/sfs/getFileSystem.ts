// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides information about an Shared File System (SFS) within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const shareName = config.requireObject("shareName");
 * const sharedFile = huaweicloud.Sfs.getFileSystem({
 *     name: shareName,
 * });
 * ```
 */
export function getFileSystem(args?: GetFileSystemArgs, opts?: pulumi.InvokeOptions): Promise<GetFileSystemResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("huaweicloud:Sfs/getFileSystem:getFileSystem", {
        "id": args.id,
        "name": args.name,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getFileSystem.
 */
export interface GetFileSystemArgs {
    /**
     * The UUID of the shared file system.
     */
    id?: string;
    /**
     * The name of the shared file system.
     */
    name?: string;
    region?: string;
    /**
     * The status of the shared file system.
     */
    status?: string;
}

/**
 * A collection of values returned by getFileSystem.
 */
export interface GetFileSystemResult {
    /**
     * The level of the access rule.
     */
    readonly accessLevel: string;
    /**
     * The access that the back end grants or denies.
     */
    readonly accessTo: string;
    /**
     * The type of the share access rule.
     */
    readonly accessType: string;
    /**
     * The availability zone name.
     */
    readonly availabilityZone: string;
    readonly description: string;
    /**
     * The path for accessing the shared file system.
     */
    readonly exportLocation: string;
    readonly id: string;
    /**
     * Whether a file system can be publicly seen.
     */
    readonly isPublic: boolean;
    /**
     * The key and value pairs information of the shared file system.
     */
    readonly metadata: {[key: string]: string};
    /**
     * The UUID of the mount location of the shared file system.
     */
    readonly mountId: string;
    readonly name: string;
    /**
     * Identifies which mount locations are most efficient and are used preferentially when multiple mount
     * locations exist.
     */
    readonly preferred: boolean;
    readonly region: string;
    /**
     * The UUID of the share access rule.
     */
    readonly shareAccessId: string;
    /**
     * The access that the back end grants or denies.
     */
    readonly shareInstanceId: string;
    /**
     * The protocol for sharing file systems.
     */
    readonly shareProto: string;
    /**
     * The size (GB) of the shared file system.
     */
    readonly size: number;
    readonly state: string;
    readonly status: string;
}

export function getFileSystemOutput(args?: GetFileSystemOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileSystemResult> {
    return pulumi.output(args).apply(a => getFileSystem(a, opts))
}

/**
 * A collection of arguments for invoking getFileSystem.
 */
export interface GetFileSystemOutputArgs {
    /**
     * The UUID of the shared file system.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the shared file system.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The status of the shared file system.
     */
    status?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource is used to manage a component under specified application within HuaweiCloud ServiceStage service.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Components can be imported using their `application_id` and `id`, separated by a slash (/), e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:ServiceStage/component:Component test dd7a1ce2-c48c-4f41-85bb-d0d09969eec9/9ab8ef79-d318-4de5-acf9-e1e1e25a0395
 * ```
 */
export class Component extends pulumi.CustomResource {
    /**
     * Get an existing Component resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComponentState, opts?: pulumi.CustomResourceOptions): Component {
        return new Component(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:ServiceStage/component:Component';

    /**
     * Returns true if the given object is an instance of Component.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Component {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Component.__pulumiType;
    }

    /**
     * Specifies the application ID to which the component belongs.
     * Changing this parameter will create a new component.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Specifies the component builder.
     * The object structure is documented below.
     */
    public readonly builder!: pulumi.Output<outputs.ServiceStage.ComponentBuilder>;
    /**
     * Specifies the component framework.
     * + The framework of type **Webapp** is **Web**.
     * + The framework of type **MicroService** supports: **Java Classis**, **Go Classis**, **Mesher**, **Spring Cloud**,
     * **Dubbo**.
     * + The framework of type **Common** can be empty.
     */
    public readonly framework!: pulumi.Output<string | undefined>;
    /**
     * Specifies the authorization name.
     * The name can contain of `2` to `64` characters, only letters, digits, underscores (_) and hyphens (-) are allowed,
     * and the name must start with a letter and end with a letter or digit.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region where the application and component are located.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new component.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the component runtime, such as **Docker**, **Java8**, etc.
     * Changing this parameter will create a new component.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * Specifies the repository source.
     * The object structure is documented below.
     */
    public readonly source!: pulumi.Output<outputs.ServiceStage.ComponentSource>;
    /**
     * Specifies the type of repository source or storage.
     * The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Component resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComponentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComponentArgs | ComponentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComponentState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["builder"] = state ? state.builder : undefined;
            resourceInputs["framework"] = state ? state.framework : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ComponentArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["builder"] = args ? args.builder : undefined;
            resourceInputs["framework"] = args ? args.framework : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Component.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Component resources.
 */
export interface ComponentState {
    /**
     * Specifies the application ID to which the component belongs.
     * Changing this parameter will create a new component.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Specifies the component builder.
     * The object structure is documented below.
     */
    builder?: pulumi.Input<inputs.ServiceStage.ComponentBuilder>;
    /**
     * Specifies the component framework.
     * + The framework of type **Webapp** is **Web**.
     * + The framework of type **MicroService** supports: **Java Classis**, **Go Classis**, **Mesher**, **Spring Cloud**,
     * **Dubbo**.
     * + The framework of type **Common** can be empty.
     */
    framework?: pulumi.Input<string>;
    /**
     * Specifies the authorization name.
     * The name can contain of `2` to `64` characters, only letters, digits, underscores (_) and hyphens (-) are allowed,
     * and the name must start with a letter and end with a letter or digit.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region where the application and component are located.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new component.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the component runtime, such as **Docker**, **Java8**, etc.
     * Changing this parameter will create a new component.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the repository source.
     * The object structure is documented below.
     */
    source?: pulumi.Input<inputs.ServiceStage.ComponentSource>;
    /**
     * Specifies the type of repository source or storage.
     * The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Component resource.
 */
export interface ComponentArgs {
    /**
     * Specifies the application ID to which the component belongs.
     * Changing this parameter will create a new component.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Specifies the component builder.
     * The object structure is documented below.
     */
    builder?: pulumi.Input<inputs.ServiceStage.ComponentBuilder>;
    /**
     * Specifies the component framework.
     * + The framework of type **Webapp** is **Web**.
     * + The framework of type **MicroService** supports: **Java Classis**, **Go Classis**, **Mesher**, **Spring Cloud**,
     * **Dubbo**.
     * + The framework of type **Common** can be empty.
     */
    framework?: pulumi.Input<string>;
    /**
     * Specifies the authorization name.
     * The name can contain of `2` to `64` characters, only letters, digits, underscores (_) and hyphens (-) are allowed,
     * and the name must start with a letter and end with a letter or digit.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region where the application and component are located.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new component.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the component runtime, such as **Docker**, **Java8**, etc.
     * Changing this parameter will create a new component.
     */
    runtime: pulumi.Input<string>;
    /**
     * Specifies the repository source.
     * The object structure is documented below.
     */
    source?: pulumi.Input<inputs.ServiceStage.ComponentSource>;
    /**
     * Specifies the type of repository source or storage.
     * The valid values are **GitHub**, **GitLab**, **Gitee**, **Bitbucket** and **package**.
     */
    type: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a CCI namespace resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const namespaceName = config.requireObject("namespaceName");
 * const test = new huaweicloud.cci.Namespace("test", {
 *     type: "gpu-accelerated",
 *     rbacEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * CCI Namespaces can be imported using their `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cci/namespace:Namespace test terraform-test
 * ```
 */
export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cci/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * Specifies whether elastic scheduling is enabled.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly autoExpendEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies whether container network is enabled.
     * Enable this option if you want CCI to start the container network in advance so that containers can connect to the
     * network as soon as they are started. Default to **false**.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly containerNetworkEnabled!: pulumi.Output<boolean>;
    /**
     * The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the unique name of the CCI namespace.
     * This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
     * and must start and end with lowercase letters and digits.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether Role-based access control is enabled.
     * After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
     * permission. Changing this will create a new CCI namespace resource.
     */
    public readonly rbacEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the IP address recycling interval, in hour.
     * The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly recyclingInterval!: pulumi.Output<number>;
    /**
     * Specifies the region in which to create the CCI namespace resource.
     * If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Namespace status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the CCI namespace type.
     * The valid values are **general-computing** and **gpu-accelerated**.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies the size of IP pool to warm-up.
     * Changing this will create a new CCI namespace resource.
     */
    public readonly warmupPoolSize!: pulumi.Output<number>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["autoExpendEnabled"] = state ? state.autoExpendEnabled : undefined;
            resourceInputs["containerNetworkEnabled"] = state ? state.containerNetworkEnabled : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rbacEnabled"] = state ? state.rbacEnabled : undefined;
            resourceInputs["recyclingInterval"] = state ? state.recyclingInterval : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["warmupPoolSize"] = state ? state.warmupPoolSize : undefined;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoExpendEnabled"] = args ? args.autoExpendEnabled : undefined;
            resourceInputs["containerNetworkEnabled"] = args ? args.containerNetworkEnabled : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rbacEnabled"] = args ? args.rbacEnabled : undefined;
            resourceInputs["recyclingInterval"] = args ? args.recyclingInterval : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["warmupPoolSize"] = args ? args.warmupPoolSize : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * Specifies whether elastic scheduling is enabled.
     * Changing this will create a new CCI namespace resource.
     */
    autoExpendEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether container network is enabled.
     * Enable this option if you want CCI to start the container network in advance so that containers can connect to the
     * network as soon as they are started. Default to **false**.
     * Changing this will create a new CCI namespace resource.
     */
    containerNetworkEnabled?: pulumi.Input<boolean>;
    /**
     * The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new CCI namespace resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the unique name of the CCI namespace.
     * This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
     * and must start and end with lowercase letters and digits.
     * Changing this will create a new CCI namespace resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether Role-based access control is enabled.
     * After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
     * permission. Changing this will create a new CCI namespace resource.
     */
    rbacEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the IP address recycling interval, in hour.
     * The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
     * Changing this will create a new CCI namespace resource.
     */
    recyclingInterval?: pulumi.Input<number>;
    /**
     * Specifies the region in which to create the CCI namespace resource.
     * If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Namespace status.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the CCI namespace type.
     * The valid values are **general-computing** and **gpu-accelerated**.
     * Changing this will create a new CCI namespace resource.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the size of IP pool to warm-up.
     * Changing this will create a new CCI namespace resource.
     */
    warmupPoolSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * Specifies whether elastic scheduling is enabled.
     * Changing this will create a new CCI namespace resource.
     */
    autoExpendEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether container network is enabled.
     * Enable this option if you want CCI to start the container network in advance so that containers can connect to the
     * network as soon as they are started. Default to **false**.
     * Changing this will create a new CCI namespace resource.
     */
    containerNetworkEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new CCI namespace resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the unique name of the CCI namespace.
     * This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
     * and must start and end with lowercase letters and digits.
     * Changing this will create a new CCI namespace resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether Role-based access control is enabled.
     * After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
     * permission. Changing this will create a new CCI namespace resource.
     */
    rbacEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the IP address recycling interval, in hour.
     * The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
     * Changing this will create a new CCI namespace resource.
     */
    recyclingInterval?: pulumi.Input<number>;
    /**
     * Specifies the region in which to create the CCI namespace resource.
     * If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the CCI namespace type.
     * The valid values are **general-computing** and **gpu-accelerated**.
     * Changing this will create a new CCI namespace resource.
     */
    type: pulumi.Input<string>;
    /**
     * Specifies the size of IP pool to warm-up.
     * Changing this will create a new CCI namespace resource.
     */
    warmupPoolSize?: pulumi.Input<number>;
}

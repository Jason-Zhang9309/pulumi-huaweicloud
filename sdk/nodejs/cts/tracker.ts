// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages CTS **system** tracker resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const bucketName = config.requireObject("bucketName");
 * const tracker = new huaweicloud.cts.Tracker("tracker", {
 *     bucketName: bucketName,
 *     filePrefix: "cts",
 *     ltsEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * CTS tracker can be imported using `name`, only **system** is available. e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Cts/tracker:Tracker tracker system
 * ```
 */
export class Tracker extends pulumi.CustomResource {
    /**
     * Get an existing Tracker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrackerState, opts?: pulumi.CustomResourceOptions): Tracker {
        return new Tracker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Cts/tracker:Tracker';

    /**
     * Returns true if the given object is an instance of Tracker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tracker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tracker.__pulumiType;
    }

    /**
     * Specifies the OBS bucket to which traces will be transferred.
     */
    public readonly bucketName!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether tracker is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the file name prefix to mark trace files that need to be stored
     * in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
     * and periods (.) are allowed.
     */
    public readonly filePrefix!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of KMS key used for trace file encryption.
     */
    public readonly kmsId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether trace analysis is enabled.
     */
    public readonly ltsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The tracker name, only **system** is available.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region in which to manage the CTS system tracker resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The tracker status, the value can be **enabled**, **disabled** or **error**.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Whether traces will be transferred.
     */
    public /*out*/ readonly transferEnabled!: pulumi.Output<boolean>;
    /**
     * The tracker type, only **system** is available.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies whether trace file verification is enabled during trace transfer.
     */
    public readonly validateFile!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Tracker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrackerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrackerArgs | TrackerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrackerState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filePrefix"] = state ? state.filePrefix : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["ltsEnabled"] = state ? state.ltsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transferEnabled"] = state ? state.transferEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validateFile"] = state ? state.validateFile : undefined;
        } else {
            const args = argsOrState as TrackerArgs | undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filePrefix"] = args ? args.filePrefix : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["ltsEnabled"] = args ? args.ltsEnabled : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["validateFile"] = args ? args.validateFile : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transferEnabled"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tracker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tracker resources.
 */
export interface TrackerState {
    /**
     * Specifies the OBS bucket to which traces will be transferred.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Specifies whether tracker is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the file name prefix to mark trace files that need to be stored
     * in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
     * and periods (.) are allowed.
     */
    filePrefix?: pulumi.Input<string>;
    /**
     * Specifies the ID of KMS key used for trace file encryption.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * Specifies whether trace analysis is enabled.
     */
    ltsEnabled?: pulumi.Input<boolean>;
    /**
     * The tracker name, only **system** is available.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to manage the CTS system tracker resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The tracker status, the value can be **enabled**, **disabled** or **error**.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether traces will be transferred.
     */
    transferEnabled?: pulumi.Input<boolean>;
    /**
     * The tracker type, only **system** is available.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies whether trace file verification is enabled during trace transfer.
     */
    validateFile?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Tracker resource.
 */
export interface TrackerArgs {
    /**
     * Specifies the OBS bucket to which traces will be transferred.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Specifies whether tracker is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the file name prefix to mark trace files that need to be stored
     * in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
     * and periods (.) are allowed.
     */
    filePrefix?: pulumi.Input<string>;
    /**
     * Specifies the ID of KMS key used for trace file encryption.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * Specifies whether trace analysis is enabled.
     */
    ltsEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to manage the CTS system tracker resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether trace file verification is enabled during trace transfer.
     */
    validateFile?: pulumi.Input<boolean>;
}

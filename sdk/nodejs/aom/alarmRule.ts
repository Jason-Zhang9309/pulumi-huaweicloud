// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages an AOM alarm rule resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const alarmRule = new huaweicloud.aom.AlarmRule("alarmRule", {
 *     alarmLevel: 3,
 *     description: "test rule",
 *     namespace: "PAAS.NODE",
 *     metricName: "cupUsage",
 *     dimensions: [{
 *         name: "hostID",
 *         value: _var.instance_id,
 *     }],
 *     comparisonOperator: ">=",
 *     period: 60000,
 *     statistic: "average",
 *     threshold: "3",
 *     unit: "Percent",
 *     evaluationPeriods: 2,
 * });
 * ```
 *
 * ## Import
 *
 * AOM alarm rules can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Aom/alarmRule:AlarmRule alarm_rule 966746116613832710
 * ```
 */
export class AlarmRule extends pulumi.CustomResource {
    /**
     * Get an existing AlarmRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlarmRuleState, opts?: pulumi.CustomResourceOptions): AlarmRule {
        return new AlarmRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Aom/alarmRule:AlarmRule';

    /**
     * Returns true if the given object is an instance of AlarmRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlarmRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlarmRule.__pulumiType;
    }

    /**
     * Specifies whether to enable the action to be triggered by an alarm.
     * The default value is true. Changing this creates a new resource.
     */
    public readonly alarmActionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the action triggered by an alarm. This is a list of strings.
     * Changing this creates a new resource.
     */
    public readonly alarmActions!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether the alarm rule is enabled.
     */
    public /*out*/ readonly alarmEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies the alarm severity. The value can be **1**, **2**, **3** or **4**,
     * which indicates *critical*, *major*, *minor*, and *informational*, respectively.
     * The default value is **2**.
     */
    public readonly alarmLevel!: pulumi.Output<number | undefined>;
    /**
     * Specifies the comparison condition of alarm thresholds.
     * The value can be **>**, **=**, **<**, **>=** or **<=**.
     */
    public readonly comparisonOperator!: pulumi.Output<string>;
    /**
     * Specifies the description of the alarm rule.
     * The value can be a string of 0 to 1000 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the list of metric dimensions. The structure is described below.
     * Changing this creates a new resource.
     */
    public readonly dimensions!: pulumi.Output<outputs.Aom.AlarmRuleDimension[]>;
    /**
     * Specifies the alarm checking evaluation periods.
     * The value can be **1**, **2**, **3**, **4** and **5**.
     */
    public readonly evaluationPeriods!: pulumi.Output<number>;
    /**
     * Specifies the action triggered when the data is not enough.
     * This is a list of strings. Changing this creates a new resource.
     */
    public readonly insufficientDataActions!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the alarm metric name. Changing this creates a new resource.
     */
    public readonly metricName!: pulumi.Output<string>;
    /**
     * Specifies the dimension name. Changing this creates a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the alarm namespace. Changing this creates a new resource.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Specifies the action triggered by the clearing of an alarm.
     * This is a list of strings. Changing this creates a new resource.
     */
    public readonly okActions!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the alarm checking period in milliseconds.
     * The value can be **60,000**, **300,000**, **900,000** and **3,600,000**.
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * The region in which to create the alarm rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the reason of alarm status.
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    /**
     * Indicates the alarm status.
     */
    public /*out*/ readonly stateValue!: pulumi.Output<string>;
    /**
     * Specifies the data rollup methods. The value can be **maximum**,
     * **minimum**, **average**, **sum** and **sampleCount**. Changing this creates a new resource.
     */
    public readonly statistic!: pulumi.Output<string>;
    /**
     * Specifies the alarm threshold.
     */
    public readonly threshold!: pulumi.Output<string>;
    /**
     * Specifies the data unit. Changing this creates a new resource.
     */
    public readonly unit!: pulumi.Output<string>;

    /**
     * Create a AlarmRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlarmRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlarmRuleArgs | AlarmRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlarmRuleState | undefined;
            resourceInputs["alarmActionEnabled"] = state ? state.alarmActionEnabled : undefined;
            resourceInputs["alarmActions"] = state ? state.alarmActions : undefined;
            resourceInputs["alarmEnabled"] = state ? state.alarmEnabled : undefined;
            resourceInputs["alarmLevel"] = state ? state.alarmLevel : undefined;
            resourceInputs["comparisonOperator"] = state ? state.comparisonOperator : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["evaluationPeriods"] = state ? state.evaluationPeriods : undefined;
            resourceInputs["insufficientDataActions"] = state ? state.insufficientDataActions : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["okActions"] = state ? state.okActions : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["stateValue"] = state ? state.stateValue : undefined;
            resourceInputs["statistic"] = state ? state.statistic : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
        } else {
            const args = argsOrState as AlarmRuleArgs | undefined;
            if ((!args || args.comparisonOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comparisonOperator'");
            }
            if ((!args || args.dimensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dimensions'");
            }
            if ((!args || args.evaluationPeriods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationPeriods'");
            }
            if ((!args || args.metricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.statistic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statistic'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.unit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unit'");
            }
            resourceInputs["alarmActionEnabled"] = args ? args.alarmActionEnabled : undefined;
            resourceInputs["alarmActions"] = args ? args.alarmActions : undefined;
            resourceInputs["alarmLevel"] = args ? args.alarmLevel : undefined;
            resourceInputs["comparisonOperator"] = args ? args.comparisonOperator : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["evaluationPeriods"] = args ? args.evaluationPeriods : undefined;
            resourceInputs["insufficientDataActions"] = args ? args.insufficientDataActions : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["okActions"] = args ? args.okActions : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["statistic"] = args ? args.statistic : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["alarmEnabled"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["stateValue"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlarmRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlarmRule resources.
 */
export interface AlarmRuleState {
    /**
     * Specifies whether to enable the action to be triggered by an alarm.
     * The default value is true. Changing this creates a new resource.
     */
    alarmActionEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the action triggered by an alarm. This is a list of strings.
     * Changing this creates a new resource.
     */
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the alarm rule is enabled.
     */
    alarmEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the alarm severity. The value can be **1**, **2**, **3** or **4**,
     * which indicates *critical*, *major*, *minor*, and *informational*, respectively.
     * The default value is **2**.
     */
    alarmLevel?: pulumi.Input<number>;
    /**
     * Specifies the comparison condition of alarm thresholds.
     * The value can be **>**, **=**, **<**, **>=** or **<=**.
     */
    comparisonOperator?: pulumi.Input<string>;
    /**
     * Specifies the description of the alarm rule.
     * The value can be a string of 0 to 1000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the list of metric dimensions. The structure is described below.
     * Changing this creates a new resource.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.Aom.AlarmRuleDimension>[]>;
    /**
     * Specifies the alarm checking evaluation periods.
     * The value can be **1**, **2**, **3**, **4** and **5**.
     */
    evaluationPeriods?: pulumi.Input<number>;
    /**
     * Specifies the action triggered when the data is not enough.
     * This is a list of strings. Changing this creates a new resource.
     */
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the alarm metric name. Changing this creates a new resource.
     */
    metricName?: pulumi.Input<string>;
    /**
     * Specifies the dimension name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the alarm namespace. Changing this creates a new resource.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the action triggered by the clearing of an alarm.
     * This is a list of strings. Changing this creates a new resource.
     */
    okActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the alarm checking period in milliseconds.
     * The value can be **60,000**, **300,000**, **900,000** and **3,600,000**.
     */
    period?: pulumi.Input<number>;
    /**
     * The region in which to create the alarm rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the reason of alarm status.
     */
    stateReason?: pulumi.Input<string>;
    /**
     * Indicates the alarm status.
     */
    stateValue?: pulumi.Input<string>;
    /**
     * Specifies the data rollup methods. The value can be **maximum**,
     * **minimum**, **average**, **sum** and **sampleCount**. Changing this creates a new resource.
     */
    statistic?: pulumi.Input<string>;
    /**
     * Specifies the alarm threshold.
     */
    threshold?: pulumi.Input<string>;
    /**
     * Specifies the data unit. Changing this creates a new resource.
     */
    unit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlarmRule resource.
 */
export interface AlarmRuleArgs {
    /**
     * Specifies whether to enable the action to be triggered by an alarm.
     * The default value is true. Changing this creates a new resource.
     */
    alarmActionEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the action triggered by an alarm. This is a list of strings.
     * Changing this creates a new resource.
     */
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the alarm severity. The value can be **1**, **2**, **3** or **4**,
     * which indicates *critical*, *major*, *minor*, and *informational*, respectively.
     * The default value is **2**.
     */
    alarmLevel?: pulumi.Input<number>;
    /**
     * Specifies the comparison condition of alarm thresholds.
     * The value can be **>**, **=**, **<**, **>=** or **<=**.
     */
    comparisonOperator: pulumi.Input<string>;
    /**
     * Specifies the description of the alarm rule.
     * The value can be a string of 0 to 1000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the list of metric dimensions. The structure is described below.
     * Changing this creates a new resource.
     */
    dimensions: pulumi.Input<pulumi.Input<inputs.Aom.AlarmRuleDimension>[]>;
    /**
     * Specifies the alarm checking evaluation periods.
     * The value can be **1**, **2**, **3**, **4** and **5**.
     */
    evaluationPeriods: pulumi.Input<number>;
    /**
     * Specifies the action triggered when the data is not enough.
     * This is a list of strings. Changing this creates a new resource.
     */
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the alarm metric name. Changing this creates a new resource.
     */
    metricName: pulumi.Input<string>;
    /**
     * Specifies the dimension name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the alarm namespace. Changing this creates a new resource.
     */
    namespace: pulumi.Input<string>;
    /**
     * Specifies the action triggered by the clearing of an alarm.
     * This is a list of strings. Changing this creates a new resource.
     */
    okActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the alarm checking period in milliseconds.
     * The value can be **60,000**, **300,000**, **900,000** and **3,600,000**.
     */
    period: pulumi.Input<number>;
    /**
     * The region in which to create the alarm rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the data rollup methods. The value can be **maximum**,
     * **minimum**, **average**, **sum** and **sampleCount**. Changing this creates a new resource.
     */
    statistic: pulumi.Input<string>;
    /**
     * Specifies the alarm threshold.
     */
    threshold: pulumi.Input<string>;
    /**
     * Specifies the data unit. Changing this creates a new resource.
     */
    unit: pulumi.Input<string>;
}

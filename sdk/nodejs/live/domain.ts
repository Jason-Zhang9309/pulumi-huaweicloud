// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Live domain within HuaweiCloud.
 *
 * ## Example Usage
 * ### Create an ingest domain name and a streaming domain name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const config = new pulumi.Config();
 * const ingestDomainName = config.requireObject("ingestDomainName");
 * const streamingDomainName = config.requireObject("streamingDomainName");
 * const ingestDomain = new huaweicloud.live.Domain("ingestDomain", {type: "push"});
 * const streamingDomain = new huaweicloud.live.Domain("streamingDomain", {
 *     type: "pull",
 *     ingestDomainName: ingestDomain.name,
 * });
 * ```
 *
 * ## Import
 *
 * Domains can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Live/domain:Domain test domainName
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Live/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * CNAME record of the domain name.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * Specifies the ingest domain name, which associates with the streaming
     * domain name to push streams to nearby CDN nodes.
     */
    public readonly ingestDomainName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the domain name. Changing this parameter will create a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the Live domain resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies status of the domain name. The options are as follows:
     * + **on**: enable the domain name.
     * + **off**: disable the domain name.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specifies the type of domain name. The options are as follows:
     * + **pull**: streaming domain name.
     * + **push**: ingest domain name.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["ingestDomainName"] = state ? state.ingestDomainName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["ingestDomainName"] = args ? args.ingestDomainName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * CNAME record of the domain name.
     */
    cname?: pulumi.Input<string>;
    /**
     * Specifies the ingest domain name, which associates with the streaming
     * domain name to push streams to nearby CDN nodes.
     */
    ingestDomainName?: pulumi.Input<string>;
    /**
     * Specifies the domain name. Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the Live domain resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies status of the domain name. The options are as follows:
     * + **on**: enable the domain name.
     * + **off**: disable the domain name.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the type of domain name. The options are as follows:
     * + **pull**: streaming domain name.
     * + **push**: ingest domain name.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Specifies the ingest domain name, which associates with the streaming
     * domain name to push streams to nearby CDN nodes.
     */
    ingestDomainName?: pulumi.Input<string>;
    /**
     * Specifies the domain name. Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the Live domain resource. If omitted,
     * the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies status of the domain name. The options are as follows:
     * + **on**: enable the domain name.
     * + **off**: disable the domain name.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the type of domain name. The options are as follows:
     * + **pull**: streaming domain name.
     * + **push**: ingest domain name.
     */
    type: pulumi.Input<string>;
}

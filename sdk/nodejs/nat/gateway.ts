// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a gateway resource of the **public** NAT within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const gatewayName = config.requireObject("gatewayName");
 * const vpcId = config.requireObject("vpcId");
 * const networkId = config.requireObject("networkId");
 * const test = new huaweicloud.nat.Gateway("test", {
 *     description: "test for terraform",
 *     spec: "3",
 *     vpcId: vpcId,
 *     subnetId: networkId,
 * });
 * ```
 *
 * ## Import
 *
 * NAT gateways can be imported using their `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import huaweicloud:Nat/gateway:Gateway test d126fb87-43ce-4867-a2ff-cf34af3765d9
 * ```
 */
export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Nat/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * Specifies the description of the NAT gateway, which contain maximum of `512`
     * characters, and angle brackets (<) and (>) are not allowed.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project ID of the NAT gateway.  
     * Changing this will create a new resource.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the NAT gateway name.  
     * The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region where the NAT gateway is located.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the specification of the NAT gateway. The valid values are as follows:
     * + **1**: Small type, which supports up to `10,000` SNAT connections.
     * + **2**: Medium type, which supports up to `50,000` SNAT connections.
     * + **3**: Large type, which supports up to `200,000` SNAT connections.
     * + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
     */
    public readonly spec!: pulumi.Output<string>;
    /**
     * The current status of the NAT gateway.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the subnet ID of the downstream interface (the next hop of the
     * DVR) of the NAT gateway.
     * Changing this will create a new resource.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the NAT geteway.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the ID of the VPC to which the NAT gateway belongs.  
     * Changing this will create a new resource.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * Specifies the description of the NAT gateway, which contain maximum of `512`
     * characters, and angle brackets (<) and (>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the NAT gateway.  
     * Changing this will create a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the NAT gateway name.  
     * The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region where the NAT gateway is located.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the specification of the NAT gateway. The valid values are as follows:
     * + **1**: Small type, which supports up to `10,000` SNAT connections.
     * + **2**: Medium type, which supports up to `50,000` SNAT connections.
     * + **3**: Large type, which supports up to `200,000` SNAT connections.
     * + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
     */
    spec?: pulumi.Input<string>;
    /**
     * The current status of the NAT gateway.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the subnet ID of the downstream interface (the next hop of the
     * DVR) of the NAT gateway.
     * Changing this will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the NAT geteway.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC to which the NAT gateway belongs.  
     * Changing this will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * Specifies the description of the NAT gateway, which contain maximum of `512`
     * characters, and angle brackets (<) and (>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the NAT gateway.  
     * Changing this will create a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the NAT gateway name.  
     * The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region where the NAT gateway is located.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the specification of the NAT gateway. The valid values are as follows:
     * + **1**: Small type, which supports up to `10,000` SNAT connections.
     * + **2**: Medium type, which supports up to `50,000` SNAT connections.
     * + **3**: Large type, which supports up to `200,000` SNAT connections.
     * + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
     */
    spec: pulumi.Input<string>;
    /**
     * Specifies the subnet ID of the downstream interface (the next hop of the
     * DVR) of the NAT gateway.
     * Changing this will create a new resource.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the NAT geteway.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC to which the NAT gateway belongs.  
     * Changing this will create a new resource.
     */
    vpcId: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a SNAT rule resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### SNAT rule in VPC scenario
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const snat1 = new huaweicloud.nat.SnatRule("snat1", {
 *     natGatewayId: _var.natgw_id,
 *     floatingIpId: _var.publicip_id,
 *     subnetId: _var.subent_id,
 * });
 * ```
 * ### SNAT rule in Direct Connect scenario
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const snat2 = new huaweicloud.nat.SnatRule("snat2", {
 *     natGatewayId: _var.natgw_id,
 *     floatingIpId: _var.publicip_id,
 *     sourceType: 1,
 *     cidr: "192.168.10.0/24",
 * });
 * ```
 *
 * ## Import
 *
 * SNAT rules can be imported using the following format
 *
 * ```sh
 *  $ pulumi import huaweicloud:Nat/snatRule:SnatRule snat_1 9e0713cb-0a2f-484e-8c7d-daecbb61dbe4
 * ```
 */
export class SnatRule extends pulumi.CustomResource {
    /**
     * Get an existing SnatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnatRuleState, opts?: pulumi.CustomResourceOptions): SnatRule {
        return new SnatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Nat/snatRule:SnatRule';

    /**
     * Returns true if the given object is an instance of SnatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnatRule.__pulumiType;
    }

    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP
     * address. This parameter and `subnetId` are alternative. Changing this creates a new snat rule.
     */
    public readonly cidr!: pulumi.Output<string | undefined>;
    /**
     * Specifies the description of the snat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The actual floating IP address.
     */
    public /*out*/ readonly floatingIpAddress!: pulumi.Output<string>;
    /**
     * Specifies the EIP ID this snat rule connects to.
     * Multiple EIPs are separated using commas (,). The number of EIP IDs cannot exceed 20.
     */
    public readonly floatingIpId!: pulumi.Output<string>;
    /**
     * ID of the nat gateway this snat rule belongs to. Changing this creates
     * a new snat rule.
     */
    public readonly natGatewayId!: pulumi.Output<string>;
    /**
     * @deprecated use subnet_id instead
     */
    public readonly networkId!: pulumi.Output<string | undefined>;
    /**
     * The region in which to create the snat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new snat rule resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct
     * Connect scenario). Defaults to 0, only `cidr` can be specified over a Direct Connect connection. Changing this creates
     * a new snat rule.
     */
    public readonly sourceType!: pulumi.Output<number | undefined>;
    /**
     * The status of the snat rule.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * ID of the subnet this snat rule connects to. This parameter and `cidr` are
     * alternative. Changing this creates a new snat rule.
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a SnatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnatRuleArgs | SnatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnatRuleState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["floatingIpAddress"] = state ? state.floatingIpAddress : undefined;
            resourceInputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as SnatRuleArgs | undefined;
            if ((!args || args.floatingIpId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'floatingIpId'");
            }
            if ((!args || args.natGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["floatingIpAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnatRule resources.
 */
export interface SnatRuleState {
    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP
     * address. This parameter and `subnetId` are alternative. Changing this creates a new snat rule.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Specifies the description of the snat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * The actual floating IP address.
     */
    floatingIpAddress?: pulumi.Input<string>;
    /**
     * Specifies the EIP ID this snat rule connects to.
     * Multiple EIPs are separated using commas (,). The number of EIP IDs cannot exceed 20.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * ID of the nat gateway this snat rule belongs to. Changing this creates
     * a new snat rule.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * @deprecated use subnet_id instead
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region in which to create the snat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new snat rule resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct
     * Connect scenario). Defaults to 0, only `cidr` can be specified over a Direct Connect connection. Changing this creates
     * a new snat rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * The status of the snat rule.
     */
    status?: pulumi.Input<string>;
    /**
     * ID of the subnet this snat rule connects to. This parameter and `cidr` are
     * alternative. Changing this creates a new snat rule.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnatRule resource.
 */
export interface SnatRuleArgs {
    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP
     * address. This parameter and `subnetId` are alternative. Changing this creates a new snat rule.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Specifies the description of the snat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the EIP ID this snat rule connects to.
     * Multiple EIPs are separated using commas (,). The number of EIP IDs cannot exceed 20.
     */
    floatingIpId: pulumi.Input<string>;
    /**
     * ID of the nat gateway this snat rule belongs to. Changing this creates
     * a new snat rule.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * @deprecated use subnet_id instead
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region in which to create the snat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new snat rule resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct
     * Connect scenario). Defaults to 0, only `cidr` can be specified over a Direct Connect connection. Changing this creates
     * a new snat rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * ID of the subnet this snat rule connects to. This parameter and `cidr` are
     * alternative. Changing this creates a new snat rule.
     */
    subnetId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a DNAT rule resource within HuaweiCloud.
 *
 * ## Example Usage
 * ### DNAT rule in Direct Connect scenario
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const dnat2 = new huaweicloud.nat.DnatRule("dnat2", {
 *     natGatewayId: _var.natgw_id,
 *     floatingIpId: _var.publicip_id,
 *     privateIp: "10.0.0.12",
 *     protocol: "tcp",
 *     internalServicePort: 80,
 *     externalServicePort: 8080,
 * });
 * ```
 *
 * ## Import
 *
 * DNAT rules can be imported using the following format
 *
 * ```sh
 *  $ pulumi import huaweicloud:Nat/dnatRule:DnatRule dnat_1 f4f783a7-b908-4215-b018-724960e5df4a
 * ```
 */
export class DnatRule extends pulumi.CustomResource {
    /**
     * Get an existing DnatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnatRuleState, opts?: pulumi.CustomResourceOptions): DnatRule {
        return new DnatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Nat/dnatRule:DnatRule';

    /**
     * Returns true if the given object is an instance of DnatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnatRule.__pulumiType;
    }

    /**
     * Dnat rule creation time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies the description of the dnat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     * Changing this creates a new dnat rule.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    public readonly externalServicePort!: pulumi.Output<number>;
    /**
     * The actual floating IP address.
     */
    public /*out*/ readonly floatingIpAddress!: pulumi.Output<string>;
    /**
     * Specifies the ID of the floating IP address. Changing this creates a
     * new dnat rule.
     */
    public readonly floatingIpId!: pulumi.Output<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    public readonly internalServicePort!: pulumi.Output<number>;
    /**
     * ID of the nat gateway this dnat rule belongs to. Changing this creates
     * a new dnat rule.
     */
    public readonly natGatewayId!: pulumi.Output<string>;
    /**
     * Specifies the port ID of network. This parameter is mandatory in VPC
     * scenario. Use huaweicloud.Vpc.Port to get the port if just know a fixed IP
     * addresses on the port. Changing this creates a new dnat rule.
     */
    public readonly portId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the private IP address of a user. This parameter is mandatory in
     * Direct Connect scenario. Changing this creates a new dnat rule.
     */
    public readonly privateIp!: pulumi.Output<string | undefined>;
    /**
     * Specifies the protocol type. Currently, TCP, UDP, and ANY are supported.
     * Changing this creates a new dnat rule.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The region in which to create the dnat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new dnat rule.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Dnat rule status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a DnatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnatRuleArgs | DnatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnatRuleState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalServicePort"] = state ? state.externalServicePort : undefined;
            resourceInputs["floatingIpAddress"] = state ? state.floatingIpAddress : undefined;
            resourceInputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            resourceInputs["internalServicePort"] = state ? state.internalServicePort : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as DnatRuleArgs | undefined;
            if ((!args || args.externalServicePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalServicePort'");
            }
            if ((!args || args.floatingIpId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'floatingIpId'");
            }
            if ((!args || args.internalServicePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internalServicePort'");
            }
            if ((!args || args.natGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalServicePort"] = args ? args.externalServicePort : undefined;
            resourceInputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            resourceInputs["internalServicePort"] = args ? args.internalServicePort : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["portId"] = args ? args.portId : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["floatingIpAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnatRule resources.
 */
export interface DnatRuleState {
    /**
     * Dnat rule creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of the dnat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     * Changing this creates a new dnat rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    externalServicePort?: pulumi.Input<number>;
    /**
     * The actual floating IP address.
     */
    floatingIpAddress?: pulumi.Input<string>;
    /**
     * Specifies the ID of the floating IP address. Changing this creates a
     * new dnat rule.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    internalServicePort?: pulumi.Input<number>;
    /**
     * ID of the nat gateway this dnat rule belongs to. Changing this creates
     * a new dnat rule.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * Specifies the port ID of network. This parameter is mandatory in VPC
     * scenario. Use huaweicloud.Vpc.Port to get the port if just know a fixed IP
     * addresses on the port. Changing this creates a new dnat rule.
     */
    portId?: pulumi.Input<string>;
    /**
     * Specifies the private IP address of a user. This parameter is mandatory in
     * Direct Connect scenario. Changing this creates a new dnat rule.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Specifies the protocol type. Currently, TCP, UDP, and ANY are supported.
     * Changing this creates a new dnat rule.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The region in which to create the dnat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new dnat rule.
     */
    region?: pulumi.Input<string>;
    /**
     * Dnat rule status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnatRule resource.
 */
export interface DnatRuleArgs {
    /**
     * Specifies the description of the dnat rule.
     * The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
     * Changing this creates a new dnat rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    externalServicePort: pulumi.Input<number>;
    /**
     * Specifies the ID of the floating IP address. Changing this creates a
     * new dnat rule.
     */
    floatingIpId: pulumi.Input<string>;
    /**
     * Specifies port used by ECSs or BMSs to provide services for
     * external systems. Changing this creates a new dnat rule.
     */
    internalServicePort: pulumi.Input<number>;
    /**
     * ID of the nat gateway this dnat rule belongs to. Changing this creates
     * a new dnat rule.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * Specifies the port ID of network. This parameter is mandatory in VPC
     * scenario. Use huaweicloud.Vpc.Port to get the port if just know a fixed IP
     * addresses on the port. Changing this creates a new dnat rule.
     */
    portId?: pulumi.Input<string>;
    /**
     * Specifies the private IP address of a user. This parameter is mandatory in
     * Direct Connect scenario. Changing this creates a new dnat rule.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Specifies the protocol type. Currently, TCP, UDP, and ANY are supported.
     * Changing this creates a new dnat rule.
     */
    protocol: pulumi.Input<string>;
    /**
     * The region in which to create the dnat rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new dnat rule.
     */
    region?: pulumi.Input<string>;
}

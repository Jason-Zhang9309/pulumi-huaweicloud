// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a SWR repository sharing resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const config = new pulumi.Config();
 * const organizationName = config.requireObject("organizationName");
 * const repositoryName = config.requireObject("repositoryName");
 * const sharingAccount = config.requireObject("sharingAccount");
 * const test = new huaweicloud.swr.RepositorySharing("test", {
 *     organization: organizationName,
 *     repository: repositoryName,
 *     sharingAccount: sharingAccount,
 *     permission: "pull",
 *     deadline: "forever",
 * });
 * ```
 *
 * ## Import
 *
 * Repository sharing can be imported using the organization name, repository name and sharing account separated by a slash, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Swr/repositorySharing:RepositorySharing test org-name/repo-name/sharing-account
 * ```
 */
export class RepositorySharing extends pulumi.CustomResource {
    /**
     * Get an existing RepositorySharing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositorySharingState, opts?: pulumi.CustomResourceOptions): RepositorySharing {
        return new RepositorySharing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Swr/repositorySharing:RepositorySharing';

    /**
     * Returns true if the given object is an instance of RepositorySharing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositorySharing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositorySharing.__pulumiType;
    }

    /**
     * Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
     * for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
     * The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
     */
    public readonly deadline!: pulumi.Output<string>;
    /**
     * Specifies the description of the repository sharing.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * Specifies the permission to be granted. Currently, only the **pull** permission is supported.
     * Default value is **pull**.
     */
    public readonly permission!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the name of the repository to be shared.
     * Changing this creates a new resource.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * Specifies the name of the account for repository sharing.
     * Changing this creates a new resource
     * > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
     */
    public readonly sharingAccount!: pulumi.Output<string>;
    /**
     * Indicates the repository sharing is valid (true) or expired (false).
     */
    public /*out*/ readonly status!: pulumi.Output<boolean>;

    /**
     * Create a RepositorySharing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositorySharingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositorySharingArgs | RepositorySharingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositorySharingState | undefined;
            resourceInputs["deadline"] = state ? state.deadline : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["sharingAccount"] = state ? state.sharingAccount : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RepositorySharingArgs | undefined;
            if ((!args || args.deadline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deadline'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.sharingAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharingAccount'");
            }
            resourceInputs["deadline"] = args ? args.deadline : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["sharingAccount"] = args ? args.sharingAccount : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositorySharing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositorySharing resources.
 */
export interface RepositorySharingState {
    /**
     * Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
     * for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
     * The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
     */
    deadline?: pulumi.Input<string>;
    /**
     * Specifies the description of the repository sharing.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    organization?: pulumi.Input<string>;
    /**
     * Specifies the permission to be granted. Currently, only the **pull** permission is supported.
     * Default value is **pull**.
     */
    permission?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the name of the repository to be shared.
     * Changing this creates a new resource.
     */
    repository?: pulumi.Input<string>;
    /**
     * Specifies the name of the account for repository sharing.
     * Changing this creates a new resource
     * > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
     */
    sharingAccount?: pulumi.Input<string>;
    /**
     * Indicates the repository sharing is valid (true) or expired (false).
     */
    status?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RepositorySharing resource.
 */
export interface RepositorySharingArgs {
    /**
     * Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
     * for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
     * The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
     */
    deadline: pulumi.Input<string>;
    /**
     * Specifies the description of the repository sharing.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    organization: pulumi.Input<string>;
    /**
     * Specifies the permission to be granted. Currently, only the **pull** permission is supported.
     * Default value is **pull**.
     */
    permission?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the name of the repository to be shared.
     * Changing this creates a new resource.
     */
    repository: pulumi.Input<string>;
    /**
     * Specifies the name of the account for repository sharing.
     * Changing this creates a new resource
     * > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
     */
    sharingAccount: pulumi.Input<string>;
}

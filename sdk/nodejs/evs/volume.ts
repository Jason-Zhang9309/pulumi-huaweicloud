// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a volume resource within HuaweiCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as huaweicloud from "@pulumi/huaweicloud";
 *
 * const volume = new huaweicloud.Evs.Volume("volume", {
 *     availabilityZone: "cn-north-4a",
 *     description: "my volume",
 *     size: 20,
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 *     volumeType: "SAS",
 * });
 * ```
 * ### With KMS Encryption
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@huaweicloudos/pulumi";
 *
 * const volume = new huaweicloud.evs.Volume("volume", {
 *     description: "my volume",
 *     volumeType: "SAS",
 *     size: 20,
 *     kmsId: _var.kms_id,
 *     availabilityZone: "cn-north-4a",
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Volumes can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import huaweicloud:Evs/volume:Volume volume_1 14a80bc7-c12c-4fe0-a38a-cb77eeac9bd6
 * ```
 *
 *  Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include**cascade**, **period_unit**, **period** and **auto_renew**. It is generally recommended running terraform plan after importing an disk. You can then decide if changes should be applied to the disk, or the resource definition should be updated to align with the disk. Also you can ignore changes as below. resource "huaweicloud_evs_volume" "volume_1" {
 *
 *  ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [
 *
 *  cascade,
 *
 *  ]
 *
 *  } }
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'huaweicloud:Evs/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
     * the Device as the Instance sees it.
     */
    public /*out*/ readonly attachments!: pulumi.Output<outputs.Evs.VolumeAttachment[]>;
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**.
     * Changing this creates a new disk.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the availability zone for the disk. Changing this creates
     * a new disk.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the backup ID from which to create the disk. Changing this
     * creates a new disk.
     */
    public readonly backupId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the delete mode of snapshot. The default value is false. All snapshot
     * associated with the disk will also be deleted when the parameter is set to true.
     */
    public readonly cascade!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     * Changing this creates a new disk.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the disk description. The value can contain a maximum of 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the device type of disk to create. Valid options are VBD and
     * SCSI. Defaults to VBD. Changing this creates a new disk.
     */
    public readonly deviceType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project id of the disk. Changing this
     * creates a new disk.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the image ID from which to create the disk. Changing this creates
     * a new disk.
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Encryption KMS ID to create the disk. Changing this creates a
     * new disk.
     */
    public readonly kmsId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the disk is shareable. The default value is false.
     * Changing this creates a new disk.
     */
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the disk name. The value can contain a maximum of 255 bytes.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the charging period of the disk.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the valid value is 1.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this creates a new disk.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the disk size, in GB. The valid value is range from:
     * + System disk: 1 GB to 1024 GB
     * + Data disk: 10 GB to 32768 GB
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Specifies the snapshot ID from which to create the disk. Changing this
     * creates a new disk.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
     * ESSD.
     * + SAS: specifies the high I/O disk type.
     * + SSD: specifies the ultra-high I/O disk type.
     * + GPSSD: specifies the general purpose SSD disk type.
     * + ESSD: Extreme SSD type.
     */
    public readonly volumeType!: pulumi.Output<string>;
    /**
     * The unique identifier used for mounting the EVS disk.
     */
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["cascade"] = state ? state.cascade : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.volumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["cascade"] = args ? args.cascade : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["attachments"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
     * the Device as the Instance sees it.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeAttachment>[]>;
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**.
     * Changing this creates a new disk.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone for the disk. Changing this creates
     * a new disk.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the backup ID from which to create the disk. Changing this
     * creates a new disk.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Specifies the delete mode of snapshot. The default value is false. All snapshot
     * associated with the disk will also be deleted when the parameter is set to true.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     * Changing this creates a new disk.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the disk description. The value can contain a maximum of 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the device type of disk to create. Valid options are VBD and
     * SCSI. Defaults to VBD. Changing this creates a new disk.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the disk. Changing this
     * creates a new disk.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the image ID from which to create the disk. Changing this creates
     * a new disk.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Specifies the Encryption KMS ID to create the disk. Changing this creates a
     * new disk.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * Specifies whether the disk is shareable. The default value is false.
     * Changing this creates a new disk.
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * Specifies the disk name. The value can contain a maximum of 255 bytes.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the disk.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the valid value is 1.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this creates a new disk.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the disk size, in GB. The valid value is range from:
     * + System disk: 1 GB to 1024 GB
     * + Data disk: 10 GB to 32768 GB
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies the snapshot ID from which to create the disk. Changing this
     * creates a new disk.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
     * ESSD.
     * + SAS: specifies the high I/O disk type.
     * + SSD: specifies the ultra-high I/O disk type.
     * + GPSSD: specifies the general purpose SSD disk type.
     * + ESSD: Extreme SSD type.
     */
    volumeType?: pulumi.Input<string>;
    /**
     * The unique identifier used for mounting the EVS disk.
     */
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**.
     * Changing this creates a new disk.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone for the disk. Changing this creates
     * a new disk.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Specifies the backup ID from which to create the disk. Changing this
     * creates a new disk.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Specifies the delete mode of snapshot. The default value is false. All snapshot
     * associated with the disk will also be deleted when the parameter is set to true.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * Specifies the charging mode of the disk.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     * Changing this creates a new disk.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the disk description. The value can contain a maximum of 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the device type of disk to create. Valid options are VBD and
     * SCSI. Defaults to VBD. Changing this creates a new disk.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the disk. Changing this
     * creates a new disk.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the image ID from which to create the disk. Changing this creates
     * a new disk.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Specifies the Encryption KMS ID to create the disk. Changing this creates a
     * new disk.
     */
    kmsId?: pulumi.Input<string>;
    /**
     * Specifies whether the disk is shareable. The default value is false.
     * Changing this creates a new disk.
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * Specifies the disk name. The value can contain a maximum of 255 bytes.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the disk.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the valid value is 1.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the disk.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this creates a new disk.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the disk. If omitted, the
     * provider-level region will be used. Changing this creates a new disk.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the disk size, in GB. The valid value is range from:
     * + System disk: 1 GB to 1024 GB
     * + Data disk: 10 GB to 32768 GB
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies the snapshot ID from which to create the disk. Changing this
     * creates a new disk.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
     * ESSD.
     * + SAS: specifies the high I/O disk type.
     * + SSD: specifies the ultra-high I/O disk type.
     * + GPSSD: specifies the general purpose SSD disk type.
     * + ESSD: Extreme SSD type.
     */
    volumeType: pulumi.Input<string>;
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of available flavor details within HuaweiCloud.
//
// ## Example Usage
// ### Query the list of kafka flavors for cluster type
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dms"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dms.GetFlavors(ctx, &dms.GetFlavorsArgs{
//				Type: pulumi.StringRef("cluster"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Query the kafka flavor details of the specified ID
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dms"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dms.GetFlavors(ctx, &dms.GetFlavorsArgs{
//				FlavorId: pulumi.StringRef("c6.2u4g.cluster"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFlavors(ctx *pulumi.Context, args *GetFlavorsArgs, opts ...pulumi.InvokeOption) (*GetFlavorsResult, error) {
	var rv GetFlavorsResult
	err := ctx.Invoke("huaweicloud:Dms/getFlavors:getFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsArgs struct {
	// Specifies the type of CPU architecture, e.g. **X86**.
	ArchType *string `pulumi:"archType"`
	// Specifies the list of availability zones with available resources.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the flavor billing mode.
	// The valid valus are **prePaid** and **postPaid**.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the DMS flvaor ID, e.g. **c6.2u4g.cluster**.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the region in which to obtain the dms kafka flavors.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the disk IO encoding.
	// + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
	// + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
	StorageSpecCode *string `pulumi:"storageSpecCode"`
	// Specifies flavor type. The valid values are **single** and **cluster**.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getFlavors.
type GetFlavorsResult struct {
	ArchType *string `pulumi:"archType"`
	// The list of availability zones with available resources.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	ChargingMode      *string  `pulumi:"chargingMode"`
	FlavorId          *string  `pulumi:"flavorId"`
	// The list of flavor details.
	// The object structure is documented below.
	Flavors []GetFlavorsFlavor `pulumi:"flavors"`
	// The provider-assigned unique ID for this managed resource.
	Id     string  `pulumi:"id"`
	Region *string `pulumi:"region"`
	// The disk IO encoding.
	StorageSpecCode *string `pulumi:"storageSpecCode"`
	// The disk type.
	Type *string `pulumi:"type"`
	// The supported flavor versions.
	Versions []string `pulumi:"versions"`
}

func GetFlavorsOutput(ctx *pulumi.Context, args GetFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetFlavorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFlavorsResult, error) {
			args := v.(GetFlavorsArgs)
			r, err := GetFlavors(ctx, &args, opts...)
			var s GetFlavorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFlavorsResultOutput)
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsOutputArgs struct {
	// Specifies the type of CPU architecture, e.g. **X86**.
	ArchType pulumi.StringPtrInput `pulumi:"archType"`
	// Specifies the list of availability zones with available resources.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Specifies the flavor billing mode.
	// The valid valus are **prePaid** and **postPaid**.
	ChargingMode pulumi.StringPtrInput `pulumi:"chargingMode"`
	// Specifies the DMS flvaor ID, e.g. **c6.2u4g.cluster**.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// Specifies the region in which to obtain the dms kafka flavors.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the disk IO encoding.
	// + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
	// + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
	StorageSpecCode pulumi.StringPtrInput `pulumi:"storageSpecCode"`
	// Specifies flavor type. The valid values are **single** and **cluster**.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getFlavors.
type GetFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsResult)(nil)).Elem()
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutput() GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutputWithContext(ctx context.Context) GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) ArchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.ArchType }).(pulumi.StringPtrOutput)
}

// The list of availability zones with available resources.
func (o GetFlavorsResultOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o GetFlavorsResultOutput) ChargingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.ChargingMode }).(pulumi.StringPtrOutput)
}

func (o GetFlavorsResultOutput) FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.FlavorId }).(pulumi.StringPtrOutput)
}

// The list of flavor details.
// The object structure is documented below.
func (o GetFlavorsResultOutput) Flavors() GetFlavorsFlavorArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []GetFlavorsFlavor { return v.Flavors }).(GetFlavorsFlavorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFlavorsResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The disk IO encoding.
func (o GetFlavorsResultOutput) StorageSpecCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.StorageSpecCode }).(pulumi.StringPtrOutput)
}

// The disk type.
func (o GetFlavorsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The supported flavor versions.
func (o GetFlavorsResultOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlavorsResultOutput{})
}

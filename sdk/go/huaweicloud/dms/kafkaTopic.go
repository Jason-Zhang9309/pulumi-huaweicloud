// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a DMS kafka topic resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			kafkaInstanceId := cfg.RequireObject("kafkaInstanceId")
//			_, err := Dms.NewKafkaTopic(ctx, "topic", &Dms.KafkaTopicArgs{
//				InstanceId: pulumi.Any(kafkaInstanceId),
//				Partitions: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DMS kafka topics can be imported using the kafka instance ID and topic name separated by a slash, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dms/kafkaTopic:KafkaTopic topic c8057fe5-23a8-46ef-ad83-c0055b4e0c5c/topic_1
//
// ```
type KafkaTopic struct {
	pulumi.CustomResourceState

	// Specifies the aging time in hours.
	// The value ranges from `1` to `720` and defaults to `72`.
	AgingTime pulumi.IntOutput `pulumi:"agingTime"`
	// Specifies the other topic configurations.
	Configs KafkaTopicConfigArrayOutput `pulumi:"configs"`
	// Indicates the topic create time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of topic.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the DMS kafka instance to which the topic belongs.
	// Changing this creates a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the configuration name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the integers list of brokers for new partitions.
	NewPartitionBrokers pulumi.IntArrayOutput `pulumi:"newPartitionBrokers"`
	// Specifies the partition number. The value ranges from `1` to `200`.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Indicates whether this policy is the default policy.
	PoliciesOnly pulumi.BoolOutput `pulumi:"policiesOnly"`
	// The region in which to create the DMS kafka topic resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the replica number.
	// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
	Replicas pulumi.IntOutput `pulumi:"replicas"`
	// Whether or not to enable synchronous flushing.
	SyncFlushing pulumi.BoolOutput `pulumi:"syncFlushing"`
	// Whether or not to enable synchronous replication.
	SyncReplication pulumi.BoolOutput `pulumi:"syncReplication"`
	// Indicates the topic type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KafkaTopic
	err := ctx.RegisterResource("huaweicloud:Dms/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("huaweicloud:Dms/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	// Specifies the aging time in hours.
	// The value ranges from `1` to `720` and defaults to `72`.
	AgingTime *int `pulumi:"agingTime"`
	// Specifies the other topic configurations.
	Configs []KafkaTopicConfig `pulumi:"configs"`
	// Indicates the topic create time.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of topic.
	Description *string `pulumi:"description"`
	// Specifies the ID of the DMS kafka instance to which the topic belongs.
	// Changing this creates a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the configuration name.
	Name *string `pulumi:"name"`
	// Specifies the integers list of brokers for new partitions.
	NewPartitionBrokers []int `pulumi:"newPartitionBrokers"`
	// Specifies the partition number. The value ranges from `1` to `200`.
	Partitions *int `pulumi:"partitions"`
	// Indicates whether this policy is the default policy.
	PoliciesOnly *bool `pulumi:"policiesOnly"`
	// The region in which to create the DMS kafka topic resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the replica number.
	// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
	Replicas *int `pulumi:"replicas"`
	// Whether or not to enable synchronous flushing.
	SyncFlushing *bool `pulumi:"syncFlushing"`
	// Whether or not to enable synchronous replication.
	SyncReplication *bool `pulumi:"syncReplication"`
	// Indicates the topic type.
	Type *string `pulumi:"type"`
}

type KafkaTopicState struct {
	// Specifies the aging time in hours.
	// The value ranges from `1` to `720` and defaults to `72`.
	AgingTime pulumi.IntPtrInput
	// Specifies the other topic configurations.
	Configs KafkaTopicConfigArrayInput
	// Indicates the topic create time.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of topic.
	Description pulumi.StringPtrInput
	// Specifies the ID of the DMS kafka instance to which the topic belongs.
	// Changing this creates a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the configuration name.
	Name pulumi.StringPtrInput
	// Specifies the integers list of brokers for new partitions.
	NewPartitionBrokers pulumi.IntArrayInput
	// Specifies the partition number. The value ranges from `1` to `200`.
	Partitions pulumi.IntPtrInput
	// Indicates whether this policy is the default policy.
	PoliciesOnly pulumi.BoolPtrInput
	// The region in which to create the DMS kafka topic resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the replica number.
	// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
	Replicas pulumi.IntPtrInput
	// Whether or not to enable synchronous flushing.
	SyncFlushing pulumi.BoolPtrInput
	// Whether or not to enable synchronous replication.
	SyncReplication pulumi.BoolPtrInput
	// Indicates the topic type.
	Type pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// Specifies the aging time in hours.
	// The value ranges from `1` to `720` and defaults to `72`.
	AgingTime *int `pulumi:"agingTime"`
	// Specifies the other topic configurations.
	Configs []KafkaTopicConfig `pulumi:"configs"`
	// Specifies the description of topic.
	Description *string `pulumi:"description"`
	// Specifies the ID of the DMS kafka instance to which the topic belongs.
	// Changing this creates a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the configuration name.
	Name *string `pulumi:"name"`
	// Specifies the integers list of brokers for new partitions.
	NewPartitionBrokers []int `pulumi:"newPartitionBrokers"`
	// Specifies the partition number. The value ranges from `1` to `200`.
	Partitions int `pulumi:"partitions"`
	// The region in which to create the DMS kafka topic resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the replica number.
	// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
	Replicas *int `pulumi:"replicas"`
	// Whether or not to enable synchronous flushing.
	SyncFlushing *bool `pulumi:"syncFlushing"`
	// Whether or not to enable synchronous replication.
	SyncReplication *bool `pulumi:"syncReplication"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// Specifies the aging time in hours.
	// The value ranges from `1` to `720` and defaults to `72`.
	AgingTime pulumi.IntPtrInput
	// Specifies the other topic configurations.
	Configs KafkaTopicConfigArrayInput
	// Specifies the description of topic.
	Description pulumi.StringPtrInput
	// Specifies the ID of the DMS kafka instance to which the topic belongs.
	// Changing this creates a new resource.
	InstanceId pulumi.StringInput
	// Specifies the configuration name.
	Name pulumi.StringPtrInput
	// Specifies the integers list of brokers for new partitions.
	NewPartitionBrokers pulumi.IntArrayInput
	// Specifies the partition number. The value ranges from `1` to `200`.
	Partitions pulumi.IntInput
	// The region in which to create the DMS kafka topic resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the replica number.
	// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
	Replicas pulumi.IntPtrInput
	// Whether or not to enable synchronous flushing.
	SyncFlushing pulumi.BoolPtrInput
	// Whether or not to enable synchronous replication.
	SyncReplication pulumi.BoolPtrInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (*KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (i *KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i *KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

// KafkaTopicArrayInput is an input type that accepts KafkaTopicArray and KafkaTopicArrayOutput values.
// You can construct a concrete instance of `KafkaTopicArrayInput` via:
//
//	KafkaTopicArray{ KafkaTopicArgs{...} }
type KafkaTopicArrayInput interface {
	pulumi.Input

	ToKafkaTopicArrayOutput() KafkaTopicArrayOutput
	ToKafkaTopicArrayOutputWithContext(context.Context) KafkaTopicArrayOutput
}

type KafkaTopicArray []KafkaTopicInput

func (KafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return i.ToKafkaTopicArrayOutputWithContext(context.Background())
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicArrayOutput)
}

// KafkaTopicMapInput is an input type that accepts KafkaTopicMap and KafkaTopicMapOutput values.
// You can construct a concrete instance of `KafkaTopicMapInput` via:
//
//	KafkaTopicMap{ "key": KafkaTopicArgs{...} }
type KafkaTopicMapInput interface {
	pulumi.Input

	ToKafkaTopicMapOutput() KafkaTopicMapOutput
	ToKafkaTopicMapOutputWithContext(context.Context) KafkaTopicMapOutput
}

type KafkaTopicMap map[string]KafkaTopicInput

func (KafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicMap) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return i.ToKafkaTopicMapOutputWithContext(context.Background())
}

func (i KafkaTopicMap) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapOutput)
}

type KafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

// Specifies the aging time in hours.
// The value ranges from `1` to `720` and defaults to `72`.
func (o KafkaTopicOutput) AgingTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.AgingTime }).(pulumi.IntOutput)
}

// Specifies the other topic configurations.
func (o KafkaTopicOutput) Configs() KafkaTopicConfigArrayOutput {
	return o.ApplyT(func(v *KafkaTopic) KafkaTopicConfigArrayOutput { return v.Configs }).(KafkaTopicConfigArrayOutput)
}

// Indicates the topic create time.
func (o KafkaTopicOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of topic.
func (o KafkaTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the DMS kafka instance to which the topic belongs.
// Changing this creates a new resource.
func (o KafkaTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the configuration name.
func (o KafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the integers list of brokers for new partitions.
func (o KafkaTopicOutput) NewPartitionBrokers() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntArrayOutput { return v.NewPartitionBrokers }).(pulumi.IntArrayOutput)
}

// Specifies the partition number. The value ranges from `1` to `200`.
func (o KafkaTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// Indicates whether this policy is the default policy.
func (o KafkaTopicOutput) PoliciesOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.PoliciesOnly }).(pulumi.BoolOutput)
}

// The region in which to create the DMS kafka topic resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o KafkaTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the replica number.
// The value ranges from `1` to `3` and defaults to `3`. Changing this creates a new resource.
func (o KafkaTopicOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

// Whether or not to enable synchronous flushing.
func (o KafkaTopicOutput) SyncFlushing() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.SyncFlushing }).(pulumi.BoolOutput)
}

// Whether or not to enable synchronous replication.
func (o KafkaTopicOutput) SyncReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.SyncReplication }).(pulumi.BoolOutput)
}

// Indicates the topic type.
func (o KafkaTopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) Index(i pulumi.IntInput) KafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].([]*KafkaTopic)[vs[1].(int)]
	}).(KafkaTopicOutput)
}

type KafkaTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].(map[string]*KafkaTopic)[vs[1].(string)]
	}).(KafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicInput)(nil)).Elem(), &KafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicArrayInput)(nil)).Elem(), KafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicMapInput)(nil)).Elem(), KafkaTopicMap{})
	pulumi.RegisterOutputType(KafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapOutput{})
}

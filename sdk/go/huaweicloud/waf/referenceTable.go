// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a WAF reference table resource within HuaweiCloud.
//
// > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
// used. The reference table resource can be used in Cloud Mode (professional version), Dedicated Mode and ELB Mode.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			_, err := Waf.NewReferenceTable(ctx, "refTable", &Waf.ReferenceTableArgs{
//				Type:                pulumi.String("url"),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				Conditions: pulumi.StringArray{
//					pulumi.String("/admin"),
//					pulumi.String("/manage"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// There are two ways to import WAF reference table state. * Using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/referenceTable:ReferenceTable test <id>
//
// ```
//
//   - Using `id` and `enterprise_project_id`, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/referenceTable:ReferenceTable test <id>/<enterprise_project_id>
//
// ```
type ReferenceTable struct {
	pulumi.CustomResourceState

	// The conditions of the reference table. The maximum length is 30. The maximum length of
	// condition is 2048 characters.
	Conditions pulumi.StringArrayOutput `pulumi:"conditions"`
	// The server time when reference table was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the reference table. The maximum length is 128 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the enterprise project ID of WAF reference table.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
	// maximum length is 64 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the WAF reference table resource. If omitted,
	// the provider-level region will be used. Changing this setting will push a new reference table.
	Region pulumi.StringOutput `pulumi:"region"`
	// The type of the reference table, The options are `url`, `user-agent`, `ip`,
	// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewReferenceTable registers a new resource with the given unique name, arguments, and options.
func NewReferenceTable(ctx *pulumi.Context,
	name string, args *ReferenceTableArgs, opts ...pulumi.ResourceOption) (*ReferenceTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReferenceTable
	err := ctx.RegisterResource("huaweicloud:Waf/referenceTable:ReferenceTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReferenceTable gets an existing ReferenceTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReferenceTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReferenceTableState, opts ...pulumi.ResourceOption) (*ReferenceTable, error) {
	var resource ReferenceTable
	err := ctx.ReadResource("huaweicloud:Waf/referenceTable:ReferenceTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReferenceTable resources.
type referenceTableState struct {
	// The conditions of the reference table. The maximum length is 30. The maximum length of
	// condition is 2048 characters.
	Conditions []string `pulumi:"conditions"`
	// The server time when reference table was created.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the reference table. The maximum length is 128 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of WAF reference table.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
	// maximum length is 64 characters.
	Name *string `pulumi:"name"`
	// The region in which to create the WAF reference table resource. If omitted,
	// the provider-level region will be used. Changing this setting will push a new reference table.
	Region *string `pulumi:"region"`
	// The type of the reference table, The options are `url`, `user-agent`, `ip`,
	// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
	Type *string `pulumi:"type"`
}

type ReferenceTableState struct {
	// The conditions of the reference table. The maximum length is 30. The maximum length of
	// condition is 2048 characters.
	Conditions pulumi.StringArrayInput
	// The server time when reference table was created.
	CreationTime pulumi.StringPtrInput
	// The description of the reference table. The maximum length is 128 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF reference table.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
	// maximum length is 64 characters.
	Name pulumi.StringPtrInput
	// The region in which to create the WAF reference table resource. If omitted,
	// the provider-level region will be used. Changing this setting will push a new reference table.
	Region pulumi.StringPtrInput
	// The type of the reference table, The options are `url`, `user-agent`, `ip`,
	// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
	Type pulumi.StringPtrInput
}

func (ReferenceTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceTableState)(nil)).Elem()
}

type referenceTableArgs struct {
	// The conditions of the reference table. The maximum length is 30. The maximum length of
	// condition is 2048 characters.
	Conditions []string `pulumi:"conditions"`
	// The description of the reference table. The maximum length is 128 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of WAF reference table.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
	// maximum length is 64 characters.
	Name *string `pulumi:"name"`
	// The region in which to create the WAF reference table resource. If omitted,
	// the provider-level region will be used. Changing this setting will push a new reference table.
	Region *string `pulumi:"region"`
	// The type of the reference table, The options are `url`, `user-agent`, `ip`,
	// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ReferenceTable resource.
type ReferenceTableArgs struct {
	// The conditions of the reference table. The maximum length is 30. The maximum length of
	// condition is 2048 characters.
	Conditions pulumi.StringArrayInput
	// The description of the reference table. The maximum length is 128 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF reference table.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
	// maximum length is 64 characters.
	Name pulumi.StringPtrInput
	// The region in which to create the WAF reference table resource. If omitted,
	// the provider-level region will be used. Changing this setting will push a new reference table.
	Region pulumi.StringPtrInput
	// The type of the reference table, The options are `url`, `user-agent`, `ip`,
	// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
	Type pulumi.StringInput
}

func (ReferenceTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceTableArgs)(nil)).Elem()
}

type ReferenceTableInput interface {
	pulumi.Input

	ToReferenceTableOutput() ReferenceTableOutput
	ToReferenceTableOutputWithContext(ctx context.Context) ReferenceTableOutput
}

func (*ReferenceTable) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceTable)(nil)).Elem()
}

func (i *ReferenceTable) ToReferenceTableOutput() ReferenceTableOutput {
	return i.ToReferenceTableOutputWithContext(context.Background())
}

func (i *ReferenceTable) ToReferenceTableOutputWithContext(ctx context.Context) ReferenceTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceTableOutput)
}

// ReferenceTableArrayInput is an input type that accepts ReferenceTableArray and ReferenceTableArrayOutput values.
// You can construct a concrete instance of `ReferenceTableArrayInput` via:
//
//	ReferenceTableArray{ ReferenceTableArgs{...} }
type ReferenceTableArrayInput interface {
	pulumi.Input

	ToReferenceTableArrayOutput() ReferenceTableArrayOutput
	ToReferenceTableArrayOutputWithContext(context.Context) ReferenceTableArrayOutput
}

type ReferenceTableArray []ReferenceTableInput

func (ReferenceTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceTable)(nil)).Elem()
}

func (i ReferenceTableArray) ToReferenceTableArrayOutput() ReferenceTableArrayOutput {
	return i.ToReferenceTableArrayOutputWithContext(context.Background())
}

func (i ReferenceTableArray) ToReferenceTableArrayOutputWithContext(ctx context.Context) ReferenceTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceTableArrayOutput)
}

// ReferenceTableMapInput is an input type that accepts ReferenceTableMap and ReferenceTableMapOutput values.
// You can construct a concrete instance of `ReferenceTableMapInput` via:
//
//	ReferenceTableMap{ "key": ReferenceTableArgs{...} }
type ReferenceTableMapInput interface {
	pulumi.Input

	ToReferenceTableMapOutput() ReferenceTableMapOutput
	ToReferenceTableMapOutputWithContext(context.Context) ReferenceTableMapOutput
}

type ReferenceTableMap map[string]ReferenceTableInput

func (ReferenceTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceTable)(nil)).Elem()
}

func (i ReferenceTableMap) ToReferenceTableMapOutput() ReferenceTableMapOutput {
	return i.ToReferenceTableMapOutputWithContext(context.Background())
}

func (i ReferenceTableMap) ToReferenceTableMapOutputWithContext(ctx context.Context) ReferenceTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceTableMapOutput)
}

type ReferenceTableOutput struct{ *pulumi.OutputState }

func (ReferenceTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceTable)(nil)).Elem()
}

func (o ReferenceTableOutput) ToReferenceTableOutput() ReferenceTableOutput {
	return o
}

func (o ReferenceTableOutput) ToReferenceTableOutputWithContext(ctx context.Context) ReferenceTableOutput {
	return o
}

// The conditions of the reference table. The maximum length is 30. The maximum length of
// condition is 2048 characters.
func (o ReferenceTableOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringArrayOutput { return v.Conditions }).(pulumi.StringArrayOutput)
}

// The server time when reference table was created.
func (o ReferenceTableOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the reference table. The maximum length is 128 characters.
func (o ReferenceTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of WAF reference table.
// Changing this parameter will create a new resource.
func (o ReferenceTableOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The name of the reference table. Only letters, digits, and underscores(_) are allowed. The
// maximum length is 64 characters.
func (o ReferenceTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the WAF reference table resource. If omitted,
// the provider-level region will be used. Changing this setting will push a new reference table.
func (o ReferenceTableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The type of the reference table, The options are `url`, `user-agent`, `ip`,
// `params`, `cookie`, `referer` and `header`. Changing this setting will push a new reference table.
func (o ReferenceTableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceTable) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ReferenceTableArrayOutput struct{ *pulumi.OutputState }

func (ReferenceTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceTable)(nil)).Elem()
}

func (o ReferenceTableArrayOutput) ToReferenceTableArrayOutput() ReferenceTableArrayOutput {
	return o
}

func (o ReferenceTableArrayOutput) ToReferenceTableArrayOutputWithContext(ctx context.Context) ReferenceTableArrayOutput {
	return o
}

func (o ReferenceTableArrayOutput) Index(i pulumi.IntInput) ReferenceTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReferenceTable {
		return vs[0].([]*ReferenceTable)[vs[1].(int)]
	}).(ReferenceTableOutput)
}

type ReferenceTableMapOutput struct{ *pulumi.OutputState }

func (ReferenceTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceTable)(nil)).Elem()
}

func (o ReferenceTableMapOutput) ToReferenceTableMapOutput() ReferenceTableMapOutput {
	return o
}

func (o ReferenceTableMapOutput) ToReferenceTableMapOutputWithContext(ctx context.Context) ReferenceTableMapOutput {
	return o
}

func (o ReferenceTableMapOutput) MapIndex(k pulumi.StringInput) ReferenceTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReferenceTable {
		return vs[0].(map[string]*ReferenceTable)[vs[1].(string)]
	}).(ReferenceTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceTableInput)(nil)).Elem(), &ReferenceTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceTableArrayInput)(nil)).Elem(), ReferenceTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceTableMapInput)(nil)).Elem(), ReferenceTableMap{})
	pulumi.RegisterOutputType(ReferenceTableOutput{})
	pulumi.RegisterOutputType(ReferenceTableArrayOutput{})
	pulumi.RegisterOutputType(ReferenceTableMapOutput{})
}

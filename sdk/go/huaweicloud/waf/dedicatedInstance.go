// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a WAF dedicated instance resource within HuaweiCloud.
//
// ## Example Usage
// ### Creating with common tenant
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			azName := cfg.RequireObject("azName")
//			ecsFlavorId := cfg.RequireObject("ecsFlavorId")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			_, err := Waf.NewDedicatedInstance(ctx, "test", &Waf.DedicatedInstanceArgs{
//				AvailableZone:       pulumi.Any(azName),
//				SpecificationCode:   pulumi.String("waf.instance.professional"),
//				EcsFlavor:           pulumi.Any(ecsFlavorId),
//				VpcId:               pulumi.Any(vpcId),
//				SubnetId:            pulumi.Any(subnetId),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//				SecurityGroups: pulumi.StringArray{
//					pulumi.Any(securityGroupId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating with resource tenant
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			azName := cfg.RequireObject("azName")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			_, err := Waf.NewDedicatedInstance(ctx, "test", &Waf.DedicatedInstanceArgs{
//				AvailableZone:       pulumi.Any(azName),
//				SpecificationCode:   pulumi.String("waf.instance.professional"),
//				VpcId:               pulumi.Any(vpcId),
//				SubnetId:            pulumi.Any(subnetId),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				ResTenant:           pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//				SecurityGroups: pulumi.StringArray{
//					pulumi.Any(securityGroupId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// There are two ways to import WAF dedicated instance state. * Using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/dedicatedInstance:DedicatedInstance test <id>
//
// ```
//
//   - Using `id` and `enterprise_project_id`, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/dedicatedInstance:DedicatedInstance test <id>/<enterprise_project_id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response. The missing attributes include`res_tenant`, `anti_affinity`, and `tags`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also, you can ignore changes as below. hcl resource "huaweicloud_waf_dedicated_instance" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	res_tenant, anti_affinity, tags,
//
//	]
//
//	} }
type DedicatedInstance struct {
	pulumi.CustomResourceState

	// The access status of the instance. `0`: inaccessible, `1`: accessible.
	AccessStatus pulumi.IntOutput `pulumi:"accessStatus"`
	// Specifies whether to enable anti-affinity. This field is valid only
	// when `resTenant` is set to **true**. Changing this will create a new instance.
	AntiAffinity pulumi.BoolPtrOutput `pulumi:"antiAffinity"`
	// Specifies the available zone name for the dedicated instance. It can be
	// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
	AvailableZone pulumi.StringOutput `pulumi:"availableZone"`
	// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
	// Changing this will create a new instance.
	CpuArchitecture pulumi.StringPtrOutput `pulumi:"cpuArchitecture"`
	// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
	// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
	// This field is valid and required only when `resTenant` is set to **false**.
	EcsFlavor pulumi.StringOutput `pulumi:"ecsFlavor"`
	// Specifies the enterprise project ID of WAF dedicated instance. Changing this
	// will migrate the WAF instance to a new enterprise project.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// schema: Deprecated;
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
	// keeping the name unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the WAF dedicated instance.
	// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether this is resource tenant.
	// Changing this will create a new instance.
	// + **false**: Common tenant.
	// + **true**: Resource tenant.
	ResTenant pulumi.BoolPtrOutput `pulumi:"resTenant"`
	// The running status of the instance. Values are:
	RunStatus pulumi.IntOutput `pulumi:"runStatus"`
	// Specifies the security group of the instance. This is an array of
	// security group IDs. Changing this will create a new instance.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The ID of the ECS hosting the dedicated engine.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The service plane IP address of the WAF dedicated instance.
	ServiceIp pulumi.StringOutput `pulumi:"serviceIp"`
	// Specifies the specification code of instance.
	// Different specifications have different throughput. Changing this will create a new instance.
	// Values are:
	// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
	// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
	SpecificationCode pulumi.StringOutput `pulumi:"specificationCode"`
	// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
	// create a new instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the WAF dedicated instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether the dedicated engine can be upgraded. `0`: Cannot be upgraded, `1`: Can be upgraded.
	Upgradable pulumi.IntOutput `pulumi:"upgradable"`
	// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
	// instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDedicatedInstance registers a new resource with the given unique name, arguments, and options.
func NewDedicatedInstance(ctx *pulumi.Context,
	name string, args *DedicatedInstanceArgs, opts ...pulumi.ResourceOption) (*DedicatedInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailableZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailableZone'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.SpecificationCode == nil {
		return nil, errors.New("invalid value for required argument 'SpecificationCode'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DedicatedInstance
	err := ctx.RegisterResource("huaweicloud:Waf/dedicatedInstance:DedicatedInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedInstance gets an existing DedicatedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedInstanceState, opts ...pulumi.ResourceOption) (*DedicatedInstance, error) {
	var resource DedicatedInstance
	err := ctx.ReadResource("huaweicloud:Waf/dedicatedInstance:DedicatedInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedInstance resources.
type dedicatedInstanceState struct {
	// The access status of the instance. `0`: inaccessible, `1`: accessible.
	AccessStatus *int `pulumi:"accessStatus"`
	// Specifies whether to enable anti-affinity. This field is valid only
	// when `resTenant` is set to **true**. Changing this will create a new instance.
	AntiAffinity *bool `pulumi:"antiAffinity"`
	// Specifies the available zone name for the dedicated instance. It can be
	// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
	AvailableZone *string `pulumi:"availableZone"`
	// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
	// Changing this will create a new instance.
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
	// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
	// This field is valid and required only when `resTenant` is set to **false**.
	EcsFlavor *string `pulumi:"ecsFlavor"`
	// Specifies the enterprise project ID of WAF dedicated instance. Changing this
	// will migrate the WAF instance to a new enterprise project.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated;
	GroupId *string `pulumi:"groupId"`
	// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
	// keeping the name unique.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the WAF dedicated instance.
	// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
	Region *string `pulumi:"region"`
	// Specifies whether this is resource tenant.
	// Changing this will create a new instance.
	// + **false**: Common tenant.
	// + **true**: Resource tenant.
	ResTenant *bool `pulumi:"resTenant"`
	// The running status of the instance. Values are:
	RunStatus *int `pulumi:"runStatus"`
	// Specifies the security group of the instance. This is an array of
	// security group IDs. Changing this will create a new instance.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The ID of the ECS hosting the dedicated engine.
	ServerId *string `pulumi:"serverId"`
	// The service plane IP address of the WAF dedicated instance.
	ServiceIp *string `pulumi:"serviceIp"`
	// Specifies the specification code of instance.
	// Different specifications have different throughput. Changing this will create a new instance.
	// Values are:
	// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
	// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
	SpecificationCode *string `pulumi:"specificationCode"`
	// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
	// create a new instance.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the WAF dedicated instance.
	Tags map[string]string `pulumi:"tags"`
	// Whether the dedicated engine can be upgraded. `0`: Cannot be upgraded, `1`: Can be upgraded.
	Upgradable *int `pulumi:"upgradable"`
	// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
	// instance.
	VpcId *string `pulumi:"vpcId"`
}

type DedicatedInstanceState struct {
	// The access status of the instance. `0`: inaccessible, `1`: accessible.
	AccessStatus pulumi.IntPtrInput
	// Specifies whether to enable anti-affinity. This field is valid only
	// when `resTenant` is set to **true**. Changing this will create a new instance.
	AntiAffinity pulumi.BoolPtrInput
	// Specifies the available zone name for the dedicated instance. It can be
	// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
	AvailableZone pulumi.StringPtrInput
	// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
	// Changing this will create a new instance.
	CpuArchitecture pulumi.StringPtrInput
	// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
	// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
	// This field is valid and required only when `resTenant` is set to **false**.
	EcsFlavor pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF dedicated instance. Changing this
	// will migrate the WAF instance to a new enterprise project.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated;
	GroupId pulumi.StringPtrInput
	// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
	// keeping the name unique.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the WAF dedicated instance.
	// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
	Region pulumi.StringPtrInput
	// Specifies whether this is resource tenant.
	// Changing this will create a new instance.
	// + **false**: Common tenant.
	// + **true**: Resource tenant.
	ResTenant pulumi.BoolPtrInput
	// The running status of the instance. Values are:
	RunStatus pulumi.IntPtrInput
	// Specifies the security group of the instance. This is an array of
	// security group IDs. Changing this will create a new instance.
	SecurityGroups pulumi.StringArrayInput
	// The ID of the ECS hosting the dedicated engine.
	ServerId pulumi.StringPtrInput
	// The service plane IP address of the WAF dedicated instance.
	ServiceIp pulumi.StringPtrInput
	// Specifies the specification code of instance.
	// Different specifications have different throughput. Changing this will create a new instance.
	// Values are:
	// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
	// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
	SpecificationCode pulumi.StringPtrInput
	// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
	// create a new instance.
	SubnetId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the WAF dedicated instance.
	Tags pulumi.StringMapInput
	// Whether the dedicated engine can be upgraded. `0`: Cannot be upgraded, `1`: Can be upgraded.
	Upgradable pulumi.IntPtrInput
	// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
	// instance.
	VpcId pulumi.StringPtrInput
}

func (DedicatedInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedInstanceState)(nil)).Elem()
}

type dedicatedInstanceArgs struct {
	// Specifies whether to enable anti-affinity. This field is valid only
	// when `resTenant` is set to **true**. Changing this will create a new instance.
	AntiAffinity *bool `pulumi:"antiAffinity"`
	// Specifies the available zone name for the dedicated instance. It can be
	// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
	AvailableZone string `pulumi:"availableZone"`
	// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
	// Changing this will create a new instance.
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
	// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
	// This field is valid and required only when `resTenant` is set to **false**.
	EcsFlavor *string `pulumi:"ecsFlavor"`
	// Specifies the enterprise project ID of WAF dedicated instance. Changing this
	// will migrate the WAF instance to a new enterprise project.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated;
	GroupId *string `pulumi:"groupId"`
	// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
	// keeping the name unique.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the WAF dedicated instance.
	// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
	Region *string `pulumi:"region"`
	// Specifies whether this is resource tenant.
	// Changing this will create a new instance.
	// + **false**: Common tenant.
	// + **true**: Resource tenant.
	ResTenant *bool `pulumi:"resTenant"`
	// Specifies the security group of the instance. This is an array of
	// security group IDs. Changing this will create a new instance.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies the specification code of instance.
	// Different specifications have different throughput. Changing this will create a new instance.
	// Values are:
	// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
	// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
	SpecificationCode string `pulumi:"specificationCode"`
	// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
	// create a new instance.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the WAF dedicated instance.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
	// instance.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a DedicatedInstance resource.
type DedicatedInstanceArgs struct {
	// Specifies whether to enable anti-affinity. This field is valid only
	// when `resTenant` is set to **true**. Changing this will create a new instance.
	AntiAffinity pulumi.BoolPtrInput
	// Specifies the available zone name for the dedicated instance. It can be
	// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
	AvailableZone pulumi.StringInput
	// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
	// Changing this will create a new instance.
	CpuArchitecture pulumi.StringPtrInput
	// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
	// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
	// This field is valid and required only when `resTenant` is set to **false**.
	EcsFlavor pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF dedicated instance. Changing this
	// will migrate the WAF instance to a new enterprise project.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated;
	GroupId pulumi.StringPtrInput
	// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
	// keeping the name unique.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the WAF dedicated instance.
	// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
	Region pulumi.StringPtrInput
	// Specifies whether this is resource tenant.
	// Changing this will create a new instance.
	// + **false**: Common tenant.
	// + **true**: Resource tenant.
	ResTenant pulumi.BoolPtrInput
	// Specifies the security group of the instance. This is an array of
	// security group IDs. Changing this will create a new instance.
	SecurityGroups pulumi.StringArrayInput
	// Specifies the specification code of instance.
	// Different specifications have different throughput. Changing this will create a new instance.
	// Values are:
	// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
	// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
	SpecificationCode pulumi.StringInput
	// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
	// create a new instance.
	SubnetId pulumi.StringInput
	// Specifies the key/value pairs to associate with the WAF dedicated instance.
	Tags pulumi.StringMapInput
	// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
	// instance.
	VpcId pulumi.StringInput
}

func (DedicatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedInstanceArgs)(nil)).Elem()
}

type DedicatedInstanceInput interface {
	pulumi.Input

	ToDedicatedInstanceOutput() DedicatedInstanceOutput
	ToDedicatedInstanceOutputWithContext(ctx context.Context) DedicatedInstanceOutput
}

func (*DedicatedInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedInstance)(nil)).Elem()
}

func (i *DedicatedInstance) ToDedicatedInstanceOutput() DedicatedInstanceOutput {
	return i.ToDedicatedInstanceOutputWithContext(context.Background())
}

func (i *DedicatedInstance) ToDedicatedInstanceOutputWithContext(ctx context.Context) DedicatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedInstanceOutput)
}

// DedicatedInstanceArrayInput is an input type that accepts DedicatedInstanceArray and DedicatedInstanceArrayOutput values.
// You can construct a concrete instance of `DedicatedInstanceArrayInput` via:
//
//	DedicatedInstanceArray{ DedicatedInstanceArgs{...} }
type DedicatedInstanceArrayInput interface {
	pulumi.Input

	ToDedicatedInstanceArrayOutput() DedicatedInstanceArrayOutput
	ToDedicatedInstanceArrayOutputWithContext(context.Context) DedicatedInstanceArrayOutput
}

type DedicatedInstanceArray []DedicatedInstanceInput

func (DedicatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedInstance)(nil)).Elem()
}

func (i DedicatedInstanceArray) ToDedicatedInstanceArrayOutput() DedicatedInstanceArrayOutput {
	return i.ToDedicatedInstanceArrayOutputWithContext(context.Background())
}

func (i DedicatedInstanceArray) ToDedicatedInstanceArrayOutputWithContext(ctx context.Context) DedicatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedInstanceArrayOutput)
}

// DedicatedInstanceMapInput is an input type that accepts DedicatedInstanceMap and DedicatedInstanceMapOutput values.
// You can construct a concrete instance of `DedicatedInstanceMapInput` via:
//
//	DedicatedInstanceMap{ "key": DedicatedInstanceArgs{...} }
type DedicatedInstanceMapInput interface {
	pulumi.Input

	ToDedicatedInstanceMapOutput() DedicatedInstanceMapOutput
	ToDedicatedInstanceMapOutputWithContext(context.Context) DedicatedInstanceMapOutput
}

type DedicatedInstanceMap map[string]DedicatedInstanceInput

func (DedicatedInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedInstance)(nil)).Elem()
}

func (i DedicatedInstanceMap) ToDedicatedInstanceMapOutput() DedicatedInstanceMapOutput {
	return i.ToDedicatedInstanceMapOutputWithContext(context.Background())
}

func (i DedicatedInstanceMap) ToDedicatedInstanceMapOutputWithContext(ctx context.Context) DedicatedInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedInstanceMapOutput)
}

type DedicatedInstanceOutput struct{ *pulumi.OutputState }

func (DedicatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedInstance)(nil)).Elem()
}

func (o DedicatedInstanceOutput) ToDedicatedInstanceOutput() DedicatedInstanceOutput {
	return o
}

func (o DedicatedInstanceOutput) ToDedicatedInstanceOutputWithContext(ctx context.Context) DedicatedInstanceOutput {
	return o
}

// The access status of the instance. `0`: inaccessible, `1`: accessible.
func (o DedicatedInstanceOutput) AccessStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.IntOutput { return v.AccessStatus }).(pulumi.IntOutput)
}

// Specifies whether to enable anti-affinity. This field is valid only
// when `resTenant` is set to **true**. Changing this will create a new instance.
func (o DedicatedInstanceOutput) AntiAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.BoolPtrOutput { return v.AntiAffinity }).(pulumi.BoolPtrOutput)
}

// Specifies the available zone name for the dedicated instance. It can be
// obtained through this data source `getAvailabilityZones`. Changing this will create a new instance.
func (o DedicatedInstanceOutput) AvailableZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.AvailableZone }).(pulumi.StringOutput)
}

// Specifies the ECS CPU architecture of instance. Defaults to **x86**.
// Changing this will create a new instance.
func (o DedicatedInstanceOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringPtrOutput { return v.CpuArchitecture }).(pulumi.StringPtrOutput)
}

// Specifies the flavor of the ECS used by the WAF instance. Flavors can be
// obtained through this data source `Ecs.getFlavors`. Changing this will create a new instance.
// This field is valid and required only when `resTenant` is set to **false**.
func (o DedicatedInstanceOutput) EcsFlavor() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.EcsFlavor }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID of WAF dedicated instance. Changing this
// will migrate the WAF instance to a new enterprise project.
// For enterprise users, if omitted, default enterprise project will be used.
func (o DedicatedInstanceOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// schema: Deprecated;
func (o DedicatedInstanceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Specifies the name of WAF dedicated instance. Duplicate names are allowed, we suggest to
// keeping the name unique.
func (o DedicatedInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the WAF dedicated instance.
// If omitted, the provider-level region will be used. Changing this setting will create a new instance.
func (o DedicatedInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether this is resource tenant.
// Changing this will create a new instance.
// + **false**: Common tenant.
// + **true**: Resource tenant.
func (o DedicatedInstanceOutput) ResTenant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.BoolPtrOutput { return v.ResTenant }).(pulumi.BoolPtrOutput)
}

// The running status of the instance. Values are:
func (o DedicatedInstanceOutput) RunStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.IntOutput { return v.RunStatus }).(pulumi.IntOutput)
}

// Specifies the security group of the instance. This is an array of
// security group IDs. Changing this will create a new instance.
func (o DedicatedInstanceOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The ID of the ECS hosting the dedicated engine.
func (o DedicatedInstanceOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The service plane IP address of the WAF dedicated instance.
func (o DedicatedInstanceOutput) ServiceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.ServiceIp }).(pulumi.StringOutput)
}

// Specifies the specification code of instance.
// Different specifications have different throughput. Changing this will create a new instance.
// Values are:
// + **waf.instance.professional**: The professional edition, corresponding to WI-500 on the console.
// + **waf.instance.enterprise**: The enterprise edition, corresponding to WI-100 on the console.
func (o DedicatedInstanceOutput) SpecificationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.SpecificationCode }).(pulumi.StringOutput)
}

// Specifies the subnet ID of WAF dedicated instance VPC. Changing this will
// create a new instance.
func (o DedicatedInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the WAF dedicated instance.
func (o DedicatedInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether the dedicated engine can be upgraded. `0`: Cannot be upgraded, `1`: Can be upgraded.
func (o DedicatedInstanceOutput) Upgradable() pulumi.IntOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.IntOutput { return v.Upgradable }).(pulumi.IntOutput)
}

// Specifies the VPC ID of WAF dedicated instance. Changing this will create a new
// instance.
func (o DedicatedInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedInstance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type DedicatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (DedicatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedInstance)(nil)).Elem()
}

func (o DedicatedInstanceArrayOutput) ToDedicatedInstanceArrayOutput() DedicatedInstanceArrayOutput {
	return o
}

func (o DedicatedInstanceArrayOutput) ToDedicatedInstanceArrayOutputWithContext(ctx context.Context) DedicatedInstanceArrayOutput {
	return o
}

func (o DedicatedInstanceArrayOutput) Index(i pulumi.IntInput) DedicatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DedicatedInstance {
		return vs[0].([]*DedicatedInstance)[vs[1].(int)]
	}).(DedicatedInstanceOutput)
}

type DedicatedInstanceMapOutput struct{ *pulumi.OutputState }

func (DedicatedInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedInstance)(nil)).Elem()
}

func (o DedicatedInstanceMapOutput) ToDedicatedInstanceMapOutput() DedicatedInstanceMapOutput {
	return o
}

func (o DedicatedInstanceMapOutput) ToDedicatedInstanceMapOutputWithContext(ctx context.Context) DedicatedInstanceMapOutput {
	return o
}

func (o DedicatedInstanceMapOutput) MapIndex(k pulumi.StringInput) DedicatedInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DedicatedInstance {
		return vs[0].(map[string]*DedicatedInstance)[vs[1].(string)]
	}).(DedicatedInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedInstanceInput)(nil)).Elem(), &DedicatedInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedInstanceArrayInput)(nil)).Elem(), DedicatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedInstanceMapInput)(nil)).Elem(), DedicatedInstanceMap{})
	pulumi.RegisterOutputType(DedicatedInstanceOutput{})
	pulumi.RegisterOutputType(DedicatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(DedicatedInstanceMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a WAF blacklist and whitelist rule resource within HuaweiCloud.
//
// > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
// used. The blacklist and whitelist rule resource can be used in Cloud Mode and Dedicated Mode.
//
// ## Example Usage
// ### WAF rule blacklist and whitelist with IP address
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyId := cfg.RequireObject("policyId")
//			_, err := Waf.NewRuleBlacklist(ctx, "rule", &Waf.RuleBlacklistArgs{
//				PolicyId:    pulumi.Any(policyId),
//				IpAddress:   pulumi.String("192.168.0.0/24"),
//				Action:      pulumi.Int(0),
//				Description: pulumi.String("test description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### WAF rule blacklist and whitelist with address group
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyId := cfg.RequireObject("policyId")
//			addressGroupId := cfg.RequireObject("addressGroupId")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			_, err := Waf.NewRuleBlacklist(ctx, "rule", &Waf.RuleBlacklistArgs{
//				PolicyId:            pulumi.Any(policyId),
//				AddressGroupId:      pulumi.Any(addressGroupId),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				Action:              pulumi.Int(1),
//				Description:         pulumi.String("test description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// There are two ways to import WAF rule blacklist state. * Using `policy_id` and `rule_id`, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/ruleBlacklist:RuleBlacklist test <policy_id>/<rule_id>
//
// ```
//
//   - Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/ruleBlacklist:RuleBlacklist test <policy_id>/<rule_id>/<enterprise_project_id>
//
// ```
type RuleBlacklist struct {
	pulumi.CustomResourceState

	// Specifies the protective action. Defaults to `0`. The value can be:
	// + `0`: block the request.
	// + `1`: allow the request.
	// + `2`: log the request only.
	Action pulumi.IntPtrOutput `pulumi:"action"`
	// Specifies the WAF address group ID.
	// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	AddressGroupId pulumi.StringPtrOutput `pulumi:"addressGroupId"`
	// The name of the IP address group.
	AddressGroupName pulumi.StringOutput `pulumi:"addressGroupName"`
	// The number of IP addresses or IP address ranges in the IP address group.
	AddressGroupSize pulumi.IntOutput `pulumi:"addressGroupSize"`
	// Specifies the rule description of the WAF address group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the enterprise project ID of WAF rule blacklist
	// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
	// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// Specifies the rule name. The value can contain a maximum of `64` characters.
	// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the WAF policy ID. Changing this parameter will create a new resource.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the status of WAF blacklist and whitelist rule.
	// Valid values are as follows:
	// + **0**: Disabled.
	// + **1**: Enabled.
	Status pulumi.IntPtrOutput `pulumi:"status"`
}

// NewRuleBlacklist registers a new resource with the given unique name, arguments, and options.
func NewRuleBlacklist(ctx *pulumi.Context,
	name string, args *RuleBlacklistArgs, opts ...pulumi.ResourceOption) (*RuleBlacklist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RuleBlacklist
	err := ctx.RegisterResource("huaweicloud:Waf/ruleBlacklist:RuleBlacklist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleBlacklist gets an existing RuleBlacklist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleBlacklist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleBlacklistState, opts ...pulumi.ResourceOption) (*RuleBlacklist, error) {
	var resource RuleBlacklist
	err := ctx.ReadResource("huaweicloud:Waf/ruleBlacklist:RuleBlacklist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleBlacklist resources.
type ruleBlacklistState struct {
	// Specifies the protective action. Defaults to `0`. The value can be:
	// + `0`: block the request.
	// + `1`: allow the request.
	// + `2`: log the request only.
	Action *int `pulumi:"action"`
	// Specifies the WAF address group ID.
	// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	AddressGroupId *string `pulumi:"addressGroupId"`
	// The name of the IP address group.
	AddressGroupName *string `pulumi:"addressGroupName"`
	// The number of IP addresses or IP address ranges in the IP address group.
	AddressGroupSize *int `pulumi:"addressGroupSize"`
	// Specifies the rule description of the WAF address group.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of WAF rule blacklist
	// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
	// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the rule name. The value can contain a maximum of `64` characters.
	// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the WAF policy ID. Changing this parameter will create a new resource.
	PolicyId *string `pulumi:"policyId"`
	// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the status of WAF blacklist and whitelist rule.
	// Valid values are as follows:
	// + **0**: Disabled.
	// + **1**: Enabled.
	Status *int `pulumi:"status"`
}

type RuleBlacklistState struct {
	// Specifies the protective action. Defaults to `0`. The value can be:
	// + `0`: block the request.
	// + `1`: allow the request.
	// + `2`: log the request only.
	Action pulumi.IntPtrInput
	// Specifies the WAF address group ID.
	// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	AddressGroupId pulumi.StringPtrInput
	// The name of the IP address group.
	AddressGroupName pulumi.StringPtrInput
	// The number of IP addresses or IP address ranges in the IP address group.
	AddressGroupSize pulumi.IntPtrInput
	// Specifies the rule description of the WAF address group.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF rule blacklist
	// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
	// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	IpAddress pulumi.StringPtrInput
	// Specifies the rule name. The value can contain a maximum of `64` characters.
	// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the WAF policy ID. Changing this parameter will create a new resource.
	PolicyId pulumi.StringPtrInput
	// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the status of WAF blacklist and whitelist rule.
	// Valid values are as follows:
	// + **0**: Disabled.
	// + **1**: Enabled.
	Status pulumi.IntPtrInput
}

func (RuleBlacklistState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleBlacklistState)(nil)).Elem()
}

type ruleBlacklistArgs struct {
	// Specifies the protective action. Defaults to `0`. The value can be:
	// + `0`: block the request.
	// + `1`: allow the request.
	// + `2`: log the request only.
	Action *int `pulumi:"action"`
	// Specifies the WAF address group ID.
	// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	AddressGroupId *string `pulumi:"addressGroupId"`
	// Specifies the rule description of the WAF address group.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of WAF rule blacklist
	// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
	// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the rule name. The value can contain a maximum of `64` characters.
	// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the WAF policy ID. Changing this parameter will create a new resource.
	PolicyId string `pulumi:"policyId"`
	// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the status of WAF blacklist and whitelist rule.
	// Valid values are as follows:
	// + **0**: Disabled.
	// + **1**: Enabled.
	Status *int `pulumi:"status"`
}

// The set of arguments for constructing a RuleBlacklist resource.
type RuleBlacklistArgs struct {
	// Specifies the protective action. Defaults to `0`. The value can be:
	// + `0`: block the request.
	// + `1`: allow the request.
	// + `2`: log the request only.
	Action pulumi.IntPtrInput
	// Specifies the WAF address group ID.
	// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	AddressGroupId pulumi.StringPtrInput
	// Specifies the rule description of the WAF address group.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF rule blacklist
	// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
	// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
	// can not be configured together.
	IpAddress pulumi.StringPtrInput
	// Specifies the rule name. The value can contain a maximum of `64` characters.
	// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the WAF policy ID. Changing this parameter will create a new resource.
	PolicyId pulumi.StringInput
	// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the status of WAF blacklist and whitelist rule.
	// Valid values are as follows:
	// + **0**: Disabled.
	// + **1**: Enabled.
	Status pulumi.IntPtrInput
}

func (RuleBlacklistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleBlacklistArgs)(nil)).Elem()
}

type RuleBlacklistInput interface {
	pulumi.Input

	ToRuleBlacklistOutput() RuleBlacklistOutput
	ToRuleBlacklistOutputWithContext(ctx context.Context) RuleBlacklistOutput
}

func (*RuleBlacklist) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBlacklist)(nil)).Elem()
}

func (i *RuleBlacklist) ToRuleBlacklistOutput() RuleBlacklistOutput {
	return i.ToRuleBlacklistOutputWithContext(context.Background())
}

func (i *RuleBlacklist) ToRuleBlacklistOutputWithContext(ctx context.Context) RuleBlacklistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBlacklistOutput)
}

// RuleBlacklistArrayInput is an input type that accepts RuleBlacklistArray and RuleBlacklistArrayOutput values.
// You can construct a concrete instance of `RuleBlacklistArrayInput` via:
//
//	RuleBlacklistArray{ RuleBlacklistArgs{...} }
type RuleBlacklistArrayInput interface {
	pulumi.Input

	ToRuleBlacklistArrayOutput() RuleBlacklistArrayOutput
	ToRuleBlacklistArrayOutputWithContext(context.Context) RuleBlacklistArrayOutput
}

type RuleBlacklistArray []RuleBlacklistInput

func (RuleBlacklistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleBlacklist)(nil)).Elem()
}

func (i RuleBlacklistArray) ToRuleBlacklistArrayOutput() RuleBlacklistArrayOutput {
	return i.ToRuleBlacklistArrayOutputWithContext(context.Background())
}

func (i RuleBlacklistArray) ToRuleBlacklistArrayOutputWithContext(ctx context.Context) RuleBlacklistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBlacklistArrayOutput)
}

// RuleBlacklistMapInput is an input type that accepts RuleBlacklistMap and RuleBlacklistMapOutput values.
// You can construct a concrete instance of `RuleBlacklistMapInput` via:
//
//	RuleBlacklistMap{ "key": RuleBlacklistArgs{...} }
type RuleBlacklistMapInput interface {
	pulumi.Input

	ToRuleBlacklistMapOutput() RuleBlacklistMapOutput
	ToRuleBlacklistMapOutputWithContext(context.Context) RuleBlacklistMapOutput
}

type RuleBlacklistMap map[string]RuleBlacklistInput

func (RuleBlacklistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleBlacklist)(nil)).Elem()
}

func (i RuleBlacklistMap) ToRuleBlacklistMapOutput() RuleBlacklistMapOutput {
	return i.ToRuleBlacklistMapOutputWithContext(context.Background())
}

func (i RuleBlacklistMap) ToRuleBlacklistMapOutputWithContext(ctx context.Context) RuleBlacklistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBlacklistMapOutput)
}

type RuleBlacklistOutput struct{ *pulumi.OutputState }

func (RuleBlacklistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBlacklist)(nil)).Elem()
}

func (o RuleBlacklistOutput) ToRuleBlacklistOutput() RuleBlacklistOutput {
	return o
}

func (o RuleBlacklistOutput) ToRuleBlacklistOutputWithContext(ctx context.Context) RuleBlacklistOutput {
	return o
}

// Specifies the protective action. Defaults to `0`. The value can be:
// + `0`: block the request.
// + `1`: allow the request.
// + `2`: log the request only.
func (o RuleBlacklistOutput) Action() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.IntPtrOutput { return v.Action }).(pulumi.IntPtrOutput)
}

// Specifies the WAF address group ID.
// This parameter is required when `ipAddress` is not specified. The parameter `addressGroupId` and `ipAddress`
// can not be configured together.
func (o RuleBlacklistOutput) AddressGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringPtrOutput { return v.AddressGroupId }).(pulumi.StringPtrOutput)
}

// The name of the IP address group.
func (o RuleBlacklistOutput) AddressGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringOutput { return v.AddressGroupName }).(pulumi.StringOutput)
}

// The number of IP addresses or IP address ranges in the IP address group.
func (o RuleBlacklistOutput) AddressGroupSize() pulumi.IntOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.IntOutput { return v.AddressGroupSize }).(pulumi.IntOutput)
}

// Specifies the rule description of the WAF address group.
func (o RuleBlacklistOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of WAF rule blacklist
// and whitelist. For enterprise users, if omitted, default enterprise project will be used.
// Changing this parameter will create a new resource.
func (o RuleBlacklistOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the IP address or range. For example, **192.168.0.125** or **192.168.0.0/24**.
// This parameter is required when `addressGroupId` is not specified. The parameter `addressGroupId` and `ipAddress`
// can not be configured together.
func (o RuleBlacklistOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Specifies the rule name. The value can contain a maximum of `64` characters.
// Only letters, digits, hyphens (-), underscores (_) and periods (.) are allowed.
func (o RuleBlacklistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the WAF policy ID. Changing this parameter will create a new resource.
func (o RuleBlacklistOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the WAF blacklist and whitelist rule resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o RuleBlacklistOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the status of WAF blacklist and whitelist rule.
// Valid values are as follows:
// + **0**: Disabled.
// + **1**: Enabled.
func (o RuleBlacklistOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleBlacklist) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

type RuleBlacklistArrayOutput struct{ *pulumi.OutputState }

func (RuleBlacklistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleBlacklist)(nil)).Elem()
}

func (o RuleBlacklistArrayOutput) ToRuleBlacklistArrayOutput() RuleBlacklistArrayOutput {
	return o
}

func (o RuleBlacklistArrayOutput) ToRuleBlacklistArrayOutputWithContext(ctx context.Context) RuleBlacklistArrayOutput {
	return o
}

func (o RuleBlacklistArrayOutput) Index(i pulumi.IntInput) RuleBlacklistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleBlacklist {
		return vs[0].([]*RuleBlacklist)[vs[1].(int)]
	}).(RuleBlacklistOutput)
}

type RuleBlacklistMapOutput struct{ *pulumi.OutputState }

func (RuleBlacklistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleBlacklist)(nil)).Elem()
}

func (o RuleBlacklistMapOutput) ToRuleBlacklistMapOutput() RuleBlacklistMapOutput {
	return o
}

func (o RuleBlacklistMapOutput) ToRuleBlacklistMapOutputWithContext(ctx context.Context) RuleBlacklistMapOutput {
	return o
}

func (o RuleBlacklistMapOutput) MapIndex(k pulumi.StringInput) RuleBlacklistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleBlacklist {
		return vs[0].(map[string]*RuleBlacklist)[vs[1].(string)]
	}).(RuleBlacklistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBlacklistInput)(nil)).Elem(), &RuleBlacklist{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBlacklistArrayInput)(nil)).Elem(), RuleBlacklistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBlacklistMapInput)(nil)).Elem(), RuleBlacklistMap{})
	pulumi.RegisterOutputType(RuleBlacklistOutput{})
	pulumi.RegisterOutputType(RuleBlacklistArrayOutput{})
	pulumi.RegisterOutputType(RuleBlacklistMapOutput{})
}

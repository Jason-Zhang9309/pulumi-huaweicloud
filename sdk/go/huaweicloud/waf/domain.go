// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a WAF domain resource within HuaweiCloud.
//
// > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
// used. The domain name resource can be used in Cloud Mode.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			certificate1, err := Waf.NewCertificate(ctx, "certificate1", &Waf.CertificateArgs{
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				Certificate: pulumi.String(fmt.Sprintf(`-----BEGIN CERTIFICATE-----
//
// MIIFmQl5dh2QUAeo39TIKtadgAgh4zHx09kSgayS9Wph9LEqq7MA+2042L3J9aOa
// DAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUR+SosWwALt6PkP0J9iOIxA6RW8gVsLwq
// ...
// +HhDvD/VeOHytX3RAs2GeTOtxyAV5XpKY5r+PkyUqPJj04t3d0Fopi0gNtLpMF=
// -----END CERTIFICATE-----
// `)),
//
//	PrivateKey: pulumi.String(fmt.Sprintf(`-----BEGIN PRIVATE KEY-----
//
// MIIJwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAM
// ATAwMC4GCCsGAQUFBwIBFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQu
// ...
// he8Y4IWS6wY7bCkjCWDcRQJMEhg76fsO3txE+FiYruq9RUWhiF1myv4Q6W+CyBFC
// 1qoJFlcDyqSMo5iHq3HLjs
// -----END PRIVATE KEY-----
// `)),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Waf.NewDomain(ctx, "domain1", &Waf.DomainArgs{
//				Domain:              pulumi.String("www.example.com"),
//				CertificateId:       certificate1.ID(),
//				CertificateName:     certificate1.Name,
//				Proxy:               pulumi.Bool(true),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//				Servers: waf.DomainServerArray{
//					&waf.DomainServerArgs{
//						ClientProtocol: pulumi.String("HTTPS"),
//						ServerProtocol: pulumi.String("HTTP"),
//						Address:        pulumi.String("119.8.0.13"),
//						Port:           pulumi.Int(8080),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// There are two ways to import WAF domain state. * Using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/domain:Domain test <id>
//
// ```
//
//   - Using `id` and `enterprise_project_id`, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Waf/domain:Domain test <id>/<enterprise_project_id>
//
// ```
type Domain struct {
	pulumi.CustomResourceState

	// Whether a domain name is connected to WAF. 0: The domain name is not connected to WAF, 1: The domain
	// name is connected to WAF.
	AccessStatus pulumi.IntOutput `pulumi:"accessStatus"`
	// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
	// is set to HTTPS.
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// Specifies the certificate name. This parameter is mandatory
	// when `clientProtocol` is set to HTTPS.
	CertificateName pulumi.StringPtrOutput `pulumi:"certificateName"`
	// Specifies the charging mode of the domain. Valid values are *prePaid*
	// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
	ChargingMode pulumi.StringPtrOutput `pulumi:"chargingMode"`
	// Specifies the domain name to be protected. For example, `www.example.com` or
	// `*.example.com`. Changing this creates a new domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Specifies the enterprise project ID of WAF domain.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies whether to retain the policy when deleting a domain name.
	// Defaults to true.
	KeepPolicy pulumi.BoolPtrOutput `pulumi:"keepPolicy"`
	// Specifies the policy ID associated with the domain. If not specified, a new
	// policy will be created automatically. Changing this create a new domain.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// The WAF mode. -1: bypassed, 0: disabled, 1: enabled.
	ProtectStatus pulumi.IntOutput `pulumi:"protectStatus"`
	// The protocol type of the client. The options are HTTP, HTTPS, and HTTP&HTTPS.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies whether a proxy is configured.
	Proxy pulumi.BoolPtrOutput `pulumi:"proxy"`
	// The region in which to create the WAF domain resource. If omitted, the
	// provider-level region will be used. Changing this setting will push a new certificate.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies an array of origin web servers. The object structure is documented below.
	Servers DomainServerArrayOutput `pulumi:"servers"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("huaweicloud:Waf/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("huaweicloud:Waf/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// Whether a domain name is connected to WAF. 0: The domain name is not connected to WAF, 1: The domain
	// name is connected to WAF.
	AccessStatus *int `pulumi:"accessStatus"`
	// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
	// is set to HTTPS.
	CertificateId *string `pulumi:"certificateId"`
	// Specifies the certificate name. This parameter is mandatory
	// when `clientProtocol` is set to HTTPS.
	CertificateName *string `pulumi:"certificateName"`
	// Specifies the charging mode of the domain. Valid values are *prePaid*
	// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the domain name to be protected. For example, `www.example.com` or
	// `*.example.com`. Changing this creates a new domain.
	Domain *string `pulumi:"domain"`
	// Specifies the enterprise project ID of WAF domain.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether to retain the policy when deleting a domain name.
	// Defaults to true.
	KeepPolicy *bool `pulumi:"keepPolicy"`
	// Specifies the policy ID associated with the domain. If not specified, a new
	// policy will be created automatically. Changing this create a new domain.
	PolicyId *string `pulumi:"policyId"`
	// The WAF mode. -1: bypassed, 0: disabled, 1: enabled.
	ProtectStatus *int `pulumi:"protectStatus"`
	// The protocol type of the client. The options are HTTP, HTTPS, and HTTP&HTTPS.
	Protocol *string `pulumi:"protocol"`
	// Specifies whether a proxy is configured.
	Proxy *bool `pulumi:"proxy"`
	// The region in which to create the WAF domain resource. If omitted, the
	// provider-level region will be used. Changing this setting will push a new certificate.
	Region *string `pulumi:"region"`
	// Specifies an array of origin web servers. The object structure is documented below.
	Servers []DomainServer `pulumi:"servers"`
}

type DomainState struct {
	// Whether a domain name is connected to WAF. 0: The domain name is not connected to WAF, 1: The domain
	// name is connected to WAF.
	AccessStatus pulumi.IntPtrInput
	// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
	// is set to HTTPS.
	CertificateId pulumi.StringPtrInput
	// Specifies the certificate name. This parameter is mandatory
	// when `clientProtocol` is set to HTTPS.
	CertificateName pulumi.StringPtrInput
	// Specifies the charging mode of the domain. Valid values are *prePaid*
	// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
	ChargingMode pulumi.StringPtrInput
	// Specifies the domain name to be protected. For example, `www.example.com` or
	// `*.example.com`. Changing this creates a new domain.
	Domain pulumi.StringPtrInput
	// Specifies the enterprise project ID of WAF domain.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether to retain the policy when deleting a domain name.
	// Defaults to true.
	KeepPolicy pulumi.BoolPtrInput
	// Specifies the policy ID associated with the domain. If not specified, a new
	// policy will be created automatically. Changing this create a new domain.
	PolicyId pulumi.StringPtrInput
	// The WAF mode. -1: bypassed, 0: disabled, 1: enabled.
	ProtectStatus pulumi.IntPtrInput
	// The protocol type of the client. The options are HTTP, HTTPS, and HTTP&HTTPS.
	Protocol pulumi.StringPtrInput
	// Specifies whether a proxy is configured.
	Proxy pulumi.BoolPtrInput
	// The region in which to create the WAF domain resource. If omitted, the
	// provider-level region will be used. Changing this setting will push a new certificate.
	Region pulumi.StringPtrInput
	// Specifies an array of origin web servers. The object structure is documented below.
	Servers DomainServerArrayInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
	// is set to HTTPS.
	CertificateId *string `pulumi:"certificateId"`
	// Specifies the certificate name. This parameter is mandatory
	// when `clientProtocol` is set to HTTPS.
	CertificateName *string `pulumi:"certificateName"`
	// Specifies the charging mode of the domain. Valid values are *prePaid*
	// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the domain name to be protected. For example, `www.example.com` or
	// `*.example.com`. Changing this creates a new domain.
	Domain string `pulumi:"domain"`
	// Specifies the enterprise project ID of WAF domain.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether to retain the policy when deleting a domain name.
	// Defaults to true.
	KeepPolicy *bool `pulumi:"keepPolicy"`
	// Specifies the policy ID associated with the domain. If not specified, a new
	// policy will be created automatically. Changing this create a new domain.
	PolicyId *string `pulumi:"policyId"`
	// Specifies whether a proxy is configured.
	Proxy *bool `pulumi:"proxy"`
	// The region in which to create the WAF domain resource. If omitted, the
	// provider-level region will be used. Changing this setting will push a new certificate.
	Region *string `pulumi:"region"`
	// Specifies an array of origin web servers. The object structure is documented below.
	Servers []DomainServer `pulumi:"servers"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
	// is set to HTTPS.
	CertificateId pulumi.StringPtrInput
	// Specifies the certificate name. This parameter is mandatory
	// when `clientProtocol` is set to HTTPS.
	CertificateName pulumi.StringPtrInput
	// Specifies the charging mode of the domain. Valid values are *prePaid*
	// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
	ChargingMode pulumi.StringPtrInput
	// Specifies the domain name to be protected. For example, `www.example.com` or
	// `*.example.com`. Changing this creates a new domain.
	Domain pulumi.StringInput
	// Specifies the enterprise project ID of WAF domain.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether to retain the policy when deleting a domain name.
	// Defaults to true.
	KeepPolicy pulumi.BoolPtrInput
	// Specifies the policy ID associated with the domain. If not specified, a new
	// policy will be created automatically. Changing this create a new domain.
	PolicyId pulumi.StringPtrInput
	// Specifies whether a proxy is configured.
	Proxy pulumi.BoolPtrInput
	// The region in which to create the WAF domain resource. If omitted, the
	// provider-level region will be used. Changing this setting will push a new certificate.
	Region pulumi.StringPtrInput
	// Specifies an array of origin web servers. The object structure is documented below.
	Servers DomainServerArrayInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// Whether a domain name is connected to WAF. 0: The domain name is not connected to WAF, 1: The domain
// name is connected to WAF.
func (o DomainOutput) AccessStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.AccessStatus }).(pulumi.IntOutput)
}

// Specifies the certificate ID. This parameter is mandatory when `clientProtocol`
// is set to HTTPS.
func (o DomainOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Specifies the certificate name. This parameter is mandatory
// when `clientProtocol` is set to HTTPS.
func (o DomainOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// Specifies the charging mode of the domain. Valid values are *prePaid*
// and *postPaid*, defaults to *prePaid*. Changing this creates a new instance.
func (o DomainOutput) ChargingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.ChargingMode }).(pulumi.StringPtrOutput)
}

// Specifies the domain name to be protected. For example, `www.example.com` or
// `*.example.com`. Changing this creates a new domain.
func (o DomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID of WAF domain.
// Changing this parameter will create a new resource.
func (o DomainOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies whether to retain the policy when deleting a domain name.
// Defaults to true.
func (o DomainOutput) KeepPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.KeepPolicy }).(pulumi.BoolPtrOutput)
}

// Specifies the policy ID associated with the domain. If not specified, a new
// policy will be created automatically. Changing this create a new domain.
func (o DomainOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// The WAF mode. -1: bypassed, 0: disabled, 1: enabled.
func (o DomainOutput) ProtectStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.ProtectStatus }).(pulumi.IntOutput)
}

// The protocol type of the client. The options are HTTP, HTTPS, and HTTP&HTTPS.
func (o DomainOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies whether a proxy is configured.
func (o DomainOutput) Proxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.Proxy }).(pulumi.BoolPtrOutput)
}

// The region in which to create the WAF domain resource. If omitted, the
// provider-level region will be used. Changing this setting will push a new certificate.
func (o DomainOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies an array of origin web servers. The object structure is documented below.
func (o DomainOutput) Servers() DomainServerArrayOutput {
	return o.ApplyT(func(v *Domain) DomainServerArrayOutput { return v.Servers }).(DomainServerArrayOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}

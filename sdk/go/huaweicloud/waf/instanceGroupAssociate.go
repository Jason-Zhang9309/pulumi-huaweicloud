// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceGroupAssociate struct {
	pulumi.CustomResourceState

	GroupId       pulumi.StringOutput      `pulumi:"groupId"`
	LoadBalancers pulumi.StringArrayOutput `pulumi:"loadBalancers"`
	Region        pulumi.StringOutput      `pulumi:"region"`
}

// NewInstanceGroupAssociate registers a new resource with the given unique name, arguments, and options.
func NewInstanceGroupAssociate(ctx *pulumi.Context,
	name string, args *InstanceGroupAssociateArgs, opts ...pulumi.ResourceOption) (*InstanceGroupAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.LoadBalancers == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancers'")
	}
	var resource InstanceGroupAssociate
	err := ctx.RegisterResource("huaweicloud:Waf/instanceGroupAssociate:InstanceGroupAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceGroupAssociate gets an existing InstanceGroupAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceGroupAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceGroupAssociateState, opts ...pulumi.ResourceOption) (*InstanceGroupAssociate, error) {
	var resource InstanceGroupAssociate
	err := ctx.ReadResource("huaweicloud:Waf/instanceGroupAssociate:InstanceGroupAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceGroupAssociate resources.
type instanceGroupAssociateState struct {
	GroupId       *string  `pulumi:"groupId"`
	LoadBalancers []string `pulumi:"loadBalancers"`
	Region        *string  `pulumi:"region"`
}

type InstanceGroupAssociateState struct {
	GroupId       pulumi.StringPtrInput
	LoadBalancers pulumi.StringArrayInput
	Region        pulumi.StringPtrInput
}

func (InstanceGroupAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupAssociateState)(nil)).Elem()
}

type instanceGroupAssociateArgs struct {
	GroupId       string   `pulumi:"groupId"`
	LoadBalancers []string `pulumi:"loadBalancers"`
	Region        *string  `pulumi:"region"`
}

// The set of arguments for constructing a InstanceGroupAssociate resource.
type InstanceGroupAssociateArgs struct {
	GroupId       pulumi.StringInput
	LoadBalancers pulumi.StringArrayInput
	Region        pulumi.StringPtrInput
}

func (InstanceGroupAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupAssociateArgs)(nil)).Elem()
}

type InstanceGroupAssociateInput interface {
	pulumi.Input

	ToInstanceGroupAssociateOutput() InstanceGroupAssociateOutput
	ToInstanceGroupAssociateOutputWithContext(ctx context.Context) InstanceGroupAssociateOutput
}

func (*InstanceGroupAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupAssociate)(nil)).Elem()
}

func (i *InstanceGroupAssociate) ToInstanceGroupAssociateOutput() InstanceGroupAssociateOutput {
	return i.ToInstanceGroupAssociateOutputWithContext(context.Background())
}

func (i *InstanceGroupAssociate) ToInstanceGroupAssociateOutputWithContext(ctx context.Context) InstanceGroupAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupAssociateOutput)
}

// InstanceGroupAssociateArrayInput is an input type that accepts InstanceGroupAssociateArray and InstanceGroupAssociateArrayOutput values.
// You can construct a concrete instance of `InstanceGroupAssociateArrayInput` via:
//
//	InstanceGroupAssociateArray{ InstanceGroupAssociateArgs{...} }
type InstanceGroupAssociateArrayInput interface {
	pulumi.Input

	ToInstanceGroupAssociateArrayOutput() InstanceGroupAssociateArrayOutput
	ToInstanceGroupAssociateArrayOutputWithContext(context.Context) InstanceGroupAssociateArrayOutput
}

type InstanceGroupAssociateArray []InstanceGroupAssociateInput

func (InstanceGroupAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceGroupAssociate)(nil)).Elem()
}

func (i InstanceGroupAssociateArray) ToInstanceGroupAssociateArrayOutput() InstanceGroupAssociateArrayOutput {
	return i.ToInstanceGroupAssociateArrayOutputWithContext(context.Background())
}

func (i InstanceGroupAssociateArray) ToInstanceGroupAssociateArrayOutputWithContext(ctx context.Context) InstanceGroupAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupAssociateArrayOutput)
}

// InstanceGroupAssociateMapInput is an input type that accepts InstanceGroupAssociateMap and InstanceGroupAssociateMapOutput values.
// You can construct a concrete instance of `InstanceGroupAssociateMapInput` via:
//
//	InstanceGroupAssociateMap{ "key": InstanceGroupAssociateArgs{...} }
type InstanceGroupAssociateMapInput interface {
	pulumi.Input

	ToInstanceGroupAssociateMapOutput() InstanceGroupAssociateMapOutput
	ToInstanceGroupAssociateMapOutputWithContext(context.Context) InstanceGroupAssociateMapOutput
}

type InstanceGroupAssociateMap map[string]InstanceGroupAssociateInput

func (InstanceGroupAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceGroupAssociate)(nil)).Elem()
}

func (i InstanceGroupAssociateMap) ToInstanceGroupAssociateMapOutput() InstanceGroupAssociateMapOutput {
	return i.ToInstanceGroupAssociateMapOutputWithContext(context.Background())
}

func (i InstanceGroupAssociateMap) ToInstanceGroupAssociateMapOutputWithContext(ctx context.Context) InstanceGroupAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupAssociateMapOutput)
}

type InstanceGroupAssociateOutput struct{ *pulumi.OutputState }

func (InstanceGroupAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupAssociate)(nil)).Elem()
}

func (o InstanceGroupAssociateOutput) ToInstanceGroupAssociateOutput() InstanceGroupAssociateOutput {
	return o
}

func (o InstanceGroupAssociateOutput) ToInstanceGroupAssociateOutputWithContext(ctx context.Context) InstanceGroupAssociateOutput {
	return o
}

func (o InstanceGroupAssociateOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceGroupAssociate) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o InstanceGroupAssociateOutput) LoadBalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceGroupAssociate) pulumi.StringArrayOutput { return v.LoadBalancers }).(pulumi.StringArrayOutput)
}

func (o InstanceGroupAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceGroupAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type InstanceGroupAssociateArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceGroupAssociate)(nil)).Elem()
}

func (o InstanceGroupAssociateArrayOutput) ToInstanceGroupAssociateArrayOutput() InstanceGroupAssociateArrayOutput {
	return o
}

func (o InstanceGroupAssociateArrayOutput) ToInstanceGroupAssociateArrayOutputWithContext(ctx context.Context) InstanceGroupAssociateArrayOutput {
	return o
}

func (o InstanceGroupAssociateArrayOutput) Index(i pulumi.IntInput) InstanceGroupAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceGroupAssociate {
		return vs[0].([]*InstanceGroupAssociate)[vs[1].(int)]
	}).(InstanceGroupAssociateOutput)
}

type InstanceGroupAssociateMapOutput struct{ *pulumi.OutputState }

func (InstanceGroupAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceGroupAssociate)(nil)).Elem()
}

func (o InstanceGroupAssociateMapOutput) ToInstanceGroupAssociateMapOutput() InstanceGroupAssociateMapOutput {
	return o
}

func (o InstanceGroupAssociateMapOutput) ToInstanceGroupAssociateMapOutputWithContext(ctx context.Context) InstanceGroupAssociateMapOutput {
	return o
}

func (o InstanceGroupAssociateMapOutput) MapIndex(k pulumi.StringInput) InstanceGroupAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceGroupAssociate {
		return vs[0].(map[string]*InstanceGroupAssociate)[vs[1].(string)]
	}).(InstanceGroupAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupAssociateInput)(nil)).Elem(), &InstanceGroupAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupAssociateArrayInput)(nil)).Elem(), InstanceGroupAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupAssociateMapInput)(nil)).Elem(), InstanceGroupAssociateMap{})
	pulumi.RegisterOutputType(InstanceGroupAssociateOutput{})
	pulumi.RegisterOutputType(InstanceGroupAssociateArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupAssociateMapOutput{})
}

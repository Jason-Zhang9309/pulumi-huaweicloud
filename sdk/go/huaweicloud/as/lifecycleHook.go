// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AS Lifecycle Hook resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/As"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			hookName := cfg.RequireObject("hookName")
//			asGroupId := cfg.RequireObject("asGroupId")
//			smnTopicUrn := cfg.RequireObject("smnTopicUrn")
//			_, err := As.NewLifecycleHook(ctx, "test", &As.LifecycleHookArgs{
//				ScalingGroupId:       pulumi.Any(asGroupId),
//				Type:                 pulumi.String("ADD"),
//				DefaultResult:        pulumi.String("ABANDON"),
//				NotificationTopicUrn: pulumi.Any(smnTopicUrn),
//				NotificationMessage:  pulumi.String("This is a test message"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Lifecycle hooks can be imported using the AS group ID and hook ID separated by a slash, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:As/lifecycleHook:LifecycleHook test &ltAS group ID&gt/&ltLifecycle hook ID&gt
//
// ```
type LifecycleHook struct {
	pulumi.CustomResourceState

	// The server time in UTC format when the lifecycle hook is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the default lifecycle hook callback operation. This operation is
	// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
	DefaultResult pulumi.StringPtrOutput `pulumi:"defaultResult"`
	// Specifies the lifecycle hook name. This parameter can contain a maximum of
	// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this creates a new AS lifecycle hook.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a customized notification. This parameter can contains a maximum
	// of 256 characters, which cannot contain the following characters: <>&'().
	NotificationMessage pulumi.StringPtrOutput `pulumi:"notificationMessage"`
	// The topic name in SMN.
	NotificationTopicName pulumi.StringOutput `pulumi:"notificationTopicName"`
	// Specifies a unique topic in SMN.
	NotificationTopicUrn pulumi.StringOutput `pulumi:"notificationTopicUrn"`
	// Specifies the region in which to create the AS lifecycle hook.
	// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
	// of second, default to 3600.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Specifies the lifecycle hook type. The valid values are following strings:
	// + `ADD`: The hook suspends the instance when the instance is started.
	// + `REMOVE`: The hook suspends the instance when the instance is terminated.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLifecycleHook registers a new resource with the given unique name, arguments, and options.
func NewLifecycleHook(ctx *pulumi.Context,
	name string, args *LifecycleHookArgs, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationTopicUrn == nil {
		return nil, errors.New("invalid value for required argument 'NotificationTopicUrn'")
	}
	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LifecycleHook
	err := ctx.RegisterResource("huaweicloud:As/lifecycleHook:LifecycleHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycleHook gets an existing LifecycleHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleHookState, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	var resource LifecycleHook
	err := ctx.ReadResource("huaweicloud:As/lifecycleHook:LifecycleHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecycleHook resources.
type lifecycleHookState struct {
	// The server time in UTC format when the lifecycle hook is created.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the default lifecycle hook callback operation. This operation is
	// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
	DefaultResult *string `pulumi:"defaultResult"`
	// Specifies the lifecycle hook name. This parameter can contain a maximum of
	// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this creates a new AS lifecycle hook.
	Name *string `pulumi:"name"`
	// Specifies a customized notification. This parameter can contains a maximum
	// of 256 characters, which cannot contain the following characters: <>&'().
	NotificationMessage *string `pulumi:"notificationMessage"`
	// The topic name in SMN.
	NotificationTopicName *string `pulumi:"notificationTopicName"`
	// Specifies a unique topic in SMN.
	NotificationTopicUrn *string `pulumi:"notificationTopicUrn"`
	// Specifies the region in which to create the AS lifecycle hook.
	// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
	Region *string `pulumi:"region"`
	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
	// of second, default to 3600.
	Timeout *int `pulumi:"timeout"`
	// Specifies the lifecycle hook type. The valid values are following strings:
	// + `ADD`: The hook suspends the instance when the instance is started.
	// + `REMOVE`: The hook suspends the instance when the instance is terminated.
	Type *string `pulumi:"type"`
}

type LifecycleHookState struct {
	// The server time in UTC format when the lifecycle hook is created.
	CreateTime pulumi.StringPtrInput
	// Specifies the default lifecycle hook callback operation. This operation is
	// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
	DefaultResult pulumi.StringPtrInput
	// Specifies the lifecycle hook name. This parameter can contain a maximum of
	// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this creates a new AS lifecycle hook.
	Name pulumi.StringPtrInput
	// Specifies a customized notification. This parameter can contains a maximum
	// of 256 characters, which cannot contain the following characters: <>&'().
	NotificationMessage pulumi.StringPtrInput
	// The topic name in SMN.
	NotificationTopicName pulumi.StringPtrInput
	// Specifies a unique topic in SMN.
	NotificationTopicUrn pulumi.StringPtrInput
	// Specifies the region in which to create the AS lifecycle hook.
	// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
	Region pulumi.StringPtrInput
	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	ScalingGroupId pulumi.StringPtrInput
	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
	// of second, default to 3600.
	Timeout pulumi.IntPtrInput
	// Specifies the lifecycle hook type. The valid values are following strings:
	// + `ADD`: The hook suspends the instance when the instance is started.
	// + `REMOVE`: The hook suspends the instance when the instance is terminated.
	Type pulumi.StringPtrInput
}

func (LifecycleHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookState)(nil)).Elem()
}

type lifecycleHookArgs struct {
	// Specifies the default lifecycle hook callback operation. This operation is
	// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
	DefaultResult *string `pulumi:"defaultResult"`
	// Specifies the lifecycle hook name. This parameter can contain a maximum of
	// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this creates a new AS lifecycle hook.
	Name *string `pulumi:"name"`
	// Specifies a customized notification. This parameter can contains a maximum
	// of 256 characters, which cannot contain the following characters: <>&'().
	NotificationMessage *string `pulumi:"notificationMessage"`
	// Specifies a unique topic in SMN.
	NotificationTopicUrn string `pulumi:"notificationTopicUrn"`
	// Specifies the region in which to create the AS lifecycle hook.
	// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
	Region *string `pulumi:"region"`
	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	ScalingGroupId string `pulumi:"scalingGroupId"`
	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
	// of second, default to 3600.
	Timeout *int `pulumi:"timeout"`
	// Specifies the lifecycle hook type. The valid values are following strings:
	// + `ADD`: The hook suspends the instance when the instance is started.
	// + `REMOVE`: The hook suspends the instance when the instance is terminated.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a LifecycleHook resource.
type LifecycleHookArgs struct {
	// Specifies the default lifecycle hook callback operation. This operation is
	// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
	DefaultResult pulumi.StringPtrInput
	// Specifies the lifecycle hook name. This parameter can contain a maximum of
	// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this creates a new AS lifecycle hook.
	Name pulumi.StringPtrInput
	// Specifies a customized notification. This parameter can contains a maximum
	// of 256 characters, which cannot contain the following characters: <>&'().
	NotificationMessage pulumi.StringPtrInput
	// Specifies a unique topic in SMN.
	NotificationTopicUrn pulumi.StringInput
	// Specifies the region in which to create the AS lifecycle hook.
	// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
	Region pulumi.StringPtrInput
	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	ScalingGroupId pulumi.StringInput
	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
	// of second, default to 3600.
	Timeout pulumi.IntPtrInput
	// Specifies the lifecycle hook type. The valid values are following strings:
	// + `ADD`: The hook suspends the instance when the instance is started.
	// + `REMOVE`: The hook suspends the instance when the instance is terminated.
	Type pulumi.StringInput
}

func (LifecycleHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookArgs)(nil)).Elem()
}

type LifecycleHookInput interface {
	pulumi.Input

	ToLifecycleHookOutput() LifecycleHookOutput
	ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput
}

func (*LifecycleHook) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (i *LifecycleHook) ToLifecycleHookOutput() LifecycleHookOutput {
	return i.ToLifecycleHookOutputWithContext(context.Background())
}

func (i *LifecycleHook) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookOutput)
}

// LifecycleHookArrayInput is an input type that accepts LifecycleHookArray and LifecycleHookArrayOutput values.
// You can construct a concrete instance of `LifecycleHookArrayInput` via:
//
//	LifecycleHookArray{ LifecycleHookArgs{...} }
type LifecycleHookArrayInput interface {
	pulumi.Input

	ToLifecycleHookArrayOutput() LifecycleHookArrayOutput
	ToLifecycleHookArrayOutputWithContext(context.Context) LifecycleHookArrayOutput
}

type LifecycleHookArray []LifecycleHookInput

func (LifecycleHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return i.ToLifecycleHookArrayOutputWithContext(context.Background())
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookArrayOutput)
}

// LifecycleHookMapInput is an input type that accepts LifecycleHookMap and LifecycleHookMapOutput values.
// You can construct a concrete instance of `LifecycleHookMapInput` via:
//
//	LifecycleHookMap{ "key": LifecycleHookArgs{...} }
type LifecycleHookMapInput interface {
	pulumi.Input

	ToLifecycleHookMapOutput() LifecycleHookMapOutput
	ToLifecycleHookMapOutputWithContext(context.Context) LifecycleHookMapOutput
}

type LifecycleHookMap map[string]LifecycleHookInput

func (LifecycleHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookMap) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return i.ToLifecycleHookMapOutputWithContext(context.Background())
}

func (i LifecycleHookMap) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookMapOutput)
}

type LifecycleHookOutput struct{ *pulumi.OutputState }

func (LifecycleHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookOutput) ToLifecycleHookOutput() LifecycleHookOutput {
	return o
}

func (o LifecycleHookOutput) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return o
}

// The server time in UTC format when the lifecycle hook is created.
func (o LifecycleHookOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the default lifecycle hook callback operation. This operation is
// performed when the timeout duration expires. The valid values are *ABANDON* and *CONTINUE*, default to *ABANDON*.
func (o LifecycleHookOutput) DefaultResult() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.DefaultResult }).(pulumi.StringPtrOutput)
}

// Specifies the lifecycle hook name. This parameter can contain a maximum of
// 32 characters, which may consist of letters, digits, underscores (_) and hyphens (-).
// Changing this creates a new AS lifecycle hook.
func (o LifecycleHookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a customized notification. This parameter can contains a maximum
// of 256 characters, which cannot contain the following characters: <>&'().
func (o LifecycleHookOutput) NotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.NotificationMessage }).(pulumi.StringPtrOutput)
}

// The topic name in SMN.
func (o LifecycleHookOutput) NotificationTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.NotificationTopicName }).(pulumi.StringOutput)
}

// Specifies a unique topic in SMN.
func (o LifecycleHookOutput) NotificationTopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.NotificationTopicUrn }).(pulumi.StringOutput)
}

// Specifies the region in which to create the AS lifecycle hook.
// If omitted, the provider-level region will be used. Changing this creates a new AS lifecycle hook.
func (o LifecycleHookOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the AS group in UUID format.
// Changing this creates a new AS lifecycle hook.
func (o LifecycleHookOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the unit
// of second, default to 3600.
func (o LifecycleHookOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Specifies the lifecycle hook type. The valid values are following strings:
// + `ADD`: The hook suspends the instance when the instance is started.
// + `REMOVE`: The hook suspends the instance when the instance is terminated.
func (o LifecycleHookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type LifecycleHookArrayOutput struct{ *pulumi.OutputState }

func (LifecycleHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) Index(i pulumi.IntInput) LifecycleHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].([]*LifecycleHook)[vs[1].(int)]
	}).(LifecycleHookOutput)
}

type LifecycleHookMapOutput struct{ *pulumi.OutputState }

func (LifecycleHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) MapIndex(k pulumi.StringInput) LifecycleHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].(map[string]*LifecycleHook)[vs[1].(string)]
	}).(LifecycleHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookInput)(nil)).Elem(), &LifecycleHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookArrayInput)(nil)).Elem(), LifecycleHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookMapInput)(nil)).Elem(), LifecycleHookMap{})
	pulumi.RegisterOutputType(LifecycleHookOutput{})
	pulumi.RegisterOutputType(LifecycleHookArrayOutput{})
	pulumi.RegisterOutputType(LifecycleHookMapOutput{})
}

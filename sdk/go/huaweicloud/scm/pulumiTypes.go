// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateAuthentification struct {
	// Domain name mapping to the verification value
	Domain *string `pulumi:"domain"`
	// Name of a domain ownership verification value.
	RecordName *string `pulumi:"recordName"`
	// Type of the domain name verification value.
	RecordType *string `pulumi:"recordType"`
	// Domain verification value.
	RecordValue *string `pulumi:"recordValue"`
}

// CertificateAuthentificationInput is an input type that accepts CertificateAuthentificationArgs and CertificateAuthentificationOutput values.
// You can construct a concrete instance of `CertificateAuthentificationInput` via:
//
//	CertificateAuthentificationArgs{...}
type CertificateAuthentificationInput interface {
	pulumi.Input

	ToCertificateAuthentificationOutput() CertificateAuthentificationOutput
	ToCertificateAuthentificationOutputWithContext(context.Context) CertificateAuthentificationOutput
}

type CertificateAuthentificationArgs struct {
	// Domain name mapping to the verification value
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Name of a domain ownership verification value.
	RecordName pulumi.StringPtrInput `pulumi:"recordName"`
	// Type of the domain name verification value.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// Domain verification value.
	RecordValue pulumi.StringPtrInput `pulumi:"recordValue"`
}

func (CertificateAuthentificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthentification)(nil)).Elem()
}

func (i CertificateAuthentificationArgs) ToCertificateAuthentificationOutput() CertificateAuthentificationOutput {
	return i.ToCertificateAuthentificationOutputWithContext(context.Background())
}

func (i CertificateAuthentificationArgs) ToCertificateAuthentificationOutputWithContext(ctx context.Context) CertificateAuthentificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthentificationOutput)
}

// CertificateAuthentificationArrayInput is an input type that accepts CertificateAuthentificationArray and CertificateAuthentificationArrayOutput values.
// You can construct a concrete instance of `CertificateAuthentificationArrayInput` via:
//
//	CertificateAuthentificationArray{ CertificateAuthentificationArgs{...} }
type CertificateAuthentificationArrayInput interface {
	pulumi.Input

	ToCertificateAuthentificationArrayOutput() CertificateAuthentificationArrayOutput
	ToCertificateAuthentificationArrayOutputWithContext(context.Context) CertificateAuthentificationArrayOutput
}

type CertificateAuthentificationArray []CertificateAuthentificationInput

func (CertificateAuthentificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateAuthentification)(nil)).Elem()
}

func (i CertificateAuthentificationArray) ToCertificateAuthentificationArrayOutput() CertificateAuthentificationArrayOutput {
	return i.ToCertificateAuthentificationArrayOutputWithContext(context.Background())
}

func (i CertificateAuthentificationArray) ToCertificateAuthentificationArrayOutputWithContext(ctx context.Context) CertificateAuthentificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthentificationArrayOutput)
}

type CertificateAuthentificationOutput struct{ *pulumi.OutputState }

func (CertificateAuthentificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthentification)(nil)).Elem()
}

func (o CertificateAuthentificationOutput) ToCertificateAuthentificationOutput() CertificateAuthentificationOutput {
	return o
}

func (o CertificateAuthentificationOutput) ToCertificateAuthentificationOutputWithContext(ctx context.Context) CertificateAuthentificationOutput {
	return o
}

// Domain name mapping to the verification value
func (o CertificateAuthentificationOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateAuthentification) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Name of a domain ownership verification value.
func (o CertificateAuthentificationOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateAuthentification) *string { return v.RecordName }).(pulumi.StringPtrOutput)
}

// Type of the domain name verification value.
func (o CertificateAuthentificationOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateAuthentification) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// Domain verification value.
func (o CertificateAuthentificationOutput) RecordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateAuthentification) *string { return v.RecordValue }).(pulumi.StringPtrOutput)
}

type CertificateAuthentificationArrayOutput struct{ *pulumi.OutputState }

func (CertificateAuthentificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateAuthentification)(nil)).Elem()
}

func (o CertificateAuthentificationArrayOutput) ToCertificateAuthentificationArrayOutput() CertificateAuthentificationArrayOutput {
	return o
}

func (o CertificateAuthentificationArrayOutput) ToCertificateAuthentificationArrayOutputWithContext(ctx context.Context) CertificateAuthentificationArrayOutput {
	return o
}

func (o CertificateAuthentificationArrayOutput) Index(i pulumi.IntInput) CertificateAuthentificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateAuthentification {
		return vs[0].([]CertificateAuthentification)[vs[1].(int)]
	}).(CertificateAuthentificationOutput)
}

type CertificateTarget struct {
	// Specifies the project where the service you want to push a certificate to. The same certificate
	// can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service can only be pushed
	// once.
	Projects []string `pulumi:"projects"`
	// Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
	// and `ELB`.
	Service string `pulumi:"service"`
}

// CertificateTargetInput is an input type that accepts CertificateTargetArgs and CertificateTargetOutput values.
// You can construct a concrete instance of `CertificateTargetInput` via:
//
//	CertificateTargetArgs{...}
type CertificateTargetInput interface {
	pulumi.Input

	ToCertificateTargetOutput() CertificateTargetOutput
	ToCertificateTargetOutputWithContext(context.Context) CertificateTargetOutput
}

type CertificateTargetArgs struct {
	// Specifies the project where the service you want to push a certificate to. The same certificate
	// can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service can only be pushed
	// once.
	Projects pulumi.StringArrayInput `pulumi:"projects"`
	// Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
	// and `ELB`.
	Service pulumi.StringInput `pulumi:"service"`
}

func (CertificateTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTarget)(nil)).Elem()
}

func (i CertificateTargetArgs) ToCertificateTargetOutput() CertificateTargetOutput {
	return i.ToCertificateTargetOutputWithContext(context.Background())
}

func (i CertificateTargetArgs) ToCertificateTargetOutputWithContext(ctx context.Context) CertificateTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTargetOutput)
}

// CertificateTargetArrayInput is an input type that accepts CertificateTargetArray and CertificateTargetArrayOutput values.
// You can construct a concrete instance of `CertificateTargetArrayInput` via:
//
//	CertificateTargetArray{ CertificateTargetArgs{...} }
type CertificateTargetArrayInput interface {
	pulumi.Input

	ToCertificateTargetArrayOutput() CertificateTargetArrayOutput
	ToCertificateTargetArrayOutputWithContext(context.Context) CertificateTargetArrayOutput
}

type CertificateTargetArray []CertificateTargetInput

func (CertificateTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTarget)(nil)).Elem()
}

func (i CertificateTargetArray) ToCertificateTargetArrayOutput() CertificateTargetArrayOutput {
	return i.ToCertificateTargetArrayOutputWithContext(context.Background())
}

func (i CertificateTargetArray) ToCertificateTargetArrayOutputWithContext(ctx context.Context) CertificateTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTargetArrayOutput)
}

type CertificateTargetOutput struct{ *pulumi.OutputState }

func (CertificateTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTarget)(nil)).Elem()
}

func (o CertificateTargetOutput) ToCertificateTargetOutput() CertificateTargetOutput {
	return o
}

func (o CertificateTargetOutput) ToCertificateTargetOutputWithContext(ctx context.Context) CertificateTargetOutput {
	return o
}

// Specifies the project where the service you want to push a certificate to. The same certificate
// can be pushed repeatedly to the same WAF or ELB service in the same `project`, but the CDN service can only be pushed
// once.
func (o CertificateTargetOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateTarget) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// Specifies the service to which the certificate is pushed. The options include `CDN`,`WAF`
// and `ELB`.
func (o CertificateTargetOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateTarget) string { return v.Service }).(pulumi.StringOutput)
}

type CertificateTargetArrayOutput struct{ *pulumi.OutputState }

func (CertificateTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTarget)(nil)).Elem()
}

func (o CertificateTargetArrayOutput) ToCertificateTargetArrayOutput() CertificateTargetArrayOutput {
	return o
}

func (o CertificateTargetArrayOutput) ToCertificateTargetArrayOutputWithContext(ctx context.Context) CertificateTargetArrayOutput {
	return o
}

func (o CertificateTargetArrayOutput) Index(i pulumi.IntInput) CertificateTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateTarget {
		return vs[0].([]CertificateTarget)[vs[1].(int)]
	}).(CertificateTargetOutput)
}

type GetCertificatesCertificate struct {
	// Certificate authority.\
	// The value can be: **GLOBALSIGN**, **SYMANTEC**, **GEOTRUST**, **CFCA**.
	Brand string `pulumi:"brand"`
	// Whether to support deployment.
	DeploySupport bool `pulumi:"deploySupport"`
	// Certificate description.
	Description string `pulumi:"description"`
	// Domain name associated with the certificate.
	Domain string `pulumi:"domain"`
	// Number of domain names that can be associated with the certificate.
	DomainCount int `pulumi:"domainCount"`
	// Domain name type.\
	// The options are as follows:
	// - SINGLE_DOMAIN: Single domain names
	// - WILDCARD: Wildcard domain names
	// - MULTI_DOMAIN: Multiple domain names
	DomainType string `pulumi:"domainType"`
	// The enterprise project id of the project.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Certificate expiration time.
	ExpireTime string `pulumi:"expireTime"`
	// Certificate ID.
	Id string `pulumi:"id"`
	// Certificate name.
	Name string `pulumi:"name"`
	// Additional domain name associated with the certificate.
	Sans string `pulumi:"sans"`
	// Signature algorithm.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// Certificate status.\
	// The options are as follows:
	// - ALL: All certificate status.
	// - PAID: The certificate has been paid and needs to be applied for from the CA.
	// - ISSUED: The certificate has been issued.
	// - CHECKING: The certificate application is being reviewed.
	// - CANCELCHECKING: The certificate application cancellation is being reviewed.
	// - UNPASSED: The certificate application fails.
	// - EXPIRED: The certificate has expired.
	// - REVOKING: The certificate revocation application is being reviewed.
	// - REVOKED: The certificate has been revoked.
	// - UPLOAD: The certificate is being managed.
	// - CHECKING_ORG: The organization verification is to be completed.
	// - ISSUING: The certificate is to be issued.
	// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
	Status string `pulumi:"status"`
	// Certificate type.\
	// The value can be: **DV_SSL_CERT**, **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, **OV_SSL_CERT_PRO**.
	Type string `pulumi:"type"`
	// Certificate validity period, in months.
	ValidityPeriod int `pulumi:"validityPeriod"`
	// Number of wildcard domain names that can be associated with the certificate.
	WildcardCount int `pulumi:"wildcardCount"`
}

// GetCertificatesCertificateInput is an input type that accepts GetCertificatesCertificateArgs and GetCertificatesCertificateOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateInput` via:
//
//	GetCertificatesCertificateArgs{...}
type GetCertificatesCertificateInput interface {
	pulumi.Input

	ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput
	ToGetCertificatesCertificateOutputWithContext(context.Context) GetCertificatesCertificateOutput
}

type GetCertificatesCertificateArgs struct {
	// Certificate authority.\
	// The value can be: **GLOBALSIGN**, **SYMANTEC**, **GEOTRUST**, **CFCA**.
	Brand pulumi.StringInput `pulumi:"brand"`
	// Whether to support deployment.
	DeploySupport pulumi.BoolInput `pulumi:"deploySupport"`
	// Certificate description.
	Description pulumi.StringInput `pulumi:"description"`
	// Domain name associated with the certificate.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Number of domain names that can be associated with the certificate.
	DomainCount pulumi.IntInput `pulumi:"domainCount"`
	// Domain name type.\
	// The options are as follows:
	// - SINGLE_DOMAIN: Single domain names
	// - WILDCARD: Wildcard domain names
	// - MULTI_DOMAIN: Multiple domain names
	DomainType pulumi.StringInput `pulumi:"domainType"`
	// The enterprise project id of the project.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// Certificate expiration time.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// Certificate ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Certificate name.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional domain name associated with the certificate.
	Sans pulumi.StringInput `pulumi:"sans"`
	// Signature algorithm.
	SignatureAlgorithm pulumi.StringInput `pulumi:"signatureAlgorithm"`
	// Certificate status.\
	// The options are as follows:
	// - ALL: All certificate status.
	// - PAID: The certificate has been paid and needs to be applied for from the CA.
	// - ISSUED: The certificate has been issued.
	// - CHECKING: The certificate application is being reviewed.
	// - CANCELCHECKING: The certificate application cancellation is being reviewed.
	// - UNPASSED: The certificate application fails.
	// - EXPIRED: The certificate has expired.
	// - REVOKING: The certificate revocation application is being reviewed.
	// - REVOKED: The certificate has been revoked.
	// - UPLOAD: The certificate is being managed.
	// - CHECKING_ORG: The organization verification is to be completed.
	// - ISSUING: The certificate is to be issued.
	// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
	Status pulumi.StringInput `pulumi:"status"`
	// Certificate type.\
	// The value can be: **DV_SSL_CERT**, **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, **OV_SSL_CERT_PRO**.
	Type pulumi.StringInput `pulumi:"type"`
	// Certificate validity period, in months.
	ValidityPeriod pulumi.IntInput `pulumi:"validityPeriod"`
	// Number of wildcard domain names that can be associated with the certificate.
	WildcardCount pulumi.IntInput `pulumi:"wildcardCount"`
}

func (GetCertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return i.ToGetCertificatesCertificateOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateOutput)
}

// GetCertificatesCertificateArrayInput is an input type that accepts GetCertificatesCertificateArray and GetCertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateArrayInput` via:
//
//	GetCertificatesCertificateArray{ GetCertificatesCertificateArgs{...} }
type GetCertificatesCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput
	ToGetCertificatesCertificateArrayOutputWithContext(context.Context) GetCertificatesCertificateArrayOutput
}

type GetCertificatesCertificateArray []GetCertificatesCertificateInput

func (GetCertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return i.ToGetCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateArrayOutput)
}

type GetCertificatesCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return o
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return o
}

// Certificate authority.\
// The value can be: **GLOBALSIGN**, **SYMANTEC**, **GEOTRUST**, **CFCA**.
func (o GetCertificatesCertificateOutput) Brand() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Brand }).(pulumi.StringOutput)
}

// Whether to support deployment.
func (o GetCertificatesCertificateOutput) DeploySupport() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) bool { return v.DeploySupport }).(pulumi.BoolOutput)
}

// Certificate description.
func (o GetCertificatesCertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Description }).(pulumi.StringOutput)
}

// Domain name associated with the certificate.
func (o GetCertificatesCertificateOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Domain }).(pulumi.StringOutput)
}

// Number of domain names that can be associated with the certificate.
func (o GetCertificatesCertificateOutput) DomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) int { return v.DomainCount }).(pulumi.IntOutput)
}

// Domain name type.\
// The options are as follows:
// - SINGLE_DOMAIN: Single domain names
// - WILDCARD: Wildcard domain names
// - MULTI_DOMAIN: Multiple domain names
func (o GetCertificatesCertificateOutput) DomainType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.DomainType }).(pulumi.StringOutput)
}

// The enterprise project id of the project.
func (o GetCertificatesCertificateOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Certificate expiration time.
func (o GetCertificatesCertificateOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Certificate ID.
func (o GetCertificatesCertificateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate name.
func (o GetCertificatesCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Name }).(pulumi.StringOutput)
}

// Additional domain name associated with the certificate.
func (o GetCertificatesCertificateOutput) Sans() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Sans }).(pulumi.StringOutput)
}

// Signature algorithm.
func (o GetCertificatesCertificateOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// Certificate status.\
// The options are as follows:
// - ALL: All certificate status.
// - PAID: The certificate has been paid and needs to be applied for from the CA.
// - ISSUED: The certificate has been issued.
// - CHECKING: The certificate application is being reviewed.
// - CANCELCHECKING: The certificate application cancellation is being reviewed.
// - UNPASSED: The certificate application fails.
// - EXPIRED: The certificate has expired.
// - REVOKING: The certificate revocation application is being reviewed.
// - REVOKED: The certificate has been revoked.
// - UPLOAD: The certificate is being managed.
// - CHECKING_ORG: The organization verification is to be completed.
// - ISSUING: The certificate is to be issued.
// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
func (o GetCertificatesCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Status }).(pulumi.StringOutput)
}

// Certificate type.\
// The value can be: **DV_SSL_CERT**, **DV_SSL_CERT_BASIC**, **EV_SSL_CERT**, **EV_SSL_CERT_PRO**, **OV_SSL_CERT**, **OV_SSL_CERT_PRO**.
func (o GetCertificatesCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Type }).(pulumi.StringOutput)
}

// Certificate validity period, in months.
func (o GetCertificatesCertificateOutput) ValidityPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) int { return v.ValidityPeriod }).(pulumi.IntOutput)
}

// Number of wildcard domain names that can be associated with the certificate.
func (o GetCertificatesCertificateOutput) WildcardCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) int { return v.WildcardCount }).(pulumi.IntOutput)
}

type GetCertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificate {
		return vs[0].([]GetCertificatesCertificate)[vs[1].(int)]
	}).(GetCertificatesCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthentificationInput)(nil)).Elem(), CertificateAuthentificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthentificationArrayInput)(nil)).Elem(), CertificateAuthentificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTargetInput)(nil)).Elem(), CertificateTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTargetArrayInput)(nil)).Elem(), CertificateTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateInput)(nil)).Elem(), GetCertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateArrayInput)(nil)).Elem(), GetCertificatesCertificateArray{})
	pulumi.RegisterOutputType(CertificateAuthentificationOutput{})
	pulumi.RegisterOutputType(CertificateAuthentificationArrayOutput{})
	pulumi.RegisterOutputType(CertificateTargetOutput{})
	pulumi.RegisterOutputType(CertificateTargetArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateArrayOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of SCM certificates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scm.GetCertificates(ctx, &scm.GetCertificatesArgs{
//				Status: pulumi.StringRef("ALL"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCertificates(ctx *pulumi.Context, args *GetCertificatesArgs, opts ...pulumi.InvokeOption) (*GetCertificatesResult, error) {
	var rv GetCertificatesResult
	err := ctx.Invoke("huaweicloud:Scm/getCertificates:getCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesArgs struct {
	// Whether to support deployment.
	DeploySupport *bool `pulumi:"deploySupport"`
	// The enterprise project id of the project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Certificate name.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Certificate status.\
	// The options are as follows:
	// - ALL: All certificate status.
	// - PAID: The certificate has been paid and needs to be applied for from the CA.
	// - ISSUED: The certificate has been issued.
	// - CHECKING: The certificate application is being reviewed.
	// - CANCELCHECKING: The certificate application cancellation is being reviewed.
	// - UNPASSED: The certificate application fails.
	// - EXPIRED: The certificate has expired.
	// - REVOKING: The certificate revocation application is being reviewed.
	// - REVOKED: The certificate has been revoked.
	// - UPLOAD: The certificate is being managed.
	// - CHECKING_ORG: The organization verification is to be completed.
	// - ISSUING: The certificate is to be issued.
	// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getCertificates.
type GetCertificatesResult struct {
	// Certificate list. For details, see Data structure of the Certificate field.
	// The Certificate structure is documented below.
	Certificates []GetCertificatesCertificate `pulumi:"certificates"`
	// Whether to support deployment.
	DeploySupport *bool `pulumi:"deploySupport"`
	// The enterprise project id of the project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Certificate name.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Certificate status.\
	// The options are as follows:
	// - ALL: All certificate status.
	// - PAID: The certificate has been paid and needs to be applied for from the CA.
	// - ISSUED: The certificate has been issued.
	// - CHECKING: The certificate application is being reviewed.
	// - CANCELCHECKING: The certificate application cancellation is being reviewed.
	// - UNPASSED: The certificate application fails.
	// - EXPIRED: The certificate has expired.
	// - REVOKING: The certificate revocation application is being reviewed.
	// - REVOKED: The certificate has been revoked.
	// - UPLOAD: The certificate is being managed.
	// - CHECKING_ORG: The organization verification is to be completed.
	// - ISSUING: The certificate is to be issued.
	// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
	Status *string `pulumi:"status"`
}

func GetCertificatesOutput(ctx *pulumi.Context, args GetCertificatesOutputArgs, opts ...pulumi.InvokeOption) GetCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCertificatesResult, error) {
			args := v.(GetCertificatesArgs)
			r, err := GetCertificates(ctx, &args, opts...)
			var s GetCertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCertificatesResultOutput)
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesOutputArgs struct {
	// Whether to support deployment.
	DeploySupport pulumi.BoolPtrInput `pulumi:"deploySupport"`
	// The enterprise project id of the project.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Certificate name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Certificate status.\
	// The options are as follows:
	// - ALL: All certificate status.
	// - PAID: The certificate has been paid and needs to be applied for from the CA.
	// - ISSUED: The certificate has been issued.
	// - CHECKING: The certificate application is being reviewed.
	// - CANCELCHECKING: The certificate application cancellation is being reviewed.
	// - UNPASSED: The certificate application fails.
	// - EXPIRED: The certificate has expired.
	// - REVOKING: The certificate revocation application is being reviewed.
	// - REVOKED: The certificate has been revoked.
	// - UPLOAD: The certificate is being managed.
	// - CHECKING_ORG: The organization verification is to be completed.
	// - ISSUING: The certificate is to be issued.
	// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getCertificates.
type GetCertificatesResultOutput struct{ *pulumi.OutputState }

func (GetCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesResult)(nil)).Elem()
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutput() GetCertificatesResultOutput {
	return o
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutputWithContext(ctx context.Context) GetCertificatesResultOutput {
	return o
}

// Certificate list. For details, see Data structure of the Certificate field.
// The Certificate structure is documented below.
func (o GetCertificatesResultOutput) Certificates() GetCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v GetCertificatesResult) []GetCertificatesCertificate { return v.Certificates }).(GetCertificatesCertificateArrayOutput)
}

// Whether to support deployment.
func (o GetCertificatesResultOutput) DeploySupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *bool { return v.DeploySupport }).(pulumi.BoolPtrOutput)
}

// The enterprise project id of the project.
func (o GetCertificatesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate name.
func (o GetCertificatesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetCertificatesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesResult) string { return v.Region }).(pulumi.StringOutput)
}

// Certificate status.\
// The options are as follows:
// - ALL: All certificate status.
// - PAID: The certificate has been paid and needs to be applied for from the CA.
// - ISSUED: The certificate has been issued.
// - CHECKING: The certificate application is being reviewed.
// - CANCELCHECKING: The certificate application cancellation is being reviewed.
// - UNPASSED: The certificate application fails.
// - EXPIRED: The certificate has expired.
// - REVOKING: The certificate revocation application is being reviewed.
// - REVOKED: The certificate has been revoked.
// - UPLOAD: The certificate is being managed.
// - CHECKING_ORG: The organization verification is to be completed.
// - ISSUING: The certificate is to be issued.
// - SUPPLEMENTCHECKING: Additional domain names to be added for a multi-domain certificate are being reviewed.
func (o GetCertificatesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCertificatesResultOutput{})
}

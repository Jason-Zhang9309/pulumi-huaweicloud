// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSL Certificate Manager (SCM) allows you to purchase Secure Sockets Layer (SSL) certificates from the world's leading
// digital certificate authorities (CAs), upload existing SSL certificates, and centrally manage all your SSL certificates
// in one place.
//
// ## Example Usage
// ### Load the certificate contents from the local files
//
// ```go
// package main
//
// import (
//
//	"io/ioutil"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scm.NewCertificate(ctx, "certificate1", &Scm.CertificateArgs{
//				Certificate:      readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_ca.crt"),
//				CertificateChain: readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_ca_chain.crt"),
//				PrivateKey:       readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_server.key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Write the contents of the certificate into the Terrafrom script
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scm.NewCertificate(ctx, "certificate2", &Scm.CertificateArgs{
//				Certificate: pulumi.String(fmt.Sprintf(`-----BEGIN CERTIFICATE-----
//
// MIIC9DCCAl2gAwIBAgIUUcJZn3ep4l8iHu6lL/jE2UV+G8gwDQYJKoZIhvcNAQEL
// ZWlqaW5nMQswC...
// (This is an example, please replace it with a encrypted key of valid SSL certificate.)
// -----END CERTIFICATE----------
//
// `)),
//
//	CertificateChain: pulumi.String(fmt.Sprintf(`-----BEGIN CERTIFICATE-----
//
// MIIC9DCCAl2gAwIBAgIUUcJZn3ep4l8iHu6lL/jE2UV+G8gwDQYJKoZIhvcNAQEL
// BQAwgYsxCzAJB...
// (This is an example, please replace it with a encrypted key of valid SSL certificate.)
// -----END CERTIFICATE----------
//
// `)),
//
//	PrivateKey: pulumi.String(fmt.Sprintf(`-----BEGIN PRIVATE KEY-----
//
// QWH3GbHx5bGQyexHj2hre4yEahn4dAKKdjSAMUuSfLWygp2pEdNFOegYTdqk/snv
// mhNmxp74oUcVfi1Msw6KY2...
// (This is an example, please replace it with a encrypted key of valid SSL certificate.)
// -----END PRIVATE KEY-----
//
// `)),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Push the SSL certificate to another HUAWEI CLOUD service
//
// ```go
// package main
//
// import (
//
//	"io/ioutil"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scm.NewCertificate(ctx, "certificate3", &Scm.CertificateArgs{
//				Certificate:      readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_ca.crt"),
//				CertificateChain: readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_ca_chain.crt"),
//				PrivateKey:       readFileOrPanic("/usr/local/data/certificate/cert_xxx/xxx_server.key"),
//				Targets: scm.CertificateTargetArray{
//					&scm.CertificateTargetArgs{
//						Projects: pulumi.StringArray{
//							pulumi.String("la-south-2"),
//						},
//						Service: pulumi.String("Enhance_ELB"),
//					},
//					&scm.CertificateTargetArgs{
//						Service: pulumi.String("CDN"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Certificates can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Scm/certificate:Certificate certificate_1 scs1627959834994
//
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// (List) Domain ownership verification information.
	// This is a list, each item of data is as follows:
	Authentifications CertificateAuthentificationArrayOutput `pulumi:"authentifications"`
	// The public encrypted key of the Certificate, PEM format.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The chain of the certificate.
	// It can be extracted from the *server.crt* file in the Nginx directory,
	// usually after the second paragraph is the certificate chain.
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`
	// Domain name mapping to the verification value
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Number of domain names can be bound to a certificate.
	DomainCount pulumi.IntOutput `pulumi:"domainCount"`
	// Human-readable name for the Certificate.
	// Does not have to be unique. The value contains a maximum of 63 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time when the certificate becomes invalid. If no valid value is obtained, this parameter is left blank.
	NotAfter pulumi.StringOutput `pulumi:"notAfter"`
	// Time when the certificate takes effect. If no valid value is obtained, this parameter is left blank.
	NotBefore pulumi.StringOutput `pulumi:"notBefore"`
	// The private encrypted key of the Certificate, PEM format.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Whether a certificate can be pushed.
	PushSupport pulumi.StringOutput `pulumi:"pushSupport"`
	// The region in which to create the SCM certificate resource.
	// If omitted, the provider-level region will be used.
	// Changing this setting will push a new certificate.
	Region pulumi.StringOutput `pulumi:"region"`
	// Certificate status. The value can be:
	Status pulumi.StringOutput `pulumi:"status"`
	// The service to which the certificate needs to be pushed.
	Targets CertificateTargetArrayOutput `pulumi:"targets"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.CertificateChain == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChain'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	var resource Certificate
	err := ctx.RegisterResource("huaweicloud:Scm/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("huaweicloud:Scm/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// (List) Domain ownership verification information.
	// This is a list, each item of data is as follows:
	Authentifications []CertificateAuthentification `pulumi:"authentifications"`
	// The public encrypted key of the Certificate, PEM format.
	Certificate *string `pulumi:"certificate"`
	// The chain of the certificate.
	// It can be extracted from the *server.crt* file in the Nginx directory,
	// usually after the second paragraph is the certificate chain.
	CertificateChain *string `pulumi:"certificateChain"`
	// Domain name mapping to the verification value
	Domain *string `pulumi:"domain"`
	// Number of domain names can be bound to a certificate.
	DomainCount *int `pulumi:"domainCount"`
	// Human-readable name for the Certificate.
	// Does not have to be unique. The value contains a maximum of 63 characters.
	Name *string `pulumi:"name"`
	// Time when the certificate becomes invalid. If no valid value is obtained, this parameter is left blank.
	NotAfter *string `pulumi:"notAfter"`
	// Time when the certificate takes effect. If no valid value is obtained, this parameter is left blank.
	NotBefore *string `pulumi:"notBefore"`
	// The private encrypted key of the Certificate, PEM format.
	PrivateKey *string `pulumi:"privateKey"`
	// Whether a certificate can be pushed.
	PushSupport *string `pulumi:"pushSupport"`
	// The region in which to create the SCM certificate resource.
	// If omitted, the provider-level region will be used.
	// Changing this setting will push a new certificate.
	Region *string `pulumi:"region"`
	// Certificate status. The value can be:
	Status *string `pulumi:"status"`
	// The service to which the certificate needs to be pushed.
	Targets []CertificateTarget `pulumi:"targets"`
}

type CertificateState struct {
	// (List) Domain ownership verification information.
	// This is a list, each item of data is as follows:
	Authentifications CertificateAuthentificationArrayInput
	// The public encrypted key of the Certificate, PEM format.
	Certificate pulumi.StringPtrInput
	// The chain of the certificate.
	// It can be extracted from the *server.crt* file in the Nginx directory,
	// usually after the second paragraph is the certificate chain.
	CertificateChain pulumi.StringPtrInput
	// Domain name mapping to the verification value
	Domain pulumi.StringPtrInput
	// Number of domain names can be bound to a certificate.
	DomainCount pulumi.IntPtrInput
	// Human-readable name for the Certificate.
	// Does not have to be unique. The value contains a maximum of 63 characters.
	Name pulumi.StringPtrInput
	// Time when the certificate becomes invalid. If no valid value is obtained, this parameter is left blank.
	NotAfter pulumi.StringPtrInput
	// Time when the certificate takes effect. If no valid value is obtained, this parameter is left blank.
	NotBefore pulumi.StringPtrInput
	// The private encrypted key of the Certificate, PEM format.
	PrivateKey pulumi.StringPtrInput
	// Whether a certificate can be pushed.
	PushSupport pulumi.StringPtrInput
	// The region in which to create the SCM certificate resource.
	// If omitted, the provider-level region will be used.
	// Changing this setting will push a new certificate.
	Region pulumi.StringPtrInput
	// Certificate status. The value can be:
	Status pulumi.StringPtrInput
	// The service to which the certificate needs to be pushed.
	Targets CertificateTargetArrayInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The public encrypted key of the Certificate, PEM format.
	Certificate string `pulumi:"certificate"`
	// The chain of the certificate.
	// It can be extracted from the *server.crt* file in the Nginx directory,
	// usually after the second paragraph is the certificate chain.
	CertificateChain string `pulumi:"certificateChain"`
	// Human-readable name for the Certificate.
	// Does not have to be unique. The value contains a maximum of 63 characters.
	Name *string `pulumi:"name"`
	// The private encrypted key of the Certificate, PEM format.
	PrivateKey string `pulumi:"privateKey"`
	// The region in which to create the SCM certificate resource.
	// If omitted, the provider-level region will be used.
	// Changing this setting will push a new certificate.
	Region *string `pulumi:"region"`
	// The service to which the certificate needs to be pushed.
	Targets []CertificateTarget `pulumi:"targets"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The public encrypted key of the Certificate, PEM format.
	Certificate pulumi.StringInput
	// The chain of the certificate.
	// It can be extracted from the *server.crt* file in the Nginx directory,
	// usually after the second paragraph is the certificate chain.
	CertificateChain pulumi.StringInput
	// Human-readable name for the Certificate.
	// Does not have to be unique. The value contains a maximum of 63 characters.
	Name pulumi.StringPtrInput
	// The private encrypted key of the Certificate, PEM format.
	PrivateKey pulumi.StringInput
	// The region in which to create the SCM certificate resource.
	// If omitted, the provider-level region will be used.
	// Changing this setting will push a new certificate.
	Region pulumi.StringPtrInput
	// The service to which the certificate needs to be pushed.
	Targets CertificateTargetArrayInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// (List) Domain ownership verification information.
// This is a list, each item of data is as follows:
func (o CertificateOutput) Authentifications() CertificateAuthentificationArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateAuthentificationArrayOutput { return v.Authentifications }).(CertificateAuthentificationArrayOutput)
}

// The public encrypted key of the Certificate, PEM format.
func (o CertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The chain of the certificate.
// It can be extracted from the *server.crt* file in the Nginx directory,
// usually after the second paragraph is the certificate chain.
func (o CertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateChain }).(pulumi.StringOutput)
}

// Domain name mapping to the verification value
func (o CertificateOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Number of domain names can be bound to a certificate.
func (o CertificateOutput) DomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Certificate) pulumi.IntOutput { return v.DomainCount }).(pulumi.IntOutput)
}

// Human-readable name for the Certificate.
// Does not have to be unique. The value contains a maximum of 63 characters.
func (o CertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time when the certificate becomes invalid. If no valid value is obtained, this parameter is left blank.
func (o CertificateOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

// Time when the certificate takes effect. If no valid value is obtained, this parameter is left blank.
func (o CertificateOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

// The private encrypted key of the Certificate, PEM format.
func (o CertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Whether a certificate can be pushed.
func (o CertificateOutput) PushSupport() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.PushSupport }).(pulumi.StringOutput)
}

// The region in which to create the SCM certificate resource.
// If omitted, the provider-level region will be used.
// Changing this setting will push a new certificate.
func (o CertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Certificate status. The value can be:
func (o CertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The service to which the certificate needs to be pushed.
func (o CertificateOutput) Targets() CertificateTargetArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateTargetArrayOutput { return v.Targets }).(CertificateTargetArrayOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}

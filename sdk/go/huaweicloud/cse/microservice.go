// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a dedicated microservice resource within HuaweiCloud.
//
// > When deleting a microservice, all instances under it will also be deleted together.
//
// ## Example Usage
//
// ## Import
//
// Microservices can be imported using related `connect_address` and their `id`, separated by a slash (/), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cse/microservice:Microservice test https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d
//
// ```
//
//	If you enabled the **RBAC** authorization, you also need to provide the account name and password, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cse/microservice:Microservice test 'https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/root/Test!123'
//
// ```
//
//	The single quotes can help you solve the problem of special characters reporting errors on bash.
type Microservice struct {
	pulumi.CustomResourceState

	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrOutput `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	AdminUser pulumi.StringPtrOutput `pulumi:"adminUser"`
	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	ConnectAddress pulumi.StringOutput `pulumi:"connectAddress"`
	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of `256` characters.
	// Changing this will create a new microservice.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the environment (stage) type.
	// The valid values are **development**, **testing**, **acceptance** and **production**.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// Specifies the microservice level.
	// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
	Level pulumi.StringPtrOutput `pulumi:"level"`
	// Specifies the name of the dedicated microservice.
	// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	Name pulumi.StringOutput `pulumi:"name"`
	// The microservice status. The values supports **UP** and **DOWN**.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewMicroservice registers a new resource with the given unique name, arguments, and options.
func NewMicroservice(ctx *pulumi.Context,
	name string, args *MicroserviceArgs, opts ...pulumi.ResourceOption) (*Microservice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.ConnectAddress == nil {
		return nil, errors.New("invalid value for required argument 'ConnectAddress'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Microservice
	err := ctx.RegisterResource("huaweicloud:Cse/microservice:Microservice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicroservice gets an existing Microservice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicroservice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicroserviceState, opts ...pulumi.ResourceOption) (*Microservice, error) {
	var resource Microservice
	err := ctx.ReadResource("huaweicloud:Cse/microservice:Microservice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Microservice resources.
type microserviceState struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	AdminUser *string `pulumi:"adminUser"`
	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	AppName *string `pulumi:"appName"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	ConnectAddress *string `pulumi:"connectAddress"`
	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of `256` characters.
	// Changing this will create a new microservice.
	Description *string `pulumi:"description"`
	// Specifies the environment (stage) type.
	// The valid values are **development**, **testing**, **acceptance** and **production**.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	Environment *string `pulumi:"environment"`
	// Specifies the microservice level.
	// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
	Level *string `pulumi:"level"`
	// Specifies the name of the dedicated microservice.
	// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	Name *string `pulumi:"name"`
	// The microservice status. The values supports **UP** and **DOWN**.
	Status *string `pulumi:"status"`
	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	Version *string `pulumi:"version"`
}

type MicroserviceState struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	AdminUser pulumi.StringPtrInput
	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	AppName pulumi.StringPtrInput
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	ConnectAddress pulumi.StringPtrInput
	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of `256` characters.
	// Changing this will create a new microservice.
	Description pulumi.StringPtrInput
	// Specifies the environment (stage) type.
	// The valid values are **development**, **testing**, **acceptance** and **production**.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	Environment pulumi.StringPtrInput
	// Specifies the microservice level.
	// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
	Level pulumi.StringPtrInput
	// Specifies the name of the dedicated microservice.
	// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	Name pulumi.StringPtrInput
	// The microservice status. The values supports **UP** and **DOWN**.
	Status pulumi.StringPtrInput
	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	Version pulumi.StringPtrInput
}

func (MicroserviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceState)(nil)).Elem()
}

type microserviceArgs struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	AdminUser *string `pulumi:"adminUser"`
	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	AppName string `pulumi:"appName"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	ConnectAddress string `pulumi:"connectAddress"`
	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of `256` characters.
	// Changing this will create a new microservice.
	Description *string `pulumi:"description"`
	// Specifies the environment (stage) type.
	// The valid values are **development**, **testing**, **acceptance** and **production**.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	Environment *string `pulumi:"environment"`
	// Specifies the microservice level.
	// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
	Level *string `pulumi:"level"`
	// Specifies the name of the dedicated microservice.
	// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	Name *string `pulumi:"name"`
	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Microservice resource.
type MicroserviceArgs struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
	AdminUser pulumi.StringPtrInput
	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	AppName pulumi.StringInput
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	ConnectAddress pulumi.StringInput
	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of `256` characters.
	// Changing this will create a new microservice.
	Description pulumi.StringPtrInput
	// Specifies the environment (stage) type.
	// The valid values are **development**, **testing**, **acceptance** and **production**.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	Environment pulumi.StringPtrInput
	// Specifies the microservice level.
	// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
	Level pulumi.StringPtrInput
	// Specifies the name of the dedicated microservice.
	// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	Name pulumi.StringPtrInput
	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	Version pulumi.StringInput
}

func (MicroserviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceArgs)(nil)).Elem()
}

type MicroserviceInput interface {
	pulumi.Input

	ToMicroserviceOutput() MicroserviceOutput
	ToMicroserviceOutputWithContext(ctx context.Context) MicroserviceOutput
}

func (*Microservice) ElementType() reflect.Type {
	return reflect.TypeOf((**Microservice)(nil)).Elem()
}

func (i *Microservice) ToMicroserviceOutput() MicroserviceOutput {
	return i.ToMicroserviceOutputWithContext(context.Background())
}

func (i *Microservice) ToMicroserviceOutputWithContext(ctx context.Context) MicroserviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceOutput)
}

// MicroserviceArrayInput is an input type that accepts MicroserviceArray and MicroserviceArrayOutput values.
// You can construct a concrete instance of `MicroserviceArrayInput` via:
//
//	MicroserviceArray{ MicroserviceArgs{...} }
type MicroserviceArrayInput interface {
	pulumi.Input

	ToMicroserviceArrayOutput() MicroserviceArrayOutput
	ToMicroserviceArrayOutputWithContext(context.Context) MicroserviceArrayOutput
}

type MicroserviceArray []MicroserviceInput

func (MicroserviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Microservice)(nil)).Elem()
}

func (i MicroserviceArray) ToMicroserviceArrayOutput() MicroserviceArrayOutput {
	return i.ToMicroserviceArrayOutputWithContext(context.Background())
}

func (i MicroserviceArray) ToMicroserviceArrayOutputWithContext(ctx context.Context) MicroserviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceArrayOutput)
}

// MicroserviceMapInput is an input type that accepts MicroserviceMap and MicroserviceMapOutput values.
// You can construct a concrete instance of `MicroserviceMapInput` via:
//
//	MicroserviceMap{ "key": MicroserviceArgs{...} }
type MicroserviceMapInput interface {
	pulumi.Input

	ToMicroserviceMapOutput() MicroserviceMapOutput
	ToMicroserviceMapOutputWithContext(context.Context) MicroserviceMapOutput
}

type MicroserviceMap map[string]MicroserviceInput

func (MicroserviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Microservice)(nil)).Elem()
}

func (i MicroserviceMap) ToMicroserviceMapOutput() MicroserviceMapOutput {
	return i.ToMicroserviceMapOutputWithContext(context.Background())
}

func (i MicroserviceMap) ToMicroserviceMapOutputWithContext(ctx context.Context) MicroserviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceMapOutput)
}

type MicroserviceOutput struct{ *pulumi.OutputState }

func (MicroserviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Microservice)(nil)).Elem()
}

func (o MicroserviceOutput) ToMicroserviceOutput() MicroserviceOutput {
	return o
}

func (o MicroserviceOutput) ToMicroserviceOutputWithContext(ctx context.Context) MicroserviceOutput {
	return o
}

// Specifies the account password.
// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
// The password format must meet the following conditions:
//   - Must be `8` to `32` characters long.
//   - A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
//     (-~!@#%^*_=+?$&()|<>{}[]).
//   - Cannot be the account name or account name spelled backwards.
//   - The password can only start with a letter.
func (o MicroserviceOutput) AdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringPtrOutput { return v.AdminPass }).(pulumi.StringPtrOutput)
}

// Specifies the account name. The initial account name is **root**.
// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice.
func (o MicroserviceOutput) AdminUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringPtrOutput { return v.AdminUser }).(pulumi.StringPtrOutput)
}

// Specifies the name of the dedicated microservice application.
// Changing this will create a new microservice.
func (o MicroserviceOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Specifies the connection address of service registry center for the
// specified dedicated CSE engine. Changing this will create a new microservice.
func (o MicroserviceOutput) ConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringOutput { return v.ConnectAddress }).(pulumi.StringOutput)
}

// Specifies the description of the dedicated microservice.
// The description can contian a maximum of `256` characters.
// Changing this will create a new microservice.
func (o MicroserviceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the environment (stage) type.
// The valid values are **development**, **testing**, **acceptance** and **production**.
// If omitted, the microservice will be deployed in an empty environment.
// Changing this will create a new microservice.
func (o MicroserviceOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// Specifies the microservice level.
// The valid values are **FRONT**, **MIDDLE**, and **BACK**. Changing this will create a new microservice.
func (o MicroserviceOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringPtrOutput { return v.Level }).(pulumi.StringPtrOutput)
}

// Specifies the name of the dedicated microservice.
// The name can contain `1` to `128` characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
func (o MicroserviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The microservice status. The values supports **UP** and **DOWN**.
func (o MicroserviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the version of the dedicated microservice.
// Changing this will create a new microservice.
func (o MicroserviceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Microservice) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MicroserviceArrayOutput struct{ *pulumi.OutputState }

func (MicroserviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Microservice)(nil)).Elem()
}

func (o MicroserviceArrayOutput) ToMicroserviceArrayOutput() MicroserviceArrayOutput {
	return o
}

func (o MicroserviceArrayOutput) ToMicroserviceArrayOutputWithContext(ctx context.Context) MicroserviceArrayOutput {
	return o
}

func (o MicroserviceArrayOutput) Index(i pulumi.IntInput) MicroserviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Microservice {
		return vs[0].([]*Microservice)[vs[1].(int)]
	}).(MicroserviceOutput)
}

type MicroserviceMapOutput struct{ *pulumi.OutputState }

func (MicroserviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Microservice)(nil)).Elem()
}

func (o MicroserviceMapOutput) ToMicroserviceMapOutput() MicroserviceMapOutput {
	return o
}

func (o MicroserviceMapOutput) ToMicroserviceMapOutputWithContext(ctx context.Context) MicroserviceMapOutput {
	return o
}

func (o MicroserviceMapOutput) MapIndex(k pulumi.StringInput) MicroserviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Microservice {
		return vs[0].(map[string]*Microservice)[vs[1].(string)]
	}).(MicroserviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceInput)(nil)).Elem(), &Microservice{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceArrayInput)(nil)).Elem(), MicroserviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceMapInput)(nil)).Elem(), MicroserviceMap{})
	pulumi.RegisterOutputType(MicroserviceOutput{})
	pulumi.RegisterOutputType(MicroserviceArrayOutput{})
	pulumi.RegisterOutputType(MicroserviceMapOutput{})
}

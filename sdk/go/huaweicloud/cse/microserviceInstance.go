// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a dedicated microservice instance resource within HuaweiCloud.
//
// ## Example Usage
//
// ## Import
//
// Microservices can be imported using related `connect_address`, `microservice_id` and their `id`, separated by a slash (/), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cse/microserviceInstance:MicroserviceInstance test https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/336e7428dd9411eca913fa163e7364b7
//
// ```
//
//	If you enabled the **RBAC** authorization, you also need to provide the account name and password, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cse/microserviceInstance:MicroserviceInstance test 'https://124.70.26.32:30100/f14960ba495e03f59f85aacaaafbdef3fbff3f0d/336e7428dd9411eca913fa163e7364b7/root/Test!123'
//
// ```
//
//	The single quotes can help you solve the problem of special characters reporting errors on bash.
type MicroserviceInstance struct {
	pulumi.CustomResourceState

	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrOutput `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	AdminUser pulumi.StringPtrOutput `pulumi:"adminUser"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	ConnectAddress pulumi.StringOutput `pulumi:"connectAddress"`
	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	DataCenter MicroserviceInstanceDataCenterOutput `pulumi:"dataCenter"`
	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	Endpoints pulumi.StringArrayOutput `pulumi:"endpoints"`
	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	HealthCheck MicroserviceInstanceHealthCheckOutput `pulumi:"healthCheck"`
	// Specifies the host name, such as `localhost`.
	// Changing this will create a new microservice instance.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	MicroserviceId pulumi.StringOutput `pulumi:"microserviceId"`
	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// The microservice instance status. The values supports **UP**, **DOWN**, **STARTING** and **OUTOFSERVICE**.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewMicroserviceInstance registers a new resource with the given unique name, arguments, and options.
func NewMicroserviceInstance(ctx *pulumi.Context,
	name string, args *MicroserviceInstanceArgs, opts ...pulumi.ResourceOption) (*MicroserviceInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectAddress == nil {
		return nil, errors.New("invalid value for required argument 'ConnectAddress'")
	}
	if args.Endpoints == nil {
		return nil, errors.New("invalid value for required argument 'Endpoints'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.MicroserviceId == nil {
		return nil, errors.New("invalid value for required argument 'MicroserviceId'")
	}
	var resource MicroserviceInstance
	err := ctx.RegisterResource("huaweicloud:Cse/microserviceInstance:MicroserviceInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicroserviceInstance gets an existing MicroserviceInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicroserviceInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicroserviceInstanceState, opts ...pulumi.ResourceOption) (*MicroserviceInstance, error) {
	var resource MicroserviceInstance
	err := ctx.ReadResource("huaweicloud:Cse/microserviceInstance:MicroserviceInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MicroserviceInstance resources.
type microserviceInstanceState struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	AdminUser *string `pulumi:"adminUser"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	ConnectAddress *string `pulumi:"connectAddress"`
	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	DataCenter *MicroserviceInstanceDataCenter `pulumi:"dataCenter"`
	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	Endpoints []string `pulumi:"endpoints"`
	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	HealthCheck *MicroserviceInstanceHealthCheck `pulumi:"healthCheck"`
	// Specifies the host name, such as `localhost`.
	// Changing this will create a new microservice instance.
	HostName *string `pulumi:"hostName"`
	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	MicroserviceId *string `pulumi:"microserviceId"`
	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	Properties map[string]string `pulumi:"properties"`
	// The microservice instance status. The values supports **UP**, **DOWN**, **STARTING** and **OUTOFSERVICE**.
	Status *string `pulumi:"status"`
	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	Version *string `pulumi:"version"`
}

type MicroserviceInstanceState struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	AdminUser pulumi.StringPtrInput
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	ConnectAddress pulumi.StringPtrInput
	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	DataCenter MicroserviceInstanceDataCenterPtrInput
	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	Endpoints pulumi.StringArrayInput
	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	HealthCheck MicroserviceInstanceHealthCheckPtrInput
	// Specifies the host name, such as `localhost`.
	// Changing this will create a new microservice instance.
	HostName pulumi.StringPtrInput
	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	MicroserviceId pulumi.StringPtrInput
	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	Properties pulumi.StringMapInput
	// The microservice instance status. The values supports **UP**, **DOWN**, **STARTING** and **OUTOFSERVICE**.
	Status pulumi.StringPtrInput
	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	Version pulumi.StringPtrInput
}

func (MicroserviceInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceInstanceState)(nil)).Elem()
}

type microserviceInstanceArgs struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	AdminUser *string `pulumi:"adminUser"`
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	ConnectAddress string `pulumi:"connectAddress"`
	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	DataCenter *MicroserviceInstanceDataCenter `pulumi:"dataCenter"`
	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	Endpoints []string `pulumi:"endpoints"`
	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	HealthCheck *MicroserviceInstanceHealthCheck `pulumi:"healthCheck"`
	// Specifies the host name, such as `localhost`.
	// Changing this will create a new microservice instance.
	HostName string `pulumi:"hostName"`
	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	MicroserviceId string `pulumi:"microserviceId"`
	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a MicroserviceInstance resource.
type MicroserviceInstanceArgs struct {
	// Specifies the account password.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the account name. The initial account name is **root**.
	// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
	AdminUser pulumi.StringPtrInput
	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	ConnectAddress pulumi.StringInput
	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	DataCenter MicroserviceInstanceDataCenterPtrInput
	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	Endpoints pulumi.StringArrayInput
	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	HealthCheck MicroserviceInstanceHealthCheckPtrInput
	// Specifies the host name, such as `localhost`.
	// Changing this will create a new microservice instance.
	HostName pulumi.StringInput
	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	MicroserviceId pulumi.StringInput
	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	Properties pulumi.StringMapInput
	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	Version pulumi.StringPtrInput
}

func (MicroserviceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceInstanceArgs)(nil)).Elem()
}

type MicroserviceInstanceInput interface {
	pulumi.Input

	ToMicroserviceInstanceOutput() MicroserviceInstanceOutput
	ToMicroserviceInstanceOutputWithContext(ctx context.Context) MicroserviceInstanceOutput
}

func (*MicroserviceInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MicroserviceInstance)(nil)).Elem()
}

func (i *MicroserviceInstance) ToMicroserviceInstanceOutput() MicroserviceInstanceOutput {
	return i.ToMicroserviceInstanceOutputWithContext(context.Background())
}

func (i *MicroserviceInstance) ToMicroserviceInstanceOutputWithContext(ctx context.Context) MicroserviceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceInstanceOutput)
}

// MicroserviceInstanceArrayInput is an input type that accepts MicroserviceInstanceArray and MicroserviceInstanceArrayOutput values.
// You can construct a concrete instance of `MicroserviceInstanceArrayInput` via:
//
//	MicroserviceInstanceArray{ MicroserviceInstanceArgs{...} }
type MicroserviceInstanceArrayInput interface {
	pulumi.Input

	ToMicroserviceInstanceArrayOutput() MicroserviceInstanceArrayOutput
	ToMicroserviceInstanceArrayOutputWithContext(context.Context) MicroserviceInstanceArrayOutput
}

type MicroserviceInstanceArray []MicroserviceInstanceInput

func (MicroserviceInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicroserviceInstance)(nil)).Elem()
}

func (i MicroserviceInstanceArray) ToMicroserviceInstanceArrayOutput() MicroserviceInstanceArrayOutput {
	return i.ToMicroserviceInstanceArrayOutputWithContext(context.Background())
}

func (i MicroserviceInstanceArray) ToMicroserviceInstanceArrayOutputWithContext(ctx context.Context) MicroserviceInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceInstanceArrayOutput)
}

// MicroserviceInstanceMapInput is an input type that accepts MicroserviceInstanceMap and MicroserviceInstanceMapOutput values.
// You can construct a concrete instance of `MicroserviceInstanceMapInput` via:
//
//	MicroserviceInstanceMap{ "key": MicroserviceInstanceArgs{...} }
type MicroserviceInstanceMapInput interface {
	pulumi.Input

	ToMicroserviceInstanceMapOutput() MicroserviceInstanceMapOutput
	ToMicroserviceInstanceMapOutputWithContext(context.Context) MicroserviceInstanceMapOutput
}

type MicroserviceInstanceMap map[string]MicroserviceInstanceInput

func (MicroserviceInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicroserviceInstance)(nil)).Elem()
}

func (i MicroserviceInstanceMap) ToMicroserviceInstanceMapOutput() MicroserviceInstanceMapOutput {
	return i.ToMicroserviceInstanceMapOutputWithContext(context.Background())
}

func (i MicroserviceInstanceMap) ToMicroserviceInstanceMapOutputWithContext(ctx context.Context) MicroserviceInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceInstanceMapOutput)
}

type MicroserviceInstanceOutput struct{ *pulumi.OutputState }

func (MicroserviceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MicroserviceInstance)(nil)).Elem()
}

func (o MicroserviceInstanceOutput) ToMicroserviceInstanceOutput() MicroserviceInstanceOutput {
	return o
}

func (o MicroserviceInstanceOutput) ToMicroserviceInstanceOutputWithContext(ctx context.Context) MicroserviceInstanceOutput {
	return o
}

// Specifies the account password.
// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
// The password format must meet the following conditions:
//   - Must be `8` to `32` characters long.
//   - A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
//     (-~!@#%^*_=+?$&()|<>{}[]).
//   - Cannot be the account name or account name spelled backwards.
//   - The password can only start with a letter.
func (o MicroserviceInstanceOutput) AdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringPtrOutput { return v.AdminPass }).(pulumi.StringPtrOutput)
}

// Specifies the account name. The initial account name is **root**.
// Required if the `authType` of engine is **RBAC**. Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) AdminUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringPtrOutput { return v.AdminUser }).(pulumi.StringPtrOutput)
}

// Specifies the connection address of service registry center for the
// specified dedicated CSE engine. Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) ConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringOutput { return v.ConnectAddress }).(pulumi.StringOutput)
}

// Specifies the data center configuration.
// The object structure is documented below.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) DataCenter() MicroserviceInstanceDataCenterOutput {
	return o.ApplyT(func(v *MicroserviceInstance) MicroserviceInstanceDataCenterOutput { return v.DataCenter }).(MicroserviceInstanceDataCenterOutput)
}

// Specifies the access addresses information.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringArrayOutput { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Specifies the health check configuration.
// The object structure is documented below.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) HealthCheck() MicroserviceInstanceHealthCheckOutput {
	return o.ApplyT(func(v *MicroserviceInstance) MicroserviceInstanceHealthCheckOutput { return v.HealthCheck }).(MicroserviceInstanceHealthCheckOutput)
}

// Specifies the host name, such as `localhost`.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Specifies the ID of the dedicated microservice to which the instance
// belongs. Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) MicroserviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringOutput { return v.MicroserviceId }).(pulumi.StringOutput)
}

// Specifies the extended attributes.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

// The microservice instance status. The values supports **UP**, **DOWN**, **STARTING** and **OUTOFSERVICE**.
func (o MicroserviceInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the verison of the dedicated microservice instance.
// Changing this will create a new microservice instance.
func (o MicroserviceInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MicroserviceInstanceArrayOutput struct{ *pulumi.OutputState }

func (MicroserviceInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicroserviceInstance)(nil)).Elem()
}

func (o MicroserviceInstanceArrayOutput) ToMicroserviceInstanceArrayOutput() MicroserviceInstanceArrayOutput {
	return o
}

func (o MicroserviceInstanceArrayOutput) ToMicroserviceInstanceArrayOutputWithContext(ctx context.Context) MicroserviceInstanceArrayOutput {
	return o
}

func (o MicroserviceInstanceArrayOutput) Index(i pulumi.IntInput) MicroserviceInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MicroserviceInstance {
		return vs[0].([]*MicroserviceInstance)[vs[1].(int)]
	}).(MicroserviceInstanceOutput)
}

type MicroserviceInstanceMapOutput struct{ *pulumi.OutputState }

func (MicroserviceInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicroserviceInstance)(nil)).Elem()
}

func (o MicroserviceInstanceMapOutput) ToMicroserviceInstanceMapOutput() MicroserviceInstanceMapOutput {
	return o
}

func (o MicroserviceInstanceMapOutput) ToMicroserviceInstanceMapOutputWithContext(ctx context.Context) MicroserviceInstanceMapOutput {
	return o
}

func (o MicroserviceInstanceMapOutput) MapIndex(k pulumi.StringInput) MicroserviceInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MicroserviceInstance {
		return vs[0].(map[string]*MicroserviceInstance)[vs[1].(string)]
	}).(MicroserviceInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceInstanceInput)(nil)).Elem(), &MicroserviceInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceInstanceArrayInput)(nil)).Elem(), MicroserviceInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceInstanceMapInput)(nil)).Elem(), MicroserviceInstanceMap{})
	pulumi.RegisterOutputType(MicroserviceInstanceOutput{})
	pulumi.RegisterOutputType(MicroserviceInstanceArrayOutput{})
	pulumi.RegisterOutputType(MicroserviceInstanceMapOutput{})
}

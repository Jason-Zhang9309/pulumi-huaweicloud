// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a dedicated microservice engine (2.0+) resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			engineName := cfg.RequireObject("engineName")
//			networkId := cfg.RequireObject("networkId")
//			az1 := cfg.RequireObject("az1")
//			_, err := Cse.NewMicroserviceEngine(ctx, "test", &Cse.MicroserviceEngineArgs{
//				Flavor:    pulumi.String("cse.s1.small2"),
//				NetworkId: pulumi.Any(networkId),
//				AuthType:  pulumi.String("NONE"),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.Any(az1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Engines can be imported using their `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cse/microserviceEngine:MicroserviceEngine test eddc5d42-f9d5-4f8e-984b-d6f3e088561c
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes are `admin_pass` and `extend_params`. It is generally recommended running `terraform plan` after importing an instance. You can then decide if changes should be applied to the instance, or the resource definition should be updated to align with the instance. Also you can ignore changes as below. resource "huaweicloud_cse_microservice_engine" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	admin_pass,
//
//	extend_params,
//
//	]
//
//	} }
type MicroserviceEngine struct {
	pulumi.CustomResourceState

	// Specifies the account password. The corresponding account name is **root**.
	// Required if `authType` is **RBAC**. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrOutput `pulumi:"adminPass"`
	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// + **RBAC**: Enable security authentication.
	//   Security authentication applies to the scenario where multiple users use the same engine.
	//   After security authentication is enabled, all users who use the engine can log in using the account and password.
	//   You can assign the account and role in the System Management.
	// + **NONE**: Disable security authentication.
	//   After security authentication is disabled, all users who use the engine can use the engine without using the account
	//   and password, and have the same operation permissions on all services.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// The address of config center.
	// The object structure is documented below.
	ConfigCenterAddresses MicroserviceEngineConfigCenterAddressArrayOutput `pulumi:"configCenterAddresses"`
	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of `255` characters.
	// Changing this will create a new engine.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	EipId               pulumi.StringPtrOutput `pulumi:"eipId"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	ExtendParams pulumi.StringMapOutput `pulumi:"extendParams"`
	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// The maximum number of the microservice instance resources.
	InstanceLimit pulumi.IntOutput `pulumi:"instanceLimit"`
	// Specifies the name of the dedicated microservice engine.
	// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the network ID of the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	Region pulumi.StringOutput `pulumi:"region"`
	// The maximum number of the microservice resources.
	ServiceLimit pulumi.IntOutput `pulumi:"serviceLimit"`
	// The connection address of service center.
	// The object structure is documented below.
	ServiceRegistryAddresses MicroserviceEngineServiceRegistryAddressArrayOutput `pulumi:"serviceRegistryAddresses"`
	// Specifies the version of the dedicated microservice engine. The value can be:
	// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewMicroserviceEngine registers a new resource with the given unique name, arguments, and options.
func NewMicroserviceEngine(ctx *pulumi.Context,
	name string, args *MicroserviceEngineArgs, opts ...pulumi.ResourceOption) (*MicroserviceEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource MicroserviceEngine
	err := ctx.RegisterResource("huaweicloud:Cse/microserviceEngine:MicroserviceEngine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicroserviceEngine gets an existing MicroserviceEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicroserviceEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicroserviceEngineState, opts ...pulumi.ResourceOption) (*MicroserviceEngine, error) {
	var resource MicroserviceEngine
	err := ctx.ReadResource("huaweicloud:Cse/microserviceEngine:MicroserviceEngine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MicroserviceEngine resources.
type microserviceEngineState struct {
	// Specifies the account password. The corresponding account name is **root**.
	// Required if `authType` is **RBAC**. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// + **RBAC**: Enable security authentication.
	//   Security authentication applies to the scenario where multiple users use the same engine.
	//   After security authentication is enabled, all users who use the engine can log in using the account and password.
	//   You can assign the account and role in the System Management.
	// + **NONE**: Disable security authentication.
	//   After security authentication is disabled, all users who use the engine can use the engine without using the account
	//   and password, and have the same operation permissions on all services.
	AuthType *string `pulumi:"authType"`
	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The address of config center.
	// The object structure is documented below.
	ConfigCenterAddresses []MicroserviceEngineConfigCenterAddress `pulumi:"configCenterAddresses"`
	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of `255` characters.
	// Changing this will create a new engine.
	Description *string `pulumi:"description"`
	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	EipId               *string `pulumi:"eipId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	Flavor *string `pulumi:"flavor"`
	// The maximum number of the microservice instance resources.
	InstanceLimit *int `pulumi:"instanceLimit"`
	// Specifies the name of the dedicated microservice engine.
	// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	Name *string `pulumi:"name"`
	// Specifies the network ID of the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	NetworkId *string `pulumi:"networkId"`
	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	Region *string `pulumi:"region"`
	// The maximum number of the microservice resources.
	ServiceLimit *int `pulumi:"serviceLimit"`
	// The connection address of service center.
	// The object structure is documented below.
	ServiceRegistryAddresses []MicroserviceEngineServiceRegistryAddress `pulumi:"serviceRegistryAddresses"`
	// Specifies the version of the dedicated microservice engine. The value can be:
	// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
	Version *string `pulumi:"version"`
}

type MicroserviceEngineState struct {
	// Specifies the account password. The corresponding account name is **root**.
	// Required if `authType` is **RBAC**. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// + **RBAC**: Enable security authentication.
	//   Security authentication applies to the scenario where multiple users use the same engine.
	//   After security authentication is enabled, all users who use the engine can log in using the account and password.
	//   You can assign the account and role in the System Management.
	// + **NONE**: Disable security authentication.
	//   After security authentication is disabled, all users who use the engine can use the engine without using the account
	//   and password, and have the same operation permissions on all services.
	AuthType pulumi.StringPtrInput
	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	AvailabilityZones pulumi.StringArrayInput
	// The address of config center.
	// The object structure is documented below.
	ConfigCenterAddresses MicroserviceEngineConfigCenterAddressArrayInput
	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of `255` characters.
	// Changing this will create a new engine.
	Description pulumi.StringPtrInput
	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	EipId               pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	ExtendParams pulumi.StringMapInput
	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	Flavor pulumi.StringPtrInput
	// The maximum number of the microservice instance resources.
	InstanceLimit pulumi.IntPtrInput
	// Specifies the name of the dedicated microservice engine.
	// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	Name pulumi.StringPtrInput
	// Specifies the network ID of the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	NetworkId pulumi.StringPtrInput
	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	Region pulumi.StringPtrInput
	// The maximum number of the microservice resources.
	ServiceLimit pulumi.IntPtrInput
	// The connection address of service center.
	// The object structure is documented below.
	ServiceRegistryAddresses MicroserviceEngineServiceRegistryAddressArrayInput
	// Specifies the version of the dedicated microservice engine. The value can be:
	// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
	Version pulumi.StringPtrInput
}

func (MicroserviceEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceEngineState)(nil)).Elem()
}

type microserviceEngineArgs struct {
	// Specifies the account password. The corresponding account name is **root**.
	// Required if `authType` is **RBAC**. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// + **RBAC**: Enable security authentication.
	//   Security authentication applies to the scenario where multiple users use the same engine.
	//   After security authentication is enabled, all users who use the engine can log in using the account and password.
	//   You can assign the account and role in the System Management.
	// + **NONE**: Disable security authentication.
	//   After security authentication is disabled, all users who use the engine can use the engine without using the account
	//   and password, and have the same operation permissions on all services.
	AuthType string `pulumi:"authType"`
	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of `255` characters.
	// Changing this will create a new engine.
	Description *string `pulumi:"description"`
	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	EipId               *string `pulumi:"eipId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	Flavor string `pulumi:"flavor"`
	// Specifies the name of the dedicated microservice engine.
	// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	Name *string `pulumi:"name"`
	// Specifies the network ID of the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	NetworkId string `pulumi:"networkId"`
	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	Region *string `pulumi:"region"`
	// Specifies the version of the dedicated microservice engine. The value can be:
	// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a MicroserviceEngine resource.
type MicroserviceEngineArgs struct {
	// Specifies the account password. The corresponding account name is **root**.
	// Required if `authType` is **RBAC**. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// + Must be `8` to `32` characters long.
	// + A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
	//   (-~!@#%^*_=+?$&()|<>{}[]).
	// + Cannot be the account name or account name spelled backwards.
	// + The password can only start with a letter.
	AdminPass pulumi.StringPtrInput
	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// + **RBAC**: Enable security authentication.
	//   Security authentication applies to the scenario where multiple users use the same engine.
	//   After security authentication is enabled, all users who use the engine can log in using the account and password.
	//   You can assign the account and role in the System Management.
	// + **NONE**: Disable security authentication.
	//   After security authentication is disabled, all users who use the engine can use the engine without using the account
	//   and password, and have the same operation permissions on all services.
	AuthType pulumi.StringInput
	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	AvailabilityZones pulumi.StringArrayInput
	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of `255` characters.
	// Changing this will create a new engine.
	Description pulumi.StringPtrInput
	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	EipId               pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	ExtendParams pulumi.StringMapInput
	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	Flavor pulumi.StringInput
	// Specifies the name of the dedicated microservice engine.
	// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	Name pulumi.StringPtrInput
	// Specifies the network ID of the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	NetworkId pulumi.StringInput
	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	Region pulumi.StringPtrInput
	// Specifies the version of the dedicated microservice engine. The value can be:
	// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
	Version pulumi.StringPtrInput
}

func (MicroserviceEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microserviceEngineArgs)(nil)).Elem()
}

type MicroserviceEngineInput interface {
	pulumi.Input

	ToMicroserviceEngineOutput() MicroserviceEngineOutput
	ToMicroserviceEngineOutputWithContext(ctx context.Context) MicroserviceEngineOutput
}

func (*MicroserviceEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**MicroserviceEngine)(nil)).Elem()
}

func (i *MicroserviceEngine) ToMicroserviceEngineOutput() MicroserviceEngineOutput {
	return i.ToMicroserviceEngineOutputWithContext(context.Background())
}

func (i *MicroserviceEngine) ToMicroserviceEngineOutputWithContext(ctx context.Context) MicroserviceEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceEngineOutput)
}

// MicroserviceEngineArrayInput is an input type that accepts MicroserviceEngineArray and MicroserviceEngineArrayOutput values.
// You can construct a concrete instance of `MicroserviceEngineArrayInput` via:
//
//	MicroserviceEngineArray{ MicroserviceEngineArgs{...} }
type MicroserviceEngineArrayInput interface {
	pulumi.Input

	ToMicroserviceEngineArrayOutput() MicroserviceEngineArrayOutput
	ToMicroserviceEngineArrayOutputWithContext(context.Context) MicroserviceEngineArrayOutput
}

type MicroserviceEngineArray []MicroserviceEngineInput

func (MicroserviceEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicroserviceEngine)(nil)).Elem()
}

func (i MicroserviceEngineArray) ToMicroserviceEngineArrayOutput() MicroserviceEngineArrayOutput {
	return i.ToMicroserviceEngineArrayOutputWithContext(context.Background())
}

func (i MicroserviceEngineArray) ToMicroserviceEngineArrayOutputWithContext(ctx context.Context) MicroserviceEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceEngineArrayOutput)
}

// MicroserviceEngineMapInput is an input type that accepts MicroserviceEngineMap and MicroserviceEngineMapOutput values.
// You can construct a concrete instance of `MicroserviceEngineMapInput` via:
//
//	MicroserviceEngineMap{ "key": MicroserviceEngineArgs{...} }
type MicroserviceEngineMapInput interface {
	pulumi.Input

	ToMicroserviceEngineMapOutput() MicroserviceEngineMapOutput
	ToMicroserviceEngineMapOutputWithContext(context.Context) MicroserviceEngineMapOutput
}

type MicroserviceEngineMap map[string]MicroserviceEngineInput

func (MicroserviceEngineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicroserviceEngine)(nil)).Elem()
}

func (i MicroserviceEngineMap) ToMicroserviceEngineMapOutput() MicroserviceEngineMapOutput {
	return i.ToMicroserviceEngineMapOutputWithContext(context.Background())
}

func (i MicroserviceEngineMap) ToMicroserviceEngineMapOutputWithContext(ctx context.Context) MicroserviceEngineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicroserviceEngineMapOutput)
}

type MicroserviceEngineOutput struct{ *pulumi.OutputState }

func (MicroserviceEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MicroserviceEngine)(nil)).Elem()
}

func (o MicroserviceEngineOutput) ToMicroserviceEngineOutput() MicroserviceEngineOutput {
	return o
}

func (o MicroserviceEngineOutput) ToMicroserviceEngineOutputWithContext(ctx context.Context) MicroserviceEngineOutput {
	return o
}

// Specifies the account password. The corresponding account name is **root**.
// Required if `authType` is **RBAC**. Changing this will create a new engine.
// The password format must meet the following conditions:
//   - Must be `8` to `32` characters long.
//   - A password must contain at least one digit, one uppercase letter, one lowercase letter, and one special character
//     (-~!@#%^*_=+?$&()|<>{}[]).
//   - Cannot be the account name or account name spelled backwards.
//   - The password can only start with a letter.
func (o MicroserviceEngineOutput) AdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringPtrOutput { return v.AdminPass }).(pulumi.StringPtrOutput)
}

// Specifies the authentication method for the dedicated microservice engine.
// Changing this will create a new engine.
//   - **RBAC**: Enable security authentication.
//     Security authentication applies to the scenario where multiple users use the same engine.
//     After security authentication is enabled, all users who use the engine can log in using the account and password.
//     You can assign the account and role in the System Management.
//   - **NONE**: Disable security authentication.
//     After security authentication is disabled, all users who use the engine can use the engine without using the account
//     and password, and have the same operation permissions on all services.
func (o MicroserviceEngineOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Specifies the list of availability zone.
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The address of config center.
// The object structure is documented below.
func (o MicroserviceEngineOutput) ConfigCenterAddresses() MicroserviceEngineConfigCenterAddressArrayOutput {
	return o.ApplyT(func(v *MicroserviceEngine) MicroserviceEngineConfigCenterAddressArrayOutput {
		return v.ConfigCenterAddresses
	}).(MicroserviceEngineConfigCenterAddressArrayOutput)
}

// Specifies the description of the dedicated microservice engine.
// The description can contian a maximum of `255` characters.
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the EIP ID to which the dedicated microservice engine assocated.
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringPtrOutput { return v.EipId }).(pulumi.StringPtrOutput)
}

func (o MicroserviceEngineOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the additional parameters for the dedicated microservice engine.
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringMapOutput { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Specifies the flavor of the dedicated microservice engine.
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// The maximum number of the microservice instance resources.
func (o MicroserviceEngineOutput) InstanceLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.IntOutput { return v.InstanceLimit }).(pulumi.IntOutput)
}

// Specifies the name of the dedicated microservice engine.
// The name can contain `3` to `24` characters, only letters, digits and hyphens (-) are allowed.
// The name must start with a letter and cannot end with a hyphen (-).
// Changing this will create a new engine.
func (o MicroserviceEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the network ID of the subnet to which the dedicated microservice
// engine belongs. Changing this will create a new engine.
func (o MicroserviceEngineOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the dedicated microservice engine.
// If omitted, the provider-level region will be used. Changing this will create a new engine.
func (o MicroserviceEngineOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The maximum number of the microservice resources.
func (o MicroserviceEngineOutput) ServiceLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.IntOutput { return v.ServiceLimit }).(pulumi.IntOutput)
}

// The connection address of service center.
// The object structure is documented below.
func (o MicroserviceEngineOutput) ServiceRegistryAddresses() MicroserviceEngineServiceRegistryAddressArrayOutput {
	return o.ApplyT(func(v *MicroserviceEngine) MicroserviceEngineServiceRegistryAddressArrayOutput {
		return v.ServiceRegistryAddresses
	}).(MicroserviceEngineServiceRegistryAddressArrayOutput)
}

// Specifies the version of the dedicated microservice engine. The value can be:
// **CSE2**. Defaults to: **CSE2**. Changing this will create a new engine.
func (o MicroserviceEngineOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MicroserviceEngine) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type MicroserviceEngineArrayOutput struct{ *pulumi.OutputState }

func (MicroserviceEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicroserviceEngine)(nil)).Elem()
}

func (o MicroserviceEngineArrayOutput) ToMicroserviceEngineArrayOutput() MicroserviceEngineArrayOutput {
	return o
}

func (o MicroserviceEngineArrayOutput) ToMicroserviceEngineArrayOutputWithContext(ctx context.Context) MicroserviceEngineArrayOutput {
	return o
}

func (o MicroserviceEngineArrayOutput) Index(i pulumi.IntInput) MicroserviceEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MicroserviceEngine {
		return vs[0].([]*MicroserviceEngine)[vs[1].(int)]
	}).(MicroserviceEngineOutput)
}

type MicroserviceEngineMapOutput struct{ *pulumi.OutputState }

func (MicroserviceEngineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicroserviceEngine)(nil)).Elem()
}

func (o MicroserviceEngineMapOutput) ToMicroserviceEngineMapOutput() MicroserviceEngineMapOutput {
	return o
}

func (o MicroserviceEngineMapOutput) ToMicroserviceEngineMapOutputWithContext(ctx context.Context) MicroserviceEngineMapOutput {
	return o
}

func (o MicroserviceEngineMapOutput) MapIndex(k pulumi.StringInput) MicroserviceEngineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MicroserviceEngine {
		return vs[0].(map[string]*MicroserviceEngine)[vs[1].(string)]
	}).(MicroserviceEngineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceEngineInput)(nil)).Elem(), &MicroserviceEngine{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceEngineArrayInput)(nil)).Elem(), MicroserviceEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicroserviceEngineMapInput)(nil)).Elem(), MicroserviceEngineMap{})
	pulumi.RegisterOutputType(MicroserviceEngineOutput{})
	pulumi.RegisterOutputType(MicroserviceEngineArrayOutput{})
	pulumi.RegisterOutputType(MicroserviceEngineMapOutput{})
}

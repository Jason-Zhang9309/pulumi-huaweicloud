// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get an available HuaweiCloud ECS compute instance remote console.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Ecs.GetInstanceRemoteConsole(ctx, &ecs.GetInstanceRemoteConsoleArgs{
//				InstanceId: instanceId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInstanceRemoteConsole(ctx *pulumi.Context, args *GetInstanceRemoteConsoleArgs, opts ...pulumi.InvokeOption) (*GetInstanceRemoteConsoleResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetInstanceRemoteConsoleResult
	err := ctx.Invoke("huaweicloud:Ecs/getInstanceRemoteConsole:getInstanceRemoteConsole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceRemoteConsole.
type GetInstanceRemoteConsoleArgs struct {
	// Specifies the ECS ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to obtain the instances.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getInstanceRemoteConsole.
type GetInstanceRemoteConsoleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// The protocol of the ECS compute instance remote console.
	Protocol string `pulumi:"protocol"`
	Region   string `pulumi:"region"`
	// The type of ECS compute instance remote console.
	Type string `pulumi:"type"`
	// The url of ECS compute instance remote console.
	Url string `pulumi:"url"`
}

func GetInstanceRemoteConsoleOutput(ctx *pulumi.Context, args GetInstanceRemoteConsoleOutputArgs, opts ...pulumi.InvokeOption) GetInstanceRemoteConsoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstanceRemoteConsoleResult, error) {
			args := v.(GetInstanceRemoteConsoleArgs)
			r, err := GetInstanceRemoteConsole(ctx, &args, opts...)
			var s GetInstanceRemoteConsoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstanceRemoteConsoleResultOutput)
}

// A collection of arguments for invoking getInstanceRemoteConsole.
type GetInstanceRemoteConsoleOutputArgs struct {
	// Specifies the ECS ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to obtain the instances.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetInstanceRemoteConsoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceRemoteConsoleArgs)(nil)).Elem()
}

// A collection of values returned by getInstanceRemoteConsole.
type GetInstanceRemoteConsoleResultOutput struct{ *pulumi.OutputState }

func (GetInstanceRemoteConsoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceRemoteConsoleResult)(nil)).Elem()
}

func (o GetInstanceRemoteConsoleResultOutput) ToGetInstanceRemoteConsoleResultOutput() GetInstanceRemoteConsoleResultOutput {
	return o
}

func (o GetInstanceRemoteConsoleResultOutput) ToGetInstanceRemoteConsoleResultOutputWithContext(ctx context.Context) GetInstanceRemoteConsoleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceRemoteConsoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstanceRemoteConsoleResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The protocol of the ECS compute instance remote console.
func (o GetInstanceRemoteConsoleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetInstanceRemoteConsoleResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.Region }).(pulumi.StringOutput)
}

// The type of ECS compute instance remote console.
func (o GetInstanceRemoteConsoleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.Type }).(pulumi.StringOutput)
}

// The url of ECS compute instance remote console.
func (o GetInstanceRemoteConsoleResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceRemoteConsoleResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceRemoteConsoleResultOutput{})
}

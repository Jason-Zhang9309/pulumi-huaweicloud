// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VOD media asset resource within HuaweiCloud.
//
// ## Example Usage
// ### Upload media asset from OBS
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			bucketName := cfg.RequireObject("bucketName")
//			objectPath := cfg.RequireObject("objectPath")
//			_, err := Vod.NewMediaAsset(ctx, "test", &Vod.MediaAssetArgs{
//				MediaType:   pulumi.String("MP4"),
//				InputBucket: pulumi.Any(bucketName),
//				InputPath:   pulumi.Any(objectPath),
//				Description: pulumi.String("test video"),
//				Labels:      pulumi.String("test_label_1,test_lable_2,test_label_3"),
//				Thumbnail: &vod.MediaAssetThumbnailArgs{
//					Type: pulumi.String("time"),
//					Time: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Upload media asset by URL
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			mediaUrl := cfg.RequireObject("mediaUrl")
//			_, err := Vod.NewMediaAsset(ctx, "test", &Vod.MediaAssetArgs{
//				MediaType:   pulumi.String("MP4"),
//				Url:         pulumi.Any(mediaUrl),
//				Description: pulumi.String("test video"),
//				Labels:      pulumi.String("test_label_1,test_lable_2,test_label_3"),
//				Thumbnail: &vod.MediaAssetThumbnailArgs{
//					Type: pulumi.String("time"),
//					Time: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The media asset can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Vod/mediaAsset:MediaAsset test 8754976729b8a2ba745d01036edded2b
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`url`, `input_bucket`, `input_path`, `output_bucket`, `output_path`, `storage_mode`, `template_group_name`, `workflow_name`, `publish`, `auto_encrypt`, `auto_preload`, `review_template_id`, `thumbnail`. It is generally recommended running `terraform plan` after importing a media asset. You can then decide if changes should be applied to the media asset, or the resource definition should be updated to align with the media asset. Also you can ignore changes as below. resource "huaweicloud_vod_media_asset" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	url, input_bucket, input_path, output_bucket, output_path, storage_mode, template_group_name,
//
//	workflow_name, publish, auto_encrypt, auto_preload, review_template_id, thumbnail,
//
//	]
//
//	} }
type MediaAsset struct {
	pulumi.CustomResourceState

	// Specifies whether to automatically encrypt the media. If set to **true**,
	// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoEncrypt pulumi.BoolPtrOutput `pulumi:"autoEncrypt"`
	// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoPreload pulumi.BoolPtrOutput `pulumi:"autoPreload"`
	// Specifies the category ID of the media asset. Default to: **-1**, which means the media
	// asset will be categorized into the 'Other' category of system presets.
	CategoryId pulumi.IntOutput `pulumi:"categoryId"`
	// The category name of the media asset.
	CategoryName pulumi.StringOutput `pulumi:"categoryName"`
	// Specifies the media asset description, which contains a maximum of 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the OBS bucket name of media source file.
	// Either this field or `url` must be specified. Changing this creates a new resource.
	InputBucket pulumi.StringPtrOutput `pulumi:"inputBucket"`
	// Specifies the media source file path in the OBS bucket.
	// Changing this creates a new resource.
	InputPath pulumi.StringPtrOutput `pulumi:"inputPath"`
	// Specifies the labels of the media asset, which contains a maximum of 16 labels
	// separated by commas.
	Labels pulumi.StringPtrOutput `pulumi:"labels"`
	// The name of the media file.
	MediaName pulumi.StringOutput `pulumi:"mediaName"`
	// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
	// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
	// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
	// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
	MediaType pulumi.StringOutput `pulumi:"mediaType"`
	// The URL of original media file.
	MediaUrl pulumi.StringOutput `pulumi:"mediaUrl"`
	// Specifies the media asset name, which contains a maximum of 128 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the output OBS bucket name.
	// Changing this creates a new resource.
	OutputBucket pulumi.StringPtrOutput `pulumi:"outputBucket"`
	// Specifies the output file path in the OBS bucket.
	// Changing this creates a new resource.
	OutputPath pulumi.StringPtrOutput `pulumi:"outputPath"`
	// Specifies whether to publish the media. Defaults to: **false**.
	Publish pulumi.BoolPtrOutput `pulumi:"publish"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the review template ID. Changing this creates a new resource.
	ReviewTemplateId pulumi.StringPtrOutput `pulumi:"reviewTemplateId"`
	// Specifies the storage mode. The value can be:
	// + **0**: copy the media file to VOD bucket.
	// + **1**: save the media file in user bucket.
	StorageMode pulumi.IntPtrOutput `pulumi:"storageMode"`
	// Specifies the transcoding template group name. If not empty,
	// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
	TemplateGroupName pulumi.StringPtrOutput `pulumi:"templateGroupName"`
	// Specifies the review thumbnail configurations.
	// The object structure is documented below. Changing this creates a new resource.
	Thumbnail MediaAssetThumbnailPtrOutput `pulumi:"thumbnail"`
	// Specifies the URL of media source file. Currently only http and https protocols
	// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// Specifies the workflow name. If not empty, the uploaded media will be
	// processed with the specified workflow. Changing this creates a new resource.
	WorkflowName pulumi.StringPtrOutput `pulumi:"workflowName"`
}

// NewMediaAsset registers a new resource with the given unique name, arguments, and options.
func NewMediaAsset(ctx *pulumi.Context,
	name string, args *MediaAssetArgs, opts ...pulumi.ResourceOption) (*MediaAsset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaType == nil {
		return nil, errors.New("invalid value for required argument 'MediaType'")
	}
	var resource MediaAsset
	err := ctx.RegisterResource("huaweicloud:Vod/mediaAsset:MediaAsset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaAsset gets an existing MediaAsset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaAssetState, opts ...pulumi.ResourceOption) (*MediaAsset, error) {
	var resource MediaAsset
	err := ctx.ReadResource("huaweicloud:Vod/mediaAsset:MediaAsset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaAsset resources.
type mediaAssetState struct {
	// Specifies whether to automatically encrypt the media. If set to **true**,
	// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoEncrypt *bool `pulumi:"autoEncrypt"`
	// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoPreload *bool `pulumi:"autoPreload"`
	// Specifies the category ID of the media asset. Default to: **-1**, which means the media
	// asset will be categorized into the 'Other' category of system presets.
	CategoryId *int `pulumi:"categoryId"`
	// The category name of the media asset.
	CategoryName *string `pulumi:"categoryName"`
	// Specifies the media asset description, which contains a maximum of 1024 characters.
	Description *string `pulumi:"description"`
	// Specifies the OBS bucket name of media source file.
	// Either this field or `url` must be specified. Changing this creates a new resource.
	InputBucket *string `pulumi:"inputBucket"`
	// Specifies the media source file path in the OBS bucket.
	// Changing this creates a new resource.
	InputPath *string `pulumi:"inputPath"`
	// Specifies the labels of the media asset, which contains a maximum of 16 labels
	// separated by commas.
	Labels *string `pulumi:"labels"`
	// The name of the media file.
	MediaName *string `pulumi:"mediaName"`
	// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
	// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
	// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
	// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
	MediaType *string `pulumi:"mediaType"`
	// The URL of original media file.
	MediaUrl *string `pulumi:"mediaUrl"`
	// Specifies the media asset name, which contains a maximum of 128 characters.
	Name *string `pulumi:"name"`
	// Specifies the output OBS bucket name.
	// Changing this creates a new resource.
	OutputBucket *string `pulumi:"outputBucket"`
	// Specifies the output file path in the OBS bucket.
	// Changing this creates a new resource.
	OutputPath *string `pulumi:"outputPath"`
	// Specifies whether to publish the media. Defaults to: **false**.
	Publish *bool `pulumi:"publish"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the review template ID. Changing this creates a new resource.
	ReviewTemplateId *string `pulumi:"reviewTemplateId"`
	// Specifies the storage mode. The value can be:
	// + **0**: copy the media file to VOD bucket.
	// + **1**: save the media file in user bucket.
	StorageMode *int `pulumi:"storageMode"`
	// Specifies the transcoding template group name. If not empty,
	// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
	TemplateGroupName *string `pulumi:"templateGroupName"`
	// Specifies the review thumbnail configurations.
	// The object structure is documented below. Changing this creates a new resource.
	Thumbnail *MediaAssetThumbnail `pulumi:"thumbnail"`
	// Specifies the URL of media source file. Currently only http and https protocols
	// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
	Url *string `pulumi:"url"`
	// Specifies the workflow name. If not empty, the uploaded media will be
	// processed with the specified workflow. Changing this creates a new resource.
	WorkflowName *string `pulumi:"workflowName"`
}

type MediaAssetState struct {
	// Specifies whether to automatically encrypt the media. If set to **true**,
	// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoEncrypt pulumi.BoolPtrInput
	// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoPreload pulumi.BoolPtrInput
	// Specifies the category ID of the media asset. Default to: **-1**, which means the media
	// asset will be categorized into the 'Other' category of system presets.
	CategoryId pulumi.IntPtrInput
	// The category name of the media asset.
	CategoryName pulumi.StringPtrInput
	// Specifies the media asset description, which contains a maximum of 1024 characters.
	Description pulumi.StringPtrInput
	// Specifies the OBS bucket name of media source file.
	// Either this field or `url` must be specified. Changing this creates a new resource.
	InputBucket pulumi.StringPtrInput
	// Specifies the media source file path in the OBS bucket.
	// Changing this creates a new resource.
	InputPath pulumi.StringPtrInput
	// Specifies the labels of the media asset, which contains a maximum of 16 labels
	// separated by commas.
	Labels pulumi.StringPtrInput
	// The name of the media file.
	MediaName pulumi.StringPtrInput
	// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
	// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
	// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
	// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
	MediaType pulumi.StringPtrInput
	// The URL of original media file.
	MediaUrl pulumi.StringPtrInput
	// Specifies the media asset name, which contains a maximum of 128 characters.
	Name pulumi.StringPtrInput
	// Specifies the output OBS bucket name.
	// Changing this creates a new resource.
	OutputBucket pulumi.StringPtrInput
	// Specifies the output file path in the OBS bucket.
	// Changing this creates a new resource.
	OutputPath pulumi.StringPtrInput
	// Specifies whether to publish the media. Defaults to: **false**.
	Publish pulumi.BoolPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the review template ID. Changing this creates a new resource.
	ReviewTemplateId pulumi.StringPtrInput
	// Specifies the storage mode. The value can be:
	// + **0**: copy the media file to VOD bucket.
	// + **1**: save the media file in user bucket.
	StorageMode pulumi.IntPtrInput
	// Specifies the transcoding template group name. If not empty,
	// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
	TemplateGroupName pulumi.StringPtrInput
	// Specifies the review thumbnail configurations.
	// The object structure is documented below. Changing this creates a new resource.
	Thumbnail MediaAssetThumbnailPtrInput
	// Specifies the URL of media source file. Currently only http and https protocols
	// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
	Url pulumi.StringPtrInput
	// Specifies the workflow name. If not empty, the uploaded media will be
	// processed with the specified workflow. Changing this creates a new resource.
	WorkflowName pulumi.StringPtrInput
}

func (MediaAssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaAssetState)(nil)).Elem()
}

type mediaAssetArgs struct {
	// Specifies whether to automatically encrypt the media. If set to **true**,
	// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoEncrypt *bool `pulumi:"autoEncrypt"`
	// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoPreload *bool `pulumi:"autoPreload"`
	// Specifies the category ID of the media asset. Default to: **-1**, which means the media
	// asset will be categorized into the 'Other' category of system presets.
	CategoryId *int `pulumi:"categoryId"`
	// Specifies the media asset description, which contains a maximum of 1024 characters.
	Description *string `pulumi:"description"`
	// Specifies the OBS bucket name of media source file.
	// Either this field or `url` must be specified. Changing this creates a new resource.
	InputBucket *string `pulumi:"inputBucket"`
	// Specifies the media source file path in the OBS bucket.
	// Changing this creates a new resource.
	InputPath *string `pulumi:"inputPath"`
	// Specifies the labels of the media asset, which contains a maximum of 16 labels
	// separated by commas.
	Labels *string `pulumi:"labels"`
	// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
	// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
	// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
	// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
	MediaType string `pulumi:"mediaType"`
	// Specifies the media asset name, which contains a maximum of 128 characters.
	Name *string `pulumi:"name"`
	// Specifies the output OBS bucket name.
	// Changing this creates a new resource.
	OutputBucket *string `pulumi:"outputBucket"`
	// Specifies the output file path in the OBS bucket.
	// Changing this creates a new resource.
	OutputPath *string `pulumi:"outputPath"`
	// Specifies whether to publish the media. Defaults to: **false**.
	Publish *bool `pulumi:"publish"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the review template ID. Changing this creates a new resource.
	ReviewTemplateId *string `pulumi:"reviewTemplateId"`
	// Specifies the storage mode. The value can be:
	// + **0**: copy the media file to VOD bucket.
	// + **1**: save the media file in user bucket.
	StorageMode *int `pulumi:"storageMode"`
	// Specifies the transcoding template group name. If not empty,
	// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
	TemplateGroupName *string `pulumi:"templateGroupName"`
	// Specifies the review thumbnail configurations.
	// The object structure is documented below. Changing this creates a new resource.
	Thumbnail *MediaAssetThumbnail `pulumi:"thumbnail"`
	// Specifies the URL of media source file. Currently only http and https protocols
	// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
	Url *string `pulumi:"url"`
	// Specifies the workflow name. If not empty, the uploaded media will be
	// processed with the specified workflow. Changing this creates a new resource.
	WorkflowName *string `pulumi:"workflowName"`
}

// The set of arguments for constructing a MediaAsset resource.
type MediaAssetArgs struct {
	// Specifies whether to automatically encrypt the media. If set to **true**,
	// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoEncrypt pulumi.BoolPtrInput
	// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
	// Changing this creates a new resource.
	AutoPreload pulumi.BoolPtrInput
	// Specifies the category ID of the media asset. Default to: **-1**, which means the media
	// asset will be categorized into the 'Other' category of system presets.
	CategoryId pulumi.IntPtrInput
	// Specifies the media asset description, which contains a maximum of 1024 characters.
	Description pulumi.StringPtrInput
	// Specifies the OBS bucket name of media source file.
	// Either this field or `url` must be specified. Changing this creates a new resource.
	InputBucket pulumi.StringPtrInput
	// Specifies the media source file path in the OBS bucket.
	// Changing this creates a new resource.
	InputPath pulumi.StringPtrInput
	// Specifies the labels of the media asset, which contains a maximum of 16 labels
	// separated by commas.
	Labels pulumi.StringPtrInput
	// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
	// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
	// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
	// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
	MediaType pulumi.StringInput
	// Specifies the media asset name, which contains a maximum of 128 characters.
	Name pulumi.StringPtrInput
	// Specifies the output OBS bucket name.
	// Changing this creates a new resource.
	OutputBucket pulumi.StringPtrInput
	// Specifies the output file path in the OBS bucket.
	// Changing this creates a new resource.
	OutputPath pulumi.StringPtrInput
	// Specifies whether to publish the media. Defaults to: **false**.
	Publish pulumi.BoolPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the review template ID. Changing this creates a new resource.
	ReviewTemplateId pulumi.StringPtrInput
	// Specifies the storage mode. The value can be:
	// + **0**: copy the media file to VOD bucket.
	// + **1**: save the media file in user bucket.
	StorageMode pulumi.IntPtrInput
	// Specifies the transcoding template group name. If not empty,
	// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
	TemplateGroupName pulumi.StringPtrInput
	// Specifies the review thumbnail configurations.
	// The object structure is documented below. Changing this creates a new resource.
	Thumbnail MediaAssetThumbnailPtrInput
	// Specifies the URL of media source file. Currently only http and https protocols
	// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
	Url pulumi.StringPtrInput
	// Specifies the workflow name. If not empty, the uploaded media will be
	// processed with the specified workflow. Changing this creates a new resource.
	WorkflowName pulumi.StringPtrInput
}

func (MediaAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaAssetArgs)(nil)).Elem()
}

type MediaAssetInput interface {
	pulumi.Input

	ToMediaAssetOutput() MediaAssetOutput
	ToMediaAssetOutputWithContext(ctx context.Context) MediaAssetOutput
}

func (*MediaAsset) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAsset)(nil)).Elem()
}

func (i *MediaAsset) ToMediaAssetOutput() MediaAssetOutput {
	return i.ToMediaAssetOutputWithContext(context.Background())
}

func (i *MediaAsset) ToMediaAssetOutputWithContext(ctx context.Context) MediaAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAssetOutput)
}

// MediaAssetArrayInput is an input type that accepts MediaAssetArray and MediaAssetArrayOutput values.
// You can construct a concrete instance of `MediaAssetArrayInput` via:
//
//	MediaAssetArray{ MediaAssetArgs{...} }
type MediaAssetArrayInput interface {
	pulumi.Input

	ToMediaAssetArrayOutput() MediaAssetArrayOutput
	ToMediaAssetArrayOutputWithContext(context.Context) MediaAssetArrayOutput
}

type MediaAssetArray []MediaAssetInput

func (MediaAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaAsset)(nil)).Elem()
}

func (i MediaAssetArray) ToMediaAssetArrayOutput() MediaAssetArrayOutput {
	return i.ToMediaAssetArrayOutputWithContext(context.Background())
}

func (i MediaAssetArray) ToMediaAssetArrayOutputWithContext(ctx context.Context) MediaAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAssetArrayOutput)
}

// MediaAssetMapInput is an input type that accepts MediaAssetMap and MediaAssetMapOutput values.
// You can construct a concrete instance of `MediaAssetMapInput` via:
//
//	MediaAssetMap{ "key": MediaAssetArgs{...} }
type MediaAssetMapInput interface {
	pulumi.Input

	ToMediaAssetMapOutput() MediaAssetMapOutput
	ToMediaAssetMapOutputWithContext(context.Context) MediaAssetMapOutput
}

type MediaAssetMap map[string]MediaAssetInput

func (MediaAssetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaAsset)(nil)).Elem()
}

func (i MediaAssetMap) ToMediaAssetMapOutput() MediaAssetMapOutput {
	return i.ToMediaAssetMapOutputWithContext(context.Background())
}

func (i MediaAssetMap) ToMediaAssetMapOutputWithContext(ctx context.Context) MediaAssetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAssetMapOutput)
}

type MediaAssetOutput struct{ *pulumi.OutputState }

func (MediaAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAsset)(nil)).Elem()
}

func (o MediaAssetOutput) ToMediaAssetOutput() MediaAssetOutput {
	return o
}

func (o MediaAssetOutput) ToMediaAssetOutputWithContext(ctx context.Context) MediaAssetOutput {
	return o
}

// Specifies whether to automatically encrypt the media. If set to **true**,
// `templateGroupName` must be specified, and the output format of transcoding is **HLS**. Defaults to: **false**.
// Changing this creates a new resource.
func (o MediaAssetOutput) AutoEncrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.BoolPtrOutput { return v.AutoEncrypt }).(pulumi.BoolPtrOutput)
}

// Specifies whether to automatically warm up the media to CDN. Defaults to: **false**.
// Changing this creates a new resource.
func (o MediaAssetOutput) AutoPreload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.BoolPtrOutput { return v.AutoPreload }).(pulumi.BoolPtrOutput)
}

// Specifies the category ID of the media asset. Default to: **-1**, which means the media
// asset will be categorized into the 'Other' category of system presets.
func (o MediaAssetOutput) CategoryId() pulumi.IntOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.IntOutput { return v.CategoryId }).(pulumi.IntOutput)
}

// The category name of the media asset.
func (o MediaAssetOutput) CategoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.CategoryName }).(pulumi.StringOutput)
}

// Specifies the media asset description, which contains a maximum of 1024 characters.
func (o MediaAssetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the OBS bucket name of media source file.
// Either this field or `url` must be specified. Changing this creates a new resource.
func (o MediaAssetOutput) InputBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.InputBucket }).(pulumi.StringPtrOutput)
}

// Specifies the media source file path in the OBS bucket.
// Changing this creates a new resource.
func (o MediaAssetOutput) InputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.InputPath }).(pulumi.StringPtrOutput)
}

// Specifies the labels of the media asset, which contains a maximum of 16 labels
// separated by commas.
func (o MediaAssetOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.Labels }).(pulumi.StringPtrOutput)
}

// The name of the media file.
func (o MediaAssetOutput) MediaName() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.MediaName }).(pulumi.StringOutput)
}

// Specifies the media type. Valid values are: **MP4**, **TS**, **MOV**,
// **MXF**, **MPG**, **FLV**, **WMV**, **AVI**, **M4V**, **F4V**, **MPEG**, **3GP**, **ASF**, **MKV**, **HLS**,
// **M3U8**, **MP3**, **OGG**, **WAV**, **WMA**, **APE**, **FLAC**, **AAC**, **AC3**, **MMF**, **AMR**, **M4A**,
// **M4R**, **WV**, **MP2**. Changing this creates a new resource.
func (o MediaAssetOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.MediaType }).(pulumi.StringOutput)
}

// The URL of original media file.
func (o MediaAssetOutput) MediaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.MediaUrl }).(pulumi.StringOutput)
}

// Specifies the media asset name, which contains a maximum of 128 characters.
func (o MediaAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the output OBS bucket name.
// Changing this creates a new resource.
func (o MediaAssetOutput) OutputBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.OutputBucket }).(pulumi.StringPtrOutput)
}

// Specifies the output file path in the OBS bucket.
// Changing this creates a new resource.
func (o MediaAssetOutput) OutputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.OutputPath }).(pulumi.StringPtrOutput)
}

// Specifies whether to publish the media. Defaults to: **false**.
func (o MediaAssetOutput) Publish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.BoolPtrOutput { return v.Publish }).(pulumi.BoolPtrOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o MediaAssetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the review template ID. Changing this creates a new resource.
func (o MediaAssetOutput) ReviewTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.ReviewTemplateId }).(pulumi.StringPtrOutput)
}

// Specifies the storage mode. The value can be:
// + **0**: copy the media file to VOD bucket.
// + **1**: save the media file in user bucket.
func (o MediaAssetOutput) StorageMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.IntPtrOutput { return v.StorageMode }).(pulumi.IntPtrOutput)
}

// Specifies the transcoding template group name. If not empty,
// the uploaded media will be transcoded with the specified transcoding template group. Changing this creates a new resource.
func (o MediaAssetOutput) TemplateGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.TemplateGroupName }).(pulumi.StringPtrOutput)
}

// Specifies the review thumbnail configurations.
// The object structure is documented below. Changing this creates a new resource.
func (o MediaAssetOutput) Thumbnail() MediaAssetThumbnailPtrOutput {
	return o.ApplyT(func(v *MediaAsset) MediaAssetThumbnailPtrOutput { return v.Thumbnail }).(MediaAssetThumbnailPtrOutput)
}

// Specifies the URL of media source file. Currently only http and https protocols
// are supported. Either this field or `inputBucket` must be specified. Changing this creates a new resource.
func (o MediaAssetOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// Specifies the workflow name. If not empty, the uploaded media will be
// processed with the specified workflow. Changing this creates a new resource.
func (o MediaAssetOutput) WorkflowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAsset) pulumi.StringPtrOutput { return v.WorkflowName }).(pulumi.StringPtrOutput)
}

type MediaAssetArrayOutput struct{ *pulumi.OutputState }

func (MediaAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaAsset)(nil)).Elem()
}

func (o MediaAssetArrayOutput) ToMediaAssetArrayOutput() MediaAssetArrayOutput {
	return o
}

func (o MediaAssetArrayOutput) ToMediaAssetArrayOutputWithContext(ctx context.Context) MediaAssetArrayOutput {
	return o
}

func (o MediaAssetArrayOutput) Index(i pulumi.IntInput) MediaAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaAsset {
		return vs[0].([]*MediaAsset)[vs[1].(int)]
	}).(MediaAssetOutput)
}

type MediaAssetMapOutput struct{ *pulumi.OutputState }

func (MediaAssetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaAsset)(nil)).Elem()
}

func (o MediaAssetMapOutput) ToMediaAssetMapOutput() MediaAssetMapOutput {
	return o
}

func (o MediaAssetMapOutput) ToMediaAssetMapOutputWithContext(ctx context.Context) MediaAssetMapOutput {
	return o
}

func (o MediaAssetMapOutput) MapIndex(k pulumi.StringInput) MediaAssetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaAsset {
		return vs[0].(map[string]*MediaAsset)[vs[1].(string)]
	}).(MediaAssetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAssetInput)(nil)).Elem(), &MediaAsset{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAssetArrayInput)(nil)).Elem(), MediaAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAssetMapInput)(nil)).Elem(), MediaAssetMap{})
	pulumi.RegisterOutputType(MediaAssetOutput{})
	pulumi.RegisterOutputType(MediaAssetArrayOutput{})
	pulumi.RegisterOutputType(MediaAssetMapOutput{})
}

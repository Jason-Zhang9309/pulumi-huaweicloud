// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VOD media category resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vod.NewMediaCategory(ctx, "test", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The category can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Vod/mediaCategory:MediaCategory test 132945
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`parent_id`. It is generally recommended running `terraform plan` after importing a media category. You can then decide if changes should be applied to the media category, or the resource definition should be updated to align with the media category. Also you can ignore changes as below. resource "huaweicloud_vod_media_category" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	parent_id,
//
//	]
//
//	} }
type MediaCategory struct {
	pulumi.CustomResourceState

	// The json string of subcategory information. It supports up to 3 levels of categories,
	// and each category supports up to 128 subcategories.
	Children pulumi.StringOutput `pulumi:"children"`
	// Specifies the category name, which contains a maximum of 64 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the parent category ID. If this parameter is left blank,
	// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
	ParentId pulumi.StringPtrOutput `pulumi:"parentId"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewMediaCategory registers a new resource with the given unique name, arguments, and options.
func NewMediaCategory(ctx *pulumi.Context,
	name string, args *MediaCategoryArgs, opts ...pulumi.ResourceOption) (*MediaCategory, error) {
	if args == nil {
		args = &MediaCategoryArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource MediaCategory
	err := ctx.RegisterResource("huaweicloud:Vod/mediaCategory:MediaCategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaCategory gets an existing MediaCategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaCategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaCategoryState, opts ...pulumi.ResourceOption) (*MediaCategory, error) {
	var resource MediaCategory
	err := ctx.ReadResource("huaweicloud:Vod/mediaCategory:MediaCategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaCategory resources.
type mediaCategoryState struct {
	// The json string of subcategory information. It supports up to 3 levels of categories,
	// and each category supports up to 128 subcategories.
	Children *string `pulumi:"children"`
	// Specifies the category name, which contains a maximum of 64 characters.
	Name *string `pulumi:"name"`
	// Specifies the parent category ID. If this parameter is left blank,
	// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
	ParentId *string `pulumi:"parentId"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type MediaCategoryState struct {
	// The json string of subcategory information. It supports up to 3 levels of categories,
	// and each category supports up to 128 subcategories.
	Children pulumi.StringPtrInput
	// Specifies the category name, which contains a maximum of 64 characters.
	Name pulumi.StringPtrInput
	// Specifies the parent category ID. If this parameter is left blank,
	// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
	ParentId pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MediaCategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaCategoryState)(nil)).Elem()
}

type mediaCategoryArgs struct {
	// Specifies the category name, which contains a maximum of 64 characters.
	Name *string `pulumi:"name"`
	// Specifies the parent category ID. If this parameter is left blank,
	// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
	ParentId *string `pulumi:"parentId"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MediaCategory resource.
type MediaCategoryArgs struct {
	// Specifies the category name, which contains a maximum of 64 characters.
	Name pulumi.StringPtrInput
	// Specifies the parent category ID. If this parameter is left blank,
	// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
	ParentId pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MediaCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaCategoryArgs)(nil)).Elem()
}

type MediaCategoryInput interface {
	pulumi.Input

	ToMediaCategoryOutput() MediaCategoryOutput
	ToMediaCategoryOutputWithContext(ctx context.Context) MediaCategoryOutput
}

func (*MediaCategory) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaCategory)(nil)).Elem()
}

func (i *MediaCategory) ToMediaCategoryOutput() MediaCategoryOutput {
	return i.ToMediaCategoryOutputWithContext(context.Background())
}

func (i *MediaCategory) ToMediaCategoryOutputWithContext(ctx context.Context) MediaCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaCategoryOutput)
}

// MediaCategoryArrayInput is an input type that accepts MediaCategoryArray and MediaCategoryArrayOutput values.
// You can construct a concrete instance of `MediaCategoryArrayInput` via:
//
//	MediaCategoryArray{ MediaCategoryArgs{...} }
type MediaCategoryArrayInput interface {
	pulumi.Input

	ToMediaCategoryArrayOutput() MediaCategoryArrayOutput
	ToMediaCategoryArrayOutputWithContext(context.Context) MediaCategoryArrayOutput
}

type MediaCategoryArray []MediaCategoryInput

func (MediaCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaCategory)(nil)).Elem()
}

func (i MediaCategoryArray) ToMediaCategoryArrayOutput() MediaCategoryArrayOutput {
	return i.ToMediaCategoryArrayOutputWithContext(context.Background())
}

func (i MediaCategoryArray) ToMediaCategoryArrayOutputWithContext(ctx context.Context) MediaCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaCategoryArrayOutput)
}

// MediaCategoryMapInput is an input type that accepts MediaCategoryMap and MediaCategoryMapOutput values.
// You can construct a concrete instance of `MediaCategoryMapInput` via:
//
//	MediaCategoryMap{ "key": MediaCategoryArgs{...} }
type MediaCategoryMapInput interface {
	pulumi.Input

	ToMediaCategoryMapOutput() MediaCategoryMapOutput
	ToMediaCategoryMapOutputWithContext(context.Context) MediaCategoryMapOutput
}

type MediaCategoryMap map[string]MediaCategoryInput

func (MediaCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaCategory)(nil)).Elem()
}

func (i MediaCategoryMap) ToMediaCategoryMapOutput() MediaCategoryMapOutput {
	return i.ToMediaCategoryMapOutputWithContext(context.Background())
}

func (i MediaCategoryMap) ToMediaCategoryMapOutputWithContext(ctx context.Context) MediaCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaCategoryMapOutput)
}

type MediaCategoryOutput struct{ *pulumi.OutputState }

func (MediaCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaCategory)(nil)).Elem()
}

func (o MediaCategoryOutput) ToMediaCategoryOutput() MediaCategoryOutput {
	return o
}

func (o MediaCategoryOutput) ToMediaCategoryOutputWithContext(ctx context.Context) MediaCategoryOutput {
	return o
}

// The json string of subcategory information. It supports up to 3 levels of categories,
// and each category supports up to 128 subcategories.
func (o MediaCategoryOutput) Children() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaCategory) pulumi.StringOutput { return v.Children }).(pulumi.StringOutput)
}

// Specifies the category name, which contains a maximum of 64 characters.
func (o MediaCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaCategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parent category ID. If this parameter is left blank,
// the root category is generated by default. The root category ID is "0". Changing this creates a new resource.
func (o MediaCategoryOutput) ParentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaCategory) pulumi.StringPtrOutput { return v.ParentId }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o MediaCategoryOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaCategory) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MediaCategoryArrayOutput struct{ *pulumi.OutputState }

func (MediaCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaCategory)(nil)).Elem()
}

func (o MediaCategoryArrayOutput) ToMediaCategoryArrayOutput() MediaCategoryArrayOutput {
	return o
}

func (o MediaCategoryArrayOutput) ToMediaCategoryArrayOutputWithContext(ctx context.Context) MediaCategoryArrayOutput {
	return o
}

func (o MediaCategoryArrayOutput) Index(i pulumi.IntInput) MediaCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaCategory {
		return vs[0].([]*MediaCategory)[vs[1].(int)]
	}).(MediaCategoryOutput)
}

type MediaCategoryMapOutput struct{ *pulumi.OutputState }

func (MediaCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaCategory)(nil)).Elem()
}

func (o MediaCategoryMapOutput) ToMediaCategoryMapOutput() MediaCategoryMapOutput {
	return o
}

func (o MediaCategoryMapOutput) ToMediaCategoryMapOutputWithContext(ctx context.Context) MediaCategoryMapOutput {
	return o
}

func (o MediaCategoryMapOutput) MapIndex(k pulumi.StringInput) MediaCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaCategory {
		return vs[0].(map[string]*MediaCategory)[vs[1].(string)]
	}).(MediaCategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaCategoryInput)(nil)).Elem(), &MediaCategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaCategoryArrayInput)(nil)).Elem(), MediaCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaCategoryMapInput)(nil)).Elem(), MediaCategoryMap{})
	pulumi.RegisterOutputType(MediaCategoryOutput{})
	pulumi.RegisterOutputType(MediaCategoryArrayOutput{})
	pulumi.RegisterOutputType(MediaCategoryMapOutput{})
}

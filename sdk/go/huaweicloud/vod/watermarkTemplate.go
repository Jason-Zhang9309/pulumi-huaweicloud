// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VOD watermark template resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vod.NewWatermarkTemplate(ctx, "test", &Vod.WatermarkTemplateArgs{
//				Height:           pulumi.String("0.1"),
//				HorizontalOffset: pulumi.String("0.05"),
//				ImageFile:        pulumi.String("./test.PNG"),
//				ImageProcess:     pulumi.String("ORIGINAL"),
//				ImageType:        pulumi.String("PNG"),
//				Position:         pulumi.String("TOPLEFT"),
//				VerticalOffset:   pulumi.String("0.05"),
//				Width:            pulumi.String("0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The template can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vod/watermarkTemplate:WatermarkTemplate test 81ac58796e25842ee2e90a904aa8a719
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`image_file`. It is generally recommended running `terraform plan` after importing a watermark template. You can then decide if changes should be applied to the watermark template, or the resource definition should be updated to align with the watermark template. Also you can ignore changes as below. hcl resource "huaweicloud_vod_watermark_template" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	image_file,
//
//	]
//
//	} }
type WatermarkTemplate struct {
	pulumi.CustomResourceState

	// Specifies height ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Height pulumi.StringPtrOutput `pulumi:"height"`
	// Specifies horizontal offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	HorizontalOffset pulumi.StringPtrOutput `pulumi:"horizontalOffset"`
	// Specifies the image file name, e.g. './test.png'.
	// Changing this creates a new resource.
	ImageFile pulumi.StringOutput `pulumi:"imageFile"`
	// Specifies the image process. The valid values are:
	// + **TRANSPARENT**: make the background color transparent.
	// + **ORIGINAL**: only simple scaling, no other processing.
	// + **GRAYED**: make the color image grayed.
	ImageProcess pulumi.StringPtrOutput `pulumi:"imageProcess"`
	// Specifies the image file type. The valid values are **PNG**, **JPG**
	// and **JPEG**. Changing this creates a new resource.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// The watermark image URL.
	ImageUrl pulumi.StringOutput `pulumi:"imageUrl"`
	// Specifies the template name, which contains a maximum of `128` characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
	// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
	Position pulumi.StringPtrOutput `pulumi:"position"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the watermark duration (Unit: second). The value is a digit
	// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
	TimelineDuration pulumi.StringPtrOutput `pulumi:"timelineDuration"`
	// Specifies the watermark start time (Unit: second). The value is a digit
	// greater than or equal to **0**. Defaults to: **0**.
	TimelineStart pulumi.StringPtrOutput `pulumi:"timelineStart"`
	// Specifies vertical offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	VerticalOffset pulumi.StringPtrOutput `pulumi:"verticalOffset"`
	// The watermark type.
	WatermarkType pulumi.StringOutput `pulumi:"watermarkType"`
	// Specifies width ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Width pulumi.StringPtrOutput `pulumi:"width"`
}

// NewWatermarkTemplate registers a new resource with the given unique name, arguments, and options.
func NewWatermarkTemplate(ctx *pulumi.Context,
	name string, args *WatermarkTemplateArgs, opts ...pulumi.ResourceOption) (*WatermarkTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageFile == nil {
		return nil, errors.New("invalid value for required argument 'ImageFile'")
	}
	if args.ImageType == nil {
		return nil, errors.New("invalid value for required argument 'ImageType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WatermarkTemplate
	err := ctx.RegisterResource("huaweicloud:Vod/watermarkTemplate:WatermarkTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWatermarkTemplate gets an existing WatermarkTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWatermarkTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WatermarkTemplateState, opts ...pulumi.ResourceOption) (*WatermarkTemplate, error) {
	var resource WatermarkTemplate
	err := ctx.ReadResource("huaweicloud:Vod/watermarkTemplate:WatermarkTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WatermarkTemplate resources.
type watermarkTemplateState struct {
	// Specifies height ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Height *string `pulumi:"height"`
	// Specifies horizontal offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// Specifies the image file name, e.g. './test.png'.
	// Changing this creates a new resource.
	ImageFile *string `pulumi:"imageFile"`
	// Specifies the image process. The valid values are:
	// + **TRANSPARENT**: make the background color transparent.
	// + **ORIGINAL**: only simple scaling, no other processing.
	// + **GRAYED**: make the color image grayed.
	ImageProcess *string `pulumi:"imageProcess"`
	// Specifies the image file type. The valid values are **PNG**, **JPG**
	// and **JPEG**. Changing this creates a new resource.
	ImageType *string `pulumi:"imageType"`
	// The watermark image URL.
	ImageUrl *string `pulumi:"imageUrl"`
	// Specifies the template name, which contains a maximum of `128` characters.
	Name *string `pulumi:"name"`
	// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
	// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
	Position *string `pulumi:"position"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the watermark duration (Unit: second). The value is a digit
	// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
	TimelineDuration *string `pulumi:"timelineDuration"`
	// Specifies the watermark start time (Unit: second). The value is a digit
	// greater than or equal to **0**. Defaults to: **0**.
	TimelineStart *string `pulumi:"timelineStart"`
	// Specifies vertical offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	VerticalOffset *string `pulumi:"verticalOffset"`
	// The watermark type.
	WatermarkType *string `pulumi:"watermarkType"`
	// Specifies width ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Width *string `pulumi:"width"`
}

type WatermarkTemplateState struct {
	// Specifies height ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Height pulumi.StringPtrInput
	// Specifies horizontal offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	HorizontalOffset pulumi.StringPtrInput
	// Specifies the image file name, e.g. './test.png'.
	// Changing this creates a new resource.
	ImageFile pulumi.StringPtrInput
	// Specifies the image process. The valid values are:
	// + **TRANSPARENT**: make the background color transparent.
	// + **ORIGINAL**: only simple scaling, no other processing.
	// + **GRAYED**: make the color image grayed.
	ImageProcess pulumi.StringPtrInput
	// Specifies the image file type. The valid values are **PNG**, **JPG**
	// and **JPEG**. Changing this creates a new resource.
	ImageType pulumi.StringPtrInput
	// The watermark image URL.
	ImageUrl pulumi.StringPtrInput
	// Specifies the template name, which contains a maximum of `128` characters.
	Name pulumi.StringPtrInput
	// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
	// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
	Position pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the watermark duration (Unit: second). The value is a digit
	// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
	TimelineDuration pulumi.StringPtrInput
	// Specifies the watermark start time (Unit: second). The value is a digit
	// greater than or equal to **0**. Defaults to: **0**.
	TimelineStart pulumi.StringPtrInput
	// Specifies vertical offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	VerticalOffset pulumi.StringPtrInput
	// The watermark type.
	WatermarkType pulumi.StringPtrInput
	// Specifies width ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Width pulumi.StringPtrInput
}

func (WatermarkTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*watermarkTemplateState)(nil)).Elem()
}

type watermarkTemplateArgs struct {
	// Specifies height ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Height *string `pulumi:"height"`
	// Specifies horizontal offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// Specifies the image file name, e.g. './test.png'.
	// Changing this creates a new resource.
	ImageFile string `pulumi:"imageFile"`
	// Specifies the image process. The valid values are:
	// + **TRANSPARENT**: make the background color transparent.
	// + **ORIGINAL**: only simple scaling, no other processing.
	// + **GRAYED**: make the color image grayed.
	ImageProcess *string `pulumi:"imageProcess"`
	// Specifies the image file type. The valid values are **PNG**, **JPG**
	// and **JPEG**. Changing this creates a new resource.
	ImageType string `pulumi:"imageType"`
	// Specifies the template name, which contains a maximum of `128` characters.
	Name *string `pulumi:"name"`
	// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
	// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
	Position *string `pulumi:"position"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the watermark duration (Unit: second). The value is a digit
	// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
	TimelineDuration *string `pulumi:"timelineDuration"`
	// Specifies the watermark start time (Unit: second). The value is a digit
	// greater than or equal to **0**. Defaults to: **0**.
	TimelineStart *string `pulumi:"timelineStart"`
	// Specifies vertical offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	VerticalOffset *string `pulumi:"verticalOffset"`
	// Specifies width ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Width *string `pulumi:"width"`
}

// The set of arguments for constructing a WatermarkTemplate resource.
type WatermarkTemplateArgs struct {
	// Specifies height ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Height pulumi.StringPtrInput
	// Specifies horizontal offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	HorizontalOffset pulumi.StringPtrInput
	// Specifies the image file name, e.g. './test.png'.
	// Changing this creates a new resource.
	ImageFile pulumi.StringInput
	// Specifies the image process. The valid values are:
	// + **TRANSPARENT**: make the background color transparent.
	// + **ORIGINAL**: only simple scaling, no other processing.
	// + **GRAYED**: make the color image grayed.
	ImageProcess pulumi.StringPtrInput
	// Specifies the image file type. The valid values are **PNG**, **JPG**
	// and **JPEG**. Changing this creates a new resource.
	ImageType pulumi.StringInput
	// Specifies the template name, which contains a maximum of `128` characters.
	Name pulumi.StringPtrInput
	// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
	// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
	Position pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the watermark duration (Unit: second). The value is a digit
	// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
	TimelineDuration pulumi.StringPtrInput
	// Specifies the watermark start time (Unit: second). The value is a digit
	// greater than or equal to **0**. Defaults to: **0**.
	TimelineStart pulumi.StringPtrInput
	// Specifies vertical offset ratio of the watermark image relative to the
	// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0**.
	VerticalOffset pulumi.StringPtrInput
	// Specifies width ratio of the watermark image relative to the output video.
	// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
	// automatically discarded. Defaults to: **0.01**.
	Width pulumi.StringPtrInput
}

func (WatermarkTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*watermarkTemplateArgs)(nil)).Elem()
}

type WatermarkTemplateInput interface {
	pulumi.Input

	ToWatermarkTemplateOutput() WatermarkTemplateOutput
	ToWatermarkTemplateOutputWithContext(ctx context.Context) WatermarkTemplateOutput
}

func (*WatermarkTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**WatermarkTemplate)(nil)).Elem()
}

func (i *WatermarkTemplate) ToWatermarkTemplateOutput() WatermarkTemplateOutput {
	return i.ToWatermarkTemplateOutputWithContext(context.Background())
}

func (i *WatermarkTemplate) ToWatermarkTemplateOutputWithContext(ctx context.Context) WatermarkTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkTemplateOutput)
}

// WatermarkTemplateArrayInput is an input type that accepts WatermarkTemplateArray and WatermarkTemplateArrayOutput values.
// You can construct a concrete instance of `WatermarkTemplateArrayInput` via:
//
//	WatermarkTemplateArray{ WatermarkTemplateArgs{...} }
type WatermarkTemplateArrayInput interface {
	pulumi.Input

	ToWatermarkTemplateArrayOutput() WatermarkTemplateArrayOutput
	ToWatermarkTemplateArrayOutputWithContext(context.Context) WatermarkTemplateArrayOutput
}

type WatermarkTemplateArray []WatermarkTemplateInput

func (WatermarkTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WatermarkTemplate)(nil)).Elem()
}

func (i WatermarkTemplateArray) ToWatermarkTemplateArrayOutput() WatermarkTemplateArrayOutput {
	return i.ToWatermarkTemplateArrayOutputWithContext(context.Background())
}

func (i WatermarkTemplateArray) ToWatermarkTemplateArrayOutputWithContext(ctx context.Context) WatermarkTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkTemplateArrayOutput)
}

// WatermarkTemplateMapInput is an input type that accepts WatermarkTemplateMap and WatermarkTemplateMapOutput values.
// You can construct a concrete instance of `WatermarkTemplateMapInput` via:
//
//	WatermarkTemplateMap{ "key": WatermarkTemplateArgs{...} }
type WatermarkTemplateMapInput interface {
	pulumi.Input

	ToWatermarkTemplateMapOutput() WatermarkTemplateMapOutput
	ToWatermarkTemplateMapOutputWithContext(context.Context) WatermarkTemplateMapOutput
}

type WatermarkTemplateMap map[string]WatermarkTemplateInput

func (WatermarkTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WatermarkTemplate)(nil)).Elem()
}

func (i WatermarkTemplateMap) ToWatermarkTemplateMapOutput() WatermarkTemplateMapOutput {
	return i.ToWatermarkTemplateMapOutputWithContext(context.Background())
}

func (i WatermarkTemplateMap) ToWatermarkTemplateMapOutputWithContext(ctx context.Context) WatermarkTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkTemplateMapOutput)
}

type WatermarkTemplateOutput struct{ *pulumi.OutputState }

func (WatermarkTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatermarkTemplate)(nil)).Elem()
}

func (o WatermarkTemplateOutput) ToWatermarkTemplateOutput() WatermarkTemplateOutput {
	return o
}

func (o WatermarkTemplateOutput) ToWatermarkTemplateOutputWithContext(ctx context.Context) WatermarkTemplateOutput {
	return o
}

// Specifies height ratio of the watermark image relative to the output video.
// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
// automatically discarded. Defaults to: **0.01**.
func (o WatermarkTemplateOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.Height }).(pulumi.StringPtrOutput)
}

// Specifies horizontal offset ratio of the watermark image relative to the
// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
// automatically discarded. Defaults to: **0**.
func (o WatermarkTemplateOutput) HorizontalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.HorizontalOffset }).(pulumi.StringPtrOutput)
}

// Specifies the image file name, e.g. './test.png'.
// Changing this creates a new resource.
func (o WatermarkTemplateOutput) ImageFile() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.ImageFile }).(pulumi.StringOutput)
}

// Specifies the image process. The valid values are:
// + **TRANSPARENT**: make the background color transparent.
// + **ORIGINAL**: only simple scaling, no other processing.
// + **GRAYED**: make the color image grayed.
func (o WatermarkTemplateOutput) ImageProcess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.ImageProcess }).(pulumi.StringPtrOutput)
}

// Specifies the image file type. The valid values are **PNG**, **JPG**
// and **JPEG**. Changing this creates a new resource.
func (o WatermarkTemplateOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// The watermark image URL.
func (o WatermarkTemplateOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// Specifies the template name, which contains a maximum of `128` characters.
func (o WatermarkTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the location of the watermark. The valid values are **TOPRIGHT**,
// **TOPLEFT**, **BOTTOMRIGHT** and **BOTTOMLEFT**. Defaults to: **TOPRIGHT**.
func (o WatermarkTemplateOutput) Position() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.Position }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o WatermarkTemplateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the watermark duration (Unit: second). The value is a digit
// greater than or equal to **0**. By default, the watermark lasts until the end of the video.
func (o WatermarkTemplateOutput) TimelineDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.TimelineDuration }).(pulumi.StringPtrOutput)
}

// Specifies the watermark start time (Unit: second). The value is a digit
// greater than or equal to **0**. Defaults to: **0**.
func (o WatermarkTemplateOutput) TimelineStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.TimelineStart }).(pulumi.StringPtrOutput)
}

// Specifies vertical offset ratio of the watermark image relative to the
// output video. The value range is [0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
// automatically discarded. Defaults to: **0**.
func (o WatermarkTemplateOutput) VerticalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.VerticalOffset }).(pulumi.StringPtrOutput)
}

// The watermark type.
func (o WatermarkTemplateOutput) WatermarkType() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringOutput { return v.WatermarkType }).(pulumi.StringOutput)
}

// Specifies width ratio of the watermark image relative to the output video.
// The value range is (0, 1). It supports 4 decimal places, e.g. 0.9999, the excess will be
// automatically discarded. Defaults to: **0.01**.
func (o WatermarkTemplateOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatermarkTemplate) pulumi.StringPtrOutput { return v.Width }).(pulumi.StringPtrOutput)
}

type WatermarkTemplateArrayOutput struct{ *pulumi.OutputState }

func (WatermarkTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WatermarkTemplate)(nil)).Elem()
}

func (o WatermarkTemplateArrayOutput) ToWatermarkTemplateArrayOutput() WatermarkTemplateArrayOutput {
	return o
}

func (o WatermarkTemplateArrayOutput) ToWatermarkTemplateArrayOutputWithContext(ctx context.Context) WatermarkTemplateArrayOutput {
	return o
}

func (o WatermarkTemplateArrayOutput) Index(i pulumi.IntInput) WatermarkTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WatermarkTemplate {
		return vs[0].([]*WatermarkTemplate)[vs[1].(int)]
	}).(WatermarkTemplateOutput)
}

type WatermarkTemplateMapOutput struct{ *pulumi.OutputState }

func (WatermarkTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WatermarkTemplate)(nil)).Elem()
}

func (o WatermarkTemplateMapOutput) ToWatermarkTemplateMapOutput() WatermarkTemplateMapOutput {
	return o
}

func (o WatermarkTemplateMapOutput) ToWatermarkTemplateMapOutputWithContext(ctx context.Context) WatermarkTemplateMapOutput {
	return o
}

func (o WatermarkTemplateMapOutput) MapIndex(k pulumi.StringInput) WatermarkTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WatermarkTemplate {
		return vs[0].(map[string]*WatermarkTemplate)[vs[1].(string)]
	}).(WatermarkTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkTemplateInput)(nil)).Elem(), &WatermarkTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkTemplateArrayInput)(nil)).Elem(), WatermarkTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkTemplateMapInput)(nil)).Elem(), WatermarkTemplateMap{})
	pulumi.RegisterOutputType(WatermarkTemplateOutput{})
	pulumi.RegisterOutputType(WatermarkTemplateArrayOutput{})
	pulumi.RegisterOutputType(WatermarkTemplateMapOutput{})
}

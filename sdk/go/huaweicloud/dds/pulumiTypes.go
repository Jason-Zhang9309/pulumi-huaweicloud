// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseRoleInheritedPrivilege struct {
	// The operation permission list.
	Actions []string `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []DatabaseRoleInheritedPrivilegeResource `pulumi:"resources"`
}

// DatabaseRoleInheritedPrivilegeInput is an input type that accepts DatabaseRoleInheritedPrivilegeArgs and DatabaseRoleInheritedPrivilegeOutput values.
// You can construct a concrete instance of `DatabaseRoleInheritedPrivilegeInput` via:
//
//	DatabaseRoleInheritedPrivilegeArgs{...}
type DatabaseRoleInheritedPrivilegeInput interface {
	pulumi.Input

	ToDatabaseRoleInheritedPrivilegeOutput() DatabaseRoleInheritedPrivilegeOutput
	ToDatabaseRoleInheritedPrivilegeOutputWithContext(context.Context) DatabaseRoleInheritedPrivilegeOutput
}

type DatabaseRoleInheritedPrivilegeArgs struct {
	// The operation permission list.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources DatabaseRoleInheritedPrivilegeResourceArrayInput `pulumi:"resources"`
}

func (DatabaseRoleInheritedPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleInheritedPrivilege)(nil)).Elem()
}

func (i DatabaseRoleInheritedPrivilegeArgs) ToDatabaseRoleInheritedPrivilegeOutput() DatabaseRoleInheritedPrivilegeOutput {
	return i.ToDatabaseRoleInheritedPrivilegeOutputWithContext(context.Background())
}

func (i DatabaseRoleInheritedPrivilegeArgs) ToDatabaseRoleInheritedPrivilegeOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleInheritedPrivilegeOutput)
}

// DatabaseRoleInheritedPrivilegeArrayInput is an input type that accepts DatabaseRoleInheritedPrivilegeArray and DatabaseRoleInheritedPrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabaseRoleInheritedPrivilegeArrayInput` via:
//
//	DatabaseRoleInheritedPrivilegeArray{ DatabaseRoleInheritedPrivilegeArgs{...} }
type DatabaseRoleInheritedPrivilegeArrayInput interface {
	pulumi.Input

	ToDatabaseRoleInheritedPrivilegeArrayOutput() DatabaseRoleInheritedPrivilegeArrayOutput
	ToDatabaseRoleInheritedPrivilegeArrayOutputWithContext(context.Context) DatabaseRoleInheritedPrivilegeArrayOutput
}

type DatabaseRoleInheritedPrivilegeArray []DatabaseRoleInheritedPrivilegeInput

func (DatabaseRoleInheritedPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleInheritedPrivilege)(nil)).Elem()
}

func (i DatabaseRoleInheritedPrivilegeArray) ToDatabaseRoleInheritedPrivilegeArrayOutput() DatabaseRoleInheritedPrivilegeArrayOutput {
	return i.ToDatabaseRoleInheritedPrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabaseRoleInheritedPrivilegeArray) ToDatabaseRoleInheritedPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleInheritedPrivilegeArrayOutput)
}

type DatabaseRoleInheritedPrivilegeOutput struct{ *pulumi.OutputState }

func (DatabaseRoleInheritedPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleInheritedPrivilege)(nil)).Elem()
}

func (o DatabaseRoleInheritedPrivilegeOutput) ToDatabaseRoleInheritedPrivilegeOutput() DatabaseRoleInheritedPrivilegeOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeOutput) ToDatabaseRoleInheritedPrivilegeOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeOutput {
	return o
}

// The operation permission list.
func (o DatabaseRoleInheritedPrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseRoleInheritedPrivilege) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The details of the resource to which the privilege belongs.
// The object structure is documented below.
func (o DatabaseRoleInheritedPrivilegeOutput) Resources() DatabaseRoleInheritedPrivilegeResourceArrayOutput {
	return o.ApplyT(func(v DatabaseRoleInheritedPrivilege) []DatabaseRoleInheritedPrivilegeResource { return v.Resources }).(DatabaseRoleInheritedPrivilegeResourceArrayOutput)
}

type DatabaseRoleInheritedPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRoleInheritedPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleInheritedPrivilege)(nil)).Elem()
}

func (o DatabaseRoleInheritedPrivilegeArrayOutput) ToDatabaseRoleInheritedPrivilegeArrayOutput() DatabaseRoleInheritedPrivilegeArrayOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeArrayOutput) ToDatabaseRoleInheritedPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeArrayOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeArrayOutput) Index(i pulumi.IntInput) DatabaseRoleInheritedPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseRoleInheritedPrivilege {
		return vs[0].([]DatabaseRoleInheritedPrivilege)[vs[1].(int)]
	}).(DatabaseRoleInheritedPrivilegeOutput)
}

type DatabaseRoleInheritedPrivilegeResource struct {
	// The database collection type.
	Collection *string `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName *string `pulumi:"dbName"`
}

// DatabaseRoleInheritedPrivilegeResourceInput is an input type that accepts DatabaseRoleInheritedPrivilegeResourceArgs and DatabaseRoleInheritedPrivilegeResourceOutput values.
// You can construct a concrete instance of `DatabaseRoleInheritedPrivilegeResourceInput` via:
//
//	DatabaseRoleInheritedPrivilegeResourceArgs{...}
type DatabaseRoleInheritedPrivilegeResourceInput interface {
	pulumi.Input

	ToDatabaseRoleInheritedPrivilegeResourceOutput() DatabaseRoleInheritedPrivilegeResourceOutput
	ToDatabaseRoleInheritedPrivilegeResourceOutputWithContext(context.Context) DatabaseRoleInheritedPrivilegeResourceOutput
}

type DatabaseRoleInheritedPrivilegeResourceArgs struct {
	// The database collection type.
	Collection pulumi.StringPtrInput `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
}

func (DatabaseRoleInheritedPrivilegeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleInheritedPrivilegeResource)(nil)).Elem()
}

func (i DatabaseRoleInheritedPrivilegeResourceArgs) ToDatabaseRoleInheritedPrivilegeResourceOutput() DatabaseRoleInheritedPrivilegeResourceOutput {
	return i.ToDatabaseRoleInheritedPrivilegeResourceOutputWithContext(context.Background())
}

func (i DatabaseRoleInheritedPrivilegeResourceArgs) ToDatabaseRoleInheritedPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleInheritedPrivilegeResourceOutput)
}

// DatabaseRoleInheritedPrivilegeResourceArrayInput is an input type that accepts DatabaseRoleInheritedPrivilegeResourceArray and DatabaseRoleInheritedPrivilegeResourceArrayOutput values.
// You can construct a concrete instance of `DatabaseRoleInheritedPrivilegeResourceArrayInput` via:
//
//	DatabaseRoleInheritedPrivilegeResourceArray{ DatabaseRoleInheritedPrivilegeResourceArgs{...} }
type DatabaseRoleInheritedPrivilegeResourceArrayInput interface {
	pulumi.Input

	ToDatabaseRoleInheritedPrivilegeResourceArrayOutput() DatabaseRoleInheritedPrivilegeResourceArrayOutput
	ToDatabaseRoleInheritedPrivilegeResourceArrayOutputWithContext(context.Context) DatabaseRoleInheritedPrivilegeResourceArrayOutput
}

type DatabaseRoleInheritedPrivilegeResourceArray []DatabaseRoleInheritedPrivilegeResourceInput

func (DatabaseRoleInheritedPrivilegeResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleInheritedPrivilegeResource)(nil)).Elem()
}

func (i DatabaseRoleInheritedPrivilegeResourceArray) ToDatabaseRoleInheritedPrivilegeResourceArrayOutput() DatabaseRoleInheritedPrivilegeResourceArrayOutput {
	return i.ToDatabaseRoleInheritedPrivilegeResourceArrayOutputWithContext(context.Background())
}

func (i DatabaseRoleInheritedPrivilegeResourceArray) ToDatabaseRoleInheritedPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleInheritedPrivilegeResourceArrayOutput)
}

type DatabaseRoleInheritedPrivilegeResourceOutput struct{ *pulumi.OutputState }

func (DatabaseRoleInheritedPrivilegeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleInheritedPrivilegeResource)(nil)).Elem()
}

func (o DatabaseRoleInheritedPrivilegeResourceOutput) ToDatabaseRoleInheritedPrivilegeResourceOutput() DatabaseRoleInheritedPrivilegeResourceOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeResourceOutput) ToDatabaseRoleInheritedPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeResourceOutput {
	return o
}

// The database collection type.
func (o DatabaseRoleInheritedPrivilegeResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRoleInheritedPrivilegeResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new role.
func (o DatabaseRoleInheritedPrivilegeResourceOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRoleInheritedPrivilegeResource) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

type DatabaseRoleInheritedPrivilegeResourceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRoleInheritedPrivilegeResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleInheritedPrivilegeResource)(nil)).Elem()
}

func (o DatabaseRoleInheritedPrivilegeResourceArrayOutput) ToDatabaseRoleInheritedPrivilegeResourceArrayOutput() DatabaseRoleInheritedPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeResourceArrayOutput) ToDatabaseRoleInheritedPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseRoleInheritedPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseRoleInheritedPrivilegeResourceArrayOutput) Index(i pulumi.IntInput) DatabaseRoleInheritedPrivilegeResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseRoleInheritedPrivilegeResource {
		return vs[0].([]DatabaseRoleInheritedPrivilegeResource)[vs[1].(int)]
	}).(DatabaseRoleInheritedPrivilegeResourceOutput)
}

type DatabaseRolePrivilege struct {
	// The operation permission list.
	Actions []string `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []DatabaseRolePrivilegeResource `pulumi:"resources"`
}

// DatabaseRolePrivilegeInput is an input type that accepts DatabaseRolePrivilegeArgs and DatabaseRolePrivilegeOutput values.
// You can construct a concrete instance of `DatabaseRolePrivilegeInput` via:
//
//	DatabaseRolePrivilegeArgs{...}
type DatabaseRolePrivilegeInput interface {
	pulumi.Input

	ToDatabaseRolePrivilegeOutput() DatabaseRolePrivilegeOutput
	ToDatabaseRolePrivilegeOutputWithContext(context.Context) DatabaseRolePrivilegeOutput
}

type DatabaseRolePrivilegeArgs struct {
	// The operation permission list.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources DatabaseRolePrivilegeResourceArrayInput `pulumi:"resources"`
}

func (DatabaseRolePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRolePrivilege)(nil)).Elem()
}

func (i DatabaseRolePrivilegeArgs) ToDatabaseRolePrivilegeOutput() DatabaseRolePrivilegeOutput {
	return i.ToDatabaseRolePrivilegeOutputWithContext(context.Background())
}

func (i DatabaseRolePrivilegeArgs) ToDatabaseRolePrivilegeOutputWithContext(ctx context.Context) DatabaseRolePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRolePrivilegeOutput)
}

// DatabaseRolePrivilegeArrayInput is an input type that accepts DatabaseRolePrivilegeArray and DatabaseRolePrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabaseRolePrivilegeArrayInput` via:
//
//	DatabaseRolePrivilegeArray{ DatabaseRolePrivilegeArgs{...} }
type DatabaseRolePrivilegeArrayInput interface {
	pulumi.Input

	ToDatabaseRolePrivilegeArrayOutput() DatabaseRolePrivilegeArrayOutput
	ToDatabaseRolePrivilegeArrayOutputWithContext(context.Context) DatabaseRolePrivilegeArrayOutput
}

type DatabaseRolePrivilegeArray []DatabaseRolePrivilegeInput

func (DatabaseRolePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRolePrivilege)(nil)).Elem()
}

func (i DatabaseRolePrivilegeArray) ToDatabaseRolePrivilegeArrayOutput() DatabaseRolePrivilegeArrayOutput {
	return i.ToDatabaseRolePrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabaseRolePrivilegeArray) ToDatabaseRolePrivilegeArrayOutputWithContext(ctx context.Context) DatabaseRolePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRolePrivilegeArrayOutput)
}

type DatabaseRolePrivilegeOutput struct{ *pulumi.OutputState }

func (DatabaseRolePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRolePrivilege)(nil)).Elem()
}

func (o DatabaseRolePrivilegeOutput) ToDatabaseRolePrivilegeOutput() DatabaseRolePrivilegeOutput {
	return o
}

func (o DatabaseRolePrivilegeOutput) ToDatabaseRolePrivilegeOutputWithContext(ctx context.Context) DatabaseRolePrivilegeOutput {
	return o
}

// The operation permission list.
func (o DatabaseRolePrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseRolePrivilege) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The details of the resource to which the privilege belongs.
// The object structure is documented below.
func (o DatabaseRolePrivilegeOutput) Resources() DatabaseRolePrivilegeResourceArrayOutput {
	return o.ApplyT(func(v DatabaseRolePrivilege) []DatabaseRolePrivilegeResource { return v.Resources }).(DatabaseRolePrivilegeResourceArrayOutput)
}

type DatabaseRolePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRolePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRolePrivilege)(nil)).Elem()
}

func (o DatabaseRolePrivilegeArrayOutput) ToDatabaseRolePrivilegeArrayOutput() DatabaseRolePrivilegeArrayOutput {
	return o
}

func (o DatabaseRolePrivilegeArrayOutput) ToDatabaseRolePrivilegeArrayOutputWithContext(ctx context.Context) DatabaseRolePrivilegeArrayOutput {
	return o
}

func (o DatabaseRolePrivilegeArrayOutput) Index(i pulumi.IntInput) DatabaseRolePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseRolePrivilege {
		return vs[0].([]DatabaseRolePrivilege)[vs[1].(int)]
	}).(DatabaseRolePrivilegeOutput)
}

type DatabaseRolePrivilegeResource struct {
	// The database collection type.
	Collection *string `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName *string `pulumi:"dbName"`
}

// DatabaseRolePrivilegeResourceInput is an input type that accepts DatabaseRolePrivilegeResourceArgs and DatabaseRolePrivilegeResourceOutput values.
// You can construct a concrete instance of `DatabaseRolePrivilegeResourceInput` via:
//
//	DatabaseRolePrivilegeResourceArgs{...}
type DatabaseRolePrivilegeResourceInput interface {
	pulumi.Input

	ToDatabaseRolePrivilegeResourceOutput() DatabaseRolePrivilegeResourceOutput
	ToDatabaseRolePrivilegeResourceOutputWithContext(context.Context) DatabaseRolePrivilegeResourceOutput
}

type DatabaseRolePrivilegeResourceArgs struct {
	// The database collection type.
	Collection pulumi.StringPtrInput `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
}

func (DatabaseRolePrivilegeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRolePrivilegeResource)(nil)).Elem()
}

func (i DatabaseRolePrivilegeResourceArgs) ToDatabaseRolePrivilegeResourceOutput() DatabaseRolePrivilegeResourceOutput {
	return i.ToDatabaseRolePrivilegeResourceOutputWithContext(context.Background())
}

func (i DatabaseRolePrivilegeResourceArgs) ToDatabaseRolePrivilegeResourceOutputWithContext(ctx context.Context) DatabaseRolePrivilegeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRolePrivilegeResourceOutput)
}

// DatabaseRolePrivilegeResourceArrayInput is an input type that accepts DatabaseRolePrivilegeResourceArray and DatabaseRolePrivilegeResourceArrayOutput values.
// You can construct a concrete instance of `DatabaseRolePrivilegeResourceArrayInput` via:
//
//	DatabaseRolePrivilegeResourceArray{ DatabaseRolePrivilegeResourceArgs{...} }
type DatabaseRolePrivilegeResourceArrayInput interface {
	pulumi.Input

	ToDatabaseRolePrivilegeResourceArrayOutput() DatabaseRolePrivilegeResourceArrayOutput
	ToDatabaseRolePrivilegeResourceArrayOutputWithContext(context.Context) DatabaseRolePrivilegeResourceArrayOutput
}

type DatabaseRolePrivilegeResourceArray []DatabaseRolePrivilegeResourceInput

func (DatabaseRolePrivilegeResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRolePrivilegeResource)(nil)).Elem()
}

func (i DatabaseRolePrivilegeResourceArray) ToDatabaseRolePrivilegeResourceArrayOutput() DatabaseRolePrivilegeResourceArrayOutput {
	return i.ToDatabaseRolePrivilegeResourceArrayOutputWithContext(context.Background())
}

func (i DatabaseRolePrivilegeResourceArray) ToDatabaseRolePrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseRolePrivilegeResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRolePrivilegeResourceArrayOutput)
}

type DatabaseRolePrivilegeResourceOutput struct{ *pulumi.OutputState }

func (DatabaseRolePrivilegeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRolePrivilegeResource)(nil)).Elem()
}

func (o DatabaseRolePrivilegeResourceOutput) ToDatabaseRolePrivilegeResourceOutput() DatabaseRolePrivilegeResourceOutput {
	return o
}

func (o DatabaseRolePrivilegeResourceOutput) ToDatabaseRolePrivilegeResourceOutputWithContext(ctx context.Context) DatabaseRolePrivilegeResourceOutput {
	return o
}

// The database collection type.
func (o DatabaseRolePrivilegeResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRolePrivilegeResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new role.
func (o DatabaseRolePrivilegeResourceOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRolePrivilegeResource) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

type DatabaseRolePrivilegeResourceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRolePrivilegeResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRolePrivilegeResource)(nil)).Elem()
}

func (o DatabaseRolePrivilegeResourceArrayOutput) ToDatabaseRolePrivilegeResourceArrayOutput() DatabaseRolePrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseRolePrivilegeResourceArrayOutput) ToDatabaseRolePrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseRolePrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseRolePrivilegeResourceArrayOutput) Index(i pulumi.IntInput) DatabaseRolePrivilegeResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseRolePrivilegeResource {
		return vs[0].([]DatabaseRolePrivilegeResource)[vs[1].(int)]
	}).(DatabaseRolePrivilegeResourceOutput)
}

type DatabaseRoleRole struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName string `pulumi:"dbName"`
	// Specifies the name of role owned by the current role.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new role.
	Name string `pulumi:"name"`
}

// DatabaseRoleRoleInput is an input type that accepts DatabaseRoleRoleArgs and DatabaseRoleRoleOutput values.
// You can construct a concrete instance of `DatabaseRoleRoleInput` via:
//
//	DatabaseRoleRoleArgs{...}
type DatabaseRoleRoleInput interface {
	pulumi.Input

	ToDatabaseRoleRoleOutput() DatabaseRoleRoleOutput
	ToDatabaseRoleRoleOutputWithContext(context.Context) DatabaseRoleRoleOutput
}

type DatabaseRoleRoleArgs struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// Specifies the name of role owned by the current role.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DatabaseRoleRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleRole)(nil)).Elem()
}

func (i DatabaseRoleRoleArgs) ToDatabaseRoleRoleOutput() DatabaseRoleRoleOutput {
	return i.ToDatabaseRoleRoleOutputWithContext(context.Background())
}

func (i DatabaseRoleRoleArgs) ToDatabaseRoleRoleOutputWithContext(ctx context.Context) DatabaseRoleRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleRoleOutput)
}

// DatabaseRoleRoleArrayInput is an input type that accepts DatabaseRoleRoleArray and DatabaseRoleRoleArrayOutput values.
// You can construct a concrete instance of `DatabaseRoleRoleArrayInput` via:
//
//	DatabaseRoleRoleArray{ DatabaseRoleRoleArgs{...} }
type DatabaseRoleRoleArrayInput interface {
	pulumi.Input

	ToDatabaseRoleRoleArrayOutput() DatabaseRoleRoleArrayOutput
	ToDatabaseRoleRoleArrayOutputWithContext(context.Context) DatabaseRoleRoleArrayOutput
}

type DatabaseRoleRoleArray []DatabaseRoleRoleInput

func (DatabaseRoleRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleRole)(nil)).Elem()
}

func (i DatabaseRoleRoleArray) ToDatabaseRoleRoleArrayOutput() DatabaseRoleRoleArrayOutput {
	return i.ToDatabaseRoleRoleArrayOutputWithContext(context.Background())
}

func (i DatabaseRoleRoleArray) ToDatabaseRoleRoleArrayOutputWithContext(ctx context.Context) DatabaseRoleRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleRoleArrayOutput)
}

type DatabaseRoleRoleOutput struct{ *pulumi.OutputState }

func (DatabaseRoleRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRoleRole)(nil)).Elem()
}

func (o DatabaseRoleRoleOutput) ToDatabaseRoleRoleOutput() DatabaseRoleRoleOutput {
	return o
}

func (o DatabaseRoleRoleOutput) ToDatabaseRoleRoleOutputWithContext(ctx context.Context) DatabaseRoleRoleOutput {
	return o
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new role.
func (o DatabaseRoleRoleOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseRoleRole) string { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the name of role owned by the current role.
// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
// allowed. Changing this parameter will create a new role.
func (o DatabaseRoleRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseRoleRole) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseRoleRoleArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRoleRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseRoleRole)(nil)).Elem()
}

func (o DatabaseRoleRoleArrayOutput) ToDatabaseRoleRoleArrayOutput() DatabaseRoleRoleArrayOutput {
	return o
}

func (o DatabaseRoleRoleArrayOutput) ToDatabaseRoleRoleArrayOutputWithContext(ctx context.Context) DatabaseRoleRoleArrayOutput {
	return o
}

func (o DatabaseRoleRoleArrayOutput) Index(i pulumi.IntInput) DatabaseRoleRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseRoleRole {
		return vs[0].([]DatabaseRoleRole)[vs[1].(int)]
	}).(DatabaseRoleRoleOutput)
}

type DatabaseUserInheritedPrivilege struct {
	// The operation permission list.
	Actions []string `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []DatabaseUserInheritedPrivilegeResource `pulumi:"resources"`
}

// DatabaseUserInheritedPrivilegeInput is an input type that accepts DatabaseUserInheritedPrivilegeArgs and DatabaseUserInheritedPrivilegeOutput values.
// You can construct a concrete instance of `DatabaseUserInheritedPrivilegeInput` via:
//
//	DatabaseUserInheritedPrivilegeArgs{...}
type DatabaseUserInheritedPrivilegeInput interface {
	pulumi.Input

	ToDatabaseUserInheritedPrivilegeOutput() DatabaseUserInheritedPrivilegeOutput
	ToDatabaseUserInheritedPrivilegeOutputWithContext(context.Context) DatabaseUserInheritedPrivilegeOutput
}

type DatabaseUserInheritedPrivilegeArgs struct {
	// The operation permission list.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources DatabaseUserInheritedPrivilegeResourceArrayInput `pulumi:"resources"`
}

func (DatabaseUserInheritedPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserInheritedPrivilege)(nil)).Elem()
}

func (i DatabaseUserInheritedPrivilegeArgs) ToDatabaseUserInheritedPrivilegeOutput() DatabaseUserInheritedPrivilegeOutput {
	return i.ToDatabaseUserInheritedPrivilegeOutputWithContext(context.Background())
}

func (i DatabaseUserInheritedPrivilegeArgs) ToDatabaseUserInheritedPrivilegeOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserInheritedPrivilegeOutput)
}

// DatabaseUserInheritedPrivilegeArrayInput is an input type that accepts DatabaseUserInheritedPrivilegeArray and DatabaseUserInheritedPrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabaseUserInheritedPrivilegeArrayInput` via:
//
//	DatabaseUserInheritedPrivilegeArray{ DatabaseUserInheritedPrivilegeArgs{...} }
type DatabaseUserInheritedPrivilegeArrayInput interface {
	pulumi.Input

	ToDatabaseUserInheritedPrivilegeArrayOutput() DatabaseUserInheritedPrivilegeArrayOutput
	ToDatabaseUserInheritedPrivilegeArrayOutputWithContext(context.Context) DatabaseUserInheritedPrivilegeArrayOutput
}

type DatabaseUserInheritedPrivilegeArray []DatabaseUserInheritedPrivilegeInput

func (DatabaseUserInheritedPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserInheritedPrivilege)(nil)).Elem()
}

func (i DatabaseUserInheritedPrivilegeArray) ToDatabaseUserInheritedPrivilegeArrayOutput() DatabaseUserInheritedPrivilegeArrayOutput {
	return i.ToDatabaseUserInheritedPrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabaseUserInheritedPrivilegeArray) ToDatabaseUserInheritedPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserInheritedPrivilegeArrayOutput)
}

type DatabaseUserInheritedPrivilegeOutput struct{ *pulumi.OutputState }

func (DatabaseUserInheritedPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserInheritedPrivilege)(nil)).Elem()
}

func (o DatabaseUserInheritedPrivilegeOutput) ToDatabaseUserInheritedPrivilegeOutput() DatabaseUserInheritedPrivilegeOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeOutput) ToDatabaseUserInheritedPrivilegeOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeOutput {
	return o
}

// The operation permission list.
func (o DatabaseUserInheritedPrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseUserInheritedPrivilege) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The details of the resource to which the privilege belongs.
// The object structure is documented below.
func (o DatabaseUserInheritedPrivilegeOutput) Resources() DatabaseUserInheritedPrivilegeResourceArrayOutput {
	return o.ApplyT(func(v DatabaseUserInheritedPrivilege) []DatabaseUserInheritedPrivilegeResource { return v.Resources }).(DatabaseUserInheritedPrivilegeResourceArrayOutput)
}

type DatabaseUserInheritedPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserInheritedPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserInheritedPrivilege)(nil)).Elem()
}

func (o DatabaseUserInheritedPrivilegeArrayOutput) ToDatabaseUserInheritedPrivilegeArrayOutput() DatabaseUserInheritedPrivilegeArrayOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeArrayOutput) ToDatabaseUserInheritedPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeArrayOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeArrayOutput) Index(i pulumi.IntInput) DatabaseUserInheritedPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUserInheritedPrivilege {
		return vs[0].([]DatabaseUserInheritedPrivilege)[vs[1].(int)]
	}).(DatabaseUserInheritedPrivilegeOutput)
}

type DatabaseUserInheritedPrivilegeResource struct {
	// The database collection type.
	Collection *string `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName *string `pulumi:"dbName"`
}

// DatabaseUserInheritedPrivilegeResourceInput is an input type that accepts DatabaseUserInheritedPrivilegeResourceArgs and DatabaseUserInheritedPrivilegeResourceOutput values.
// You can construct a concrete instance of `DatabaseUserInheritedPrivilegeResourceInput` via:
//
//	DatabaseUserInheritedPrivilegeResourceArgs{...}
type DatabaseUserInheritedPrivilegeResourceInput interface {
	pulumi.Input

	ToDatabaseUserInheritedPrivilegeResourceOutput() DatabaseUserInheritedPrivilegeResourceOutput
	ToDatabaseUserInheritedPrivilegeResourceOutputWithContext(context.Context) DatabaseUserInheritedPrivilegeResourceOutput
}

type DatabaseUserInheritedPrivilegeResourceArgs struct {
	// The database collection type.
	Collection pulumi.StringPtrInput `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
}

func (DatabaseUserInheritedPrivilegeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserInheritedPrivilegeResource)(nil)).Elem()
}

func (i DatabaseUserInheritedPrivilegeResourceArgs) ToDatabaseUserInheritedPrivilegeResourceOutput() DatabaseUserInheritedPrivilegeResourceOutput {
	return i.ToDatabaseUserInheritedPrivilegeResourceOutputWithContext(context.Background())
}

func (i DatabaseUserInheritedPrivilegeResourceArgs) ToDatabaseUserInheritedPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserInheritedPrivilegeResourceOutput)
}

// DatabaseUserInheritedPrivilegeResourceArrayInput is an input type that accepts DatabaseUserInheritedPrivilegeResourceArray and DatabaseUserInheritedPrivilegeResourceArrayOutput values.
// You can construct a concrete instance of `DatabaseUserInheritedPrivilegeResourceArrayInput` via:
//
//	DatabaseUserInheritedPrivilegeResourceArray{ DatabaseUserInheritedPrivilegeResourceArgs{...} }
type DatabaseUserInheritedPrivilegeResourceArrayInput interface {
	pulumi.Input

	ToDatabaseUserInheritedPrivilegeResourceArrayOutput() DatabaseUserInheritedPrivilegeResourceArrayOutput
	ToDatabaseUserInheritedPrivilegeResourceArrayOutputWithContext(context.Context) DatabaseUserInheritedPrivilegeResourceArrayOutput
}

type DatabaseUserInheritedPrivilegeResourceArray []DatabaseUserInheritedPrivilegeResourceInput

func (DatabaseUserInheritedPrivilegeResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserInheritedPrivilegeResource)(nil)).Elem()
}

func (i DatabaseUserInheritedPrivilegeResourceArray) ToDatabaseUserInheritedPrivilegeResourceArrayOutput() DatabaseUserInheritedPrivilegeResourceArrayOutput {
	return i.ToDatabaseUserInheritedPrivilegeResourceArrayOutputWithContext(context.Background())
}

func (i DatabaseUserInheritedPrivilegeResourceArray) ToDatabaseUserInheritedPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserInheritedPrivilegeResourceArrayOutput)
}

type DatabaseUserInheritedPrivilegeResourceOutput struct{ *pulumi.OutputState }

func (DatabaseUserInheritedPrivilegeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserInheritedPrivilegeResource)(nil)).Elem()
}

func (o DatabaseUserInheritedPrivilegeResourceOutput) ToDatabaseUserInheritedPrivilegeResourceOutput() DatabaseUserInheritedPrivilegeResourceOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeResourceOutput) ToDatabaseUserInheritedPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeResourceOutput {
	return o
}

// The database collection type.
func (o DatabaseUserInheritedPrivilegeResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseUserInheritedPrivilegeResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new user.
func (o DatabaseUserInheritedPrivilegeResourceOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseUserInheritedPrivilegeResource) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

type DatabaseUserInheritedPrivilegeResourceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserInheritedPrivilegeResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserInheritedPrivilegeResource)(nil)).Elem()
}

func (o DatabaseUserInheritedPrivilegeResourceArrayOutput) ToDatabaseUserInheritedPrivilegeResourceArrayOutput() DatabaseUserInheritedPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeResourceArrayOutput) ToDatabaseUserInheritedPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseUserInheritedPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseUserInheritedPrivilegeResourceArrayOutput) Index(i pulumi.IntInput) DatabaseUserInheritedPrivilegeResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUserInheritedPrivilegeResource {
		return vs[0].([]DatabaseUserInheritedPrivilegeResource)[vs[1].(int)]
	}).(DatabaseUserInheritedPrivilegeResourceOutput)
}

type DatabaseUserPrivilege struct {
	// The operation permission list.
	Actions []string `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []DatabaseUserPrivilegeResource `pulumi:"resources"`
}

// DatabaseUserPrivilegeInput is an input type that accepts DatabaseUserPrivilegeArgs and DatabaseUserPrivilegeOutput values.
// You can construct a concrete instance of `DatabaseUserPrivilegeInput` via:
//
//	DatabaseUserPrivilegeArgs{...}
type DatabaseUserPrivilegeInput interface {
	pulumi.Input

	ToDatabaseUserPrivilegeOutput() DatabaseUserPrivilegeOutput
	ToDatabaseUserPrivilegeOutputWithContext(context.Context) DatabaseUserPrivilegeOutput
}

type DatabaseUserPrivilegeArgs struct {
	// The operation permission list.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources DatabaseUserPrivilegeResourceArrayInput `pulumi:"resources"`
}

func (DatabaseUserPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserPrivilege)(nil)).Elem()
}

func (i DatabaseUserPrivilegeArgs) ToDatabaseUserPrivilegeOutput() DatabaseUserPrivilegeOutput {
	return i.ToDatabaseUserPrivilegeOutputWithContext(context.Background())
}

func (i DatabaseUserPrivilegeArgs) ToDatabaseUserPrivilegeOutputWithContext(ctx context.Context) DatabaseUserPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserPrivilegeOutput)
}

// DatabaseUserPrivilegeArrayInput is an input type that accepts DatabaseUserPrivilegeArray and DatabaseUserPrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabaseUserPrivilegeArrayInput` via:
//
//	DatabaseUserPrivilegeArray{ DatabaseUserPrivilegeArgs{...} }
type DatabaseUserPrivilegeArrayInput interface {
	pulumi.Input

	ToDatabaseUserPrivilegeArrayOutput() DatabaseUserPrivilegeArrayOutput
	ToDatabaseUserPrivilegeArrayOutputWithContext(context.Context) DatabaseUserPrivilegeArrayOutput
}

type DatabaseUserPrivilegeArray []DatabaseUserPrivilegeInput

func (DatabaseUserPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserPrivilege)(nil)).Elem()
}

func (i DatabaseUserPrivilegeArray) ToDatabaseUserPrivilegeArrayOutput() DatabaseUserPrivilegeArrayOutput {
	return i.ToDatabaseUserPrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabaseUserPrivilegeArray) ToDatabaseUserPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseUserPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserPrivilegeArrayOutput)
}

type DatabaseUserPrivilegeOutput struct{ *pulumi.OutputState }

func (DatabaseUserPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserPrivilege)(nil)).Elem()
}

func (o DatabaseUserPrivilegeOutput) ToDatabaseUserPrivilegeOutput() DatabaseUserPrivilegeOutput {
	return o
}

func (o DatabaseUserPrivilegeOutput) ToDatabaseUserPrivilegeOutputWithContext(ctx context.Context) DatabaseUserPrivilegeOutput {
	return o
}

// The operation permission list.
func (o DatabaseUserPrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseUserPrivilege) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The details of the resource to which the privilege belongs.
// The object structure is documented below.
func (o DatabaseUserPrivilegeOutput) Resources() DatabaseUserPrivilegeResourceArrayOutput {
	return o.ApplyT(func(v DatabaseUserPrivilege) []DatabaseUserPrivilegeResource { return v.Resources }).(DatabaseUserPrivilegeResourceArrayOutput)
}

type DatabaseUserPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserPrivilege)(nil)).Elem()
}

func (o DatabaseUserPrivilegeArrayOutput) ToDatabaseUserPrivilegeArrayOutput() DatabaseUserPrivilegeArrayOutput {
	return o
}

func (o DatabaseUserPrivilegeArrayOutput) ToDatabaseUserPrivilegeArrayOutputWithContext(ctx context.Context) DatabaseUserPrivilegeArrayOutput {
	return o
}

func (o DatabaseUserPrivilegeArrayOutput) Index(i pulumi.IntInput) DatabaseUserPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUserPrivilege {
		return vs[0].([]DatabaseUserPrivilege)[vs[1].(int)]
	}).(DatabaseUserPrivilegeOutput)
}

type DatabaseUserPrivilegeResource struct {
	// The database collection type.
	Collection *string `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName *string `pulumi:"dbName"`
}

// DatabaseUserPrivilegeResourceInput is an input type that accepts DatabaseUserPrivilegeResourceArgs and DatabaseUserPrivilegeResourceOutput values.
// You can construct a concrete instance of `DatabaseUserPrivilegeResourceInput` via:
//
//	DatabaseUserPrivilegeResourceArgs{...}
type DatabaseUserPrivilegeResourceInput interface {
	pulumi.Input

	ToDatabaseUserPrivilegeResourceOutput() DatabaseUserPrivilegeResourceOutput
	ToDatabaseUserPrivilegeResourceOutputWithContext(context.Context) DatabaseUserPrivilegeResourceOutput
}

type DatabaseUserPrivilegeResourceArgs struct {
	// The database collection type.
	Collection pulumi.StringPtrInput `pulumi:"collection"`
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
}

func (DatabaseUserPrivilegeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserPrivilegeResource)(nil)).Elem()
}

func (i DatabaseUserPrivilegeResourceArgs) ToDatabaseUserPrivilegeResourceOutput() DatabaseUserPrivilegeResourceOutput {
	return i.ToDatabaseUserPrivilegeResourceOutputWithContext(context.Background())
}

func (i DatabaseUserPrivilegeResourceArgs) ToDatabaseUserPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseUserPrivilegeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserPrivilegeResourceOutput)
}

// DatabaseUserPrivilegeResourceArrayInput is an input type that accepts DatabaseUserPrivilegeResourceArray and DatabaseUserPrivilegeResourceArrayOutput values.
// You can construct a concrete instance of `DatabaseUserPrivilegeResourceArrayInput` via:
//
//	DatabaseUserPrivilegeResourceArray{ DatabaseUserPrivilegeResourceArgs{...} }
type DatabaseUserPrivilegeResourceArrayInput interface {
	pulumi.Input

	ToDatabaseUserPrivilegeResourceArrayOutput() DatabaseUserPrivilegeResourceArrayOutput
	ToDatabaseUserPrivilegeResourceArrayOutputWithContext(context.Context) DatabaseUserPrivilegeResourceArrayOutput
}

type DatabaseUserPrivilegeResourceArray []DatabaseUserPrivilegeResourceInput

func (DatabaseUserPrivilegeResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserPrivilegeResource)(nil)).Elem()
}

func (i DatabaseUserPrivilegeResourceArray) ToDatabaseUserPrivilegeResourceArrayOutput() DatabaseUserPrivilegeResourceArrayOutput {
	return i.ToDatabaseUserPrivilegeResourceArrayOutputWithContext(context.Background())
}

func (i DatabaseUserPrivilegeResourceArray) ToDatabaseUserPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseUserPrivilegeResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserPrivilegeResourceArrayOutput)
}

type DatabaseUserPrivilegeResourceOutput struct{ *pulumi.OutputState }

func (DatabaseUserPrivilegeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserPrivilegeResource)(nil)).Elem()
}

func (o DatabaseUserPrivilegeResourceOutput) ToDatabaseUserPrivilegeResourceOutput() DatabaseUserPrivilegeResourceOutput {
	return o
}

func (o DatabaseUserPrivilegeResourceOutput) ToDatabaseUserPrivilegeResourceOutputWithContext(ctx context.Context) DatabaseUserPrivilegeResourceOutput {
	return o
}

// The database collection type.
func (o DatabaseUserPrivilegeResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseUserPrivilegeResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new user.
func (o DatabaseUserPrivilegeResourceOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseUserPrivilegeResource) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

type DatabaseUserPrivilegeResourceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserPrivilegeResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserPrivilegeResource)(nil)).Elem()
}

func (o DatabaseUserPrivilegeResourceArrayOutput) ToDatabaseUserPrivilegeResourceArrayOutput() DatabaseUserPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseUserPrivilegeResourceArrayOutput) ToDatabaseUserPrivilegeResourceArrayOutputWithContext(ctx context.Context) DatabaseUserPrivilegeResourceArrayOutput {
	return o
}

func (o DatabaseUserPrivilegeResourceArrayOutput) Index(i pulumi.IntInput) DatabaseUserPrivilegeResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUserPrivilegeResource {
		return vs[0].([]DatabaseUserPrivilegeResource)[vs[1].(int)]
	}).(DatabaseUserPrivilegeResourceOutput)
}

type DatabaseUserRole struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName string `pulumi:"dbName"`
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name string `pulumi:"name"`
}

// DatabaseUserRoleInput is an input type that accepts DatabaseUserRoleArgs and DatabaseUserRoleOutput values.
// You can construct a concrete instance of `DatabaseUserRoleInput` via:
//
//	DatabaseUserRoleArgs{...}
type DatabaseUserRoleInput interface {
	pulumi.Input

	ToDatabaseUserRoleOutput() DatabaseUserRoleOutput
	ToDatabaseUserRoleOutputWithContext(context.Context) DatabaseUserRoleOutput
}

type DatabaseUserRoleArgs struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DatabaseUserRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserRole)(nil)).Elem()
}

func (i DatabaseUserRoleArgs) ToDatabaseUserRoleOutput() DatabaseUserRoleOutput {
	return i.ToDatabaseUserRoleOutputWithContext(context.Background())
}

func (i DatabaseUserRoleArgs) ToDatabaseUserRoleOutputWithContext(ctx context.Context) DatabaseUserRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserRoleOutput)
}

// DatabaseUserRoleArrayInput is an input type that accepts DatabaseUserRoleArray and DatabaseUserRoleArrayOutput values.
// You can construct a concrete instance of `DatabaseUserRoleArrayInput` via:
//
//	DatabaseUserRoleArray{ DatabaseUserRoleArgs{...} }
type DatabaseUserRoleArrayInput interface {
	pulumi.Input

	ToDatabaseUserRoleArrayOutput() DatabaseUserRoleArrayOutput
	ToDatabaseUserRoleArrayOutputWithContext(context.Context) DatabaseUserRoleArrayOutput
}

type DatabaseUserRoleArray []DatabaseUserRoleInput

func (DatabaseUserRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserRole)(nil)).Elem()
}

func (i DatabaseUserRoleArray) ToDatabaseUserRoleArrayOutput() DatabaseUserRoleArrayOutput {
	return i.ToDatabaseUserRoleArrayOutputWithContext(context.Background())
}

func (i DatabaseUserRoleArray) ToDatabaseUserRoleArrayOutputWithContext(ctx context.Context) DatabaseUserRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserRoleArrayOutput)
}

type DatabaseUserRoleOutput struct{ *pulumi.OutputState }

func (DatabaseUserRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserRole)(nil)).Elem()
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRoleOutput() DatabaseUserRoleOutput {
	return o
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRoleOutputWithContext(ctx context.Context) DatabaseUserRoleOutput {
	return o
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new user.
func (o DatabaseUserRoleOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseUserRole) string { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the name of role owned by the current user.
// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
// allowed. Changing this parameter will create a new user.
func (o DatabaseUserRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseUserRole) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseUserRoleArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUserRole)(nil)).Elem()
}

func (o DatabaseUserRoleArrayOutput) ToDatabaseUserRoleArrayOutput() DatabaseUserRoleArrayOutput {
	return o
}

func (o DatabaseUserRoleArrayOutput) ToDatabaseUserRoleArrayOutputWithContext(ctx context.Context) DatabaseUserRoleArrayOutput {
	return o
}

func (o DatabaseUserRoleArrayOutput) Index(i pulumi.IntInput) DatabaseUserRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUserRole {
		return vs[0].([]DatabaseUserRole)[vs[1].(int)]
	}).(DatabaseUserRoleOutput)
}

type InstanceBackupStrategy struct {
	// Specifies the number of days to retain the generated backup files. The value range is
	// from 0 to 732.
	// + If this parameter is set to 0, the automated backup policy is not set.
	// + If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
	//   for seven days by default.
	KeepDays int `pulumi:"keepDays"`
	// Specifies the backup time window. Automated backups will be triggered during the
	// backup time window. The value cannot be empty. It must be a valid value in the
	// "hh:mm-HH:MM" format. The current time is in the UTC format.
	// + The HH value must be 1 greater than the hh value.
	// + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
	StartTime string `pulumi:"startTime"`
}

// InstanceBackupStrategyInput is an input type that accepts InstanceBackupStrategyArgs and InstanceBackupStrategyOutput values.
// You can construct a concrete instance of `InstanceBackupStrategyInput` via:
//
//	InstanceBackupStrategyArgs{...}
type InstanceBackupStrategyInput interface {
	pulumi.Input

	ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput
	ToInstanceBackupStrategyOutputWithContext(context.Context) InstanceBackupStrategyOutput
}

type InstanceBackupStrategyArgs struct {
	// Specifies the number of days to retain the generated backup files. The value range is
	// from 0 to 732.
	// + If this parameter is set to 0, the automated backup policy is not set.
	// + If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
	//   for seven days by default.
	KeepDays pulumi.IntInput `pulumi:"keepDays"`
	// Specifies the backup time window. Automated backups will be triggered during the
	// backup time window. The value cannot be empty. It must be a valid value in the
	// "hh:mm-HH:MM" format. The current time is in the UTC format.
	// + The HH value must be 1 greater than the hh value.
	// + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (InstanceBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupStrategy)(nil)).Elem()
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput {
	return i.ToInstanceBackupStrategyOutputWithContext(context.Background())
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyOutputWithContext(ctx context.Context) InstanceBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyOutput)
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return i.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyOutput).ToInstanceBackupStrategyPtrOutputWithContext(ctx)
}

// InstanceBackupStrategyPtrInput is an input type that accepts InstanceBackupStrategyArgs, InstanceBackupStrategyPtr and InstanceBackupStrategyPtrOutput values.
// You can construct a concrete instance of `InstanceBackupStrategyPtrInput` via:
//
//	        InstanceBackupStrategyArgs{...}
//
//	or:
//
//	        nil
type InstanceBackupStrategyPtrInput interface {
	pulumi.Input

	ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput
	ToInstanceBackupStrategyPtrOutputWithContext(context.Context) InstanceBackupStrategyPtrOutput
}

type instanceBackupStrategyPtrType InstanceBackupStrategyArgs

func InstanceBackupStrategyPtr(v *InstanceBackupStrategyArgs) InstanceBackupStrategyPtrInput {
	return (*instanceBackupStrategyPtrType)(v)
}

func (*instanceBackupStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupStrategy)(nil)).Elem()
}

func (i *instanceBackupStrategyPtrType) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return i.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (i *instanceBackupStrategyPtrType) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyPtrOutput)
}

type InstanceBackupStrategyOutput struct{ *pulumi.OutputState }

func (InstanceBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupStrategy)(nil)).Elem()
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput {
	return o
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyOutputWithContext(ctx context.Context) InstanceBackupStrategyOutput {
	return o
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return o.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceBackupStrategy) *InstanceBackupStrategy {
		return &v
	}).(InstanceBackupStrategyPtrOutput)
}

// Specifies the number of days to retain the generated backup files. The value range is
// from 0 to 732.
//   - If this parameter is set to 0, the automated backup policy is not set.
//   - If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
//     for seven days by default.
func (o InstanceBackupStrategyOutput) KeepDays() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceBackupStrategy) int { return v.KeepDays }).(pulumi.IntOutput)
}

// Specifies the backup time window. Automated backups will be triggered during the
// backup time window. The value cannot be empty. It must be a valid value in the
// "hh:mm-HH:MM" format. The current time is in the UTC format.
// + The HH value must be 1 greater than the hh value.
// + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
func (o InstanceBackupStrategyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceBackupStrategy) string { return v.StartTime }).(pulumi.StringOutput)
}

type InstanceBackupStrategyPtrOutput struct{ *pulumi.OutputState }

func (InstanceBackupStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupStrategy)(nil)).Elem()
}

func (o InstanceBackupStrategyPtrOutput) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return o
}

func (o InstanceBackupStrategyPtrOutput) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return o
}

func (o InstanceBackupStrategyPtrOutput) Elem() InstanceBackupStrategyOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) InstanceBackupStrategy {
		if v != nil {
			return *v
		}
		var ret InstanceBackupStrategy
		return ret
	}).(InstanceBackupStrategyOutput)
}

// Specifies the number of days to retain the generated backup files. The value range is
// from 0 to 732.
//   - If this parameter is set to 0, the automated backup policy is not set.
//   - If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
//     for seven days by default.
func (o InstanceBackupStrategyPtrOutput) KeepDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) *int {
		if v == nil {
			return nil
		}
		return &v.KeepDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the backup time window. Automated backups will be triggered during the
// backup time window. The value cannot be empty. It must be a valid value in the
// "hh:mm-HH:MM" format. The current time is in the UTC format.
// + The HH value must be 1 greater than the hh value.
// + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
func (o InstanceBackupStrategyPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type InstanceDatastore struct {
	// Specifies the storage engine of the DB instance. DDS Community Edition
	// supports wiredTiger engine, and the Enhanced Edition supports rocksDB engine.
	StorageEngine *string `pulumi:"storageEngine"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type string `pulumi:"type"`
	// Specifies the DB instance version. For the Community Edition, the valid
	// values are 3.2, 3.4, or 4.0. For the Enhanced Edition, only 3.4 is supported now.
	Version string `pulumi:"version"`
}

// InstanceDatastoreInput is an input type that accepts InstanceDatastoreArgs and InstanceDatastoreOutput values.
// You can construct a concrete instance of `InstanceDatastoreInput` via:
//
//	InstanceDatastoreArgs{...}
type InstanceDatastoreInput interface {
	pulumi.Input

	ToInstanceDatastoreOutput() InstanceDatastoreOutput
	ToInstanceDatastoreOutputWithContext(context.Context) InstanceDatastoreOutput
}

type InstanceDatastoreArgs struct {
	// Specifies the storage engine of the DB instance. DDS Community Edition
	// supports wiredTiger engine, and the Enhanced Edition supports rocksDB engine.
	StorageEngine pulumi.StringPtrInput `pulumi:"storageEngine"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the DB instance version. For the Community Edition, the valid
	// values are 3.2, 3.4, or 4.0. For the Enhanced Edition, only 3.4 is supported now.
	Version pulumi.StringInput `pulumi:"version"`
}

func (InstanceDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return i.ToInstanceDatastoreOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput)
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput).ToInstanceDatastorePtrOutputWithContext(ctx)
}

// InstanceDatastorePtrInput is an input type that accepts InstanceDatastoreArgs, InstanceDatastorePtr and InstanceDatastorePtrOutput values.
// You can construct a concrete instance of `InstanceDatastorePtrInput` via:
//
//	        InstanceDatastoreArgs{...}
//
//	or:
//
//	        nil
type InstanceDatastorePtrInput interface {
	pulumi.Input

	ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput
	ToInstanceDatastorePtrOutputWithContext(context.Context) InstanceDatastorePtrOutput
}

type instanceDatastorePtrType InstanceDatastoreArgs

func InstanceDatastorePtr(v *InstanceDatastoreArgs) InstanceDatastorePtrInput {
	return (*instanceDatastorePtrType)(v)
}

func (*instanceDatastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastorePtrOutput)
}

type InstanceDatastoreOutput struct{ *pulumi.OutputState }

func (InstanceDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceDatastore) *InstanceDatastore {
		return &v
	}).(InstanceDatastorePtrOutput)
}

// Specifies the storage engine of the DB instance. DDS Community Edition
// supports wiredTiger engine, and the Enhanced Edition supports rocksDB engine.
func (o InstanceDatastoreOutput) StorageEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDatastore) *string { return v.StorageEngine }).(pulumi.StringPtrOutput)
}

// Specifies the node type. Valid value:
// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
// + For an Enhanced Edition cluster instance, the value is shard.
// + For a Community Edition replica set instance, the value is replica.
// + For a Community Edition single node instance, the value is single.
func (o InstanceDatastoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDatastore) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the DB instance version. For the Community Edition, the valid
// values are 3.2, 3.4, or 4.0. For the Enhanced Edition, only 3.4 is supported now.
func (o InstanceDatastoreOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceDatastorePtrOutput struct{ *pulumi.OutputState }

func (InstanceDatastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) Elem() InstanceDatastoreOutput {
	return o.ApplyT(func(v *InstanceDatastore) InstanceDatastore {
		if v != nil {
			return *v
		}
		var ret InstanceDatastore
		return ret
	}).(InstanceDatastoreOutput)
}

// Specifies the storage engine of the DB instance. DDS Community Edition
// supports wiredTiger engine, and the Enhanced Edition supports rocksDB engine.
func (o InstanceDatastorePtrOutput) StorageEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return v.StorageEngine
	}).(pulumi.StringPtrOutput)
}

// Specifies the node type. Valid value:
// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
// + For an Enhanced Edition cluster instance, the value is shard.
// + For a Community Edition replica set instance, the value is replica.
// + For a Community Edition single node instance, the value is single.
func (o InstanceDatastorePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the DB instance version. For the Community Edition, the valid
// values are 3.2, 3.4, or 4.0. For the Enhanced Edition, only 3.4 is supported now.
func (o InstanceDatastorePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type InstanceFlavor struct {
	// Specifies the node quantity. Valid value:
	// + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
	// + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
	// + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
	// + config: the value is 1.
	// + replica: the value is 1.
	// + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
	Num int `pulumi:"num"`
	// Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
	// is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
	// shard, replica or single.
	Size *int `pulumi:"size"`
	// Specifies the resource specification code. In a cluster instance, multiple
	// specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
	// enhanced (c3), or enhanced II (c6). For example:
	// + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
	// + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
	//   can be updated when the value of `type` is mongos, shard, replica or single.
	SpecCode string `pulumi:"specCode"`
	// Specifies the disk type. Valid value: ULTRAHIGH which indicates the type SSD.
	Storage *string `pulumi:"storage"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type string `pulumi:"type"`
}

// InstanceFlavorInput is an input type that accepts InstanceFlavorArgs and InstanceFlavorOutput values.
// You can construct a concrete instance of `InstanceFlavorInput` via:
//
//	InstanceFlavorArgs{...}
type InstanceFlavorInput interface {
	pulumi.Input

	ToInstanceFlavorOutput() InstanceFlavorOutput
	ToInstanceFlavorOutputWithContext(context.Context) InstanceFlavorOutput
}

type InstanceFlavorArgs struct {
	// Specifies the node quantity. Valid value:
	// + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
	// + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
	// + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
	// + config: the value is 1.
	// + replica: the value is 1.
	// + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
	Num pulumi.IntInput `pulumi:"num"`
	// Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
	// is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
	// shard, replica or single.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Specifies the resource specification code. In a cluster instance, multiple
	// specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
	// enhanced (c3), or enhanced II (c6). For example:
	// + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
	// + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
	//   can be updated when the value of `type` is mongos, shard, replica or single.
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	// Specifies the disk type. Valid value: ULTRAHIGH which indicates the type SSD.
	Storage pulumi.StringPtrInput `pulumi:"storage"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFlavor)(nil)).Elem()
}

func (i InstanceFlavorArgs) ToInstanceFlavorOutput() InstanceFlavorOutput {
	return i.ToInstanceFlavorOutputWithContext(context.Background())
}

func (i InstanceFlavorArgs) ToInstanceFlavorOutputWithContext(ctx context.Context) InstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFlavorOutput)
}

// InstanceFlavorArrayInput is an input type that accepts InstanceFlavorArray and InstanceFlavorArrayOutput values.
// You can construct a concrete instance of `InstanceFlavorArrayInput` via:
//
//	InstanceFlavorArray{ InstanceFlavorArgs{...} }
type InstanceFlavorArrayInput interface {
	pulumi.Input

	ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput
	ToInstanceFlavorArrayOutputWithContext(context.Context) InstanceFlavorArrayOutput
}

type InstanceFlavorArray []InstanceFlavorInput

func (InstanceFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFlavor)(nil)).Elem()
}

func (i InstanceFlavorArray) ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput {
	return i.ToInstanceFlavorArrayOutputWithContext(context.Background())
}

func (i InstanceFlavorArray) ToInstanceFlavorArrayOutputWithContext(ctx context.Context) InstanceFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFlavorArrayOutput)
}

type InstanceFlavorOutput struct{ *pulumi.OutputState }

func (InstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFlavor)(nil)).Elem()
}

func (o InstanceFlavorOutput) ToInstanceFlavorOutput() InstanceFlavorOutput {
	return o
}

func (o InstanceFlavorOutput) ToInstanceFlavorOutputWithContext(ctx context.Context) InstanceFlavorOutput {
	return o
}

// Specifies the node quantity. Valid value:
// + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
// + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
// + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
// + config: the value is 1.
// + replica: the value is 1.
// + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
func (o InstanceFlavorOutput) Num() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceFlavor) int { return v.Num }).(pulumi.IntOutput)
}

// Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
// is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
// shard, replica or single.
func (o InstanceFlavorOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFlavor) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Specifies the resource specification code. In a cluster instance, multiple
// specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
// enhanced (c3), or enhanced II (c6). For example:
//   - dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
//   - dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
//     can be updated when the value of `type` is mongos, shard, replica or single.
func (o InstanceFlavorOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFlavor) string { return v.SpecCode }).(pulumi.StringOutput)
}

// Specifies the disk type. Valid value: ULTRAHIGH which indicates the type SSD.
func (o InstanceFlavorOutput) Storage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFlavor) *string { return v.Storage }).(pulumi.StringPtrOutput)
}

// Specifies the node type. Valid value:
// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
// + For an Enhanced Edition cluster instance, the value is shard.
// + For a Community Edition replica set instance, the value is replica.
// + For a Community Edition single node instance, the value is single.
func (o InstanceFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFlavor) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceFlavorArrayOutput struct{ *pulumi.OutputState }

func (InstanceFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFlavor)(nil)).Elem()
}

func (o InstanceFlavorArrayOutput) ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput {
	return o
}

func (o InstanceFlavorArrayOutput) ToInstanceFlavorArrayOutputWithContext(ctx context.Context) InstanceFlavorArrayOutput {
	return o
}

func (o InstanceFlavorArrayOutput) Index(i pulumi.IntInput) InstanceFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFlavor {
		return vs[0].([]InstanceFlavor)[vs[1].(int)]
	}).(InstanceFlavorOutput)
}

type InstanceNode struct {
	// Indicates the node ID.
	Id *string `pulumi:"id"`
	// Specifies the DB instance name. The DB instance name of the same type is unique in the
	// same tenant.
	Name *string `pulumi:"name"`
	// Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
	// instances, and single node instances.
	PrivateIp *string `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
	// cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
	PublicIp *string `pulumi:"publicIp"`
	// Indicates the node role.
	Role *string `pulumi:"role"`
	// Indicates the node status.
	Status *string `pulumi:"status"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type *string `pulumi:"type"`
}

// InstanceNodeInput is an input type that accepts InstanceNodeArgs and InstanceNodeOutput values.
// You can construct a concrete instance of `InstanceNodeInput` via:
//
//	InstanceNodeArgs{...}
type InstanceNodeInput interface {
	pulumi.Input

	ToInstanceNodeOutput() InstanceNodeOutput
	ToInstanceNodeOutputWithContext(context.Context) InstanceNodeOutput
}

type InstanceNodeArgs struct {
	// Indicates the node ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the DB instance name. The DB instance name of the same type is unique in the
	// same tenant.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
	// instances, and single node instances.
	PrivateIp pulumi.StringPtrInput `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
	// cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	// Indicates the node role.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Indicates the node status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the node type. Valid value:
	// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
	// + For an Enhanced Edition cluster instance, the value is shard.
	// + For a Community Edition replica set instance, the value is replica.
	// + For a Community Edition single node instance, the value is single.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArgs) ToInstanceNodeOutput() InstanceNodeOutput {
	return i.ToInstanceNodeOutputWithContext(context.Background())
}

func (i InstanceNodeArgs) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeOutput)
}

// InstanceNodeArrayInput is an input type that accepts InstanceNodeArray and InstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstanceNodeArrayInput` via:
//
//	InstanceNodeArray{ InstanceNodeArgs{...} }
type InstanceNodeArrayInput interface {
	pulumi.Input

	ToInstanceNodeArrayOutput() InstanceNodeArrayOutput
	ToInstanceNodeArrayOutputWithContext(context.Context) InstanceNodeArrayOutput
}

type InstanceNodeArray []InstanceNodeInput

func (InstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return i.ToInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeArrayOutput)
}

type InstanceNodeOutput struct{ *pulumi.OutputState }

func (InstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (o InstanceNodeOutput) ToInstanceNodeOutput() InstanceNodeOutput {
	return o
}

func (o InstanceNodeOutput) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return o
}

// Indicates the node ID.
func (o InstanceNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the DB instance name. The DB instance name of the same type is unique in the
// same tenant.
func (o InstanceNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
// instances, and single node instances.
func (o InstanceNodeOutput) PrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.PrivateIp }).(pulumi.StringPtrOutput)
}

// Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
// cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
func (o InstanceNodeOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// Indicates the node role.
func (o InstanceNodeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Indicates the node status.
func (o InstanceNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the node type. Valid value:
// + For a Community Edition cluster instance, the value can be mongos, shard, or config.
// + For an Enhanced Edition cluster instance, the value is shard.
// + For a Community Edition replica set instance, the value is replica.
// + For a Community Edition single node instance, the value is single.
func (o InstanceNodeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) Index(i pulumi.IntInput) InstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNode {
		return vs[0].([]InstanceNode)[vs[1].(int)]
	}).(InstanceNodeOutput)
}

type GetFlavorsFlavor struct {
	// Specifies the ram of the dds flavor in GB.
	Memory string `pulumi:"memory"`
	// The name of the dds flavor.
	SpecCode string `pulumi:"specCode"`
	// Specifies the type of the dds falvor. "mongos", "shard", "config", "replica" and "single"
	// are supported.
	Type string `pulumi:"type"`
	// Specifies the vcpus of the dds flavor.
	Vcpus string `pulumi:"vcpus"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	// Specifies the ram of the dds flavor in GB.
	Memory pulumi.StringInput `pulumi:"memory"`
	// The name of the dds flavor.
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	// Specifies the type of the dds falvor. "mongos", "shard", "config", "replica" and "single"
	// are supported.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the vcpus of the dds flavor.
	Vcpus pulumi.StringInput `pulumi:"vcpus"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

// Specifies the ram of the dds flavor in GB.
func (o GetFlavorsFlavorOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Memory }).(pulumi.StringOutput)
}

// The name of the dds flavor.
func (o GetFlavorsFlavorOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.SpecCode }).(pulumi.StringOutput)
}

// Specifies the type of the dds falvor. "mongos", "shard", "config", "replica" and "single"
// are supported.
func (o GetFlavorsFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vcpus of the dds flavor.
func (o GetFlavorsFlavorOutput) Vcpus() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Vcpus }).(pulumi.StringOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleInheritedPrivilegeInput)(nil)).Elem(), DatabaseRoleInheritedPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleInheritedPrivilegeArrayInput)(nil)).Elem(), DatabaseRoleInheritedPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleInheritedPrivilegeResourceInput)(nil)).Elem(), DatabaseRoleInheritedPrivilegeResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleInheritedPrivilegeResourceArrayInput)(nil)).Elem(), DatabaseRoleInheritedPrivilegeResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRolePrivilegeInput)(nil)).Elem(), DatabaseRolePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRolePrivilegeArrayInput)(nil)).Elem(), DatabaseRolePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRolePrivilegeResourceInput)(nil)).Elem(), DatabaseRolePrivilegeResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRolePrivilegeResourceArrayInput)(nil)).Elem(), DatabaseRolePrivilegeResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleRoleInput)(nil)).Elem(), DatabaseRoleRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleRoleArrayInput)(nil)).Elem(), DatabaseRoleRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInheritedPrivilegeInput)(nil)).Elem(), DatabaseUserInheritedPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInheritedPrivilegeArrayInput)(nil)).Elem(), DatabaseUserInheritedPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInheritedPrivilegeResourceInput)(nil)).Elem(), DatabaseUserInheritedPrivilegeResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInheritedPrivilegeResourceArrayInput)(nil)).Elem(), DatabaseUserInheritedPrivilegeResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserPrivilegeInput)(nil)).Elem(), DatabaseUserPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserPrivilegeArrayInput)(nil)).Elem(), DatabaseUserPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserPrivilegeResourceInput)(nil)).Elem(), DatabaseUserPrivilegeResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserPrivilegeResourceArrayInput)(nil)).Elem(), DatabaseUserPrivilegeResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserRoleInput)(nil)).Elem(), DatabaseUserRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserRoleArrayInput)(nil)).Elem(), DatabaseUserRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupStrategyInput)(nil)).Elem(), InstanceBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupStrategyPtrInput)(nil)).Elem(), InstanceBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDatastoreInput)(nil)).Elem(), InstanceDatastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDatastorePtrInput)(nil)).Elem(), InstanceDatastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFlavorInput)(nil)).Elem(), InstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFlavorArrayInput)(nil)).Elem(), InstanceFlavorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeInput)(nil)).Elem(), InstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeArrayInput)(nil)).Elem(), InstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterOutputType(DatabaseRoleInheritedPrivilegeOutput{})
	pulumi.RegisterOutputType(DatabaseRoleInheritedPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRoleInheritedPrivilegeResourceOutput{})
	pulumi.RegisterOutputType(DatabaseRoleInheritedPrivilegeResourceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRolePrivilegeOutput{})
	pulumi.RegisterOutputType(DatabaseRolePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRolePrivilegeResourceOutput{})
	pulumi.RegisterOutputType(DatabaseRolePrivilegeResourceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRoleRoleOutput{})
	pulumi.RegisterOutputType(DatabaseRoleRoleArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserInheritedPrivilegeOutput{})
	pulumi.RegisterOutputType(DatabaseUserInheritedPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserInheritedPrivilegeResourceOutput{})
	pulumi.RegisterOutputType(DatabaseUserInheritedPrivilegeResourceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserPrivilegeOutput{})
	pulumi.RegisterOutputType(DatabaseUserPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserPrivilegeResourceOutput{})
	pulumi.RegisterOutputType(DatabaseUserPrivilegeResourceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserRoleOutput{})
	pulumi.RegisterOutputType(DatabaseUserRoleArrayOutput{})
	pulumi.RegisterOutputType(InstanceBackupStrategyOutput{})
	pulumi.RegisterOutputType(InstanceBackupStrategyPtrOutput{})
	pulumi.RegisterOutputType(InstanceDatastoreOutput{})
	pulumi.RegisterOutputType(InstanceDatastorePtrOutput{})
	pulumi.RegisterOutputType(InstanceFlavorOutput{})
	pulumi.RegisterOutputType(InstanceFlavorArrayOutput{})
	pulumi.RegisterOutputType(InstanceNodeOutput{})
	pulumi.RegisterOutputType(InstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
}

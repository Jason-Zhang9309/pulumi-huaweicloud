// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a database user resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			userName := cfg.RequireObject("userName")
//			userPassword := cfg.RequireObject("userPassword")
//			ownedRoleName := cfg.RequireObject("ownedRoleName")
//			ownedRoleDbName := cfg.RequireObject("ownedRoleDbName")
//			_, err := Dds.NewDatabaseUser(ctx, "test", &Dds.DatabaseUserArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Password:   pulumi.Any(userPassword),
//				DbName:     pulumi.Any(_var.Db_name),
//				Roles: dds.DatabaseUserRoleArray{
//					&dds.DatabaseUserRoleArgs{
//						Name:   pulumi.Any(ownedRoleName),
//						DbName: pulumi.Any(ownedRoleDbName),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database users can be imported using their `id` (combination of `instance_id`, `db_name` and `name`), separated by a slash (/), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dds/databaseUser:DatabaseUser test &ltinstance_id&gt/&ltdb_name&gt/&ltname&gt
//
// ```
//
//	Due to security reason, the imported state may not be identical to your resource definition (`password` parameter). It is generally recommended running `terraform plan` after importing a user resource. You can then decide if changes should be applied to the user, or the resource definition should be updated to align with the user. Also you can ignore changes as below. resource "huaweicloud_dds_database_user" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	password,
//
//	]
//
//	} }
type DatabaseUser struct {
	pulumi.CustomResourceState

	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// The list of database privileges owned by the current user, includes all privileges
	// inherited by owned roles. The object structure is documented below.
	InheritedPrivileges DatabaseUserInheritedPrivilegeArrayOutput `pulumi:"inheritedPrivileges"`
	// Specifies the DDS instance ID to which the user belongs.
	// Changing this parameter will create a new user.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the user password.
	// The assword content must meet the following conditions:
	Password pulumi.StringOutput `pulumi:"password"`
	// The list of database privileges owned by the current user.
	// The object structure is documented below.
	Privileges DatabaseUserPrivilegeArrayOutput `pulumi:"privileges"`
	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new user.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the list of roles owned by the current user.
	// The object structure is documented below. Changing this parameter will create a new user.
	Roles DatabaseUserRoleArrayOutput `pulumi:"roles"`
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	var resource DatabaseUser
	err := ctx.RegisterResource("huaweicloud:Dds/databaseUser:DatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseUserState, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	var resource DatabaseUser
	err := ctx.ReadResource("huaweicloud:Dds/databaseUser:DatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseUser resources.
type databaseUserState struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName *string `pulumi:"dbName"`
	// The list of database privileges owned by the current user, includes all privileges
	// inherited by owned roles. The object structure is documented below.
	InheritedPrivileges []DatabaseUserInheritedPrivilege `pulumi:"inheritedPrivileges"`
	// Specifies the DDS instance ID to which the user belongs.
	// Changing this parameter will create a new user.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name *string `pulumi:"name"`
	// Specifies the user password.
	// The assword content must meet the following conditions:
	Password *string `pulumi:"password"`
	// The list of database privileges owned by the current user.
	// The object structure is documented below.
	Privileges []DatabaseUserPrivilege `pulumi:"privileges"`
	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new user.
	Region *string `pulumi:"region"`
	// Specifies the list of roles owned by the current user.
	// The object structure is documented below. Changing this parameter will create a new user.
	Roles []DatabaseUserRole `pulumi:"roles"`
}

type DatabaseUserState struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringPtrInput
	// The list of database privileges owned by the current user, includes all privileges
	// inherited by owned roles. The object structure is documented below.
	InheritedPrivileges DatabaseUserInheritedPrivilegeArrayInput
	// Specifies the DDS instance ID to which the user belongs.
	// Changing this parameter will create a new user.
	InstanceId pulumi.StringPtrInput
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name pulumi.StringPtrInput
	// Specifies the user password.
	// The assword content must meet the following conditions:
	Password pulumi.StringPtrInput
	// The list of database privileges owned by the current user.
	// The object structure is documented below.
	Privileges DatabaseUserPrivilegeArrayInput
	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new user.
	Region pulumi.StringPtrInput
	// Specifies the list of roles owned by the current user.
	// The object structure is documented below. Changing this parameter will create a new user.
	Roles DatabaseUserRoleArrayInput
}

func (DatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserState)(nil)).Elem()
}

type databaseUserArgs struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName string `pulumi:"dbName"`
	// Specifies the DDS instance ID to which the user belongs.
	// Changing this parameter will create a new user.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name *string `pulumi:"name"`
	// Specifies the user password.
	// The assword content must meet the following conditions:
	Password string `pulumi:"password"`
	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new user.
	Region *string `pulumi:"region"`
	// Specifies the list of roles owned by the current user.
	// The object structure is documented below. Changing this parameter will create a new user.
	Roles []DatabaseUserRole `pulumi:"roles"`
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new user.
	DbName pulumi.StringInput
	// Specifies the DDS instance ID to which the user belongs.
	// Changing this parameter will create a new user.
	InstanceId pulumi.StringInput
	// Specifies the name of role owned by the current user.
	// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new user.
	Name pulumi.StringPtrInput
	// Specifies the user password.
	// The assword content must meet the following conditions:
	Password pulumi.StringInput
	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new user.
	Region pulumi.StringPtrInput
	// Specifies the list of roles owned by the current user.
	// The object structure is documented below. Changing this parameter will create a new user.
	Roles DatabaseUserRoleArrayInput
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserArgs)(nil)).Elem()
}

type DatabaseUserInput interface {
	pulumi.Input

	ToDatabaseUserOutput() DatabaseUserOutput
	ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput
}

func (*DatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (i *DatabaseUser) ToDatabaseUserOutput() DatabaseUserOutput {
	return i.ToDatabaseUserOutputWithContext(context.Background())
}

func (i *DatabaseUser) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserOutput)
}

// DatabaseUserArrayInput is an input type that accepts DatabaseUserArray and DatabaseUserArrayOutput values.
// You can construct a concrete instance of `DatabaseUserArrayInput` via:
//
//	DatabaseUserArray{ DatabaseUserArgs{...} }
type DatabaseUserArrayInput interface {
	pulumi.Input

	ToDatabaseUserArrayOutput() DatabaseUserArrayOutput
	ToDatabaseUserArrayOutputWithContext(context.Context) DatabaseUserArrayOutput
}

type DatabaseUserArray []DatabaseUserInput

func (DatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return i.ToDatabaseUserArrayOutputWithContext(context.Background())
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserArrayOutput)
}

// DatabaseUserMapInput is an input type that accepts DatabaseUserMap and DatabaseUserMapOutput values.
// You can construct a concrete instance of `DatabaseUserMapInput` via:
//
//	DatabaseUserMap{ "key": DatabaseUserArgs{...} }
type DatabaseUserMapInput interface {
	pulumi.Input

	ToDatabaseUserMapOutput() DatabaseUserMapOutput
	ToDatabaseUserMapOutputWithContext(context.Context) DatabaseUserMapOutput
}

type DatabaseUserMap map[string]DatabaseUserInput

func (DatabaseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserMap) ToDatabaseUserMapOutput() DatabaseUserMapOutput {
	return i.ToDatabaseUserMapOutputWithContext(context.Background())
}

func (i DatabaseUserMap) ToDatabaseUserMapOutputWithContext(ctx context.Context) DatabaseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserMapOutput)
}

type DatabaseUserOutput struct{ *pulumi.OutputState }

func (DatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserOutput) ToDatabaseUserOutput() DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return o
}

// Specifies the database name to which this owned role belongs.
// Changing this parameter will create a new user.
func (o DatabaseUserOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// The list of database privileges owned by the current user, includes all privileges
// inherited by owned roles. The object structure is documented below.
func (o DatabaseUserOutput) InheritedPrivileges() DatabaseUserInheritedPrivilegeArrayOutput {
	return o.ApplyT(func(v *DatabaseUser) DatabaseUserInheritedPrivilegeArrayOutput { return v.InheritedPrivileges }).(DatabaseUserInheritedPrivilegeArrayOutput)
}

// Specifies the DDS instance ID to which the user belongs.
// Changing this parameter will create a new user.
func (o DatabaseUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the name of role owned by the current user.
// The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
// allowed. Changing this parameter will create a new user.
func (o DatabaseUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the user password.
// The assword content must meet the following conditions:
func (o DatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The list of database privileges owned by the current user.
// The object structure is documented below.
func (o DatabaseUserOutput) Privileges() DatabaseUserPrivilegeArrayOutput {
	return o.ApplyT(func(v *DatabaseUser) DatabaseUserPrivilegeArrayOutput { return v.Privileges }).(DatabaseUserPrivilegeArrayOutput)
}

// Specifies the region where the DDS instance is located.
// Changing this parameter will create a new user.
func (o DatabaseUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the list of roles owned by the current user.
// The object structure is documented below. Changing this parameter will create a new user.
func (o DatabaseUserOutput) Roles() DatabaseUserRoleArrayOutput {
	return o.ApplyT(func(v *DatabaseUser) DatabaseUserRoleArrayOutput { return v.Roles }).(DatabaseUserRoleArrayOutput)
}

type DatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) Index(i pulumi.IntInput) DatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseUser {
		return vs[0].([]*DatabaseUser)[vs[1].(int)]
	}).(DatabaseUserOutput)
}

type DatabaseUserMapOutput struct{ *pulumi.OutputState }

func (DatabaseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserMapOutput) ToDatabaseUserMapOutput() DatabaseUserMapOutput {
	return o
}

func (o DatabaseUserMapOutput) ToDatabaseUserMapOutputWithContext(ctx context.Context) DatabaseUserMapOutput {
	return o
}

func (o DatabaseUserMapOutput) MapIndex(k pulumi.StringInput) DatabaseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseUser {
		return vs[0].(map[string]*DatabaseUser)[vs[1].(string)]
	}).(DatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInput)(nil)).Elem(), &DatabaseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserArrayInput)(nil)).Elem(), DatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserMapInput)(nil)).Elem(), DatabaseUserMap{})
	pulumi.RegisterOutputType(DatabaseUserOutput{})
	pulumi.RegisterOutputType(DatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package smn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an SMN topic resource within HuaweiCloud.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Smn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Smn.NewTopic(ctx, "topic1", &Smn.TopicArgs{
//				DisplayName: pulumi.String("The display name of topic_1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Topic with policies
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Smn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Smn.NewTopic(ctx, "topic1", &Smn.TopicArgs{
//				DisplayName:            pulumi.String("The display name of topic_1"),
//				Introduction:           pulumi.String("created by terraform"),
//				ServicesPublishAllowed: pulumi.String("obs,vod,cce"),
//				UsersPublishAllowed:    pulumi.String("urn:csp:iam::0970d7b7d400f2470fbec00316a03560:root,urn:csp:iam::0970d7b7d400f2470fbec00316a03561:root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SMN topic can be imported using the `id` (topic urn), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Smn/topic:Topic topic_1 urn:smn:cn-north-4:0970dd7a1300f5672ff2c003c60ae115:topic_1
//
// ```
type Topic struct {
	pulumi.CustomResourceState

	// Time when the topic was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction pulumi.StringPtrOutput `pulumi:"introduction"`
	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Message pushing policy.
	// + **0**: indicates that the message sending fails and the message is cached in the queue.
	// + **1**: indicates that the failed message is discarded.
	PushPolicy pulumi.IntOutput `pulumi:"pushPolicy"`
	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed pulumi.StringPtrOutput `pulumi:"servicesPublishAllowed"`
	// Specifies the tags of the SMN topic, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource identifier of a topic, which is unique.
	TopicUrn pulumi.StringOutput `pulumi:"topicUrn"`
	// Time when the topic was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies the users who can publish messages to this topic.
	// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed pulumi.StringPtrOutput `pulumi:"usersPublishAllowed"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		args = &TopicArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("huaweicloud:Smn/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("huaweicloud:Smn/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// Time when the topic was created.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName *string `pulumi:"displayName"`
	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction *string `pulumi:"introduction"`
	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Message pushing policy.
	// + **0**: indicates that the message sending fails and the message is cached in the queue.
	// + **1**: indicates that the failed message is discarded.
	PushPolicy *int `pulumi:"pushPolicy"`
	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed *string `pulumi:"servicesPublishAllowed"`
	// Specifies the tags of the SMN topic, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Resource identifier of a topic, which is unique.
	TopicUrn *string `pulumi:"topicUrn"`
	// Time when the topic was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Specifies the users who can publish messages to this topic.
	// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed *string `pulumi:"usersPublishAllowed"`
}

type TopicState struct {
	// Time when the topic was created.
	CreateTime pulumi.StringPtrInput
	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName pulumi.StringPtrInput
	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction pulumi.StringPtrInput
	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Message pushing policy.
	// + **0**: indicates that the message sending fails and the message is cached in the queue.
	// + **1**: indicates that the failed message is discarded.
	PushPolicy pulumi.IntPtrInput
	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed pulumi.StringPtrInput
	// Specifies the tags of the SMN topic, key/value pair format.
	Tags pulumi.StringMapInput
	// Resource identifier of a topic, which is unique.
	TopicUrn pulumi.StringPtrInput
	// Time when the topic was updated.
	UpdateTime pulumi.StringPtrInput
	// Specifies the users who can publish messages to this topic.
	// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed pulumi.StringPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName *string `pulumi:"displayName"`
	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction *string `pulumi:"introduction"`
	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed *string `pulumi:"servicesPublishAllowed"`
	// Specifies the tags of the SMN topic, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the users who can publish messages to this topic.
	// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed *string `pulumi:"usersPublishAllowed"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName pulumi.StringPtrInput
	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction pulumi.StringPtrInput
	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed pulumi.StringPtrInput
	// Specifies the tags of the SMN topic, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the users who can publish messages to this topic.
	// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed pulumi.StringPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//	TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// TopicMapInput is an input type that accepts TopicMap and TopicMapOutput values.
// You can construct a concrete instance of `TopicMapInput` via:
//
//	TopicMap{ "key": TopicArgs{...} }
type TopicMapInput interface {
	pulumi.Input

	ToTopicMapOutput() TopicMapOutput
	ToTopicMapOutputWithContext(context.Context) TopicMapOutput
}

type TopicMap map[string]TopicInput

func (TopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (i TopicMap) ToTopicMapOutput() TopicMapOutput {
	return i.ToTopicMapOutputWithContext(context.Background())
}

func (i TopicMap) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMapOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// Time when the topic was created.
func (o TopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the topic display name, which is presented as the name of the email
// sender in an email message. The name can contains of 0 to 192 characters.
func (o TopicOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project id of the SMN Topic, Value 0
// indicates the default enterprise project. Changing this parameter will create a new resource.
func (o TopicOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the introduction of the topic,
// this will be contained in the subscription invitation.
func (o TopicOutput) Introduction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.Introduction }).(pulumi.StringPtrOutput)
}

// Specifies the name of the topic to be created. The name can contains of 1 to 255
// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
// Changing this parameter will create a new resource.
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Message pushing policy.
// + **0**: indicates that the message sending fails and the message is cached in the queue.
// + **1**: indicates that the failed message is discarded.
func (o TopicOutput) PushPolicy() pulumi.IntOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntOutput { return v.PushPolicy }).(pulumi.IntOutput)
}

// The region in which to create the SMN topic resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o TopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the services that can publish messages to this topic
// separated by comma(,). If left empty, that means no service allowed.
func (o TopicOutput) ServicesPublishAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.ServicesPublishAllowed }).(pulumi.StringPtrOutput)
}

// Specifies the tags of the SMN topic, key/value pair format.
func (o TopicOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource identifier of a topic, which is unique.
func (o TopicOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

// Time when the topic was updated.
func (o TopicOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies the users who can publish messages to this topic.
// The value can be **\*** which indicates all users or user account URNs separated by comma(,). The format of
// user account URN is **urn:csp:iam::domainId:root**. **domainId** indicates the account ID of another user.
// If left empty, that means only the topic creator can publish messages.
func (o TopicOutput) UsersPublishAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.UsersPublishAllowed }).(pulumi.StringPtrOutput)
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].([]*Topic)[vs[1].(int)]
	}).(TopicOutput)
}

type TopicMapOutput struct{ *pulumi.OutputState }

func (TopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (o TopicMapOutput) ToTopicMapOutput() TopicMapOutput {
	return o
}

func (o TopicMapOutput) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return o
}

func (o TopicMapOutput) MapIndex(k pulumi.StringInput) TopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].(map[string]*Topic)[vs[1].(string)]
	}).(TopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMapInput)(nil)).Elem(), TopicMap{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicMapOutput{})
}

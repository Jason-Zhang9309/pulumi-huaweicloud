// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package smn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an SMN subscription resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Smn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			topic1, err := Smn.NewTopic(ctx, "topic1", &Smn.TopicArgs{
//				DisplayName: pulumi.String("The display name of topic_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Smn.NewSubscription(ctx, "subscription1", &Smn.SubscriptionArgs{
//				TopicUrn: topic1.ID(),
//				Endpoint: pulumi.String("mailtest@gmail.com"),
//				Protocol: pulumi.String("email"),
//				Remark:   pulumi.String("O&M"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Smn.NewSubscription(ctx, "subscription2", &Smn.SubscriptionArgs{
//				TopicUrn: topic1.ID(),
//				Endpoint: pulumi.String("13600000000"),
//				Protocol: pulumi.String("sms"),
//				Remark:   pulumi.String("O&M"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SMN subscription can be imported using the `id` (subscription urn), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Smn/subscription:Subscription subscription_1 urn:smn:cn-north-4:0970dd7a1300f5672ff2c003c60ae115:topic_1:a2aa5a1f66df494184f4e108398de1a6
//
// ```
type Subscription struct {
	pulumi.CustomResourceState

	// Message endpoint. Changing this parameter will create a new resource.
	// + **For an HTTP subscription**, the endpoint starts with http://.
	// + **For an HTTPS subscription**, the endpoint starts with https://.
	// + **For an email subscription**, the endpoint is an mail address.
	// + **For an SMS message subscription**, the endpoint is a phone number,
	//   the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
	// + **For a functionstage subscription**, the endpoint is a function urn.
	// + **For a functiongraph subscription**, the endpoint is a workflow ID.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Project ID of the topic creator.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Specifies the protocol of the message endpoint. Currently, email, sms, http,
	// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Subscription status. 0 indicates that the subscription is not confirmed. 1 indicates that the subscription
	// is confirmed. 3 indicates that the subscription is canceled.
	Status pulumi.IntOutput `pulumi:"status"`
	// Resource identifier of a subscription, which is unique.
	SubscriptionUrn pulumi.StringOutput `pulumi:"subscriptionUrn"`
	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn pulumi.StringOutput `pulumi:"topicUrn"`
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOption) (*Subscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TopicUrn == nil {
		return nil, errors.New("invalid value for required argument 'TopicUrn'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Subscription
	err := ctx.RegisterResource("huaweicloud:Smn/subscription:Subscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionState, opts ...pulumi.ResourceOption) (*Subscription, error) {
	var resource Subscription
	err := ctx.ReadResource("huaweicloud:Smn/subscription:Subscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscription resources.
type subscriptionState struct {
	// Message endpoint. Changing this parameter will create a new resource.
	// + **For an HTTP subscription**, the endpoint starts with http://.
	// + **For an HTTPS subscription**, the endpoint starts with https://.
	// + **For an email subscription**, the endpoint is an mail address.
	// + **For an SMS message subscription**, the endpoint is a phone number,
	//   the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
	// + **For a functionstage subscription**, the endpoint is a function urn.
	// + **For a functiongraph subscription**, the endpoint is a workflow ID.
	Endpoint *string `pulumi:"endpoint"`
	// Project ID of the topic creator.
	Owner *string `pulumi:"owner"`
	// Specifies the protocol of the message endpoint. Currently, email, sms, http,
	// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
	Protocol *string `pulumi:"protocol"`
	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes.
	Remark *string `pulumi:"remark"`
	// Subscription status. 0 indicates that the subscription is not confirmed. 1 indicates that the subscription
	// is confirmed. 3 indicates that the subscription is canceled.
	Status *int `pulumi:"status"`
	// Resource identifier of a subscription, which is unique.
	SubscriptionUrn *string `pulumi:"subscriptionUrn"`
	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn *string `pulumi:"topicUrn"`
}

type SubscriptionState struct {
	// Message endpoint. Changing this parameter will create a new resource.
	// + **For an HTTP subscription**, the endpoint starts with http://.
	// + **For an HTTPS subscription**, the endpoint starts with https://.
	// + **For an email subscription**, the endpoint is an mail address.
	// + **For an SMS message subscription**, the endpoint is a phone number,
	//   the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
	// + **For a functionstage subscription**, the endpoint is a function urn.
	// + **For a functiongraph subscription**, the endpoint is a workflow ID.
	Endpoint pulumi.StringPtrInput
	// Project ID of the topic creator.
	Owner pulumi.StringPtrInput
	// Specifies the protocol of the message endpoint. Currently, email, sms, http,
	// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
	Protocol pulumi.StringPtrInput
	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes.
	Remark pulumi.StringPtrInput
	// Subscription status. 0 indicates that the subscription is not confirmed. 1 indicates that the subscription
	// is confirmed. 3 indicates that the subscription is canceled.
	Status pulumi.IntPtrInput
	// Resource identifier of a subscription, which is unique.
	SubscriptionUrn pulumi.StringPtrInput
	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn pulumi.StringPtrInput
}

func (SubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionState)(nil)).Elem()
}

type subscriptionArgs struct {
	// Message endpoint. Changing this parameter will create a new resource.
	// + **For an HTTP subscription**, the endpoint starts with http://.
	// + **For an HTTPS subscription**, the endpoint starts with https://.
	// + **For an email subscription**, the endpoint is an mail address.
	// + **For an SMS message subscription**, the endpoint is a phone number,
	//   the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
	// + **For a functionstage subscription**, the endpoint is a function urn.
	// + **For a functiongraph subscription**, the endpoint is a workflow ID.
	Endpoint string `pulumi:"endpoint"`
	// Specifies the protocol of the message endpoint. Currently, email, sms, http,
	// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
	Protocol string `pulumi:"protocol"`
	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes.
	Remark *string `pulumi:"remark"`
	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn string `pulumi:"topicUrn"`
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// Message endpoint. Changing this parameter will create a new resource.
	// + **For an HTTP subscription**, the endpoint starts with http://.
	// + **For an HTTPS subscription**, the endpoint starts with https://.
	// + **For an email subscription**, the endpoint is an mail address.
	// + **For an SMS message subscription**, the endpoint is a phone number,
	//   the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
	// + **For a functionstage subscription**, the endpoint is a function urn.
	// + **For a functiongraph subscription**, the endpoint is a workflow ID.
	Endpoint pulumi.StringInput
	// Specifies the protocol of the message endpoint. Currently, email, sms, http,
	// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
	Protocol pulumi.StringInput
	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes.
	Remark pulumi.StringPtrInput
	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn pulumi.StringInput
}

func (SubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionArgs)(nil)).Elem()
}

type SubscriptionInput interface {
	pulumi.Input

	ToSubscriptionOutput() SubscriptionOutput
	ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput
}

func (*Subscription) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (i *Subscription) ToSubscriptionOutput() SubscriptionOutput {
	return i.ToSubscriptionOutputWithContext(context.Background())
}

func (i *Subscription) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionOutput)
}

// SubscriptionArrayInput is an input type that accepts SubscriptionArray and SubscriptionArrayOutput values.
// You can construct a concrete instance of `SubscriptionArrayInput` via:
//
//	SubscriptionArray{ SubscriptionArgs{...} }
type SubscriptionArrayInput interface {
	pulumi.Input

	ToSubscriptionArrayOutput() SubscriptionArrayOutput
	ToSubscriptionArrayOutputWithContext(context.Context) SubscriptionArrayOutput
}

type SubscriptionArray []SubscriptionInput

func (SubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscription)(nil)).Elem()
}

func (i SubscriptionArray) ToSubscriptionArrayOutput() SubscriptionArrayOutput {
	return i.ToSubscriptionArrayOutputWithContext(context.Background())
}

func (i SubscriptionArray) ToSubscriptionArrayOutputWithContext(ctx context.Context) SubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionArrayOutput)
}

// SubscriptionMapInput is an input type that accepts SubscriptionMap and SubscriptionMapOutput values.
// You can construct a concrete instance of `SubscriptionMapInput` via:
//
//	SubscriptionMap{ "key": SubscriptionArgs{...} }
type SubscriptionMapInput interface {
	pulumi.Input

	ToSubscriptionMapOutput() SubscriptionMapOutput
	ToSubscriptionMapOutputWithContext(context.Context) SubscriptionMapOutput
}

type SubscriptionMap map[string]SubscriptionInput

func (SubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscription)(nil)).Elem()
}

func (i SubscriptionMap) ToSubscriptionMapOutput() SubscriptionMapOutput {
	return i.ToSubscriptionMapOutputWithContext(context.Background())
}

func (i SubscriptionMap) ToSubscriptionMapOutputWithContext(ctx context.Context) SubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionMapOutput)
}

type SubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (o SubscriptionOutput) ToSubscriptionOutput() SubscriptionOutput {
	return o
}

func (o SubscriptionOutput) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return o
}

// Message endpoint. Changing this parameter will create a new resource.
//   - **For an HTTP subscription**, the endpoint starts with http://.
//   - **For an HTTPS subscription**, the endpoint starts with https://.
//   - **For an email subscription**, the endpoint is an mail address.
//   - **For an SMS message subscription**, the endpoint is a phone number,
//     the format is \[+\]\[country code\]\[phone number\], e.g. +86185xxxx0000.
//   - **For a functionstage subscription**, the endpoint is a function urn.
//   - **For a functiongraph subscription**, the endpoint is a workflow ID.
func (o SubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Project ID of the topic creator.
func (o SubscriptionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Specifies the protocol of the message endpoint. Currently, email, sms, http,
// https, functionstage and functiongraph are supported. Changing this parameter will create a new resource.
func (o SubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region in which to create the SMN subscription resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o SubscriptionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Remark information. The remarks must be a UTF-8-coded character string
// containing 128 bytes.
func (o SubscriptionOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Subscription status. 0 indicates that the subscription is not confirmed. 1 indicates that the subscription
// is confirmed. 3 indicates that the subscription is canceled.
func (o SubscriptionOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Subscription) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Resource identifier of a subscription, which is unique.
func (o SubscriptionOutput) SubscriptionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.SubscriptionUrn }).(pulumi.StringOutput)
}

// Specifies the resource identifier of a topic, which is unique.
// Changing this parameter will create a new resource.
func (o SubscriptionOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

type SubscriptionArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscription)(nil)).Elem()
}

func (o SubscriptionArrayOutput) ToSubscriptionArrayOutput() SubscriptionArrayOutput {
	return o
}

func (o SubscriptionArrayOutput) ToSubscriptionArrayOutputWithContext(ctx context.Context) SubscriptionArrayOutput {
	return o
}

func (o SubscriptionArrayOutput) Index(i pulumi.IntInput) SubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subscription {
		return vs[0].([]*Subscription)[vs[1].(int)]
	}).(SubscriptionOutput)
}

type SubscriptionMapOutput struct{ *pulumi.OutputState }

func (SubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscription)(nil)).Elem()
}

func (o SubscriptionMapOutput) ToSubscriptionMapOutput() SubscriptionMapOutput {
	return o
}

func (o SubscriptionMapOutput) ToSubscriptionMapOutputWithContext(ctx context.Context) SubscriptionMapOutput {
	return o
}

func (o SubscriptionMapOutput) MapIndex(k pulumi.StringInput) SubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subscription {
		return vs[0].(map[string]*Subscription)[vs[1].(string)]
	}).(SubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionInput)(nil)).Elem(), &Subscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionArrayInput)(nil)).Elem(), SubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionMapInput)(nil)).Elem(), SubscriptionMap{})
	pulumi.RegisterOutputType(SubscriptionOutput{})
	pulumi.RegisterOutputType(SubscriptionArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VolumeAttachment struct {
	// The device name.
	Device *string `pulumi:"device"`
	// The ID of the attachment information.
	Id *string `pulumi:"id"`
	// The ID of the server to which the disk is attached.
	InstanceId *string `pulumi:"instanceId"`
}

// VolumeAttachmentInput is an input type that accepts VolumeAttachmentArgs and VolumeAttachmentOutput values.
// You can construct a concrete instance of `VolumeAttachmentInput` via:
//
//	VolumeAttachmentArgs{...}
type VolumeAttachmentInput interface {
	pulumi.Input

	ToVolumeAttachmentOutput() VolumeAttachmentOutput
	ToVolumeAttachmentOutputWithContext(context.Context) VolumeAttachmentOutput
}

type VolumeAttachmentArgs struct {
	// The device name.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The ID of the attachment information.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ID of the server to which the disk is attached.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
}

func (VolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return i.ToVolumeAttachmentOutputWithContext(context.Background())
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentOutput)
}

// VolumeAttachmentArrayInput is an input type that accepts VolumeAttachmentArray and VolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentArrayInput` via:
//
//	VolumeAttachmentArray{ VolumeAttachmentArgs{...} }
type VolumeAttachmentArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput
	ToVolumeAttachmentArrayOutputWithContext(context.Context) VolumeAttachmentArrayOutput
}

type VolumeAttachmentArray []VolumeAttachmentInput

func (VolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return i.ToVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentArrayOutput)
}

type VolumeAttachmentOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return o
}

// The device name.
func (o VolumeAttachmentOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The ID of the attachment information.
func (o VolumeAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ID of the server to which the disk is attached.
func (o VolumeAttachmentOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachment {
		return vs[0].([]VolumeAttachment)[vs[1].(int)]
	}).(VolumeAttachmentOutput)
}

type GetVolumesVolume struct {
	// The disk attachment information. Structure is documented below.
	Attachments []GetVolumesVolumeAttachment `pulumi:"attachments"`
	// Specifies the availability zone for the disks.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Whether the disk is bootable.
	Bootable bool `pulumi:"bootable"`
	// The time when the disk was created.
	CreateAt string `pulumi:"createAt"`
	// The disk description.
	Description string `pulumi:"description"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The ID of the attached resource in UUID format.
	Id string `pulumi:"id"`
	// the IOPS(Input/Output Operations Per Second) of the volume. Only valid when `volumeType` is **GPSSD2** or
	// **ESSD2**.
	Iops int `pulumi:"iops"`
	// Specifies the name for the disks. This field will undergo a fuzzy matching query, the
	// query result is for all disks whose names contain this value.
	Name string `pulumi:"name"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType string `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable bool `pulumi:"shareable"`
	// The disk size, in GB.
	Size int `pulumi:"size"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags map[string]string `pulumi:"tags"`
	// The throughput of the system disk. Only valid when `volumeType` is **GPSSD2**.
	Throughput int `pulumi:"throughput"`
	// The time when the disk was updated.
	UpdateAt string `pulumi:"updateAt"`
	// The disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType string `pulumi:"volumeType"`
	// The unique identifier used when attaching the disk.
	Wwn string `pulumi:"wwn"`
}

// GetVolumesVolumeInput is an input type that accepts GetVolumesVolumeArgs and GetVolumesVolumeOutput values.
// You can construct a concrete instance of `GetVolumesVolumeInput` via:
//
//	GetVolumesVolumeArgs{...}
type GetVolumesVolumeInput interface {
	pulumi.Input

	ToGetVolumesVolumeOutput() GetVolumesVolumeOutput
	ToGetVolumesVolumeOutputWithContext(context.Context) GetVolumesVolumeOutput
}

type GetVolumesVolumeArgs struct {
	// The disk attachment information. Structure is documented below.
	Attachments GetVolumesVolumeAttachmentArrayInput `pulumi:"attachments"`
	// Specifies the availability zone for the disks.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Whether the disk is bootable.
	Bootable pulumi.BoolInput `pulumi:"bootable"`
	// The time when the disk was created.
	CreateAt pulumi.StringInput `pulumi:"createAt"`
	// The disk description.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The ID of the attached resource in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// the IOPS(Input/Output Operations Per Second) of the volume. Only valid when `volumeType` is **GPSSD2** or
	// **ESSD2**.
	Iops pulumi.IntInput `pulumi:"iops"`
	// Specifies the name for the disks. This field will undergo a fuzzy matching query, the
	// query result is for all disks whose names contain this value.
	Name pulumi.StringInput `pulumi:"name"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable pulumi.BoolInput `pulumi:"shareable"`
	// The disk size, in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The throughput of the system disk. Only valid when `volumeType` is **GPSSD2**.
	Throughput pulumi.IntInput `pulumi:"throughput"`
	// The time when the disk was updated.
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
	// The disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
	// The unique identifier used when attaching the disk.
	Wwn pulumi.StringInput `pulumi:"wwn"`
}

func (GetVolumesVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return i.ToGetVolumesVolumeOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeOutput)
}

// GetVolumesVolumeArrayInput is an input type that accepts GetVolumesVolumeArray and GetVolumesVolumeArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeArrayInput` via:
//
//	GetVolumesVolumeArray{ GetVolumesVolumeArgs{...} }
type GetVolumesVolumeArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput
	ToGetVolumesVolumeArrayOutputWithContext(context.Context) GetVolumesVolumeArrayOutput
}

type GetVolumesVolumeArray []GetVolumesVolumeInput

func (GetVolumesVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return i.ToGetVolumesVolumeArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeArrayOutput)
}

type GetVolumesVolumeOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return o
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return o
}

// The disk attachment information. Structure is documented below.
func (o GetVolumesVolumeOutput) Attachments() GetVolumesVolumeAttachmentArrayOutput {
	return o.ApplyT(func(v GetVolumesVolume) []GetVolumesVolumeAttachment { return v.Attachments }).(GetVolumesVolumeAttachmentArrayOutput)
}

// Specifies the availability zone for the disks.
func (o GetVolumesVolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Whether the disk is bootable.
func (o GetVolumesVolumeOutput) Bootable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolume) bool { return v.Bootable }).(pulumi.BoolOutput)
}

// The time when the disk was created.
func (o GetVolumesVolumeOutput) CreateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.CreateAt }).(pulumi.StringOutput)
}

// The disk description.
func (o GetVolumesVolumeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID for filtering.
func (o GetVolumesVolumeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Id }).(pulumi.StringOutput)
}

// the IOPS(Input/Output Operations Per Second) of the volume. Only valid when `volumeType` is **GPSSD2** or
// **ESSD2**.
func (o GetVolumesVolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Iops }).(pulumi.IntOutput)
}

// Specifies the name for the disks. This field will undergo a fuzzy matching query, the
// query result is for all disks whose names contain this value.
func (o GetVolumesVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Name }).(pulumi.StringOutput)
}

// The service type, such as EVS, DSS or DESS.
func (o GetVolumesVolumeOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.ServiceType }).(pulumi.StringOutput)
}

// Specifies whether the disk is shareable.
func (o GetVolumesVolumeOutput) Shareable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolume) bool { return v.Shareable }).(pulumi.BoolOutput)
}

// The disk size, in GB.
func (o GetVolumesVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the disk status. The valid values are as following:
// + **FREEZED**
// + **BIND_ERROR**
// + **BINDING**
// + **PENDING_DELETE**
// + **PENDING_CREATE**
// + **NOTIFYING**
// + **NOTIFY_DELETE**
// + **PENDING_UPDATE**
// + **DOWN**
// + **ACTIVE**
// + **ELB**
// + **ERROR**
// + **VPN**
func (o GetVolumesVolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the included key/value pairs which associated with the desired disk.
func (o GetVolumesVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumesVolume) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The throughput of the system disk. Only valid when `volumeType` is **GPSSD2**.
func (o GetVolumesVolumeOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Throughput }).(pulumi.IntOutput)
}

// The time when the disk was updated.
func (o GetVolumesVolumeOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.UpdateAt }).(pulumi.StringOutput)
}

// The disk type. Valid values are as follows:
// + **SAS**: High I/O type.
// + **SSD**: Ultra-high I/O type.
// + **GPSSD**: General purpose SSD type.
// + **ESSD**: Extreme SSD type.
// + **GPSSD2**: General purpose SSD V2 type.
// + **ESSD2**: Extreme SSD V2 type.
func (o GetVolumesVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

// The unique identifier used when attaching the disk.
func (o GetVolumesVolumeOutput) Wwn() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Wwn }).(pulumi.StringOutput)
}

type GetVolumesVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolume {
		return vs[0].([]GetVolumesVolume)[vs[1].(int)]
	}).(GetVolumesVolumeOutput)
}

type GetVolumesVolumeAttachment struct {
	// The time when the disk was attached.
	AttachedAt string `pulumi:"attachedAt"`
	// The ID of the attachment information.
	AttachedMode string `pulumi:"attachedMode"`
	// The device name to which the disk is attached.
	DeviceName string `pulumi:"deviceName"`
	// The ID of the attached resource in UUID format.
	Id string `pulumi:"id"`
	// Specifies the server ID to which the disks are attached.
	ServerId string `pulumi:"serverId"`
}

// GetVolumesVolumeAttachmentInput is an input type that accepts GetVolumesVolumeAttachmentArgs and GetVolumesVolumeAttachmentOutput values.
// You can construct a concrete instance of `GetVolumesVolumeAttachmentInput` via:
//
//	GetVolumesVolumeAttachmentArgs{...}
type GetVolumesVolumeAttachmentInput interface {
	pulumi.Input

	ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput
	ToGetVolumesVolumeAttachmentOutputWithContext(context.Context) GetVolumesVolumeAttachmentOutput
}

type GetVolumesVolumeAttachmentArgs struct {
	// The time when the disk was attached.
	AttachedAt pulumi.StringInput `pulumi:"attachedAt"`
	// The ID of the attachment information.
	AttachedMode pulumi.StringInput `pulumi:"attachedMode"`
	// The device name to which the disk is attached.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// The ID of the attached resource in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the server ID to which the disks are attached.
	ServerId pulumi.StringInput `pulumi:"serverId"`
}

func (GetVolumesVolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeAttachment)(nil)).Elem()
}

func (i GetVolumesVolumeAttachmentArgs) ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput {
	return i.ToGetVolumesVolumeAttachmentOutputWithContext(context.Background())
}

func (i GetVolumesVolumeAttachmentArgs) ToGetVolumesVolumeAttachmentOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeAttachmentOutput)
}

// GetVolumesVolumeAttachmentArrayInput is an input type that accepts GetVolumesVolumeAttachmentArray and GetVolumesVolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeAttachmentArrayInput` via:
//
//	GetVolumesVolumeAttachmentArray{ GetVolumesVolumeAttachmentArgs{...} }
type GetVolumesVolumeAttachmentArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput
	ToGetVolumesVolumeAttachmentArrayOutputWithContext(context.Context) GetVolumesVolumeAttachmentArrayOutput
}

type GetVolumesVolumeAttachmentArray []GetVolumesVolumeAttachmentInput

func (GetVolumesVolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeAttachment)(nil)).Elem()
}

func (i GetVolumesVolumeAttachmentArray) ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput {
	return i.ToGetVolumesVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeAttachmentArray) ToGetVolumesVolumeAttachmentArrayOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeAttachmentArrayOutput)
}

type GetVolumesVolumeAttachmentOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeAttachment)(nil)).Elem()
}

func (o GetVolumesVolumeAttachmentOutput) ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput {
	return o
}

func (o GetVolumesVolumeAttachmentOutput) ToGetVolumesVolumeAttachmentOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentOutput {
	return o
}

// The time when the disk was attached.
func (o GetVolumesVolumeAttachmentOutput) AttachedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.AttachedAt }).(pulumi.StringOutput)
}

// The ID of the attachment information.
func (o GetVolumesVolumeAttachmentOutput) AttachedMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.AttachedMode }).(pulumi.StringOutput)
}

// The device name to which the disk is attached.
func (o GetVolumesVolumeAttachmentOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.DeviceName }).(pulumi.StringOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the server ID to which the disks are attached.
func (o GetVolumesVolumeAttachmentOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.ServerId }).(pulumi.StringOutput)
}

type GetVolumesVolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeAttachment)(nil)).Elem()
}

func (o GetVolumesVolumeAttachmentArrayOutput) ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput {
	return o
}

func (o GetVolumesVolumeAttachmentArrayOutput) ToGetVolumesVolumeAttachmentArrayOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentArrayOutput {
	return o
}

func (o GetVolumesVolumeAttachmentArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolumeAttachment {
		return vs[0].([]GetVolumesVolumeAttachment)[vs[1].(int)]
	}).(GetVolumesVolumeAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentInput)(nil)).Elem(), VolumeAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentArrayInput)(nil)).Elem(), VolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeInput)(nil)).Elem(), GetVolumesVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeArrayInput)(nil)).Elem(), GetVolumesVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeAttachmentInput)(nil)).Elem(), GetVolumesVolumeAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeAttachmentArrayInput)(nil)).Elem(), GetVolumesVolumeAttachmentArray{})
	pulumi.RegisterOutputType(VolumeAttachmentOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeAttachmentOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeAttachmentArrayOutput{})
}

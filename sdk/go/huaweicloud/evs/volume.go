// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a volume resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Evs.NewVolume(ctx, "volume", &Evs.VolumeArgs{
//				AvailabilityZone: pulumi.String("cn-north-4a"),
//				Description:      pulumi.String("my volume"),
//				Size:             pulumi.Int(20),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//				VolumeType: pulumi.String("SAS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With KMS Encryption
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Evs.NewVolume(ctx, "volume", &Evs.VolumeArgs{
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SAS"),
//				Size:             pulumi.Int(20),
//				KmsId:            pulumi.Any(_var.Kms_id),
//				AvailabilityZone: pulumi.String("cn-north-4a"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Volumes can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Evs/volume:Volume volume_1 14a80bc7-c12c-4fe0-a38a-cb77eeac9bd6
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include**cascade**, **period_unit**, **period** and **auto_renew**. It is generally recommended running terraform plan after importing an disk. You can then decide if changes should be applied to the disk, or the resource definition should be updated to align with the disk. Also you can ignore changes as below. resource "huaweicloud_evs_volume" "volume_1" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	cascade,
//
//	]
//
//	} }
type Volume struct {
	pulumi.CustomResourceState

	// If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
	// the Device as the Instance sees it.
	Attachments VolumeAttachmentArrayOutput `pulumi:"attachments"`
	AutoPay     pulumi.StringPtrOutput      `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are **true** and **false**.
	// Changing this creates a new disk.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupId pulumi.StringPtrOutput `pulumi:"backupId"`
	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade pulumi.BoolPtrOutput `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	//   Changing this creates a new disk.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType pulumi.StringPtrOutput `pulumi:"deviceType"`
	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KmsId pulumi.StringPtrOutput `pulumi:"kmsId"`
	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach pulumi.BoolPtrOutput `pulumi:"multiattach"`
	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the charging period of the disk.
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the valid value is 1.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the disk size, in GB. The valid value is range from:
	// + System disk: 1 GB to 1024 GB
	// + Data disk: 10 GB to 32768 GB
	Size pulumi.IntOutput `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
	// ESSD.
	// + SAS: specifies the high I/O disk type.
	// + SSD: specifies the ultra-high I/O disk type.
	// + GPSSD: specifies the general purpose SSD disk type.
	// + ESSD: Extreme SSD type.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
	// The unique identifier used for mounting the EVS disk.
	Wwn pulumi.StringOutput `pulumi:"wwn"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	var resource Volume
	err := ctx.RegisterResource("huaweicloud:Evs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("huaweicloud:Evs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
	// the Device as the Instance sees it.
	Attachments []VolumeAttachment `pulumi:"attachments"`
	AutoPay     *string            `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are **true** and **false**.
	// Changing this creates a new disk.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupId *string `pulumi:"backupId"`
	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade *bool `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	//   Changing this creates a new disk.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description *string `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType *string `pulumi:"deviceType"`
	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageId *string `pulumi:"imageId"`
	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KmsId *string `pulumi:"kmsId"`
	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach *bool `pulumi:"multiattach"`
	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the disk.
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the valid value is 1.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region *string `pulumi:"region"`
	// Specifies the disk size, in GB. The valid value is range from:
	// + System disk: 1 GB to 1024 GB
	// + Data disk: 10 GB to 32768 GB
	Size *int `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotId *string `pulumi:"snapshotId"`
	// Specifies the key/value pairs to associate with the disk.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
	// ESSD.
	// + SAS: specifies the high I/O disk type.
	// + SSD: specifies the ultra-high I/O disk type.
	// + GPSSD: specifies the general purpose SSD disk type.
	// + ESSD: Extreme SSD type.
	VolumeType *string `pulumi:"volumeType"`
	// The unique identifier used for mounting the EVS disk.
	Wwn *string `pulumi:"wwn"`
}

type VolumeState struct {
	// If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
	// the Device as the Instance sees it.
	Attachments VolumeAttachmentArrayInput
	AutoPay     pulumi.StringPtrInput
	// Specifies whether auto renew is enabled.
	// Valid values are **true** and **false**.
	// Changing this creates a new disk.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupId pulumi.StringPtrInput
	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade pulumi.BoolPtrInput
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	//   Changing this creates a new disk.
	ChargingMode pulumi.StringPtrInput
	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrInput
	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType pulumi.StringPtrInput
	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageId pulumi.StringPtrInput
	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KmsId pulumi.StringPtrInput
	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach pulumi.BoolPtrInput
	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the disk.
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the valid value is 1.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region pulumi.StringPtrInput
	// Specifies the disk size, in GB. The valid value is range from:
	// + System disk: 1 GB to 1024 GB
	// + Data disk: 10 GB to 32768 GB
	Size pulumi.IntPtrInput
	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapInput
	// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
	// ESSD.
	// + SAS: specifies the high I/O disk type.
	// + SSD: specifies the ultra-high I/O disk type.
	// + GPSSD: specifies the general purpose SSD disk type.
	// + ESSD: Extreme SSD type.
	VolumeType pulumi.StringPtrInput
	// The unique identifier used for mounting the EVS disk.
	Wwn pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	AutoPay *string `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are **true** and **false**.
	// Changing this creates a new disk.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupId *string `pulumi:"backupId"`
	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade *bool `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	//   Changing this creates a new disk.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description *string `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType *string `pulumi:"deviceType"`
	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageId *string `pulumi:"imageId"`
	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KmsId *string `pulumi:"kmsId"`
	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach *bool `pulumi:"multiattach"`
	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the disk.
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the valid value is 1.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region *string `pulumi:"region"`
	// Specifies the disk size, in GB. The valid value is range from:
	// + System disk: 1 GB to 1024 GB
	// + Data disk: 10 GB to 32768 GB
	Size *int `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotId *string `pulumi:"snapshotId"`
	// Specifies the key/value pairs to associate with the disk.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
	// ESSD.
	// + SAS: specifies the high I/O disk type.
	// + SSD: specifies the ultra-high I/O disk type.
	// + GPSSD: specifies the general purpose SSD disk type.
	// + ESSD: Extreme SSD type.
	VolumeType string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	AutoPay pulumi.StringPtrInput
	// Specifies whether auto renew is enabled.
	// Valid values are **true** and **false**.
	// Changing this creates a new disk.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone pulumi.StringInput
	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupId pulumi.StringPtrInput
	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade pulumi.BoolPtrInput
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	//   Changing this creates a new disk.
	ChargingMode pulumi.StringPtrInput
	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrInput
	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType pulumi.StringPtrInput
	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageId pulumi.StringPtrInput
	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KmsId pulumi.StringPtrInput
	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach pulumi.BoolPtrInput
	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the disk.
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the valid value is 1.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new disk.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region pulumi.StringPtrInput
	// Specifies the disk size, in GB. The valid value is range from:
	// + System disk: 1 GB to 1024 GB
	// + Data disk: 10 GB to 32768 GB
	Size pulumi.IntPtrInput
	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapInput
	// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
	// ESSD.
	// + SAS: specifies the high I/O disk type.
	// + SSD: specifies the ultra-high I/O disk type.
	// + GPSSD: specifies the general purpose SSD disk type.
	// + ESSD: Extreme SSD type.
	VolumeType pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
// the Device as the Instance sees it.
func (o VolumeOutput) Attachments() VolumeAttachmentArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeAttachmentArrayOutput { return v.Attachments }).(VolumeAttachmentArrayOutput)
}

func (o VolumeOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

// Specifies whether auto renew is enabled.
// Valid values are **true** and **false**.
// Changing this creates a new disk.
func (o VolumeOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the availability zone for the disk. Changing this creates
// a new disk.
func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the backup ID from which to create the disk. Changing this
// creates a new disk.
func (o VolumeOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Specifies the delete mode of snapshot. The default value is false. All snapshot
// associated with the disk will also be deleted when the parameter is set to true.
func (o VolumeOutput) Cascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Cascade }).(pulumi.BoolPtrOutput)
}

// Specifies the charging mode of the disk.
// The valid values are as follows:
//   - **prePaid**: the yearly/monthly billing mode.
//   - **postPaid**: the pay-per-use billing mode.
//     Changing this creates a new disk.
func (o VolumeOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the disk description. The value can contain a maximum of 255 bytes.
func (o VolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the device type of disk to create. Valid options are VBD and
// SCSI. Defaults to VBD. Changing this creates a new disk.
func (o VolumeOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.DeviceType }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project id of the disk. Changing this
// creates a new disk.
func (o VolumeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the image ID from which to create the disk. Changing this creates
// a new disk.
func (o VolumeOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Specifies the Encryption KMS ID to create the disk. Changing this creates a
// new disk.
func (o VolumeOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

// Specifies whether the disk is shareable. The default value is false.
// Changing this creates a new disk.
func (o VolumeOutput) Multiattach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Multiattach }).(pulumi.BoolPtrOutput)
}

// Specifies the disk name. The value can contain a maximum of 255 bytes.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the charging period of the disk.
// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
// If `periodUnit` is set to **year**, the valid value is 1.
// This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this creates a new disk.
func (o VolumeOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the disk.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this creates a new disk.
func (o VolumeOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the disk. If omitted, the
// provider-level region will be used. Changing this creates a new disk.
func (o VolumeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the disk size, in GB. The valid value is range from:
// + System disk: 1 GB to 1024 GB
// + Data disk: 10 GB to 32768 GB
func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Specifies the snapshot ID from which to create the disk. Changing this
// creates a new disk.
func (o VolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Specifies the key/value pairs to associate with the disk.
func (o VolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the disk type. Currently, the value can be SAS, SSD, GPSSD or
// ESSD.
// + SAS: specifies the high I/O disk type.
// + SSD: specifies the ultra-high I/O disk type.
// + GPSSD: specifies the general purpose SSD disk type.
// + ESSD: Extreme SSD type.
func (o VolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

// The unique identifier used for mounting the EVS disk.
func (o VolumeOutput) Wwn() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Wwn }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}

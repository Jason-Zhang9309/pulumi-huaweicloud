// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query the version and plaintext of the CSMS(Cloud Secret Management Service) secret.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dew.GetCsmsSecretVersion(ctx, &dew.GetCsmsSecretVersionArgs{
//				SecretName: "your_secret_name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCsmsSecretVersion(ctx *pulumi.Context, args *GetCsmsSecretVersionArgs, opts ...pulumi.InvokeOption) (*GetCsmsSecretVersionResult, error) {
	var rv GetCsmsSecretVersionResult
	err := ctx.Invoke("huaweicloud:Dew/getCsmsSecretVersion:getCsmsSecretVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCsmsSecretVersion.
type GetCsmsSecretVersionArgs struct {
	// Specifies the region in which to obtain the CSMS secrets.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// The name of the CSMS secret to query.
	SecretName string `pulumi:"secretName"`
	// The version ID of the CSMS secret version to query.
	// If omitted, the latest version will be used.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getCsmsSecretVersion.
type GetCsmsSecretVersionResult struct {
	// Time when the CSMS secret version created, in UTC format.
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the KMS CMK used for secret encryption.
	KmsKeyId   string `pulumi:"kmsKeyId"`
	Region     string `pulumi:"region"`
	SecretName string `pulumi:"secretName"`
	// The plaintext of a secret in text format.
	SecretText string `pulumi:"secretText"`
	// The status of the CSMS secret version.
	Statuses []string `pulumi:"statuses"`
	Version  string   `pulumi:"version"`
}

func GetCsmsSecretVersionOutput(ctx *pulumi.Context, args GetCsmsSecretVersionOutputArgs, opts ...pulumi.InvokeOption) GetCsmsSecretVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCsmsSecretVersionResult, error) {
			args := v.(GetCsmsSecretVersionArgs)
			r, err := GetCsmsSecretVersion(ctx, &args, opts...)
			var s GetCsmsSecretVersionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCsmsSecretVersionResultOutput)
}

// A collection of arguments for invoking getCsmsSecretVersion.
type GetCsmsSecretVersionOutputArgs struct {
	// Specifies the region in which to obtain the CSMS secrets.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the CSMS secret to query.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// The version ID of the CSMS secret version to query.
	// If omitted, the latest version will be used.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GetCsmsSecretVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCsmsSecretVersionArgs)(nil)).Elem()
}

// A collection of values returned by getCsmsSecretVersion.
type GetCsmsSecretVersionResultOutput struct{ *pulumi.OutputState }

func (GetCsmsSecretVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCsmsSecretVersionResult)(nil)).Elem()
}

func (o GetCsmsSecretVersionResultOutput) ToGetCsmsSecretVersionResultOutput() GetCsmsSecretVersionResultOutput {
	return o
}

func (o GetCsmsSecretVersionResultOutput) ToGetCsmsSecretVersionResultOutputWithContext(ctx context.Context) GetCsmsSecretVersionResultOutput {
	return o
}

// Time when the CSMS secret version created, in UTC format.
func (o GetCsmsSecretVersionResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCsmsSecretVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the KMS CMK used for secret encryption.
func (o GetCsmsSecretVersionResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o GetCsmsSecretVersionResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetCsmsSecretVersionResultOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.SecretName }).(pulumi.StringOutput)
}

// The plaintext of a secret in text format.
func (o GetCsmsSecretVersionResultOutput) SecretText() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.SecretText }).(pulumi.StringOutput)
}

// The status of the CSMS secret version.
func (o GetCsmsSecretVersionResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

func (o GetCsmsSecretVersionResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetCsmsSecretVersionResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCsmsSecretVersionResultOutput{})
}

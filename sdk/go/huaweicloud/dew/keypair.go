// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a keypair resource within HuaweiCloud.
//
// By default, key pairs use the SSH-2 (RSA, 2048) algorithm for encryption and decryption.
//
// Keys imported support the following cryptographic algorithms:
//
//   - RSA-1024
//   - RSA-2048
//   - RSA-4096
//
// ## Example Usage
// ### Create a new keypair which scope is Tenant-level and the private key is managed by HuaweiCloud
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := Dew.NewKey(ctx, "test", &Dew.KeyArgs{
//				KeyAlias: pulumi.String("kms_test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Dew.NewKeypair(ctx, "test-keypair", &Dew.KeypairArgs{
//				Scope:          pulumi.String("account"),
//				EncryptionType: pulumi.String("kms"),
//				KmsKeyName:     test.KeyAlias,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a new keypair and export private key to current folder
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dew.NewKeypair(ctx, "test-keypair", &Dew.KeypairArgs{
//				KeyFile: pulumi.String("private_key.pem"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Import an existing keypair
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dew.NewKeypair(ctx, "test-keypair", &Dew.KeypairArgs{
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAlJq5Pu+eizhou7nFFDxXofr2ySF8k/yuA9OnJdVF9Fbf85Z59CWNZBvcAT... root@terra-dev"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Keypairs can be imported using the `name`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dew/keypair:Keypair my-keypair test-keypair
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`encryption_type`, and `kms_key_name`. It is generally recommended running `terraform plan` after importing a key pair. You can then decide if changes should be applied to the key pair, or the resource definition should be updated to align with the key pair. Also you can ignore changes as below. resource "huaweicloud_kps_keypair" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	encryption_type, kms_key_name,
//
//	]
//
//	} }
type Keypair struct {
	pulumi.CustomResourceState

	// The key pair creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of key pair.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies encryption mode if manages the private key by HuaweiCloud.
	// The options are as follows:
	// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// - **kms**: KMS encryption mode.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`
	// Fingerprint information about an key pair.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Whether the private key is managed by HuaweiCloud.
	IsManaged pulumi.BoolOutput `pulumi:"isManaged"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// Changing this parameter will create a new resource.
	KeyFile pulumi.StringOutput `pulumi:"keyFile"`
	// Specifies the KMS key name to encrypt private keys.
	// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of 64
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key.
	// Changing this parameter will create a new resource.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the scope of key pair. The options are as follows:
	// - **account**: Tenant-level, available to all users under the same account.
	// - **user**: User-level, only available to that user.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewKeypair registers a new resource with the given unique name, arguments, and options.
func NewKeypair(ctx *pulumi.Context,
	name string, args *KeypairArgs, opts ...pulumi.ResourceOption) (*Keypair, error) {
	if args == nil {
		args = &KeypairArgs{}
	}

	var resource Keypair
	err := ctx.RegisterResource("huaweicloud:Dew/keypair:Keypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeypair gets an existing Keypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeypairState, opts ...pulumi.ResourceOption) (*Keypair, error) {
	var resource Keypair
	err := ctx.ReadResource("huaweicloud:Dew/keypair:Keypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keypair resources.
type keypairState struct {
	// The key pair creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of key pair.
	Description *string `pulumi:"description"`
	// Specifies encryption mode if manages the private key by HuaweiCloud.
	// The options are as follows:
	// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// - **kms**: KMS encryption mode.
	EncryptionType *string `pulumi:"encryptionType"`
	// Fingerprint information about an key pair.
	Fingerprint *string `pulumi:"fingerprint"`
	// Whether the private key is managed by HuaweiCloud.
	IsManaged *bool `pulumi:"isManaged"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// Changing this parameter will create a new resource.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies the KMS key name to encrypt private keys.
	// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of 64
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key.
	// Changing this parameter will create a new resource.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scope of key pair. The options are as follows:
	// - **account**: Tenant-level, available to all users under the same account.
	// - **user**: User-level, only available to that user.
	Scope *string `pulumi:"scope"`
}

type KeypairState struct {
	// The key pair creation time.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of key pair.
	Description pulumi.StringPtrInput
	// Specifies encryption mode if manages the private key by HuaweiCloud.
	// The options are as follows:
	// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// - **kms**: KMS encryption mode.
	EncryptionType pulumi.StringPtrInput
	// Fingerprint information about an key pair.
	Fingerprint pulumi.StringPtrInput
	// Whether the private key is managed by HuaweiCloud.
	IsManaged pulumi.BoolPtrInput
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// Changing this parameter will create a new resource.
	KeyFile pulumi.StringPtrInput
	// Specifies the KMS key name to encrypt private keys.
	// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
	KmsKeyName pulumi.StringPtrInput
	// Specifies a unique name for the keypair. The name can contain a maximum of 64
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key.
	// Changing this parameter will create a new resource.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scope of key pair. The options are as follows:
	// - **account**: Tenant-level, available to all users under the same account.
	// - **user**: User-level, only available to that user.
	Scope pulumi.StringPtrInput
}

func (KeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairState)(nil)).Elem()
}

type keypairArgs struct {
	// Specifies the description of key pair.
	Description *string `pulumi:"description"`
	// Specifies encryption mode if manages the private key by HuaweiCloud.
	// The options are as follows:
	// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// - **kms**: KMS encryption mode.
	EncryptionType *string `pulumi:"encryptionType"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// Changing this parameter will create a new resource.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies the KMS key name to encrypt private keys.
	// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of 64
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key.
	// Changing this parameter will create a new resource.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scope of key pair. The options are as follows:
	// - **account**: Tenant-level, available to all users under the same account.
	// - **user**: User-level, only available to that user.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a Keypair resource.
type KeypairArgs struct {
	// Specifies the description of key pair.
	Description pulumi.StringPtrInput
	// Specifies encryption mode if manages the private key by HuaweiCloud.
	// The options are as follows:
	// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// - **kms**: KMS encryption mode.
	EncryptionType pulumi.StringPtrInput
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// Changing this parameter will create a new resource.
	KeyFile pulumi.StringPtrInput
	// Specifies the KMS key name to encrypt private keys.
	// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
	KmsKeyName pulumi.StringPtrInput
	// Specifies a unique name for the keypair. The name can contain a maximum of 64
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key.
	// Changing this parameter will create a new resource.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scope of key pair. The options are as follows:
	// - **account**: Tenant-level, available to all users under the same account.
	// - **user**: User-level, only available to that user.
	Scope pulumi.StringPtrInput
}

func (KeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairArgs)(nil)).Elem()
}

type KeypairInput interface {
	pulumi.Input

	ToKeypairOutput() KeypairOutput
	ToKeypairOutputWithContext(ctx context.Context) KeypairOutput
}

func (*Keypair) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (i *Keypair) ToKeypairOutput() KeypairOutput {
	return i.ToKeypairOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairOutput)
}

// KeypairArrayInput is an input type that accepts KeypairArray and KeypairArrayOutput values.
// You can construct a concrete instance of `KeypairArrayInput` via:
//
//	KeypairArray{ KeypairArgs{...} }
type KeypairArrayInput interface {
	pulumi.Input

	ToKeypairArrayOutput() KeypairArrayOutput
	ToKeypairArrayOutputWithContext(context.Context) KeypairArrayOutput
}

type KeypairArray []KeypairInput

func (KeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (i KeypairArray) ToKeypairArrayOutput() KeypairArrayOutput {
	return i.ToKeypairArrayOutputWithContext(context.Background())
}

func (i KeypairArray) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairArrayOutput)
}

// KeypairMapInput is an input type that accepts KeypairMap and KeypairMapOutput values.
// You can construct a concrete instance of `KeypairMapInput` via:
//
//	KeypairMap{ "key": KeypairArgs{...} }
type KeypairMapInput interface {
	pulumi.Input

	ToKeypairMapOutput() KeypairMapOutput
	ToKeypairMapOutputWithContext(context.Context) KeypairMapOutput
}

type KeypairMap map[string]KeypairInput

func (KeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (i KeypairMap) ToKeypairMapOutput() KeypairMapOutput {
	return i.ToKeypairMapOutputWithContext(context.Background())
}

func (i KeypairMap) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairMapOutput)
}

type KeypairOutput struct{ *pulumi.OutputState }

func (KeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (o KeypairOutput) ToKeypairOutput() KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return o
}

// The key pair creation time.
func (o KeypairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of key pair.
func (o KeypairOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies encryption mode if manages the private key by HuaweiCloud.
// The options are as follows:
// - **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
// - **kms**: KMS encryption mode.
func (o KeypairOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

// Fingerprint information about an key pair.
func (o KeypairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Whether the private key is managed by HuaweiCloud.
func (o KeypairOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Keypair) pulumi.BoolOutput { return v.IsManaged }).(pulumi.BoolOutput)
}

// Specifies the path of the created private key.
// The private key file (**.pem**) is created only after the resource is created.
// Changing this parameter will create a new resource.
func (o KeypairOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.KeyFile }).(pulumi.StringOutput)
}

// Specifies the KMS key name to encrypt private keys.
// It's mandatory when the `encryptionType` is `kms`. Changing this parameter will create a new resource.
func (o KeypairOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Specifies a unique name for the keypair. The name can contain a maximum of 64
// characters, including letters, digits, underscores (_) and hyphens (-).
// Changing this parameter will create a new resource.
func (o KeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the imported OpenSSH-formatted public key.
// Changing this parameter will create a new resource.
func (o KeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Specifies the region in which to create the keypair resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o KeypairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the scope of key pair. The options are as follows:
// - **account**: Tenant-level, available to all users under the same account.
// - **user**: User-level, only available to that user.
func (o KeypairOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type KeypairArrayOutput struct{ *pulumi.OutputState }

func (KeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (o KeypairArrayOutput) ToKeypairArrayOutput() KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) Index(i pulumi.IntInput) KeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].([]*Keypair)[vs[1].(int)]
	}).(KeypairOutput)
}

type KeypairMapOutput struct{ *pulumi.OutputState }

func (KeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (o KeypairMapOutput) ToKeypairMapOutput() KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) MapIndex(k pulumi.StringInput) KeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].(map[string]*Keypair)[vs[1].(string)]
	}).(KeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairArrayInput)(nil)).Elem(), KeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairMapInput)(nil)).Elem(), KeypairMap{})
	pulumi.RegisterOutputType(KeypairOutput{})
	pulumi.RegisterOutputType(KeypairArrayOutput{})
	pulumi.RegisterOutputType(KeypairMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages CSMS(Cloud Secret Management Service) secrets within HuaweiCloud.
//
// ## Example Usage
// ### Encrypt Plaintext
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dew.NewSecret(ctx, "test1", &Dew.SecretArgs{
//				SecretText: pulumi.String("this is a password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Encrypt JSON Data
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"username": "admin",
//				"password": "123456",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = Dew.NewSecret(ctx, "test2", &Dew.SecretArgs{
//				SecretText: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Encrypt String Binary
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			secretBinary := cfg.RequireObject("secretBinary")
//			_, err := Dew.NewSecret(ctx, "test3", &Dew.SecretArgs{
//				SecretBinary: pulumi.Any(secretBinary),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CSMS secret can be imported using the ID and the name of secret, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Dew/secret:Secret test <id>/<name>
//
// ```
type Secret struct {
	pulumi.CustomResourceState

	// Time when the CSMS secrets created, in UTC format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the description of a secret.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the enterprise project ID to which the secret belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the event list associated with the secret.
	// Currently, only one event can be associated.
	EventSubscriptions pulumi.StringPtrOutput `pulumi:"eventSubscriptions"`
	// Specifies the expiration time of a secret, `expireTime` can only be edited
	// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
	// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
	ExpireTime pulumi.IntOutput    `pulumi:"expireTime"`
	KmsKeyId   pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The latest version id.
	LatestVersion pulumi.StringOutput `pulumi:"latestVersion"`
	// Specifies the secret name. The maximum length is 64 characters.
	// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the CSMS secrets.
	// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
	// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
	SecretBinary pulumi.StringPtrOutput `pulumi:"secretBinary"`
	// The secret ID in UUID format.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
	// it in the initial version of the secret. The maximum size is 32 KB.
	SecretText pulumi.StringPtrOutput `pulumi:"secretText"`
	// Specifies the type of the secret.
	// Currently, only supported **COMMON**. The default value is **COMMON**.
	SecretType pulumi.StringOutput `pulumi:"secretType"`
	// The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the tags of a CSMS secrets, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The secret version status list.
	VersionStages pulumi.StringArrayOutput `pulumi:"versionStages"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		args = &SecretArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("huaweicloud:Dew/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("huaweicloud:Dew/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// Time when the CSMS secrets created, in UTC format.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the description of a secret.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the secret belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the event list associated with the secret.
	// Currently, only one event can be associated.
	EventSubscriptions *string `pulumi:"eventSubscriptions"`
	// Specifies the expiration time of a secret, `expireTime` can only be edited
	// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
	// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
	ExpireTime *int    `pulumi:"expireTime"`
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	// The latest version id.
	LatestVersion *string `pulumi:"latestVersion"`
	// Specifies the secret name. The maximum length is 64 characters.
	// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the CSMS secrets.
	// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
	// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
	SecretBinary *string `pulumi:"secretBinary"`
	// The secret ID in UUID format.
	SecretId *string `pulumi:"secretId"`
	// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
	// it in the initial version of the secret. The maximum size is 32 KB.
	SecretText *string `pulumi:"secretText"`
	// Specifies the type of the secret.
	// Currently, only supported **COMMON**. The default value is **COMMON**.
	SecretType *string `pulumi:"secretType"`
	// The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
	Status *string `pulumi:"status"`
	// Specifies the tags of a CSMS secrets, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// The secret version status list.
	VersionStages []string `pulumi:"versionStages"`
}

type SecretState struct {
	// Time when the CSMS secrets created, in UTC format.
	CreateTime pulumi.StringPtrInput
	// Specifies the description of a secret.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the secret belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the event list associated with the secret.
	// Currently, only one event can be associated.
	EventSubscriptions pulumi.StringPtrInput
	// Specifies the expiration time of a secret, `expireTime` can only be edited
	// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
	// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
	ExpireTime pulumi.IntPtrInput
	KmsKeyId   pulumi.StringPtrInput
	// The latest version id.
	LatestVersion pulumi.StringPtrInput
	// Specifies the secret name. The maximum length is 64 characters.
	// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the CSMS secrets.
	// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
	// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
	SecretBinary pulumi.StringPtrInput
	// The secret ID in UUID format.
	SecretId pulumi.StringPtrInput
	// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
	// it in the initial version of the secret. The maximum size is 32 KB.
	SecretText pulumi.StringPtrInput
	// Specifies the type of the secret.
	// Currently, only supported **COMMON**. The default value is **COMMON**.
	SecretType pulumi.StringPtrInput
	// The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
	Status pulumi.StringPtrInput
	// Specifies the tags of a CSMS secrets, key/value pair format.
	Tags pulumi.StringMapInput
	// The secret version status list.
	VersionStages pulumi.StringArrayInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// Specifies the description of a secret.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the secret belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the event list associated with the secret.
	// Currently, only one event can be associated.
	EventSubscriptions *string `pulumi:"eventSubscriptions"`
	// Specifies the expiration time of a secret, `expireTime` can only be edited
	// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
	// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
	ExpireTime *int    `pulumi:"expireTime"`
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	// Specifies the secret name. The maximum length is 64 characters.
	// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the CSMS secrets.
	// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
	// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
	SecretBinary *string `pulumi:"secretBinary"`
	// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
	// it in the initial version of the secret. The maximum size is 32 KB.
	SecretText *string `pulumi:"secretText"`
	// Specifies the type of the secret.
	// Currently, only supported **COMMON**. The default value is **COMMON**.
	SecretType *string `pulumi:"secretType"`
	// Specifies the tags of a CSMS secrets, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// Specifies the description of a secret.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the secret belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the event list associated with the secret.
	// Currently, only one event can be associated.
	EventSubscriptions pulumi.StringPtrInput
	// Specifies the expiration time of a secret, `expireTime` can only be edited
	// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
	// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
	ExpireTime pulumi.IntPtrInput
	KmsKeyId   pulumi.StringPtrInput
	// Specifies the secret name. The maximum length is 64 characters.
	// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the CSMS secrets.
	// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
	// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
	SecretBinary pulumi.StringPtrInput
	// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
	// it in the initial version of the secret. The maximum size is 32 KB.
	SecretText pulumi.StringPtrInput
	// Specifies the type of the secret.
	// Currently, only supported **COMMON**. The default value is **COMMON**.
	SecretType pulumi.StringPtrInput
	// Specifies the tags of a CSMS secrets, key/value pair format.
	Tags pulumi.StringMapInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// Time when the CSMS secrets created, in UTC format.
func (o SecretOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the description of a secret.
func (o SecretOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID to which the secret belongs.
// If omitted, the default enterprise project will be used.
// If the enterprise project function is not enabled, ignore this parameter.
func (o SecretOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the event list associated with the secret.
// Currently, only one event can be associated.
func (o SecretOutput) EventSubscriptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.EventSubscriptions }).(pulumi.StringPtrOutput)
}

// Specifies the expiration time of a secret, `expireTime` can only be edited
// when `status` is **ENABLED**. The time is in the format of timestamp, that is, the offset milliseconds
// from 1970-01-01 00:00:00 UTC to the specified time. The time must be greater than the current time.
func (o SecretOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Secret) pulumi.IntOutput { return v.ExpireTime }).(pulumi.IntOutput)
}

func (o SecretOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The latest version id.
func (o SecretOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.LatestVersion }).(pulumi.StringOutput)
}

// Specifies the secret name. The maximum length is 64 characters.
// Only digits, letters, underscores(_), hyphens(-) and dots(.) are allowed.
func (o SecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the CSMS secrets.
// If omitted, the provider-level region will be used. Changing this setting will create a new resource.
func (o SecretOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the plaintext of a binary secret encoded using Base64. CSMS encrypts
// the plaintext and stores it in the initial version of the secret. The maximum size is 32 KB.
func (o SecretOutput) SecretBinary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.SecretBinary }).(pulumi.StringPtrOutput)
}

// The secret ID in UUID format.
func (o SecretOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// Specifies the plaintext of a text secret. CSMS encrypts the plaintext and stores
// it in the initial version of the secret. The maximum size is 32 KB.
func (o SecretOutput) SecretText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.SecretText }).(pulumi.StringPtrOutput)
}

// Specifies the type of the secret.
// Currently, only supported **COMMON**. The default value is **COMMON**.
func (o SecretOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretType }).(pulumi.StringOutput)
}

// The CSMS secret status. Values can be: **ENABLED**, **DISABLED**, **PENDING_DELETE** and **FROZEN**.
func (o SecretOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the tags of a CSMS secrets, key/value pair format.
func (o SecretOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The secret version status list.
func (o SecretOutput) VersionStages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringArrayOutput { return v.VersionStages }).(pulumi.StringArrayOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a KMS key resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			keyAlias := cfg.RequireObject("keyAlias")
//			_, err := Dew.NewKey(ctx, "test", &Dew.KeyArgs{
//				KeyAlias:    pulumi.Any(keyAlias),
//				PendingDays: pulumi.String("7"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The KMS Key resource can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Dew/key:Key test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`pending_days` and `is_enabled`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also you can ignore changes as below. hcl resource "huaweicloud_kms_key" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	pending_days, is_enabled
//
//	]
//
//	} }
type Key struct {
	pulumi.CustomResourceState

	// The creation time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The default master Key identifier.
	// The value can be **1** (indicated the KMS key is default master key) or
	// **0** (indicated the KMS key is not default master key).
	DefaultKeyFlag pulumi.StringOutput `pulumi:"defaultKeyFlag"`
	// The ID of the user account.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Specifies the enterprise project ID to which the KMS key belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The expiration time of the KMS key material.
	// The value is a time stamp, e.g. **1723272402000**.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Specifies whether the KMS key is enabled.
	// The default value is **true**.
	// This parameter is not supported when creating an external import key for the first time.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Specifies the generation algorithm of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **AES_256**. The valid values are as follows:
	// + **AES_256**
	// + **SM4**
	// + **RSA_2048**
	// + **RSA_3072**
	// + **RSA_4096**
	// + **EC_P256**
	// + **EC_P384**
	// + **SM2**
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// Specifies the alias name of the KMS key.
	// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
	// The valid length is limited from `1` to `255` characters.
	// The name must be different from the alias of the default master key.
	KeyAlias pulumi.StringOutput `pulumi:"keyAlias"`
	// Specifies the description of the KMS key.
	KeyDescription pulumi.StringPtrOutput `pulumi:"keyDescription"`
	// The ID of the KMS key.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The current status of the KMS key.
	// The valid values are as follows:
	// + **1**: To be activated.
	// + **2**: Enabled.
	// + **3**: Disabled.
	// + **4**: Pending deletion.
	// + **5**: Pending import.
	KeyState pulumi.StringOutput `pulumi:"keyState"`
	// Specifies the KMS key usage.
	// Changing this parameter will create a new resource.
	// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
	KeyUsage pulumi.StringOutput `pulumi:"keyUsage"`
	// Specifies the keystore ID to which the KMS key belongs.
	// Changing this parameter will create a new resource.
	// The KMS default keystore is used by default.
	KeystoreId pulumi.StringOutput `pulumi:"keystoreId"`
	// Specifies the source of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **kms**. The valid values are as follows:
	// + **kms**: The key is generated by KMS.
	// + **external**: The key is external imported.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// Specifies the number of days after which the KMS key is scheduled to be deleted.
	// The valid value range from `7` to `1,096`.
	PendingDays pulumi.StringPtrOutput `pulumi:"pendingDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether the KMS key rotation is enabled.
	// The default value is **false**.
	RotationEnabled pulumi.BoolPtrOutput `pulumi:"rotationEnabled"`
	// Specifies the KMS key rotation period.
	// The valid value range from `30` to `365`. The default value is `365`.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The total number of key rotations.
	RotationNumber pulumi.IntOutput `pulumi:"rotationNumber"`
	// The scheduled deletion time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	ScheduledDeletionDate pulumi.StringOutput `pulumi:"scheduledDeletionDate"`
	// Specifies the key/value pairs to associate with the KMS key.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyAlias == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlias'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("huaweicloud:Dew/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("huaweicloud:Dew/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// The creation time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	CreationDate *string `pulumi:"creationDate"`
	// The default master Key identifier.
	// The value can be **1** (indicated the KMS key is default master key) or
	// **0** (indicated the KMS key is not default master key).
	DefaultKeyFlag *string `pulumi:"defaultKeyFlag"`
	// The ID of the user account.
	DomainId *string `pulumi:"domainId"`
	// Specifies the enterprise project ID to which the KMS key belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The expiration time of the KMS key material.
	// The value is a time stamp, e.g. **1723272402000**.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Specifies whether the KMS key is enabled.
	// The default value is **true**.
	// This parameter is not supported when creating an external import key for the first time.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Specifies the generation algorithm of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **AES_256**. The valid values are as follows:
	// + **AES_256**
	// + **SM4**
	// + **RSA_2048**
	// + **RSA_3072**
	// + **RSA_4096**
	// + **EC_P256**
	// + **EC_P384**
	// + **SM2**
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// Specifies the alias name of the KMS key.
	// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
	// The valid length is limited from `1` to `255` characters.
	// The name must be different from the alias of the default master key.
	KeyAlias *string `pulumi:"keyAlias"`
	// Specifies the description of the KMS key.
	KeyDescription *string `pulumi:"keyDescription"`
	// The ID of the KMS key.
	KeyId *string `pulumi:"keyId"`
	// The current status of the KMS key.
	// The valid values are as follows:
	// + **1**: To be activated.
	// + **2**: Enabled.
	// + **3**: Disabled.
	// + **4**: Pending deletion.
	// + **5**: Pending import.
	KeyState *string `pulumi:"keyState"`
	// Specifies the KMS key usage.
	// Changing this parameter will create a new resource.
	// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
	KeyUsage *string `pulumi:"keyUsage"`
	// Specifies the keystore ID to which the KMS key belongs.
	// Changing this parameter will create a new resource.
	// The KMS default keystore is used by default.
	KeystoreId *string `pulumi:"keystoreId"`
	// Specifies the source of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **kms**. The valid values are as follows:
	// + **kms**: The key is generated by KMS.
	// + **external**: The key is external imported.
	Origin *string `pulumi:"origin"`
	// Specifies the number of days after which the KMS key is scheduled to be deleted.
	// The valid value range from `7` to `1,096`.
	PendingDays *string `pulumi:"pendingDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies whether the KMS key rotation is enabled.
	// The default value is **false**.
	RotationEnabled *bool `pulumi:"rotationEnabled"`
	// Specifies the KMS key rotation period.
	// The valid value range from `30` to `365`. The default value is `365`.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The total number of key rotations.
	RotationNumber *int `pulumi:"rotationNumber"`
	// The scheduled deletion time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	ScheduledDeletionDate *string `pulumi:"scheduledDeletionDate"`
	// Specifies the key/value pairs to associate with the KMS key.
	Tags map[string]string `pulumi:"tags"`
}

type KeyState struct {
	// The creation time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	CreationDate pulumi.StringPtrInput
	// The default master Key identifier.
	// The value can be **1** (indicated the KMS key is default master key) or
	// **0** (indicated the KMS key is not default master key).
	DefaultKeyFlag pulumi.StringPtrInput
	// The ID of the user account.
	DomainId pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the KMS key belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringPtrInput
	// The expiration time of the KMS key material.
	// The value is a time stamp, e.g. **1723272402000**.
	ExpirationTime pulumi.StringPtrInput
	// Specifies whether the KMS key is enabled.
	// The default value is **true**.
	// This parameter is not supported when creating an external import key for the first time.
	IsEnabled pulumi.BoolPtrInput
	// Specifies the generation algorithm of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **AES_256**. The valid values are as follows:
	// + **AES_256**
	// + **SM4**
	// + **RSA_2048**
	// + **RSA_3072**
	// + **RSA_4096**
	// + **EC_P256**
	// + **EC_P384**
	// + **SM2**
	KeyAlgorithm pulumi.StringPtrInput
	// Specifies the alias name of the KMS key.
	// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
	// The valid length is limited from `1` to `255` characters.
	// The name must be different from the alias of the default master key.
	KeyAlias pulumi.StringPtrInput
	// Specifies the description of the KMS key.
	KeyDescription pulumi.StringPtrInput
	// The ID of the KMS key.
	KeyId pulumi.StringPtrInput
	// The current status of the KMS key.
	// The valid values are as follows:
	// + **1**: To be activated.
	// + **2**: Enabled.
	// + **3**: Disabled.
	// + **4**: Pending deletion.
	// + **5**: Pending import.
	KeyState pulumi.StringPtrInput
	// Specifies the KMS key usage.
	// Changing this parameter will create a new resource.
	// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
	KeyUsage pulumi.StringPtrInput
	// Specifies the keystore ID to which the KMS key belongs.
	// Changing this parameter will create a new resource.
	// The KMS default keystore is used by default.
	KeystoreId pulumi.StringPtrInput
	// Specifies the source of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **kms**. The valid values are as follows:
	// + **kms**: The key is generated by KMS.
	// + **external**: The key is external imported.
	Origin pulumi.StringPtrInput
	// Specifies the number of days after which the KMS key is scheduled to be deleted.
	// The valid value range from `7` to `1,096`.
	PendingDays pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies whether the KMS key rotation is enabled.
	// The default value is **false**.
	RotationEnabled pulumi.BoolPtrInput
	// Specifies the KMS key rotation period.
	// The valid value range from `30` to `365`. The default value is `365`.
	RotationInterval pulumi.IntPtrInput
	// The total number of key rotations.
	RotationNumber pulumi.IntPtrInput
	// The scheduled deletion time of the KMS key.
	// The value is a time stamp, e.g. **1723272402000**.
	ScheduledDeletionDate pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the KMS key.
	Tags pulumi.StringMapInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// Specifies the enterprise project ID to which the KMS key belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether the KMS key is enabled.
	// The default value is **true**.
	// This parameter is not supported when creating an external import key for the first time.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Specifies the generation algorithm of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **AES_256**. The valid values are as follows:
	// + **AES_256**
	// + **SM4**
	// + **RSA_2048**
	// + **RSA_3072**
	// + **RSA_4096**
	// + **EC_P256**
	// + **EC_P384**
	// + **SM2**
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// Specifies the alias name of the KMS key.
	// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
	// The valid length is limited from `1` to `255` characters.
	// The name must be different from the alias of the default master key.
	KeyAlias string `pulumi:"keyAlias"`
	// Specifies the description of the KMS key.
	KeyDescription *string `pulumi:"keyDescription"`
	// Specifies the KMS key usage.
	// Changing this parameter will create a new resource.
	// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
	KeyUsage *string `pulumi:"keyUsage"`
	// Specifies the keystore ID to which the KMS key belongs.
	// Changing this parameter will create a new resource.
	// The KMS default keystore is used by default.
	KeystoreId *string `pulumi:"keystoreId"`
	// Specifies the source of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **kms**. The valid values are as follows:
	// + **kms**: The key is generated by KMS.
	// + **external**: The key is external imported.
	Origin *string `pulumi:"origin"`
	// Specifies the number of days after which the KMS key is scheduled to be deleted.
	// The valid value range from `7` to `1,096`.
	PendingDays *string `pulumi:"pendingDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies whether the KMS key rotation is enabled.
	// The default value is **false**.
	RotationEnabled *bool `pulumi:"rotationEnabled"`
	// Specifies the KMS key rotation period.
	// The valid value range from `30` to `365`. The default value is `365`.
	RotationInterval *int `pulumi:"rotationInterval"`
	// Specifies the key/value pairs to associate with the KMS key.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// Specifies the enterprise project ID to which the KMS key belongs.
	// If omitted, the default enterprise project will be used.
	// If the enterprise project function is not enabled, ignore this parameter.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether the KMS key is enabled.
	// The default value is **true**.
	// This parameter is not supported when creating an external import key for the first time.
	IsEnabled pulumi.BoolPtrInput
	// Specifies the generation algorithm of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **AES_256**. The valid values are as follows:
	// + **AES_256**
	// + **SM4**
	// + **RSA_2048**
	// + **RSA_3072**
	// + **RSA_4096**
	// + **EC_P256**
	// + **EC_P384**
	// + **SM2**
	KeyAlgorithm pulumi.StringPtrInput
	// Specifies the alias name of the KMS key.
	// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
	// The valid length is limited from `1` to `255` characters.
	// The name must be different from the alias of the default master key.
	KeyAlias pulumi.StringInput
	// Specifies the description of the KMS key.
	KeyDescription pulumi.StringPtrInput
	// Specifies the KMS key usage.
	// Changing this parameter will create a new resource.
	// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
	KeyUsage pulumi.StringPtrInput
	// Specifies the keystore ID to which the KMS key belongs.
	// Changing this parameter will create a new resource.
	// The KMS default keystore is used by default.
	KeystoreId pulumi.StringPtrInput
	// Specifies the source of the KMS key.
	// Changing this parameter will create a new resource.
	// The default value is **kms**. The valid values are as follows:
	// + **kms**: The key is generated by KMS.
	// + **external**: The key is external imported.
	Origin pulumi.StringPtrInput
	// Specifies the number of days after which the KMS key is scheduled to be deleted.
	// The valid value range from `7` to `1,096`.
	PendingDays pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies whether the KMS key rotation is enabled.
	// The default value is **false**.
	RotationEnabled pulumi.BoolPtrInput
	// Specifies the KMS key rotation period.
	// The valid value range from `30` to `365`. The default value is `365`.
	RotationInterval pulumi.IntPtrInput
	// Specifies the key/value pairs to associate with the KMS key.
	Tags pulumi.StringMapInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

// KeyArrayInput is an input type that accepts KeyArray and KeyArrayOutput values.
// You can construct a concrete instance of `KeyArrayInput` via:
//
//	KeyArray{ KeyArgs{...} }
type KeyArrayInput interface {
	pulumi.Input

	ToKeyArrayOutput() KeyArrayOutput
	ToKeyArrayOutputWithContext(context.Context) KeyArrayOutput
}

type KeyArray []KeyInput

func (KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (i KeyArray) ToKeyArrayOutput() KeyArrayOutput {
	return i.ToKeyArrayOutputWithContext(context.Background())
}

func (i KeyArray) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArrayOutput)
}

// KeyMapInput is an input type that accepts KeyMap and KeyMapOutput values.
// You can construct a concrete instance of `KeyMapInput` via:
//
//	KeyMap{ "key": KeyArgs{...} }
type KeyMapInput interface {
	pulumi.Input

	ToKeyMapOutput() KeyMapOutput
	ToKeyMapOutputWithContext(context.Context) KeyMapOutput
}

type KeyMap map[string]KeyInput

func (KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (i KeyMap) ToKeyMapOutput() KeyMapOutput {
	return i.ToKeyMapOutputWithContext(context.Background())
}

func (i KeyMap) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMapOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

// The creation time of the KMS key.
// The value is a time stamp, e.g. **1723272402000**.
func (o KeyOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The default master Key identifier.
// The value can be **1** (indicated the KMS key is default master key) or
// **0** (indicated the KMS key is not default master key).
func (o KeyOutput) DefaultKeyFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DefaultKeyFlag }).(pulumi.StringOutput)
}

// The ID of the user account.
func (o KeyOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the KMS key belongs.
// If omitted, the default enterprise project will be used.
// If the enterprise project function is not enabled, ignore this parameter.
func (o KeyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The expiration time of the KMS key material.
// The value is a time stamp, e.g. **1723272402000**.
func (o KeyOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Specifies whether the KMS key is enabled.
// The default value is **true**.
// This parameter is not supported when creating an external import key for the first time.
func (o KeyOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the generation algorithm of the KMS key.
// Changing this parameter will create a new resource.
// The default value is **AES_256**. The valid values are as follows:
// + **AES_256**
// + **SM4**
// + **RSA_2048**
// + **RSA_3072**
// + **RSA_4096**
// + **EC_P256**
// + **EC_P384**
// + **SM2**
func (o KeyOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// Specifies the alias name of the KMS key.
// Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
// The valid length is limited from `1` to `255` characters.
// The name must be different from the alias of the default master key.
func (o KeyOutput) KeyAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyAlias }).(pulumi.StringOutput)
}

// Specifies the description of the KMS key.
func (o KeyOutput) KeyDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.KeyDescription }).(pulumi.StringPtrOutput)
}

// The ID of the KMS key.
func (o KeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The current status of the KMS key.
// The valid values are as follows:
// + **1**: To be activated.
// + **2**: Enabled.
// + **3**: Disabled.
// + **4**: Pending deletion.
// + **5**: Pending import.
func (o KeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

// Specifies the KMS key usage.
// Changing this parameter will create a new resource.
// The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
func (o KeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyUsage }).(pulumi.StringOutput)
}

// Specifies the keystore ID to which the KMS key belongs.
// Changing this parameter will create a new resource.
// The KMS default keystore is used by default.
func (o KeyOutput) KeystoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeystoreId }).(pulumi.StringOutput)
}

// Specifies the source of the KMS key.
// Changing this parameter will create a new resource.
// The default value is **kms**. The valid values are as follows:
// + **kms**: The key is generated by KMS.
// + **external**: The key is external imported.
func (o KeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// Specifies the number of days after which the KMS key is scheduled to be deleted.
// The valid value range from `7` to `1,096`.
func (o KeyOutput) PendingDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.PendingDays }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o KeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether the KMS key rotation is enabled.
// The default value is **false**.
func (o KeyOutput) RotationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolPtrOutput { return v.RotationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the KMS key rotation period.
// The valid value range from `30` to `365`. The default value is `365`.
func (o KeyOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The total number of key rotations.
func (o KeyOutput) RotationNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RotationNumber }).(pulumi.IntOutput)
}

// The scheduled deletion time of the KMS key.
// The value is a time stamp, e.g. **1723272402000**.
func (o KeyOutput) ScheduledDeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ScheduledDeletionDate }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the KMS key.
func (o KeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Key) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type KeyArrayOutput struct{ *pulumi.OutputState }

func (KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (o KeyArrayOutput) ToKeyArrayOutput() KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) Index(i pulumi.IntInput) KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Key {
		return vs[0].([]*Key)[vs[1].(int)]
	}).(KeyOutput)
}

type KeyMapOutput struct{ *pulumi.OutputState }

func (KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (o KeyMapOutput) ToKeyMapOutput() KeyMapOutput {
	return o
}

func (o KeyMapOutput) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return o
}

func (o KeyMapOutput) MapIndex(k pulumi.StringInput) KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Key {
		return vs[0].(map[string]*Key)[vs[1].(string)]
	}).(KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArrayInput)(nil)).Elem(), KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMapInput)(nil)).Elem(), KeyMap{})
	pulumi.RegisterOutputType(KeyOutput{})
	pulumi.RegisterOutputType(KeyArrayOutput{})
	pulumi.RegisterOutputType(KeyMapOutput{})
}

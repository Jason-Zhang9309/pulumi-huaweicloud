// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaussdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages GaussDB mysql proxy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/GaussDB"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := GaussDB.NewMysqlProxy(ctx, "test", &GaussDB.MysqlProxyArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Flavor:     pulumi.String("gaussdb.proxy.xlarge.x86.2"),
//				NodeNum:    pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The GaussDB MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:GaussDB/mysqlProxy:MysqlProxy test <instance_id>/<id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to the attribute missing from the API response. The missing attribute is`new_node_weight`, `proxy_mode`, `readonly_nodes_weight` and `parameters`. It is generally recommended running `terraform plan` after importing a GaussDB MySQL proxy. You can then decide if changes should be applied to the GaussDB MySQL proxy, or the resource definition should be updated to align with the GaussDB MySQL proxy. Also you can ignore changes as below. hcl resource "huaweicloud_gaussdb_mysql_proxy" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	new_node_weight, proxy_mode, readonly_nodes_weight, parameters,
//
//	]
//
//	} }
type MysqlProxy struct {
	pulumi.CustomResourceState

	// Specifies the list of IP addresses that control access. A maximum of
	// `300` IP addresses or CIDR blocks can be added.
	// The accessControlIpList structure is documented below.
	AccessControlIpLists MysqlProxyAccessControlIpListArrayOutput `pulumi:"accessControlIpLists"`
	// Specifies the access control mode. Value options:
	// + **white**: indicates the whitelist.
	// + **black**: indicates the blacklist.
	AccessControlType pulumi.StringOutput `pulumi:"accessControlType"`
	// Indicates the address of the proxy.
	Address pulumi.StringOutput `pulumi:"address"`
	// Indicates whether the proxy can be upgrade.
	CanUpgrade pulumi.BoolOutput `pulumi:"canUpgrade"`
	// Specifies the connection pool type. Value options:
	// + **CLOSED**: The connection pool is not used.
	// + **SESSION**: The session-level connection pool is used.
	ConnectionPoolType pulumi.StringOutput `pulumi:"connectionPoolType"`
	// Specifies the consistency mode of the proxy. Value options:
	// + **session**: session consistency.
	// + **global**: global consistency.
	// + **eventual**: eventual consistency.
	ConsistenceMode pulumi.StringOutput `pulumi:"consistenceMode"`
	// Indicates the current version of the proxy.
	CurrentVersion pulumi.StringOutput `pulumi:"currentVersion"`
	// Specifies the flavor of the proxy. Changing this parameter will create a new
	// resource.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightOutput `pulumi:"masterNodeWeight"`
	// Specifies whether new nodes are automatically associate with proxy.
	// Value options:
	// + **ON**: New nodes are automatically associate with proxy.
	// + **OFF**: New nodes are not automatically associate with proxy.
	NewNodeAutoAddStatus pulumi.StringOutput `pulumi:"newNodeAutoAddStatus"`
	// Specifies the read weight of the new node.
	// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
	// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
	NewNodeWeight pulumi.IntPtrOutput `pulumi:"newNodeWeight"`
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntOutput `pulumi:"nodeNum"`
	// Indicates the node information of the proxy.
	// The nodes structure is documented below.
	Nodes MysqlProxyNodeArrayOutput `pulumi:"nodes"`
	// Specifies whether to enable access control.
	OpenAccessControl pulumi.BoolOutput `pulumi:"openAccessControl"`
	// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
	// The parameters structure is documented below.
	Parameters MysqlProxyParameterArrayOutput `pulumi:"parameters"`
	// Specifies the port of the proxy.
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// + **readwrite**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringPtrOutput `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name consists of `4` to `64` characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName pulumi.StringOutput `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayOutput `pulumi:"readonlyNodesWeights"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the routing policy of the proxy. Changing this creates a new
	// resource. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntOutput `pulumi:"routeMode"`
	// Specifies the network ID of a subnet. Changing this creates a new resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Indicates whether the proxy supports session-level connection pool.
	SwitchConnectionPoolTypeEnabled pulumi.BoolOutput `pulumi:"switchConnectionPoolTypeEnabled"`
	// Specifies whether the proxy transaction splitting is enabled. Value options:
	// + **ON**: Transaction splitting is enabled.
	// + **OFF**: Transaction splitting is disabled.
	TransactionSplit pulumi.StringOutput `pulumi:"transactionSplit"`
}

// NewMysqlProxy registers a new resource with the given unique name, arguments, and options.
func NewMysqlProxy(ctx *pulumi.Context,
	name string, args *MysqlProxyArgs, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeNum == nil {
		return nil, errors.New("invalid value for required argument 'NodeNum'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MysqlProxy
	err := ctx.RegisterResource("huaweicloud:GaussDB/mysqlProxy:MysqlProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlProxy gets an existing MysqlProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlProxyState, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	var resource MysqlProxy
	err := ctx.ReadResource("huaweicloud:GaussDB/mysqlProxy:MysqlProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlProxy resources.
type mysqlProxyState struct {
	// Specifies the list of IP addresses that control access. A maximum of
	// `300` IP addresses or CIDR blocks can be added.
	// The accessControlIpList structure is documented below.
	AccessControlIpLists []MysqlProxyAccessControlIpList `pulumi:"accessControlIpLists"`
	// Specifies the access control mode. Value options:
	// + **white**: indicates the whitelist.
	// + **black**: indicates the blacklist.
	AccessControlType *string `pulumi:"accessControlType"`
	// Indicates the address of the proxy.
	Address *string `pulumi:"address"`
	// Indicates whether the proxy can be upgrade.
	CanUpgrade *bool `pulumi:"canUpgrade"`
	// Specifies the connection pool type. Value options:
	// + **CLOSED**: The connection pool is not used.
	// + **SESSION**: The session-level connection pool is used.
	ConnectionPoolType *string `pulumi:"connectionPoolType"`
	// Specifies the consistency mode of the proxy. Value options:
	// + **session**: session consistency.
	// + **global**: global consistency.
	// + **eventual**: eventual consistency.
	ConsistenceMode *string `pulumi:"consistenceMode"`
	// Indicates the current version of the proxy.
	CurrentVersion *string `pulumi:"currentVersion"`
	// Specifies the flavor of the proxy. Changing this parameter will create a new
	// resource.
	Flavor *string `pulumi:"flavor"`
	// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight *MysqlProxyMasterNodeWeight `pulumi:"masterNodeWeight"`
	// Specifies whether new nodes are automatically associate with proxy.
	// Value options:
	// + **ON**: New nodes are automatically associate with proxy.
	// + **OFF**: New nodes are not automatically associate with proxy.
	NewNodeAutoAddStatus *string `pulumi:"newNodeAutoAddStatus"`
	// Specifies the read weight of the new node.
	// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
	// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
	NewNodeWeight *int `pulumi:"newNodeWeight"`
	// Specifies the node count of the proxy.
	NodeNum *int `pulumi:"nodeNum"`
	// Indicates the node information of the proxy.
	// The nodes structure is documented below.
	Nodes []MysqlProxyNode `pulumi:"nodes"`
	// Specifies whether to enable access control.
	OpenAccessControl *bool `pulumi:"openAccessControl"`
	// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
	// The parameters structure is documented below.
	Parameters []MysqlProxyParameter `pulumi:"parameters"`
	// Specifies the port of the proxy.
	Port *int `pulumi:"port"`
	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// + **readwrite**: read and write.
	// + **readonly**: read-only.
	ProxyMode *string `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name consists of `4` to `64` characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName *string `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights []MysqlProxyReadonlyNodesWeight `pulumi:"readonlyNodesWeights"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the routing policy of the proxy. Changing this creates a new
	// resource. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode *int `pulumi:"routeMode"`
	// Specifies the network ID of a subnet. Changing this creates a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Indicates whether the proxy supports session-level connection pool.
	SwitchConnectionPoolTypeEnabled *bool `pulumi:"switchConnectionPoolTypeEnabled"`
	// Specifies whether the proxy transaction splitting is enabled. Value options:
	// + **ON**: Transaction splitting is enabled.
	// + **OFF**: Transaction splitting is disabled.
	TransactionSplit *string `pulumi:"transactionSplit"`
}

type MysqlProxyState struct {
	// Specifies the list of IP addresses that control access. A maximum of
	// `300` IP addresses or CIDR blocks can be added.
	// The accessControlIpList structure is documented below.
	AccessControlIpLists MysqlProxyAccessControlIpListArrayInput
	// Specifies the access control mode. Value options:
	// + **white**: indicates the whitelist.
	// + **black**: indicates the blacklist.
	AccessControlType pulumi.StringPtrInput
	// Indicates the address of the proxy.
	Address pulumi.StringPtrInput
	// Indicates whether the proxy can be upgrade.
	CanUpgrade pulumi.BoolPtrInput
	// Specifies the connection pool type. Value options:
	// + **CLOSED**: The connection pool is not used.
	// + **SESSION**: The session-level connection pool is used.
	ConnectionPoolType pulumi.StringPtrInput
	// Specifies the consistency mode of the proxy. Value options:
	// + **session**: session consistency.
	// + **global**: global consistency.
	// + **eventual**: eventual consistency.
	ConsistenceMode pulumi.StringPtrInput
	// Indicates the current version of the proxy.
	CurrentVersion pulumi.StringPtrInput
	// Specifies the flavor of the proxy. Changing this parameter will create a new
	// resource.
	Flavor pulumi.StringPtrInput
	// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightPtrInput
	// Specifies whether new nodes are automatically associate with proxy.
	// Value options:
	// + **ON**: New nodes are automatically associate with proxy.
	// + **OFF**: New nodes are not automatically associate with proxy.
	NewNodeAutoAddStatus pulumi.StringPtrInput
	// Specifies the read weight of the new node.
	// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
	// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
	NewNodeWeight pulumi.IntPtrInput
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntPtrInput
	// Indicates the node information of the proxy.
	// The nodes structure is documented below.
	Nodes MysqlProxyNodeArrayInput
	// Specifies whether to enable access control.
	OpenAccessControl pulumi.BoolPtrInput
	// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
	// The parameters structure is documented below.
	Parameters MysqlProxyParameterArrayInput
	// Specifies the port of the proxy.
	Port pulumi.IntPtrInput
	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// + **readwrite**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringPtrInput
	// Specifies the name of the proxy. The name consists of `4` to `64` characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName pulumi.StringPtrInput
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayInput
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the routing policy of the proxy. Changing this creates a new
	// resource. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntPtrInput
	// Specifies the network ID of a subnet. Changing this creates a new resource.
	SubnetId pulumi.StringPtrInput
	// Indicates whether the proxy supports session-level connection pool.
	SwitchConnectionPoolTypeEnabled pulumi.BoolPtrInput
	// Specifies whether the proxy transaction splitting is enabled. Value options:
	// + **ON**: Transaction splitting is enabled.
	// + **OFF**: Transaction splitting is disabled.
	TransactionSplit pulumi.StringPtrInput
}

func (MysqlProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyState)(nil)).Elem()
}

type mysqlProxyArgs struct {
	// Specifies the list of IP addresses that control access. A maximum of
	// `300` IP addresses or CIDR blocks can be added.
	// The accessControlIpList structure is documented below.
	AccessControlIpLists []MysqlProxyAccessControlIpList `pulumi:"accessControlIpLists"`
	// Specifies the access control mode. Value options:
	// + **white**: indicates the whitelist.
	// + **black**: indicates the blacklist.
	AccessControlType *string `pulumi:"accessControlType"`
	// Specifies the connection pool type. Value options:
	// + **CLOSED**: The connection pool is not used.
	// + **SESSION**: The session-level connection pool is used.
	ConnectionPoolType *string `pulumi:"connectionPoolType"`
	// Specifies the consistency mode of the proxy. Value options:
	// + **session**: session consistency.
	// + **global**: global consistency.
	// + **eventual**: eventual consistency.
	ConsistenceMode *string `pulumi:"consistenceMode"`
	// Specifies the flavor of the proxy. Changing this parameter will create a new
	// resource.
	Flavor string `pulumi:"flavor"`
	// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight *MysqlProxyMasterNodeWeight `pulumi:"masterNodeWeight"`
	// Specifies whether new nodes are automatically associate with proxy.
	// Value options:
	// + **ON**: New nodes are automatically associate with proxy.
	// + **OFF**: New nodes are not automatically associate with proxy.
	NewNodeAutoAddStatus *string `pulumi:"newNodeAutoAddStatus"`
	// Specifies the read weight of the new node.
	// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
	// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
	NewNodeWeight *int `pulumi:"newNodeWeight"`
	// Specifies the node count of the proxy.
	NodeNum int `pulumi:"nodeNum"`
	// Specifies whether to enable access control.
	OpenAccessControl *bool `pulumi:"openAccessControl"`
	// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
	// The parameters structure is documented below.
	Parameters []MysqlProxyParameter `pulumi:"parameters"`
	// Specifies the port of the proxy.
	Port *int `pulumi:"port"`
	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// + **readwrite**: read and write.
	// + **readonly**: read-only.
	ProxyMode *string `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name consists of `4` to `64` characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName *string `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights []MysqlProxyReadonlyNodesWeight `pulumi:"readonlyNodesWeights"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the routing policy of the proxy. Changing this creates a new
	// resource. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode *int `pulumi:"routeMode"`
	// Specifies the network ID of a subnet. Changing this creates a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies whether the proxy transaction splitting is enabled. Value options:
	// + **ON**: Transaction splitting is enabled.
	// + **OFF**: Transaction splitting is disabled.
	TransactionSplit *string `pulumi:"transactionSplit"`
}

// The set of arguments for constructing a MysqlProxy resource.
type MysqlProxyArgs struct {
	// Specifies the list of IP addresses that control access. A maximum of
	// `300` IP addresses or CIDR blocks can be added.
	// The accessControlIpList structure is documented below.
	AccessControlIpLists MysqlProxyAccessControlIpListArrayInput
	// Specifies the access control mode. Value options:
	// + **white**: indicates the whitelist.
	// + **black**: indicates the blacklist.
	AccessControlType pulumi.StringPtrInput
	// Specifies the connection pool type. Value options:
	// + **CLOSED**: The connection pool is not used.
	// + **SESSION**: The session-level connection pool is used.
	ConnectionPoolType pulumi.StringPtrInput
	// Specifies the consistency mode of the proxy. Value options:
	// + **session**: session consistency.
	// + **global**: global consistency.
	// + **eventual**: eventual consistency.
	ConsistenceMode pulumi.StringPtrInput
	// Specifies the flavor of the proxy. Changing this parameter will create a new
	// resource.
	Flavor pulumi.StringInput
	// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightPtrInput
	// Specifies whether new nodes are automatically associate with proxy.
	// Value options:
	// + **ON**: New nodes are automatically associate with proxy.
	// + **OFF**: New nodes are not automatically associate with proxy.
	NewNodeAutoAddStatus pulumi.StringPtrInput
	// Specifies the read weight of the new node.
	// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
	// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
	NewNodeWeight pulumi.IntPtrInput
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntInput
	// Specifies whether to enable access control.
	OpenAccessControl pulumi.BoolPtrInput
	// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
	// The parameters structure is documented below.
	Parameters MysqlProxyParameterArrayInput
	// Specifies the port of the proxy.
	Port pulumi.IntPtrInput
	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// + **readwrite**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringPtrInput
	// Specifies the name of the proxy. The name consists of `4` to `64` characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName pulumi.StringPtrInput
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayInput
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the routing policy of the proxy. Changing this creates a new
	// resource. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntPtrInput
	// Specifies the network ID of a subnet. Changing this creates a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies whether the proxy transaction splitting is enabled. Value options:
	// + **ON**: Transaction splitting is enabled.
	// + **OFF**: Transaction splitting is disabled.
	TransactionSplit pulumi.StringPtrInput
}

func (MysqlProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyArgs)(nil)).Elem()
}

type MysqlProxyInput interface {
	pulumi.Input

	ToMysqlProxyOutput() MysqlProxyOutput
	ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput
}

func (*MysqlProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (i *MysqlProxy) ToMysqlProxyOutput() MysqlProxyOutput {
	return i.ToMysqlProxyOutputWithContext(context.Background())
}

func (i *MysqlProxy) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyOutput)
}

// MysqlProxyArrayInput is an input type that accepts MysqlProxyArray and MysqlProxyArrayOutput values.
// You can construct a concrete instance of `MysqlProxyArrayInput` via:
//
//	MysqlProxyArray{ MysqlProxyArgs{...} }
type MysqlProxyArrayInput interface {
	pulumi.Input

	ToMysqlProxyArrayOutput() MysqlProxyArrayOutput
	ToMysqlProxyArrayOutputWithContext(context.Context) MysqlProxyArrayOutput
}

type MysqlProxyArray []MysqlProxyInput

func (MysqlProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return i.ToMysqlProxyArrayOutputWithContext(context.Background())
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyArrayOutput)
}

// MysqlProxyMapInput is an input type that accepts MysqlProxyMap and MysqlProxyMapOutput values.
// You can construct a concrete instance of `MysqlProxyMapInput` via:
//
//	MysqlProxyMap{ "key": MysqlProxyArgs{...} }
type MysqlProxyMapInput interface {
	pulumi.Input

	ToMysqlProxyMapOutput() MysqlProxyMapOutput
	ToMysqlProxyMapOutputWithContext(context.Context) MysqlProxyMapOutput
}

type MysqlProxyMap map[string]MysqlProxyInput

func (MysqlProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyMap) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return i.ToMysqlProxyMapOutputWithContext(context.Background())
}

func (i MysqlProxyMap) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyMapOutput)
}

type MysqlProxyOutput struct{ *pulumi.OutputState }

func (MysqlProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyOutput) ToMysqlProxyOutput() MysqlProxyOutput {
	return o
}

func (o MysqlProxyOutput) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return o
}

// Specifies the list of IP addresses that control access. A maximum of
// `300` IP addresses or CIDR blocks can be added.
// The accessControlIpList structure is documented below.
func (o MysqlProxyOutput) AccessControlIpLists() MysqlProxyAccessControlIpListArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyAccessControlIpListArrayOutput { return v.AccessControlIpLists }).(MysqlProxyAccessControlIpListArrayOutput)
}

// Specifies the access control mode. Value options:
// + **white**: indicates the whitelist.
// + **black**: indicates the blacklist.
func (o MysqlProxyOutput) AccessControlType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.AccessControlType }).(pulumi.StringOutput)
}

// Indicates the address of the proxy.
func (o MysqlProxyOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Indicates whether the proxy can be upgrade.
func (o MysqlProxyOutput) CanUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.CanUpgrade }).(pulumi.BoolOutput)
}

// Specifies the connection pool type. Value options:
// + **CLOSED**: The connection pool is not used.
// + **SESSION**: The session-level connection pool is used.
func (o MysqlProxyOutput) ConnectionPoolType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ConnectionPoolType }).(pulumi.StringOutput)
}

// Specifies the consistency mode of the proxy. Value options:
// + **session**: session consistency.
// + **global**: global consistency.
// + **eventual**: eventual consistency.
func (o MysqlProxyOutput) ConsistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ConsistenceMode }).(pulumi.StringOutput)
}

// Indicates the current version of the proxy.
func (o MysqlProxyOutput) CurrentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.CurrentVersion }).(pulumi.StringOutput)
}

// Specifies the flavor of the proxy. Changing this parameter will create a new
// resource.
func (o MysqlProxyOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the ID of the GaussDB MySQL instance. Changing this parameter
// will create a new resource.
func (o MysqlProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the read weight of the master node.
// The masterNodeWeight structure is documented below.
func (o MysqlProxyOutput) MasterNodeWeight() MysqlProxyMasterNodeWeightOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyMasterNodeWeightOutput { return v.MasterNodeWeight }).(MysqlProxyMasterNodeWeightOutput)
}

// Specifies whether new nodes are automatically associate with proxy.
// Value options:
// + **ON**: New nodes are automatically associate with proxy.
// + **OFF**: New nodes are not automatically associate with proxy.
func (o MysqlProxyOutput) NewNodeAutoAddStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.NewNodeAutoAddStatus }).(pulumi.StringOutput)
}

// Specifies the read weight of the new node.
// + If `routeMode` is `0` and `newNodeAutoAddStatus` is **ON**, the value of this parameter ranges from `0` to `1,000`.
// + If `routeMode` is not `0` and `newNodeAutoAddStatus` is **OFF**, this parameter is unavailable.
func (o MysqlProxyOutput) NewNodeWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntPtrOutput { return v.NewNodeWeight }).(pulumi.IntPtrOutput)
}

// Specifies the node count of the proxy.
func (o MysqlProxyOutput) NodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.NodeNum }).(pulumi.IntOutput)
}

// Indicates the node information of the proxy.
// The nodes structure is documented below.
func (o MysqlProxyOutput) Nodes() MysqlProxyNodeArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyNodeArrayOutput { return v.Nodes }).(MysqlProxyNodeArrayOutput)
}

// Specifies whether to enable access control.
func (o MysqlProxyOutput) OpenAccessControl() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.OpenAccessControl }).(pulumi.BoolOutput)
}

// Specifies the list of parameters to be set to the GaussDB MySQL proxy after launched.
// The parameters structure is documented below.
func (o MysqlProxyOutput) Parameters() MysqlProxyParameterArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyParameterArrayOutput { return v.Parameters }).(MysqlProxyParameterArrayOutput)
}

// Specifies the port of the proxy.
func (o MysqlProxyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Specifies the type of the proxy. Changing this creates a new resource.
// Value options:
// + **readwrite**: read and write.
// + **readonly**: read-only.
func (o MysqlProxyOutput) ProxyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringPtrOutput { return v.ProxyMode }).(pulumi.StringPtrOutput)
}

// Specifies the name of the proxy. The name consists of `4` to `64` characters and
// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
func (o MysqlProxyOutput) ProxyName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ProxyName }).(pulumi.StringOutput)
}

// Specifies the read weight of the read-only node.
// The readonlyNodesWeight structure is documented below.
func (o MysqlProxyOutput) ReadonlyNodesWeights() MysqlProxyReadonlyNodesWeightArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyReadonlyNodesWeightArrayOutput { return v.ReadonlyNodesWeights }).(MysqlProxyReadonlyNodesWeightArrayOutput)
}

// The region in which to create the GaussDB mysql proxy resource. If omitted,
// the provider-level region will be used. Changing this creates a new resource.
func (o MysqlProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the routing policy of the proxy. Changing this creates a new
// resource. Value options:
// + **0**: weighted load balancing.
// + **1**: load balancing (The primary node does not process read requests).
// + **2**: load balancing (The primary node processes read requests).
func (o MysqlProxyOutput) RouteMode() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.RouteMode }).(pulumi.IntOutput)
}

// Specifies the network ID of a subnet. Changing this creates a new resource.
func (o MysqlProxyOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Indicates whether the proxy supports session-level connection pool.
func (o MysqlProxyOutput) SwitchConnectionPoolTypeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SwitchConnectionPoolTypeEnabled }).(pulumi.BoolOutput)
}

// Specifies whether the proxy transaction splitting is enabled. Value options:
// + **ON**: Transaction splitting is enabled.
// + **OFF**: Transaction splitting is disabled.
func (o MysqlProxyOutput) TransactionSplit() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.TransactionSplit }).(pulumi.StringOutput)
}

type MysqlProxyArrayOutput struct{ *pulumi.OutputState }

func (MysqlProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) Index(i pulumi.IntInput) MysqlProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].([]*MysqlProxy)[vs[1].(int)]
	}).(MysqlProxyOutput)
}

type MysqlProxyMapOutput struct{ *pulumi.OutputState }

func (MysqlProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) MapIndex(k pulumi.StringInput) MysqlProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].(map[string]*MysqlProxy)[vs[1].(string)]
	}).(MysqlProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyInput)(nil)).Elem(), &MysqlProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyArrayInput)(nil)).Elem(), MysqlProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyMapInput)(nil)).Elem(), MysqlProxyMap{})
	pulumi.RegisterOutputType(MysqlProxyOutput{})
	pulumi.RegisterOutputType(MysqlProxyArrayOutput{})
	pulumi.RegisterOutputType(MysqlProxyMapOutput{})
}

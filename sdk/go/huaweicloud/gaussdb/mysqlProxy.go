// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaussdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GaussDB mysql proxy management within HuaweiCoud.
//
// ## Example Usage
// ### create a proxy
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/GaussDB"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := GaussDB.NewMysqlProxy(ctx, "proxy1", &GaussDB.MysqlProxyArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Flavor:     pulumi.String("gaussdb.proxy.xlarge.arm.2"),
//				NodeNum:    pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GaussDB instance can be imported using the instance `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:GaussDB/mysqlProxy:MysqlProxy proxy_1 ee678f40-ce8e-4d0c-8221-38dead426f06
//
// ```
type MysqlProxy struct {
	pulumi.CustomResourceState

	// Indicates the address of the proxy.
	Address pulumi.StringOutput `pulumi:"address"`
	// Specifies the flavor of the proxy.
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// Specifies the instance ID of the proxy.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntOutput `pulumi:"nodeNum"`
	// Indicates the port of the proxy.
	Port pulumi.IntOutput `pulumi:"port"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewMysqlProxy registers a new resource with the given unique name, arguments, and options.
func NewMysqlProxy(ctx *pulumi.Context,
	name string, args *MysqlProxyArgs, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeNum == nil {
		return nil, errors.New("invalid value for required argument 'NodeNum'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MysqlProxy
	err := ctx.RegisterResource("huaweicloud:GaussDB/mysqlProxy:MysqlProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlProxy gets an existing MysqlProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlProxyState, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	var resource MysqlProxy
	err := ctx.ReadResource("huaweicloud:GaussDB/mysqlProxy:MysqlProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlProxy resources.
type mysqlProxyState struct {
	// Indicates the address of the proxy.
	Address *string `pulumi:"address"`
	// Specifies the flavor of the proxy.
	// Changing this parameter will create a new resource.
	Flavor *string `pulumi:"flavor"`
	// Specifies the instance ID of the proxy.
	// Changing this parameter will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the node count of the proxy.
	NodeNum *int `pulumi:"nodeNum"`
	// Indicates the port of the proxy.
	Port *int `pulumi:"port"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type MysqlProxyState struct {
	// Indicates the address of the proxy.
	Address pulumi.StringPtrInput
	// Specifies the flavor of the proxy.
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringPtrInput
	// Specifies the instance ID of the proxy.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntPtrInput
	// Indicates the port of the proxy.
	Port pulumi.IntPtrInput
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyState)(nil)).Elem()
}

type mysqlProxyArgs struct {
	// Specifies the flavor of the proxy.
	// Changing this parameter will create a new resource.
	Flavor string `pulumi:"flavor"`
	// Specifies the instance ID of the proxy.
	// Changing this parameter will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the node count of the proxy.
	NodeNum int `pulumi:"nodeNum"`
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MysqlProxy resource.
type MysqlProxyArgs struct {
	// Specifies the flavor of the proxy.
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringInput
	// Specifies the instance ID of the proxy.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the node count of the proxy.
	NodeNum pulumi.IntInput
	// The region in which to create the GaussDB mysql proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyArgs)(nil)).Elem()
}

type MysqlProxyInput interface {
	pulumi.Input

	ToMysqlProxyOutput() MysqlProxyOutput
	ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput
}

func (*MysqlProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (i *MysqlProxy) ToMysqlProxyOutput() MysqlProxyOutput {
	return i.ToMysqlProxyOutputWithContext(context.Background())
}

func (i *MysqlProxy) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyOutput)
}

// MysqlProxyArrayInput is an input type that accepts MysqlProxyArray and MysqlProxyArrayOutput values.
// You can construct a concrete instance of `MysqlProxyArrayInput` via:
//
//	MysqlProxyArray{ MysqlProxyArgs{...} }
type MysqlProxyArrayInput interface {
	pulumi.Input

	ToMysqlProxyArrayOutput() MysqlProxyArrayOutput
	ToMysqlProxyArrayOutputWithContext(context.Context) MysqlProxyArrayOutput
}

type MysqlProxyArray []MysqlProxyInput

func (MysqlProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return i.ToMysqlProxyArrayOutputWithContext(context.Background())
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyArrayOutput)
}

// MysqlProxyMapInput is an input type that accepts MysqlProxyMap and MysqlProxyMapOutput values.
// You can construct a concrete instance of `MysqlProxyMapInput` via:
//
//	MysqlProxyMap{ "key": MysqlProxyArgs{...} }
type MysqlProxyMapInput interface {
	pulumi.Input

	ToMysqlProxyMapOutput() MysqlProxyMapOutput
	ToMysqlProxyMapOutputWithContext(context.Context) MysqlProxyMapOutput
}

type MysqlProxyMap map[string]MysqlProxyInput

func (MysqlProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyMap) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return i.ToMysqlProxyMapOutputWithContext(context.Background())
}

func (i MysqlProxyMap) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyMapOutput)
}

type MysqlProxyOutput struct{ *pulumi.OutputState }

func (MysqlProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyOutput) ToMysqlProxyOutput() MysqlProxyOutput {
	return o
}

func (o MysqlProxyOutput) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return o
}

// Indicates the address of the proxy.
func (o MysqlProxyOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Specifies the flavor of the proxy.
// Changing this parameter will create a new resource.
func (o MysqlProxyOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the instance ID of the proxy.
// Changing this parameter will create a new resource.
func (o MysqlProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the node count of the proxy.
func (o MysqlProxyOutput) NodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.NodeNum }).(pulumi.IntOutput)
}

// Indicates the port of the proxy.
func (o MysqlProxyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The region in which to create the GaussDB mysql proxy resource. If omitted,
// the provider-level region will be used. Changing this creates a new resource.
func (o MysqlProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MysqlProxyArrayOutput struct{ *pulumi.OutputState }

func (MysqlProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) Index(i pulumi.IntInput) MysqlProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].([]*MysqlProxy)[vs[1].(int)]
	}).(MysqlProxyOutput)
}

type MysqlProxyMapOutput struct{ *pulumi.OutputState }

func (MysqlProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) MapIndex(k pulumi.StringInput) MysqlProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].(map[string]*MysqlProxy)[vs[1].(string)]
	}).(MysqlProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyInput)(nil)).Elem(), &MysqlProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyArrayInput)(nil)).Elem(), MysqlProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyMapInput)(nil)).Elem(), MysqlProxyMap{})
	pulumi.RegisterOutputType(MysqlProxyOutput{})
	pulumi.RegisterOutputType(MysqlProxyArrayOutput{})
	pulumi.RegisterOutputType(MysqlProxyMapOutput{})
}

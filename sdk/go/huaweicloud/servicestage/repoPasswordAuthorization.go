// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicestage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used for the ServiceStage service to establish the authorization relationship through username
// and password with various types of the Open-Source repository.
//
// ## Import
//
// Authorizations can be imported using their `id` or `name`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:ServiceStage/repoPasswordAuthorization:RepoPasswordAuthorization test terraform-test
//
// ```
type RepoPasswordAuthorization struct {
	pulumi.CustomResourceState

	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specified the repository password.
	// Changing this parameter will create a new authorization.
	Password pulumi.StringOutput `pulumi:"password"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specified the repository type. The valid values are as follows:
	// + **devcloud**
	// + **bitbucket**
	Type pulumi.StringOutput `pulumi:"type"`
	// Specified the user name of the repository.
	// The format for each type is as follows:
	// + **devcloud**: `{domain name}/{tenant name}`
	// + **bitbucket**: `{account name}`
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewRepoPasswordAuthorization registers a new resource with the given unique name, arguments, and options.
func NewRepoPasswordAuthorization(ctx *pulumi.Context,
	name string, args *RepoPasswordAuthorizationArgs, opts ...pulumi.ResourceOption) (*RepoPasswordAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RepoPasswordAuthorization
	err := ctx.RegisterResource("huaweicloud:ServiceStage/repoPasswordAuthorization:RepoPasswordAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepoPasswordAuthorization gets an existing RepoPasswordAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepoPasswordAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoPasswordAuthorizationState, opts ...pulumi.ResourceOption) (*RepoPasswordAuthorization, error) {
	var resource RepoPasswordAuthorization
	err := ctx.ReadResource("huaweicloud:ServiceStage/repoPasswordAuthorization:RepoPasswordAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepoPasswordAuthorization resources.
type repoPasswordAuthorizationState struct {
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name *string `pulumi:"name"`
	// Specified the repository password.
	// Changing this parameter will create a new authorization.
	Password *string `pulumi:"password"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region *string `pulumi:"region"`
	// Specified the repository type. The valid values are as follows:
	// + **devcloud**
	// + **bitbucket**
	Type *string `pulumi:"type"`
	// Specified the user name of the repository.
	// The format for each type is as follows:
	// + **devcloud**: `{domain name}/{tenant name}`
	// + **bitbucket**: `{account name}`
	UserName *string `pulumi:"userName"`
}

type RepoPasswordAuthorizationState struct {
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringPtrInput
	// Specified the repository password.
	// Changing this parameter will create a new authorization.
	Password pulumi.StringPtrInput
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringPtrInput
	// Specified the repository type. The valid values are as follows:
	// + **devcloud**
	// + **bitbucket**
	Type pulumi.StringPtrInput
	// Specified the user name of the repository.
	// The format for each type is as follows:
	// + **devcloud**: `{domain name}/{tenant name}`
	// + **bitbucket**: `{account name}`
	UserName pulumi.StringPtrInput
}

func (RepoPasswordAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoPasswordAuthorizationState)(nil)).Elem()
}

type repoPasswordAuthorizationArgs struct {
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name *string `pulumi:"name"`
	// Specified the repository password.
	// Changing this parameter will create a new authorization.
	Password string `pulumi:"password"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region *string `pulumi:"region"`
	// Specified the repository type. The valid values are as follows:
	// + **devcloud**
	// + **bitbucket**
	Type string `pulumi:"type"`
	// Specified the user name of the repository.
	// The format for each type is as follows:
	// + **devcloud**: `{domain name}/{tenant name}`
	// + **bitbucket**: `{account name}`
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a RepoPasswordAuthorization resource.
type RepoPasswordAuthorizationArgs struct {
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringPtrInput
	// Specified the repository password.
	// Changing this parameter will create a new authorization.
	Password pulumi.StringInput
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringPtrInput
	// Specified the repository type. The valid values are as follows:
	// + **devcloud**
	// + **bitbucket**
	Type pulumi.StringInput
	// Specified the user name of the repository.
	// The format for each type is as follows:
	// + **devcloud**: `{domain name}/{tenant name}`
	// + **bitbucket**: `{account name}`
	UserName pulumi.StringInput
}

func (RepoPasswordAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoPasswordAuthorizationArgs)(nil)).Elem()
}

type RepoPasswordAuthorizationInput interface {
	pulumi.Input

	ToRepoPasswordAuthorizationOutput() RepoPasswordAuthorizationOutput
	ToRepoPasswordAuthorizationOutputWithContext(ctx context.Context) RepoPasswordAuthorizationOutput
}

func (*RepoPasswordAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoPasswordAuthorization)(nil)).Elem()
}

func (i *RepoPasswordAuthorization) ToRepoPasswordAuthorizationOutput() RepoPasswordAuthorizationOutput {
	return i.ToRepoPasswordAuthorizationOutputWithContext(context.Background())
}

func (i *RepoPasswordAuthorization) ToRepoPasswordAuthorizationOutputWithContext(ctx context.Context) RepoPasswordAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoPasswordAuthorizationOutput)
}

// RepoPasswordAuthorizationArrayInput is an input type that accepts RepoPasswordAuthorizationArray and RepoPasswordAuthorizationArrayOutput values.
// You can construct a concrete instance of `RepoPasswordAuthorizationArrayInput` via:
//
//	RepoPasswordAuthorizationArray{ RepoPasswordAuthorizationArgs{...} }
type RepoPasswordAuthorizationArrayInput interface {
	pulumi.Input

	ToRepoPasswordAuthorizationArrayOutput() RepoPasswordAuthorizationArrayOutput
	ToRepoPasswordAuthorizationArrayOutputWithContext(context.Context) RepoPasswordAuthorizationArrayOutput
}

type RepoPasswordAuthorizationArray []RepoPasswordAuthorizationInput

func (RepoPasswordAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoPasswordAuthorization)(nil)).Elem()
}

func (i RepoPasswordAuthorizationArray) ToRepoPasswordAuthorizationArrayOutput() RepoPasswordAuthorizationArrayOutput {
	return i.ToRepoPasswordAuthorizationArrayOutputWithContext(context.Background())
}

func (i RepoPasswordAuthorizationArray) ToRepoPasswordAuthorizationArrayOutputWithContext(ctx context.Context) RepoPasswordAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoPasswordAuthorizationArrayOutput)
}

// RepoPasswordAuthorizationMapInput is an input type that accepts RepoPasswordAuthorizationMap and RepoPasswordAuthorizationMapOutput values.
// You can construct a concrete instance of `RepoPasswordAuthorizationMapInput` via:
//
//	RepoPasswordAuthorizationMap{ "key": RepoPasswordAuthorizationArgs{...} }
type RepoPasswordAuthorizationMapInput interface {
	pulumi.Input

	ToRepoPasswordAuthorizationMapOutput() RepoPasswordAuthorizationMapOutput
	ToRepoPasswordAuthorizationMapOutputWithContext(context.Context) RepoPasswordAuthorizationMapOutput
}

type RepoPasswordAuthorizationMap map[string]RepoPasswordAuthorizationInput

func (RepoPasswordAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoPasswordAuthorization)(nil)).Elem()
}

func (i RepoPasswordAuthorizationMap) ToRepoPasswordAuthorizationMapOutput() RepoPasswordAuthorizationMapOutput {
	return i.ToRepoPasswordAuthorizationMapOutputWithContext(context.Background())
}

func (i RepoPasswordAuthorizationMap) ToRepoPasswordAuthorizationMapOutputWithContext(ctx context.Context) RepoPasswordAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoPasswordAuthorizationMapOutput)
}

type RepoPasswordAuthorizationOutput struct{ *pulumi.OutputState }

func (RepoPasswordAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoPasswordAuthorization)(nil)).Elem()
}

func (o RepoPasswordAuthorizationOutput) ToRepoPasswordAuthorizationOutput() RepoPasswordAuthorizationOutput {
	return o
}

func (o RepoPasswordAuthorizationOutput) ToRepoPasswordAuthorizationOutputWithContext(ctx context.Context) RepoPasswordAuthorizationOutput {
	return o
}

// Specified the authorization name. The name can contain of 4 to 63 characters,
// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
// Changing this parameter will create a new authorization.
func (o RepoPasswordAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoPasswordAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specified the repository password.
// Changing this parameter will create a new authorization.
func (o RepoPasswordAuthorizationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoPasswordAuthorization) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Specified the region in which to create the repository authorization.
// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
func (o RepoPasswordAuthorizationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoPasswordAuthorization) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specified the repository type. The valid values are as follows:
// + **devcloud**
// + **bitbucket**
func (o RepoPasswordAuthorizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoPasswordAuthorization) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specified the user name of the repository.
// The format for each type is as follows:
// + **devcloud**: `{domain name}/{tenant name}`
// + **bitbucket**: `{account name}`
func (o RepoPasswordAuthorizationOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoPasswordAuthorization) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type RepoPasswordAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (RepoPasswordAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoPasswordAuthorization)(nil)).Elem()
}

func (o RepoPasswordAuthorizationArrayOutput) ToRepoPasswordAuthorizationArrayOutput() RepoPasswordAuthorizationArrayOutput {
	return o
}

func (o RepoPasswordAuthorizationArrayOutput) ToRepoPasswordAuthorizationArrayOutputWithContext(ctx context.Context) RepoPasswordAuthorizationArrayOutput {
	return o
}

func (o RepoPasswordAuthorizationArrayOutput) Index(i pulumi.IntInput) RepoPasswordAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepoPasswordAuthorization {
		return vs[0].([]*RepoPasswordAuthorization)[vs[1].(int)]
	}).(RepoPasswordAuthorizationOutput)
}

type RepoPasswordAuthorizationMapOutput struct{ *pulumi.OutputState }

func (RepoPasswordAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoPasswordAuthorization)(nil)).Elem()
}

func (o RepoPasswordAuthorizationMapOutput) ToRepoPasswordAuthorizationMapOutput() RepoPasswordAuthorizationMapOutput {
	return o
}

func (o RepoPasswordAuthorizationMapOutput) ToRepoPasswordAuthorizationMapOutputWithContext(ctx context.Context) RepoPasswordAuthorizationMapOutput {
	return o
}

func (o RepoPasswordAuthorizationMapOutput) MapIndex(k pulumi.StringInput) RepoPasswordAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepoPasswordAuthorization {
		return vs[0].(map[string]*RepoPasswordAuthorization)[vs[1].(string)]
	}).(RepoPasswordAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoPasswordAuthorizationInput)(nil)).Elem(), &RepoPasswordAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoPasswordAuthorizationArrayInput)(nil)).Elem(), RepoPasswordAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoPasswordAuthorizationMapInput)(nil)).Elem(), RepoPasswordAuthorizationMap{})
	pulumi.RegisterOutputType(RepoPasswordAuthorizationOutput{})
	pulumi.RegisterOutputType(RepoPasswordAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(RepoPasswordAuthorizationMapOutput{})
}

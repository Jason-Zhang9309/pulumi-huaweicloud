// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicestage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used for the ServiceStage service to establish the authorization relationship through personal access
// token with various types of the Open-Source repository.
//
// ## Import
//
// Authorizations can be imported using their `id` or `name`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:ServiceStage/repoTokenAuthorization:RepoTokenAuthorization test terraform-test
//
// ```
type RepoTokenAuthorization struct {
	pulumi.CustomResourceState

	// Specified the host name of the repository.
	// Changing this parameter will create a new authorization.
	Host pulumi.StringOutput `pulumi:"host"`
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specified the personal access token of the repository.
	// Changing this parameter will create a new authorization.
	Token pulumi.StringOutput `pulumi:"token"`
	// Specified the repository type. The valid values are as follows:
	// + **github**
	// + **gitlab**
	// + **gitee**
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRepoTokenAuthorization registers a new resource with the given unique name, arguments, and options.
func NewRepoTokenAuthorization(ctx *pulumi.Context,
	name string, args *RepoTokenAuthorizationArgs, opts ...pulumi.ResourceOption) (*RepoTokenAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RepoTokenAuthorization
	err := ctx.RegisterResource("huaweicloud:ServiceStage/repoTokenAuthorization:RepoTokenAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepoTokenAuthorization gets an existing RepoTokenAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepoTokenAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoTokenAuthorizationState, opts ...pulumi.ResourceOption) (*RepoTokenAuthorization, error) {
	var resource RepoTokenAuthorization
	err := ctx.ReadResource("huaweicloud:ServiceStage/repoTokenAuthorization:RepoTokenAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepoTokenAuthorization resources.
type repoTokenAuthorizationState struct {
	// Specified the host name of the repository.
	// Changing this parameter will create a new authorization.
	Host *string `pulumi:"host"`
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name *string `pulumi:"name"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region *string `pulumi:"region"`
	// Specified the personal access token of the repository.
	// Changing this parameter will create a new authorization.
	Token *string `pulumi:"token"`
	// Specified the repository type. The valid values are as follows:
	// + **github**
	// + **gitlab**
	// + **gitee**
	Type *string `pulumi:"type"`
}

type RepoTokenAuthorizationState struct {
	// Specified the host name of the repository.
	// Changing this parameter will create a new authorization.
	Host pulumi.StringPtrInput
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringPtrInput
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringPtrInput
	// Specified the personal access token of the repository.
	// Changing this parameter will create a new authorization.
	Token pulumi.StringPtrInput
	// Specified the repository type. The valid values are as follows:
	// + **github**
	// + **gitlab**
	// + **gitee**
	Type pulumi.StringPtrInput
}

func (RepoTokenAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoTokenAuthorizationState)(nil)).Elem()
}

type repoTokenAuthorizationArgs struct {
	// Specified the host name of the repository.
	// Changing this parameter will create a new authorization.
	Host string `pulumi:"host"`
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name *string `pulumi:"name"`
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region *string `pulumi:"region"`
	// Specified the personal access token of the repository.
	// Changing this parameter will create a new authorization.
	Token string `pulumi:"token"`
	// Specified the repository type. The valid values are as follows:
	// + **github**
	// + **gitlab**
	// + **gitee**
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RepoTokenAuthorization resource.
type RepoTokenAuthorizationArgs struct {
	// Specified the host name of the repository.
	// Changing this parameter will create a new authorization.
	Host pulumi.StringInput
	// Specified the authorization name. The name can contain of 4 to 63 characters,
	// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
	// Changing this parameter will create a new authorization.
	Name pulumi.StringPtrInput
	// Specified the region in which to create the repository authorization.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
	Region pulumi.StringPtrInput
	// Specified the personal access token of the repository.
	// Changing this parameter will create a new authorization.
	Token pulumi.StringInput
	// Specified the repository type. The valid values are as follows:
	// + **github**
	// + **gitlab**
	// + **gitee**
	Type pulumi.StringInput
}

func (RepoTokenAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoTokenAuthorizationArgs)(nil)).Elem()
}

type RepoTokenAuthorizationInput interface {
	pulumi.Input

	ToRepoTokenAuthorizationOutput() RepoTokenAuthorizationOutput
	ToRepoTokenAuthorizationOutputWithContext(ctx context.Context) RepoTokenAuthorizationOutput
}

func (*RepoTokenAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoTokenAuthorization)(nil)).Elem()
}

func (i *RepoTokenAuthorization) ToRepoTokenAuthorizationOutput() RepoTokenAuthorizationOutput {
	return i.ToRepoTokenAuthorizationOutputWithContext(context.Background())
}

func (i *RepoTokenAuthorization) ToRepoTokenAuthorizationOutputWithContext(ctx context.Context) RepoTokenAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoTokenAuthorizationOutput)
}

// RepoTokenAuthorizationArrayInput is an input type that accepts RepoTokenAuthorizationArray and RepoTokenAuthorizationArrayOutput values.
// You can construct a concrete instance of `RepoTokenAuthorizationArrayInput` via:
//
//	RepoTokenAuthorizationArray{ RepoTokenAuthorizationArgs{...} }
type RepoTokenAuthorizationArrayInput interface {
	pulumi.Input

	ToRepoTokenAuthorizationArrayOutput() RepoTokenAuthorizationArrayOutput
	ToRepoTokenAuthorizationArrayOutputWithContext(context.Context) RepoTokenAuthorizationArrayOutput
}

type RepoTokenAuthorizationArray []RepoTokenAuthorizationInput

func (RepoTokenAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoTokenAuthorization)(nil)).Elem()
}

func (i RepoTokenAuthorizationArray) ToRepoTokenAuthorizationArrayOutput() RepoTokenAuthorizationArrayOutput {
	return i.ToRepoTokenAuthorizationArrayOutputWithContext(context.Background())
}

func (i RepoTokenAuthorizationArray) ToRepoTokenAuthorizationArrayOutputWithContext(ctx context.Context) RepoTokenAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoTokenAuthorizationArrayOutput)
}

// RepoTokenAuthorizationMapInput is an input type that accepts RepoTokenAuthorizationMap and RepoTokenAuthorizationMapOutput values.
// You can construct a concrete instance of `RepoTokenAuthorizationMapInput` via:
//
//	RepoTokenAuthorizationMap{ "key": RepoTokenAuthorizationArgs{...} }
type RepoTokenAuthorizationMapInput interface {
	pulumi.Input

	ToRepoTokenAuthorizationMapOutput() RepoTokenAuthorizationMapOutput
	ToRepoTokenAuthorizationMapOutputWithContext(context.Context) RepoTokenAuthorizationMapOutput
}

type RepoTokenAuthorizationMap map[string]RepoTokenAuthorizationInput

func (RepoTokenAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoTokenAuthorization)(nil)).Elem()
}

func (i RepoTokenAuthorizationMap) ToRepoTokenAuthorizationMapOutput() RepoTokenAuthorizationMapOutput {
	return i.ToRepoTokenAuthorizationMapOutputWithContext(context.Background())
}

func (i RepoTokenAuthorizationMap) ToRepoTokenAuthorizationMapOutputWithContext(ctx context.Context) RepoTokenAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoTokenAuthorizationMapOutput)
}

type RepoTokenAuthorizationOutput struct{ *pulumi.OutputState }

func (RepoTokenAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoTokenAuthorization)(nil)).Elem()
}

func (o RepoTokenAuthorizationOutput) ToRepoTokenAuthorizationOutput() RepoTokenAuthorizationOutput {
	return o
}

func (o RepoTokenAuthorizationOutput) ToRepoTokenAuthorizationOutputWithContext(ctx context.Context) RepoTokenAuthorizationOutput {
	return o
}

// Specified the host name of the repository.
// Changing this parameter will create a new authorization.
func (o RepoTokenAuthorizationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoTokenAuthorization) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Specified the authorization name. The name can contain of 4 to 63 characters,
// only letters, digits, underscores (_), hyphens (-) and dots (.) are allowed.
// Changing this parameter will create a new authorization.
func (o RepoTokenAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoTokenAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specified the region in which to create the repository authorization.
// If omitted, the provider-level region will be used. Changing this parameter will create a new authorization.
func (o RepoTokenAuthorizationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoTokenAuthorization) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specified the personal access token of the repository.
// Changing this parameter will create a new authorization.
func (o RepoTokenAuthorizationOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoTokenAuthorization) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Specified the repository type. The valid values are as follows:
// + **github**
// + **gitlab**
// + **gitee**
func (o RepoTokenAuthorizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoTokenAuthorization) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type RepoTokenAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (RepoTokenAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoTokenAuthorization)(nil)).Elem()
}

func (o RepoTokenAuthorizationArrayOutput) ToRepoTokenAuthorizationArrayOutput() RepoTokenAuthorizationArrayOutput {
	return o
}

func (o RepoTokenAuthorizationArrayOutput) ToRepoTokenAuthorizationArrayOutputWithContext(ctx context.Context) RepoTokenAuthorizationArrayOutput {
	return o
}

func (o RepoTokenAuthorizationArrayOutput) Index(i pulumi.IntInput) RepoTokenAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepoTokenAuthorization {
		return vs[0].([]*RepoTokenAuthorization)[vs[1].(int)]
	}).(RepoTokenAuthorizationOutput)
}

type RepoTokenAuthorizationMapOutput struct{ *pulumi.OutputState }

func (RepoTokenAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoTokenAuthorization)(nil)).Elem()
}

func (o RepoTokenAuthorizationMapOutput) ToRepoTokenAuthorizationMapOutput() RepoTokenAuthorizationMapOutput {
	return o
}

func (o RepoTokenAuthorizationMapOutput) ToRepoTokenAuthorizationMapOutputWithContext(ctx context.Context) RepoTokenAuthorizationMapOutput {
	return o
}

func (o RepoTokenAuthorizationMapOutput) MapIndex(k pulumi.StringInput) RepoTokenAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepoTokenAuthorization {
		return vs[0].(map[string]*RepoTokenAuthorization)[vs[1].(string)]
	}).(RepoTokenAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoTokenAuthorizationInput)(nil)).Elem(), &RepoTokenAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoTokenAuthorizationArrayInput)(nil)).Elem(), RepoTokenAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoTokenAuthorizationMapInput)(nil)).Elem(), RepoTokenAuthorizationMap{})
	pulumi.RegisterOutputType(RepoTokenAuthorizationOutput{})
	pulumi.RegisterOutputType(RepoTokenAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(RepoTokenAuthorizationMapOutput{})
}

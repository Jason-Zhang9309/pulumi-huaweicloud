// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages CSS thesaurus resource within HuaweiCloud
//
// > Only one thesaurus resource can be created for the specified cluster
//
// ## Example Usage
//
// ## Import
//
// CSS thesaurus can be imported by `id`. For example,
//
// ```sh
//
//	$ pulumi import huaweicloud:Css/thesaurus:Thesaurus example e9ee3f48-f097-406a-aa74-cfece0af3e31
//
// ```
type Thesaurus struct {
	pulumi.CustomResourceState

	// Specifies the OBS bucket where the thesaurus files are stored
	// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Specifies the CSS cluster ID for configuring the thesaurus.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the path of the main thesaurus file object.
	MainObject pulumi.StringPtrOutput `pulumi:"mainObject"`
	// The region in which to create the thesaurus resource. If omitted, the
	// provider-level region will be used. Changing this creates a new thesaurus resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the status of the thesaurus loading
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the path of the stop word library file object.
	StopObject pulumi.StringPtrOutput `pulumi:"stopObject"`
	// Specifies the path of the synonyms thesaurus file object.
	SynonymObject pulumi.StringPtrOutput `pulumi:"synonymObject"`
	// Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewThesaurus registers a new resource with the given unique name, arguments, and options.
func NewThesaurus(ctx *pulumi.Context,
	name string, args *ThesaurusArgs, opts ...pulumi.ResourceOption) (*Thesaurus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource Thesaurus
	err := ctx.RegisterResource("huaweicloud:Css/thesaurus:Thesaurus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThesaurus gets an existing Thesaurus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThesaurus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThesaurusState, opts ...pulumi.ResourceOption) (*Thesaurus, error) {
	var resource Thesaurus
	err := ctx.ReadResource("huaweicloud:Css/thesaurus:Thesaurus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Thesaurus resources.
type thesaurusState struct {
	// Specifies the OBS bucket where the thesaurus files are stored
	// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
	BucketName *string `pulumi:"bucketName"`
	// Specifies the CSS cluster ID for configuring the thesaurus.
	// Changing this parameter will create a new resource.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the path of the main thesaurus file object.
	MainObject *string `pulumi:"mainObject"`
	// The region in which to create the thesaurus resource. If omitted, the
	// provider-level region will be used. Changing this creates a new thesaurus resource.
	Region *string `pulumi:"region"`
	// Indicates the status of the thesaurus loading
	Status *string `pulumi:"status"`
	// Specifies the path of the stop word library file object.
	StopObject *string `pulumi:"stopObject"`
	// Specifies the path of the synonyms thesaurus file object.
	SynonymObject *string `pulumi:"synonymObject"`
	// Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	UpdateTime *string `pulumi:"updateTime"`
}

type ThesaurusState struct {
	// Specifies the OBS bucket where the thesaurus files are stored
	// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
	BucketName pulumi.StringPtrInput
	// Specifies the CSS cluster ID for configuring the thesaurus.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringPtrInput
	// Specifies the path of the main thesaurus file object.
	MainObject pulumi.StringPtrInput
	// The region in which to create the thesaurus resource. If omitted, the
	// provider-level region will be used. Changing this creates a new thesaurus resource.
	Region pulumi.StringPtrInput
	// Indicates the status of the thesaurus loading
	Status pulumi.StringPtrInput
	// Specifies the path of the stop word library file object.
	StopObject pulumi.StringPtrInput
	// Specifies the path of the synonyms thesaurus file object.
	SynonymObject pulumi.StringPtrInput
	// Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	UpdateTime pulumi.StringPtrInput
}

func (ThesaurusState) ElementType() reflect.Type {
	return reflect.TypeOf((*thesaurusState)(nil)).Elem()
}

type thesaurusArgs struct {
	// Specifies the OBS bucket where the thesaurus files are stored
	// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
	BucketName string `pulumi:"bucketName"`
	// Specifies the CSS cluster ID for configuring the thesaurus.
	// Changing this parameter will create a new resource.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the path of the main thesaurus file object.
	MainObject *string `pulumi:"mainObject"`
	// The region in which to create the thesaurus resource. If omitted, the
	// provider-level region will be used. Changing this creates a new thesaurus resource.
	Region *string `pulumi:"region"`
	// Specifies the path of the stop word library file object.
	StopObject *string `pulumi:"stopObject"`
	// Specifies the path of the synonyms thesaurus file object.
	SynonymObject *string `pulumi:"synonymObject"`
}

// The set of arguments for constructing a Thesaurus resource.
type ThesaurusArgs struct {
	// Specifies the OBS bucket where the thesaurus files are stored
	// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
	BucketName pulumi.StringInput
	// Specifies the CSS cluster ID for configuring the thesaurus.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringInput
	// Specifies the path of the main thesaurus file object.
	MainObject pulumi.StringPtrInput
	// The region in which to create the thesaurus resource. If omitted, the
	// provider-level region will be used. Changing this creates a new thesaurus resource.
	Region pulumi.StringPtrInput
	// Specifies the path of the stop word library file object.
	StopObject pulumi.StringPtrInput
	// Specifies the path of the synonyms thesaurus file object.
	SynonymObject pulumi.StringPtrInput
}

func (ThesaurusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thesaurusArgs)(nil)).Elem()
}

type ThesaurusInput interface {
	pulumi.Input

	ToThesaurusOutput() ThesaurusOutput
	ToThesaurusOutputWithContext(ctx context.Context) ThesaurusOutput
}

func (*Thesaurus) ElementType() reflect.Type {
	return reflect.TypeOf((**Thesaurus)(nil)).Elem()
}

func (i *Thesaurus) ToThesaurusOutput() ThesaurusOutput {
	return i.ToThesaurusOutputWithContext(context.Background())
}

func (i *Thesaurus) ToThesaurusOutputWithContext(ctx context.Context) ThesaurusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThesaurusOutput)
}

// ThesaurusArrayInput is an input type that accepts ThesaurusArray and ThesaurusArrayOutput values.
// You can construct a concrete instance of `ThesaurusArrayInput` via:
//
//	ThesaurusArray{ ThesaurusArgs{...} }
type ThesaurusArrayInput interface {
	pulumi.Input

	ToThesaurusArrayOutput() ThesaurusArrayOutput
	ToThesaurusArrayOutputWithContext(context.Context) ThesaurusArrayOutput
}

type ThesaurusArray []ThesaurusInput

func (ThesaurusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Thesaurus)(nil)).Elem()
}

func (i ThesaurusArray) ToThesaurusArrayOutput() ThesaurusArrayOutput {
	return i.ToThesaurusArrayOutputWithContext(context.Background())
}

func (i ThesaurusArray) ToThesaurusArrayOutputWithContext(ctx context.Context) ThesaurusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThesaurusArrayOutput)
}

// ThesaurusMapInput is an input type that accepts ThesaurusMap and ThesaurusMapOutput values.
// You can construct a concrete instance of `ThesaurusMapInput` via:
//
//	ThesaurusMap{ "key": ThesaurusArgs{...} }
type ThesaurusMapInput interface {
	pulumi.Input

	ToThesaurusMapOutput() ThesaurusMapOutput
	ToThesaurusMapOutputWithContext(context.Context) ThesaurusMapOutput
}

type ThesaurusMap map[string]ThesaurusInput

func (ThesaurusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Thesaurus)(nil)).Elem()
}

func (i ThesaurusMap) ToThesaurusMapOutput() ThesaurusMapOutput {
	return i.ToThesaurusMapOutputWithContext(context.Background())
}

func (i ThesaurusMap) ToThesaurusMapOutputWithContext(ctx context.Context) ThesaurusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThesaurusMapOutput)
}

type ThesaurusOutput struct{ *pulumi.OutputState }

func (ThesaurusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Thesaurus)(nil)).Elem()
}

func (o ThesaurusOutput) ToThesaurusOutput() ThesaurusOutput {
	return o
}

func (o ThesaurusOutput) ToThesaurusOutputWithContext(ctx context.Context) ThesaurusOutput {
	return o
}

// Specifies the OBS bucket where the thesaurus files are stored
// (the bucket type must be standard storage or low-frequency storage, and archive storage is not supported).
func (o ThesaurusOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Specifies the CSS cluster ID for configuring the thesaurus.
// Changing this parameter will create a new resource.
func (o ThesaurusOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specifies the path of the main thesaurus file object.
func (o ThesaurusOutput) MainObject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringPtrOutput { return v.MainObject }).(pulumi.StringPtrOutput)
}

// The region in which to create the thesaurus resource. If omitted, the
// provider-level region will be used. Changing this creates a new thesaurus resource.
func (o ThesaurusOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the status of the thesaurus loading
func (o ThesaurusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the path of the stop word library file object.
func (o ThesaurusOutput) StopObject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringPtrOutput { return v.StopObject }).(pulumi.StringPtrOutput)
}

// Specifies the path of the synonyms thesaurus file object.
func (o ThesaurusOutput) SynonymObject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringPtrOutput { return v.SynonymObject }).(pulumi.StringPtrOutput)
}

// Specifies the time (UTC) when the thesaurus was modified. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
func (o ThesaurusOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Thesaurus) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ThesaurusArrayOutput struct{ *pulumi.OutputState }

func (ThesaurusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Thesaurus)(nil)).Elem()
}

func (o ThesaurusArrayOutput) ToThesaurusArrayOutput() ThesaurusArrayOutput {
	return o
}

func (o ThesaurusArrayOutput) ToThesaurusArrayOutputWithContext(ctx context.Context) ThesaurusArrayOutput {
	return o
}

func (o ThesaurusArrayOutput) Index(i pulumi.IntInput) ThesaurusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Thesaurus {
		return vs[0].([]*Thesaurus)[vs[1].(int)]
	}).(ThesaurusOutput)
}

type ThesaurusMapOutput struct{ *pulumi.OutputState }

func (ThesaurusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Thesaurus)(nil)).Elem()
}

func (o ThesaurusMapOutput) ToThesaurusMapOutput() ThesaurusMapOutput {
	return o
}

func (o ThesaurusMapOutput) ToThesaurusMapOutputWithContext(ctx context.Context) ThesaurusMapOutput {
	return o
}

func (o ThesaurusMapOutput) MapIndex(k pulumi.StringInput) ThesaurusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Thesaurus {
		return vs[0].(map[string]*Thesaurus)[vs[1].(string)]
	}).(ThesaurusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThesaurusInput)(nil)).Elem(), &Thesaurus{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThesaurusArrayInput)(nil)).Elem(), ThesaurusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThesaurusMapInput)(nil)).Elem(), ThesaurusMap{})
	pulumi.RegisterOutputType(ThesaurusOutput{})
	pulumi.RegisterOutputType(ThesaurusArrayOutput{})
	pulumi.RegisterOutputType(ThesaurusMapOutput{})
}

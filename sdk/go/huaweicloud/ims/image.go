// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **WARNING:** It has been deprecated, please select the corresponding resource replacement based on the image type and
// creation method, please use resources named in `huaweicloudImsXxxXxxImage` format instead.
//
// Manages an IMS image resource within HuaweiCloud.
//
// ## Example Usage
// ### Creating a system image from an existing ECS instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Ims.NewImage(ctx, "test", &Ims.ImageArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating a system image from OBS bucket
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			imageUrl := cfg.RequireObject("imageUrl")
//			minDisk := cfg.RequireObject("minDisk")
//			_, err := Ims.NewImage(ctx, "test", &Ims.ImageArgs{
//				ImageUrl: pulumi.Any(imageUrl),
//				MinDisk:  pulumi.Any(minDisk),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating a whole image from an existing ECS instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			instanceId := cfg.RequireObject("instanceId")
//			vaultId := cfg.RequireObject("vaultId")
//			_, err := Ims.NewImage(ctx, "test", &Ims.ImageArgs{
//				InstanceId: pulumi.Any(instanceId),
//				VaultId:    pulumi.Any(vaultId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating a whole image from CBR backup
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			backupId := cfg.RequireObject("backupId")
//			_, err := Ims.NewImage(ctx, "test", &Ims.ImageArgs{
//				BackupId: pulumi.Any(backupId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating a data image from the data disk bound to the ECS instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			volumeId := cfg.RequireObject("volumeId")
//			_, err := Ims.NewImage(ctx, "test", &Ims.ImageArgs{
//				VolumeId: pulumi.Any(volumeId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Image can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Ims/image:Image test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response. The missing attributes include`vault_id`. It is generally recommended running `terraform plan` after importing the image. You can then decide if changes should be applied to the image, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. hcl resource "huaweicloud_images_image" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	vault_id,
//
//	]
//
//	} }
type Image struct {
	pulumi.CustomResourceState

	// Specifies the ID of the CBR backup that needs to be converted into an
	// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
	// Changing this parameter will create a new resource.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// The checksum of the data associated with the image.
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// Specifies the master key used for encrypting an image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringPtrOutput `pulumi:"cmkId"`
	// The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
	// **file,image_url**, or **volume,volume_id**.
	DataOrigin pulumi.StringOutput `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image
	// belongs. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The size(bytes) of the image file format.
	ImageSize pulumi.StringOutput `pulumi:"imageSize"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
	// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
	// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
	// Changing this parameter will create a new resource.
	ImageUrl pulumi.StringPtrOutput `pulumi:"imageUrl"`
	// Specifies the ID of the ECS that needs to be converted into an image.
	// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
	// ECS instance. Changing this parameter will create a new resource.
	// + If the value of `vaultId` is empty, then a private system image will be created.
	// + If the value of `vaultId` is not empty, then a private whole image will be created.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether to automatically configure. If automatic backend
	// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
	// Changing this parameter will create a new resource.
	IsConfig pulumi.BoolPtrOutput `pulumi:"isConfig"`
	// Specifies the maximum memory of the image in the unit of MB.
	MaxRam pulumi.IntOutput `pulumi:"maxRam"`
	// Specifies the minimum size of the system disk in the unit of GB. This parameter
	// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
	// Changing this parameter will create a new resource.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk pulumi.IntPtrOutput `pulumi:"minDisk"`
	// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
	// indicating that the memory is not restricted.
	MinRam pulumi.IntOutput `pulumi:"minRam"`
	// Specifies the name of the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the OS version.
	// Changing this parameter will create a new resource.
	// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the image.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
	// or **Ironic**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrOutput `pulumi:"vaultId"`
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// Specifies the ID of the data disk. This parameter is valid and mandatory
	// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		args = &ImageArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("huaweicloud:Ims/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("huaweicloud:Ims/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// Specifies the ID of the CBR backup that needs to be converted into an
	// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
	// Changing this parameter will create a new resource.
	BackupId *string `pulumi:"backupId"`
	// The checksum of the data associated with the image.
	Checksum *string `pulumi:"checksum"`
	// Specifies the master key used for encrypting an image.
	// Changing this parameter will create a new resource.
	CmkId *string `pulumi:"cmkId"`
	// The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
	// **file,image_url**, or **volume,volume_id**.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
	DiskFormat *string `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image
	// belongs. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The size(bytes) of the image file format.
	ImageSize *string `pulumi:"imageSize"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
	// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
	// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
	// Changing this parameter will create a new resource.
	ImageUrl *string `pulumi:"imageUrl"`
	// Specifies the ID of the ECS that needs to be converted into an image.
	// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
	// ECS instance. Changing this parameter will create a new resource.
	// + If the value of `vaultId` is empty, then a private system image will be created.
	// + If the value of `vaultId` is not empty, then a private whole image will be created.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to automatically configure. If automatic backend
	// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
	// Changing this parameter will create a new resource.
	IsConfig *bool `pulumi:"isConfig"`
	// Specifies the maximum memory of the image in the unit of MB.
	MaxRam *int `pulumi:"maxRam"`
	// Specifies the minimum size of the system disk in the unit of GB. This parameter
	// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
	// Changing this parameter will create a new resource.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
	// indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the image.
	Name *string `pulumi:"name"`
	// Specifies the OS version.
	// Changing this parameter will create a new resource.
	// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The status of the image.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
	// or **Ironic**. Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
	VaultId *string `pulumi:"vaultId"`
	// Whether the image is visible to other tenants.
	Visibility *string `pulumi:"visibility"`
	// Specifies the ID of the data disk. This parameter is valid and mandatory
	// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
	// Changing this parameter will create a new resource.
	VolumeId *string `pulumi:"volumeId"`
}

type ImageState struct {
	// Specifies the ID of the CBR backup that needs to be converted into an
	// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
	// Changing this parameter will create a new resource.
	BackupId pulumi.StringPtrInput
	// The checksum of the data associated with the image.
	Checksum pulumi.StringPtrInput
	// Specifies the master key used for encrypting an image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringPtrInput
	// The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
	// **file,image_url**, or **volume,volume_id**.
	DataOrigin pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
	DiskFormat pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image
	// belongs. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The size(bytes) of the image file format.
	ImageSize pulumi.StringPtrInput
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
	// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
	// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
	// Changing this parameter will create a new resource.
	ImageUrl pulumi.StringPtrInput
	// Specifies the ID of the ECS that needs to be converted into an image.
	// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
	// ECS instance. Changing this parameter will create a new resource.
	// + If the value of `vaultId` is empty, then a private system image will be created.
	// + If the value of `vaultId` is not empty, then a private whole image will be created.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to automatically configure. If automatic backend
	// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
	// Changing this parameter will create a new resource.
	IsConfig pulumi.BoolPtrInput
	// Specifies the maximum memory of the image in the unit of MB.
	MaxRam pulumi.IntPtrInput
	// Specifies the minimum size of the system disk in the unit of GB. This parameter
	// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
	// Changing this parameter will create a new resource.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk pulumi.IntPtrInput
	// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
	// indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the image.
	Name pulumi.StringPtrInput
	// Specifies the OS version.
	// Changing this parameter will create a new resource.
	// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
	OsVersion pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The status of the image.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
	// or **Ironic**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrInput
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringPtrInput
	// Specifies the ID of the data disk. This parameter is valid and mandatory
	// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Specifies the ID of the CBR backup that needs to be converted into an
	// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
	// Changing this parameter will create a new resource.
	BackupId *string `pulumi:"backupId"`
	// Specifies the master key used for encrypting an image.
	// Changing this parameter will create a new resource.
	CmkId *string `pulumi:"cmkId"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the IMS image
	// belongs. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
	// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
	// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
	// Changing this parameter will create a new resource.
	ImageUrl *string `pulumi:"imageUrl"`
	// Specifies the ID of the ECS that needs to be converted into an image.
	// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
	// ECS instance. Changing this parameter will create a new resource.
	// + If the value of `vaultId` is empty, then a private system image will be created.
	// + If the value of `vaultId` is not empty, then a private whole image will be created.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to automatically configure. If automatic backend
	// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
	// Changing this parameter will create a new resource.
	IsConfig *bool `pulumi:"isConfig"`
	// Specifies the maximum memory of the image in the unit of MB.
	MaxRam *int `pulumi:"maxRam"`
	// Specifies the minimum size of the system disk in the unit of GB. This parameter
	// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
	// Changing this parameter will create a new resource.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
	// indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the image.
	Name *string `pulumi:"name"`
	// Specifies the OS version.
	// Changing this parameter will create a new resource.
	// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
	// or **Ironic**. Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
	VaultId *string `pulumi:"vaultId"`
	// Specifies the ID of the data disk. This parameter is valid and mandatory
	// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
	// Changing this parameter will create a new resource.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Specifies the ID of the CBR backup that needs to be converted into an
	// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
	// Changing this parameter will create a new resource.
	BackupId pulumi.StringPtrInput
	// Specifies the master key used for encrypting an image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image
	// belongs. For enterprise users, if omitted, default enterprise project will be used.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
	// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
	// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
	// Changing this parameter will create a new resource.
	ImageUrl pulumi.StringPtrInput
	// Specifies the ID of the ECS that needs to be converted into an image.
	// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
	// ECS instance. Changing this parameter will create a new resource.
	// + If the value of `vaultId` is empty, then a private system image will be created.
	// + If the value of `vaultId` is not empty, then a private whole image will be created.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to automatically configure. If automatic backend
	// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
	// Changing this parameter will create a new resource.
	IsConfig pulumi.BoolPtrInput
	// Specifies the maximum memory of the image in the unit of MB.
	MaxRam pulumi.IntPtrInput
	// Specifies the minimum size of the system disk in the unit of GB. This parameter
	// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
	// Changing this parameter will create a new resource.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk pulumi.IntPtrInput
	// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
	// indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the image.
	Name pulumi.StringPtrInput
	// Specifies the OS version.
	// Changing this parameter will create a new resource.
	// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
	OsVersion pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
	// or **Ironic**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrInput
	// Specifies the ID of the data disk. This parameter is valid and mandatory
	// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// Specifies the ID of the CBR backup that needs to be converted into an
// image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
// Changing this parameter will create a new resource.
func (o ImageOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// The checksum of the data associated with the image.
func (o ImageOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

// Specifies the master key used for encrypting an image.
// Changing this parameter will create a new resource.
func (o ImageOutput) CmkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.CmkId }).(pulumi.StringPtrOutput)
}

// The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
// **file,image_url**, or **volume,volume_id**.
func (o ImageOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

// Specifies the description of the image.
func (o ImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
func (o ImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the IMS image
// belongs. For enterprise users, if omitted, default enterprise project will be used.
// Changing this parameter will create a new resource.
func (o ImageOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The size(bytes) of the image file format.
func (o ImageOutput) ImageSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageSize }).(pulumi.StringOutput)
}

// Specifies the URL of the external image file in the OBS bucket, the format
// is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
// and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
// image from an external file uploaded to an OBS bucket, and this parameter can only be used with `minDisk`.
// Changing this parameter will create a new resource.
func (o ImageOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the ECS that needs to be converted into an image.
// This parameter is valid and mandatory only when you create a private system image or a private whole image from an
// ECS instance. Changing this parameter will create a new resource.
// + If the value of `vaultId` is empty, then a private system image will be created.
// + If the value of `vaultId` is not empty, then a private whole image will be created.
func (o ImageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether to automatically configure. If automatic backend
// configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
// Changing this parameter will create a new resource.
func (o ImageOutput) IsConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.IsConfig }).(pulumi.BoolPtrOutput)
}

// Specifies the maximum memory of the image in the unit of MB.
func (o ImageOutput) MaxRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MaxRam }).(pulumi.IntOutput)
}

// Specifies the minimum size of the system disk in the unit of GB. This parameter
// is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
// Changing this parameter will create a new resource.
// + When the operating system is Linux, the value ranges from `10` to `1,024`.
// + When the operating system is Windows, the value ranges from `20` to `1,024`.
func (o ImageOutput) MinDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.IntPtrOutput { return v.MinDisk }).(pulumi.IntPtrOutput)
}

// Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
// indicating that the memory is not restricted.
func (o ImageOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MinRam }).(pulumi.IntOutput)
}

// Specifies the name of the image.
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the OS version.
// Changing this parameter will create a new resource.
// For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
func (o ImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ImageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the image.
func (o ImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the image.
func (o ImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
// or **Ironic**. Changing this parameter will create a new resource.
func (o ImageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the vault to which an ECS instance is to be added or has
// been added. This parameter can only be used with `instanceId`. Changing this parameter will create a new resource.
func (o ImageOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.VaultId }).(pulumi.StringPtrOutput)
}

// Whether the image is visible to other tenants.
func (o ImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// Specifies the ID of the data disk. This parameter is valid and mandatory
// when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
// Changing this parameter will create a new resource.
func (o ImageOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}

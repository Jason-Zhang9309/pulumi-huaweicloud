// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get an available IMS image within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			_, err := Ims.GetImage(ctx, &ims.GetImageArgs{
//				ImageId: pulumi.StringRef(imageId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImage(ctx, &ims.GetImageArgs{
//				Name:       pulumi.StringRef("Ubuntu 18.04 server 64bit"),
//				Visibility: pulumi.StringRef("public"),
//				MostRecent: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImage(ctx, &ims.GetImageArgs{
//				Architecture: pulumi.StringRef("x86"),
//				Visibility:   pulumi.StringRef("public"),
//				MostRecent:   pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImage(ctx, &ims.GetImageArgs{
//				Architecture: pulumi.StringRef("x86"),
//				NameRegex:    pulumi.StringRef("^CentOS 7.4"),
//				Visibility:   pulumi.StringRef("public"),
//				MostRecent:   pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImage(ctx, &ims.GetImageArgs{
//				Architecture: pulumi.StringRef("x86"),
//				ImageType:    pulumi.StringRef("Ironic"),
//				Visibility:   pulumi.StringRef("public"),
//				MostRecent:   pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("huaweicloud:Ims/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// Specifies the image architecture type. The value can be **x86** or **arm**.
	Architecture *string `pulumi:"architecture"`
	// Specifies the enterprise project ID of the image.
	// For enterprise users, if omitted, will query the images under all enterprise projects.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ECS flavor ID used to filter out available images.
	// You can specify only one flavor ID and only ECS flavor ID is valid, BMS flavor is not supported.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the ID of the image.
	ImageId *string `pulumi:"imageId"`
	// Specifies the environment where the image is used.
	// The valid values are as follows:
	// + **FusionCompute**: Cloud server image, also known as system disk image.
	// + **DataImage**: Data disk image.
	// + **Ironic**: Bare metal server image.
	// + **IsoImage**: ISO image.
	ImageType *string `pulumi:"imageType"`
	// Specifies whether it is a whole image. The valid value is **true** or **false**.
	// Defaults to **false**.
	IsWholeImage *bool `pulumi:"isWholeImage"`
	// Specifies whether to return the latest updated image if the query returns more than
	// results. The valid value is **true** or **false**. Defaults to **false**.
	MostRecent *bool `pulumi:"mostRecent"`
	// Specifies the name of the image. Cannot be used simultaneously with `nameRegex`.
	Name *string `pulumi:"name"`
	// Specifies the regular expression of the name of the image.
	// Cannot be used simultaneously with `name`.
	NameRegex *string `pulumi:"nameRegex"`
	// Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
	// **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
	Os *string `pulumi:"os"`
	// The operating system version of the image.
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the owner (UUID) of the image.
	Owner *string `pulumi:"owner"`
	// Specifies the region in which to obtain the images.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Deprecated: size_max is deprecated
	SizeMax *int `pulumi:"sizeMax"`
	// Deprecated: size_min is deprecated
	SizeMin *int `pulumi:"sizeMin"`
	// Specifies whether to sort the query results in ascending or descending order.
	// The valid values are as follows:
	// + **asc**: Ascending order.
	// + **desc**: Descending order.
	SortDirection *string `pulumi:"sortDirection"`
	// Specifies which field to use for sorting. The valid values are **name**,
	// **container_format**, **disk_format**, **status**, **id**, **size**, and **created_at**. Defaults to **name**.
	SortKey *string `pulumi:"sortKey"`
	// Specifies the image tag in **Key=Value** format.
	Tag *string `pulumi:"tag"`
	// Specifies the visibility of the image. Must be one of **public**, **private**,
	// **market** or **shared**.
	Visibility *string `pulumi:"visibility"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt     string `pulumi:"activeAt"`
	Architecture string `pulumi:"architecture"`
	// The backup ID of the whole image in the CBR vault.
	BackupId string `pulumi:"backupId"`
	Checksum string `pulumi:"checksum"`
	// The format of the image's container.
	ContainerFormat string `pulumi:"containerFormat"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt string `pulumi:"createdAt"`
	// The image source. The format is **server_backup,backup_id**,  **instance,instance_id**,
	// **server_backup,vault_id**,  **volume,volume_id**, **file,image_url**, or **image,region,image_id**.
	DataOrigin string `pulumi:"dataOrigin"`
	// The description of the image.
	Description string `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat          string `pulumi:"diskFormat"`
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The image file download and upload links.
	File     string  `pulumi:"file"`
	FlavorId *string `pulumi:"flavorId"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	ImageId      string `pulumi:"imageId"`
	ImageType    string `pulumi:"imageType"`
	IsWholeImage *bool  `pulumi:"isWholeImage"`
	// The maximum memory supported by the image, in MB unit.
	MaxRamMb int               `pulumi:"maxRamMb"`
	Metadata map[string]string `pulumi:"metadata"`
	// The minimum disk space required to run an image, in GB unit.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDiskGb int `pulumi:"minDiskGb"`
	// The minimum memory required to run an image, in MB unit.
	MinRamMb   int     `pulumi:"minRamMb"`
	MostRecent *bool   `pulumi:"mostRecent"`
	Name       string  `pulumi:"name"`
	NameRegex  *string `pulumi:"nameRegex"`
	Os         string  `pulumi:"os"`
	// The operating system version of the image.
	OsVersion string `pulumi:"osVersion"`
	Owner     string `pulumi:"owner"`
	// Indicates whether the image is protected, protected images cannot be deleted.
	// The valid value is **true** or **false**.
	Protected bool   `pulumi:"protected"`
	Region    string `pulumi:"region"`
	// The image view.
	Schema string `pulumi:"schema"`
	// The size of the image file, in bytes unit.
	SizeBytes int `pulumi:"sizeBytes"`
	// Deprecated: size_max is deprecated
	SizeMax *int `pulumi:"sizeMax"`
	// Deprecated: size_min is deprecated
	SizeMin       *int    `pulumi:"sizeMin"`
	SortDirection *string `pulumi:"sortDirection"`
	SortKey       *string `pulumi:"sortKey"`
	// The status of the image. The valid value is **active**.
	Status string  `pulumi:"status"`
	Tag    *string `pulumi:"tag"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt  string `pulumi:"updatedAt"`
	Visibility string `pulumi:"visibility"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageResult, error) {
			args := v.(LookupImageArgs)
			r, err := LookupImage(ctx, &args, opts...)
			var s LookupImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// Specifies the image architecture type. The value can be **x86** or **arm**.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// Specifies the enterprise project ID of the image.
	// For enterprise users, if omitted, will query the images under all enterprise projects.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the ECS flavor ID used to filter out available images.
	// You can specify only one flavor ID and only ECS flavor ID is valid, BMS flavor is not supported.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// Specifies the ID of the image.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// Specifies the environment where the image is used.
	// The valid values are as follows:
	// + **FusionCompute**: Cloud server image, also known as system disk image.
	// + **DataImage**: Data disk image.
	// + **Ironic**: Bare metal server image.
	// + **IsoImage**: ISO image.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Specifies whether it is a whole image. The valid value is **true** or **false**.
	// Defaults to **false**.
	IsWholeImage pulumi.BoolPtrInput `pulumi:"isWholeImage"`
	// Specifies whether to return the latest updated image if the query returns more than
	// results. The valid value is **true** or **false**. Defaults to **false**.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// Specifies the name of the image. Cannot be used simultaneously with `nameRegex`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the regular expression of the name of the image.
	// Cannot be used simultaneously with `name`.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
	// **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
	Os pulumi.StringPtrInput `pulumi:"os"`
	// The operating system version of the image.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
	// Specifies the owner (UUID) of the image.
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// Specifies the region in which to obtain the images.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Deprecated: size_max is deprecated
	SizeMax pulumi.IntPtrInput `pulumi:"sizeMax"`
	// Deprecated: size_min is deprecated
	SizeMin pulumi.IntPtrInput `pulumi:"sizeMin"`
	// Specifies whether to sort the query results in ascending or descending order.
	// The valid values are as follows:
	// + **asc**: Ascending order.
	// + **desc**: Descending order.
	SortDirection pulumi.StringPtrInput `pulumi:"sortDirection"`
	// Specifies which field to use for sorting. The valid values are **name**,
	// **container_format**, **disk_format**, **status**, **id**, **size**, and **created_at**. Defaults to **name**.
	SortKey pulumi.StringPtrInput `pulumi:"sortKey"`
	// Specifies the image tag in **Key=Value** format.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// Specifies the visibility of the image. Must be one of **public**, **private**,
	// **market** or **shared**.
	Visibility pulumi.StringPtrInput `pulumi:"visibility"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

// The time when the image status changes to active, in RFC3339 format.
func (o LookupImageResultOutput) ActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ActiveAt }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// The backup ID of the whole image in the CBR vault.
func (o LookupImageResultOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.BackupId }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Checksum }).(pulumi.StringOutput)
}

// The format of the image's container.
func (o LookupImageResultOutput) ContainerFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ContainerFormat }).(pulumi.StringOutput)
}

// The creation time of the image, in RFC3339 format.
func (o LookupImageResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The image source. The format is **server_backup,backup_id**,  **instance,instance_id**,
// **server_backup,vault_id**,  **volume,volume_id**, **file,image_url**, or **image,region,image_id**.
func (o LookupImageResultOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.DataOrigin }).(pulumi.StringOutput)
}

// The description of the image.
func (o LookupImageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Description }).(pulumi.StringOutput)
}

// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
func (o LookupImageResultOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.DiskFormat }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The image file download and upload links.
func (o LookupImageResultOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.File }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.FlavorId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageType }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) IsWholeImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *bool { return v.IsWholeImage }).(pulumi.BoolPtrOutput)
}

// The maximum memory supported by the image, in MB unit.
func (o LookupImageResultOutput) MaxRamMb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.MaxRamMb }).(pulumi.IntOutput)
}

func (o LookupImageResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupImageResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The minimum disk space required to run an image, in GB unit.
// + When the operating system is Linux, the value ranges from `10` to `1,024`.
// + When the operating system is Windows, the value ranges from `20` to `1,024`.
func (o LookupImageResultOutput) MinDiskGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.MinDiskGb }).(pulumi.IntOutput)
}

// The minimum memory required to run an image, in MB unit.
func (o LookupImageResultOutput) MinRamMb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.MinRamMb }).(pulumi.IntOutput)
}

func (o LookupImageResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

func (o LookupImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o LookupImageResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Os }).(pulumi.StringOutput)
}

// The operating system version of the image.
func (o LookupImageResultOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.OsVersion }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Owner }).(pulumi.StringOutput)
}

// Indicates whether the image is protected, protected images cannot be deleted.
// The valid value is **true** or **false**.
func (o LookupImageResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o LookupImageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Region }).(pulumi.StringOutput)
}

// The image view.
func (o LookupImageResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Schema }).(pulumi.StringOutput)
}

// The size of the image file, in bytes unit.
func (o LookupImageResultOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.SizeBytes }).(pulumi.IntOutput)
}

// Deprecated: size_max is deprecated
func (o LookupImageResultOutput) SizeMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *int { return v.SizeMax }).(pulumi.IntPtrOutput)
}

// Deprecated: size_min is deprecated
func (o LookupImageResultOutput) SizeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *int { return v.SizeMin }).(pulumi.IntPtrOutput)
}

func (o LookupImageResultOutput) SortDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.SortDirection }).(pulumi.StringPtrOutput)
}

func (o LookupImageResultOutput) SortKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.SortKey }).(pulumi.StringPtrOutput)
}

// The status of the image. The valid value is **active**.
func (o LookupImageResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The last update time of the image, in RFC3339 format.
func (o LookupImageResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Visibility }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}

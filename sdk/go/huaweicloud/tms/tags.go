// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages TMS tags resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Tms"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Tms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tms.NewTags(ctx, "test", &Tms.TagsArgs{
//				Tags: tms.TagsTagArray{
//					&tms.TagsTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Tags struct {
	pulumi.CustomResourceState

	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	Tags TagsTagArrayOutput `pulumi:"tags"`
}

// NewTags registers a new resource with the given unique name, arguments, and options.
func NewTags(ctx *pulumi.Context,
	name string, args *TagsArgs, opts ...pulumi.ResourceOption) (*Tags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	var resource Tags
	err := ctx.RegisterResource("huaweicloud:Tms/tags:Tags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTags gets an existing Tags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagsState, opts ...pulumi.ResourceOption) (*Tags, error) {
	var resource Tags
	err := ctx.ReadResource("huaweicloud:Tms/tags:Tags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tags resources.
type tagsState struct {
	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	Tags []TagsTag `pulumi:"tags"`
}

type TagsState struct {
	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	Tags TagsTagArrayInput
}

func (TagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsState)(nil)).Elem()
}

type tagsArgs struct {
	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	Tags []TagsTag `pulumi:"tags"`
}

// The set of arguments for constructing a Tags resource.
type TagsArgs struct {
	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	Tags TagsTagArrayInput
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsArgs)(nil)).Elem()
}

type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(ctx context.Context) TagsOutput
}

func (*Tags) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (i *Tags) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i *Tags) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

// TagsArrayInput is an input type that accepts TagsArray and TagsArrayOutput values.
// You can construct a concrete instance of `TagsArrayInput` via:
//
//	TagsArray{ TagsArgs{...} }
type TagsArrayInput interface {
	pulumi.Input

	ToTagsArrayOutput() TagsArrayOutput
	ToTagsArrayOutputWithContext(context.Context) TagsArrayOutput
}

type TagsArray []TagsInput

func (TagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tags)(nil)).Elem()
}

func (i TagsArray) ToTagsArrayOutput() TagsArrayOutput {
	return i.ToTagsArrayOutputWithContext(context.Background())
}

func (i TagsArray) ToTagsArrayOutputWithContext(ctx context.Context) TagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsArrayOutput)
}

// TagsMapInput is an input type that accepts TagsMap and TagsMapOutput values.
// You can construct a concrete instance of `TagsMapInput` via:
//
//	TagsMap{ "key": TagsArgs{...} }
type TagsMapInput interface {
	pulumi.Input

	ToTagsMapOutput() TagsMapOutput
	ToTagsMapOutputWithContext(context.Context) TagsMapOutput
}

type TagsMap map[string]TagsInput

func (TagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tags)(nil)).Elem()
}

func (i TagsMap) ToTagsMapOutput() TagsMapOutput {
	return i.ToTagsMapOutputWithContext(context.Background())
}

func (i TagsMap) ToTagsMapOutputWithContext(ctx context.Context) TagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsMapOutput)
}

type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

// Specifies an array of one or more predefined tags. The tags object
// structure is documented below. Changing this will create a new resource.
func (o TagsOutput) Tags() TagsTagArrayOutput {
	return o.ApplyT(func(v *Tags) TagsTagArrayOutput { return v.Tags }).(TagsTagArrayOutput)
}

type TagsArrayOutput struct{ *pulumi.OutputState }

func (TagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tags)(nil)).Elem()
}

func (o TagsArrayOutput) ToTagsArrayOutput() TagsArrayOutput {
	return o
}

func (o TagsArrayOutput) ToTagsArrayOutputWithContext(ctx context.Context) TagsArrayOutput {
	return o
}

func (o TagsArrayOutput) Index(i pulumi.IntInput) TagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tags {
		return vs[0].([]*Tags)[vs[1].(int)]
	}).(TagsOutput)
}

type TagsMapOutput struct{ *pulumi.OutputState }

func (TagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tags)(nil)).Elem()
}

func (o TagsMapOutput) ToTagsMapOutput() TagsMapOutput {
	return o
}

func (o TagsMapOutput) ToTagsMapOutputWithContext(ctx context.Context) TagsMapOutput {
	return o
}

func (o TagsMapOutput) MapIndex(k pulumi.StringInput) TagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tags {
		return vs[0].(map[string]*Tags)[vs[1].(string)]
	}).(TagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagsInput)(nil)).Elem(), &Tags{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsArrayInput)(nil)).Elem(), TagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsMapInput)(nil)).Elem(), TagsMap{})
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsArrayOutput{})
	pulumi.RegisterOutputType(TagsMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TagsTag struct {
	// Specifies the tag key. The value can contain up to `36` characters. Only English letters,
	// Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
	Key string `pulumi:"key"`
	// Specifies the tag value. The value can contain up to `43` characters. Only English letters,
	// Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
	Value string `pulumi:"value"`
}

// TagsTagInput is an input type that accepts TagsTagArgs and TagsTagOutput values.
// You can construct a concrete instance of `TagsTagInput` via:
//
//	TagsTagArgs{...}
type TagsTagInput interface {
	pulumi.Input

	ToTagsTagOutput() TagsTagOutput
	ToTagsTagOutputWithContext(context.Context) TagsTagOutput
}

type TagsTagArgs struct {
	// Specifies the tag key. The value can contain up to `36` characters. Only English letters,
	// Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies the tag value. The value can contain up to `43` characters. Only English letters,
	// Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTag)(nil)).Elem()
}

func (i TagsTagArgs) ToTagsTagOutput() TagsTagOutput {
	return i.ToTagsTagOutputWithContext(context.Background())
}

func (i TagsTagArgs) ToTagsTagOutputWithContext(ctx context.Context) TagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagOutput)
}

// TagsTagArrayInput is an input type that accepts TagsTagArray and TagsTagArrayOutput values.
// You can construct a concrete instance of `TagsTagArrayInput` via:
//
//	TagsTagArray{ TagsTagArgs{...} }
type TagsTagArrayInput interface {
	pulumi.Input

	ToTagsTagArrayOutput() TagsTagArrayOutput
	ToTagsTagArrayOutputWithContext(context.Context) TagsTagArrayOutput
}

type TagsTagArray []TagsTagInput

func (TagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTag)(nil)).Elem()
}

func (i TagsTagArray) ToTagsTagArrayOutput() TagsTagArrayOutput {
	return i.ToTagsTagArrayOutputWithContext(context.Background())
}

func (i TagsTagArray) ToTagsTagArrayOutputWithContext(ctx context.Context) TagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagArrayOutput)
}

type TagsTagOutput struct{ *pulumi.OutputState }

func (TagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTag)(nil)).Elem()
}

func (o TagsTagOutput) ToTagsTagOutput() TagsTagOutput {
	return o
}

func (o TagsTagOutput) ToTagsTagOutputWithContext(ctx context.Context) TagsTagOutput {
	return o
}

// Specifies the tag key. The value can contain up to `36` characters. Only English letters,
// Chinese characters, digits, hyphens (-) and underscores (_) are allowed.
func (o TagsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies the tag value. The value can contain up to `43` characters. Only English letters,
// Chinese characters, digits, periods (.), hyphens (-) and underscores (_) are allowed.
func (o TagsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.Value }).(pulumi.StringOutput)
}

type TagsTagArrayOutput struct{ *pulumi.OutputState }

func (TagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTag)(nil)).Elem()
}

func (o TagsTagArrayOutput) ToTagsTagArrayOutput() TagsTagArrayOutput {
	return o
}

func (o TagsTagArrayOutput) ToTagsTagArrayOutputWithContext(ctx context.Context) TagsTagArrayOutput {
	return o
}

func (o TagsTagArrayOutput) Index(i pulumi.IntInput) TagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagsTag {
		return vs[0].([]TagsTag)[vs[1].(int)]
	}).(TagsTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagInput)(nil)).Elem(), TagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagArrayInput)(nil)).Elem(), TagsTagArray{})
	pulumi.RegisterOutputType(TagsTagOutput{})
	pulumi.RegisterOutputType(TagsTagArrayOutput{})
}

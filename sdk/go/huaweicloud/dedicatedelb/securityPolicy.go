// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB security policy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DedicatedElb.NewSecurityPolicy(ctx, "test", &DedicatedElb.SecurityPolicyArgs{
//				Ciphers: pulumi.StringArray{
//					pulumi.String("ECDHE-RSA-AES256-GCM-SHA384"),
//					pulumi.String("ECDHE-RSA-AES128-GCM-SHA256"),
//				},
//				Description: pulumi.String("this is a security policy"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("TLSv1"),
//					pulumi.String("TLSv1.1"),
//					pulumi.String("TLSv1.2"),
//					pulumi.String("TLSv1.3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The elb security policies can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/securityPolicy:SecurityPolicy test 0ce123456a00f2591fabc00385ff1234
//
// ```
type SecurityPolicy struct {
	pulumi.CustomResourceState

	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers pulumi.StringArrayOutput `pulumi:"ciphers"`
	// The create time of the security policy.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners SecurityPolicyListenerArrayOutput `pulumi:"listeners"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The update time of the security policy.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewSecurityPolicy(ctx *pulumi.Context,
	name string, args *SecurityPolicyArgs, opts ...pulumi.ResourceOption) (*SecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ciphers == nil {
		return nil, errors.New("invalid value for required argument 'Ciphers'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SecurityPolicy
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/securityPolicy:SecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPolicy gets an existing SecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPolicyState, opts ...pulumi.ResourceOption) (*SecurityPolicy, error) {
	var resource SecurityPolicy
	err := ctx.ReadResource("huaweicloud:DedicatedElb/securityPolicy:SecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPolicy resources.
type securityPolicyState struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers []string `pulumi:"ciphers"`
	// The create time of the security policy.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners []SecurityPolicyListener `pulumi:"listeners"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name *string `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols []string `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The update time of the security policy.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SecurityPolicyState struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers pulumi.StringArrayInput
	// The create time of the security policy.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners SecurityPolicyListenerArrayInput
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringPtrInput
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The update time of the security policy.
	UpdatedAt pulumi.StringPtrInput
}

func (SecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyState)(nil)).Elem()
}

type securityPolicyArgs struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers []string `pulumi:"ciphers"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name *string `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols []string `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SecurityPolicy resource.
type SecurityPolicyArgs struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers pulumi.StringArrayInput
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringPtrInput
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (SecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyArgs)(nil)).Elem()
}

type SecurityPolicyInput interface {
	pulumi.Input

	ToSecurityPolicyOutput() SecurityPolicyOutput
	ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput
}

func (*SecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicy)(nil)).Elem()
}

func (i *SecurityPolicy) ToSecurityPolicyOutput() SecurityPolicyOutput {
	return i.ToSecurityPolicyOutputWithContext(context.Background())
}

func (i *SecurityPolicy) ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyOutput)
}

// SecurityPolicyArrayInput is an input type that accepts SecurityPolicyArray and SecurityPolicyArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyArrayInput` via:
//
//	SecurityPolicyArray{ SecurityPolicyArgs{...} }
type SecurityPolicyArrayInput interface {
	pulumi.Input

	ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput
	ToSecurityPolicyArrayOutputWithContext(context.Context) SecurityPolicyArrayOutput
}

type SecurityPolicyArray []SecurityPolicyInput

func (SecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicy)(nil)).Elem()
}

func (i SecurityPolicyArray) ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput {
	return i.ToSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyArray) ToSecurityPolicyArrayOutputWithContext(ctx context.Context) SecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyArrayOutput)
}

// SecurityPolicyMapInput is an input type that accepts SecurityPolicyMap and SecurityPolicyMapOutput values.
// You can construct a concrete instance of `SecurityPolicyMapInput` via:
//
//	SecurityPolicyMap{ "key": SecurityPolicyArgs{...} }
type SecurityPolicyMapInput interface {
	pulumi.Input

	ToSecurityPolicyMapOutput() SecurityPolicyMapOutput
	ToSecurityPolicyMapOutputWithContext(context.Context) SecurityPolicyMapOutput
}

type SecurityPolicyMap map[string]SecurityPolicyInput

func (SecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicy)(nil)).Elem()
}

func (i SecurityPolicyMap) ToSecurityPolicyMapOutput() SecurityPolicyMapOutput {
	return i.ToSecurityPolicyMapOutputWithContext(context.Background())
}

func (i SecurityPolicyMap) ToSecurityPolicyMapOutputWithContext(ctx context.Context) SecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyMapOutput)
}

type SecurityPolicyOutput struct{ *pulumi.OutputState }

func (SecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyOutput) ToSecurityPolicyOutput() SecurityPolicyOutput {
	return o
}

func (o SecurityPolicyOutput) ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput {
	return o
}

// Specifies the cipher suite list of the security policy.
// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
// ciphers that matches the protocol. The following cipher suites are supported:
// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
// **TLS_AES_128_CCM_8_SHA256**.
func (o SecurityPolicyOutput) Ciphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringArrayOutput { return v.Ciphers }).(pulumi.StringArrayOutput)
}

// The create time of the security policy.
func (o SecurityPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the ELB security policy.
// The value can contain 0 to 255 characters.
func (o SecurityPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the Enterprise
// router belongs.
func (o SecurityPolicyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The listener which the security policy associated with.
// The ListenerRef structure is documented below.
func (o SecurityPolicyOutput) Listeners() SecurityPolicyListenerArrayOutput {
	return o.ApplyT(func(v *SecurityPolicy) SecurityPolicyListenerArrayOutput { return v.Listeners }).(SecurityPolicyListenerArrayOutput)
}

// Specifies the ELB security policy name.
// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
// and cannot exceed 255 characters.
func (o SecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the TSL protocol list which the security policy select.
// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
func (o SecurityPolicyOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o SecurityPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The update time of the security policy.
func (o SecurityPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyArrayOutput) ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput {
	return o
}

func (o SecurityPolicyArrayOutput) ToSecurityPolicyArrayOutputWithContext(ctx context.Context) SecurityPolicyArrayOutput {
	return o
}

func (o SecurityPolicyArrayOutput) Index(i pulumi.IntInput) SecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityPolicy {
		return vs[0].([]*SecurityPolicy)[vs[1].(int)]
	}).(SecurityPolicyOutput)
}

type SecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (SecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyMapOutput) ToSecurityPolicyMapOutput() SecurityPolicyMapOutput {
	return o
}

func (o SecurityPolicyMapOutput) ToSecurityPolicyMapOutputWithContext(ctx context.Context) SecurityPolicyMapOutput {
	return o
}

func (o SecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) SecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityPolicy {
		return vs[0].(map[string]*SecurityPolicy)[vs[1].(string)]
	}).(SecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyInput)(nil)).Elem(), &SecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyArrayInput)(nil)).Elem(), SecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyMapInput)(nil)).Elem(), SecurityPolicyMap{})
	pulumi.RegisterOutputType(SecurityPolicyOutput{})
	pulumi.RegisterOutputType(SecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of ELB logtanks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			logtankId := cfg.RequireObject("logtankId")
//			_, err := DedicatedElb.GetLogtanks(ctx, &dedicatedelb.GetLogtanksArgs{
//				LogtankId: pulumi.StringRef(logtankId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLogtanks(ctx *pulumi.Context, args *GetLogtanksArgs, opts ...pulumi.InvokeOption) (*GetLogtanksResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetLogtanksResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getLogtanks:getLogtanks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogtanks.
type GetLogtanksArgs struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ID of a load balancer
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the log group ID.
	LogGroupId *string `pulumi:"logGroupId"`
	// Specifies the log topic ID.
	LogTopicId *string `pulumi:"logTopicId"`
	// Specifies the ID of the log tank.
	LogtankId *string `pulumi:"logtankId"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getLogtanks.
type GetLogtanksResult struct {
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of a load balancer.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// The log group ID.
	LogGroupId *string `pulumi:"logGroupId"`
	// The log topic ID.
	LogTopicId *string `pulumi:"logTopicId"`
	LogtankId  *string `pulumi:"logtankId"`
	// Lists the logtanks.
	// The logtanks structure is documented below.
	Logtanks []GetLogtanksLogtank `pulumi:"logtanks"`
	Region   string               `pulumi:"region"`
}

func GetLogtanksOutput(ctx *pulumi.Context, args GetLogtanksOutputArgs, opts ...pulumi.InvokeOption) GetLogtanksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLogtanksResult, error) {
			args := v.(GetLogtanksArgs)
			r, err := GetLogtanks(ctx, &args, opts...)
			var s GetLogtanksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLogtanksResultOutput)
}

// A collection of arguments for invoking getLogtanks.
type GetLogtanksOutputArgs struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the ID of a load balancer
	LoadbalancerId pulumi.StringPtrInput `pulumi:"loadbalancerId"`
	// Specifies the log group ID.
	LogGroupId pulumi.StringPtrInput `pulumi:"logGroupId"`
	// Specifies the log topic ID.
	LogTopicId pulumi.StringPtrInput `pulumi:"logTopicId"`
	// Specifies the ID of the log tank.
	LogtankId pulumi.StringPtrInput `pulumi:"logtankId"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetLogtanksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogtanksArgs)(nil)).Elem()
}

// A collection of values returned by getLogtanks.
type GetLogtanksResultOutput struct{ *pulumi.OutputState }

func (GetLogtanksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogtanksResult)(nil)).Elem()
}

func (o GetLogtanksResultOutput) ToGetLogtanksResultOutput() GetLogtanksResultOutput {
	return o
}

func (o GetLogtanksResultOutput) ToGetLogtanksResultOutputWithContext(ctx context.Context) GetLogtanksResultOutput {
	return o
}

func (o GetLogtanksResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogtanksResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLogtanksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogtanksResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of a load balancer.
func (o GetLogtanksResultOutput) LoadbalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogtanksResult) *string { return v.LoadbalancerId }).(pulumi.StringPtrOutput)
}

// The log group ID.
func (o GetLogtanksResultOutput) LogGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogtanksResult) *string { return v.LogGroupId }).(pulumi.StringPtrOutput)
}

// The log topic ID.
func (o GetLogtanksResultOutput) LogTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogtanksResult) *string { return v.LogTopicId }).(pulumi.StringPtrOutput)
}

func (o GetLogtanksResultOutput) LogtankId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogtanksResult) *string { return v.LogtankId }).(pulumi.StringPtrOutput)
}

// Lists the logtanks.
// The logtanks structure is documented below.
func (o GetLogtanksResultOutput) Logtanks() GetLogtanksLogtankArrayOutput {
	return o.ApplyT(func(v GetLogtanksResult) []GetLogtanksLogtank { return v.Logtanks }).(GetLogtanksLogtankArrayOutput)
}

func (o GetLogtanksResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogtanksResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLogtanksResultOutput{})
}

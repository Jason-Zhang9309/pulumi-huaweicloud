// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB monitor resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			poolId := cfg.RequireObject("poolId")
//			_, err := DedicatedElb.NewMonitor(ctx, "monitor1", &DedicatedElb.MonitorArgs{
//				PoolId:     pulumi.Any(poolId),
//				Protocol:   pulumi.String("HTTPS"),
//				Interval:   pulumi.Int(30),
//				Timeout:    pulumi.Int(20),
//				MaxRetries: pulumi.Int(8),
//				UrlPath:    pulumi.String("/bb"),
//				DomainName: pulumi.String("www.bb.com"),
//				Port:       pulumi.Int(8888),
//				StatusCode: pulumi.String("200,301,404-500,504"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB monitor can be imported using the monitor `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/monitor:Monitor test <id>
//
// ```
type Monitor struct {
	pulumi.CustomResourceState

	// The creation time of the monitor.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies whether the health check is enabled.
	// + **true(default)**: Health check is enabled.
	// + **false**: Health check is disabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
	HttpMethod pulumi.StringOutput `pulumi:"httpMethod"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from `1` to `50`.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
	MaxRetries pulumi.IntOutput `pulumi:"maxRetries"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
	MaxRetriesDown pulumi.IntOutput `pulumi:"maxRetriesDown"`
	// Specifies the health check name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
	// Value ranges from `1` to `65,535`.
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	StatusCode pulumi.StringOutput `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The update time of the monitor.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringOutput `pulumi:"urlPath"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.MaxRetries == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetries'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Monitor
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("huaweicloud:DedicatedElb/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// The creation time of the monitor.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName *string `pulumi:"domainName"`
	// Specifies whether the health check is enabled.
	// + **true(default)**: Health check is enabled.
	// + **false**: Health check is disabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
	HttpMethod *string `pulumi:"httpMethod"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from `1` to `50`.
	Interval *int `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
	MaxRetries *int `pulumi:"maxRetries"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
	MaxRetriesDown *int `pulumi:"maxRetriesDown"`
	// Specifies the health check name.
	Name *string `pulumi:"name"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId *string `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
	// Value ranges from `1` to `65,535`.
	Port *int `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	Protocol *string `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region *string `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	StatusCode *string `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout *int `pulumi:"timeout"`
	// The update time of the monitor.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath *string `pulumi:"urlPath"`
}

type MonitorState struct {
	// The creation time of the monitor.
	CreatedAt pulumi.StringPtrInput
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringPtrInput
	// Specifies whether the health check is enabled.
	// + **true(default)**: Health check is enabled.
	// + **false**: Health check is disabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
	HttpMethod pulumi.StringPtrInput
	// Specifies the interval between health checks, in seconds.
	// Value ranges from `1` to `50`.
	Interval pulumi.IntPtrInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
	MaxRetries pulumi.IntPtrInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
	MaxRetriesDown pulumi.IntPtrInput
	// Specifies the health check name.
	Name pulumi.StringPtrInput
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringPtrInput
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
	// Value ranges from `1` to `65,535`.
	Port pulumi.IntPtrInput
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	Protocol pulumi.StringPtrInput
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringPtrInput
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	StatusCode pulumi.StringPtrInput
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntPtrInput
	// The update time of the monitor.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName *string `pulumi:"domainName"`
	// Specifies whether the health check is enabled.
	// + **true(default)**: Health check is enabled.
	// + **false**: Health check is disabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
	HttpMethod *string `pulumi:"httpMethod"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from `1` to `50`.
	Interval int `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
	MaxRetries int `pulumi:"maxRetries"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
	MaxRetriesDown *int `pulumi:"maxRetriesDown"`
	// Specifies the health check name.
	Name *string `pulumi:"name"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId string `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
	// Value ranges from `1` to `65,535`.
	Port *int `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	Protocol string `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region *string `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	StatusCode *string `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout int `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath *string `pulumi:"urlPath"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringPtrInput
	// Specifies whether the health check is enabled.
	// + **true(default)**: Health check is enabled.
	// + **false**: Health check is disabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
	HttpMethod pulumi.StringPtrInput
	// Specifies the interval between health checks, in seconds.
	// Value ranges from `1` to `50`.
	Interval pulumi.IntInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
	MaxRetries pulumi.IntInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
	MaxRetriesDown pulumi.IntPtrInput
	// Specifies the health check name.
	Name pulumi.StringPtrInput
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringInput
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
	// Value ranges from `1` to `65,535`.
	Port pulumi.IntPtrInput
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
	Protocol pulumi.StringInput
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringPtrInput
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	StatusCode pulumi.StringPtrInput
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntInput
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

// MonitorArrayInput is an input type that accepts MonitorArray and MonitorArrayOutput values.
// You can construct a concrete instance of `MonitorArrayInput` via:
//
//	MonitorArray{ MonitorArgs{...} }
type MonitorArrayInput interface {
	pulumi.Input

	ToMonitorArrayOutput() MonitorArrayOutput
	ToMonitorArrayOutputWithContext(context.Context) MonitorArrayOutput
}

type MonitorArray []MonitorInput

func (MonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (i MonitorArray) ToMonitorArrayOutput() MonitorArrayOutput {
	return i.ToMonitorArrayOutputWithContext(context.Background())
}

func (i MonitorArray) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorArrayOutput)
}

// MonitorMapInput is an input type that accepts MonitorMap and MonitorMapOutput values.
// You can construct a concrete instance of `MonitorMapInput` via:
//
//	MonitorMap{ "key": MonitorArgs{...} }
type MonitorMapInput interface {
	pulumi.Input

	ToMonitorMapOutput() MonitorMapOutput
	ToMonitorMapOutputWithContext(context.Context) MonitorMapOutput
}

type MonitorMap map[string]MonitorInput

func (MonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (i MonitorMap) ToMonitorMapOutput() MonitorMapOutput {
	return i.ToMonitorMapOutputWithContext(context.Background())
}

func (i MonitorMap) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorMapOutput)
}

type MonitorOutput struct{ *pulumi.OutputState }

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

// The creation time of the monitor.
func (o MonitorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the domain name that HTTP requests are sent to during the health check.
// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
// is set to **HTTP** or **HTTPS**.
func (o MonitorOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies whether the health check is enabled.
// + **true(default)**: Health check is enabled.
// + **false**: Health check is disabled.
func (o MonitorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**. Defaults to **GET**.
func (o MonitorOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

// Specifies the interval between health checks, in seconds.
// Value ranges from `1` to `50`.
func (o MonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Specifies the number of consecutive health checks when the health check result of
// a backend server changes from OFFLINE to ONLINE. Value ranges from `1` to `10`.
func (o MonitorOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.MaxRetries }).(pulumi.IntOutput)
}

// Specifies the number of consecutive health checks when the health check result of
// a backend server changes from ONLINE to OFFLINE. The value ranges from `1` to `10`, and the default value is `3`.
func (o MonitorOutput) MaxRetriesDown() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.MaxRetriesDown }).(pulumi.IntOutput)
}

// Specifies the health check name.
func (o MonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of the backend server group for which the health check is
// configured. Changing this creates a new monitor.
func (o MonitorOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// Specifies the port used for the health check. If this parameter is left blank, a port of
// the backend server will be used by default. It is mandatory when the `protocol` of the backend server group is **IP**.
// Value ranges from `1` to `65,535`.
func (o MonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP** or **HTTPS**.
// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
// + If the protocol of the backend server is **GRPC**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
// + If the protocol of the backend server is **TLS**, the value can only be **TCP**, **HTTP**, **HTTPS**, **TLS** or **GRPC**.
func (o MonitorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region in which to create the ELB monitor resource. If omitted, the
// provider-level region will be used. Changing this creates a new monitor.
func (o MonitorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the expected HTTP status code. This parameter will take effect only when
// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
// + A specific value, for example: **200**.
// + A list of values that are separated with commas (,), for example: **200,202**.
// + A value range, for example: **200-204**.
func (o MonitorOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

// Specifies the maximum time required for waiting for a response from the health check,
// in seconds. Value ranges from `1` to `50`. It is recommended that you set the value less than that of
// parameter `interval`.
func (o MonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The update time of the monitor.
func (o MonitorOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the HTTP request path for the health check. The value must start with a
// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
// `protocol` is set to **HTTP** or **HTTPS**.
func (o MonitorOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

type MonitorArrayOutput struct{ *pulumi.OutputState }

func (MonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (o MonitorArrayOutput) ToMonitorArrayOutput() MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) Index(i pulumi.IntInput) MonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].([]*Monitor)[vs[1].(int)]
	}).(MonitorOutput)
}

type MonitorMapOutput struct{ *pulumi.OutputState }

func (MonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (o MonitorMapOutput) ToMonitorMapOutput() MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) MapIndex(k pulumi.StringInput) MonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].(map[string]*Monitor)[vs[1].(string)]
	}).(MonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInput)(nil)).Elem(), &Monitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorArrayInput)(nil)).Elem(), MonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorMapInput)(nil)).Elem(), MonitorMap{})
	pulumi.RegisterOutputType(MonitorOutput{})
	pulumi.RegisterOutputType(MonitorArrayOutput{})
	pulumi.RegisterOutputType(MonitorMapOutput{})
}

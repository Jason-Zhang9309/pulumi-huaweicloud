// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of members under the current project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DedicatedElb.GetAllMembers(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAllMembers(ctx *pulumi.Context, args *GetAllMembersArgs, opts ...pulumi.InvokeOption) (*GetAllMembersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAllMembersResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getAllMembers:getAllMembers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAllMembers.
type GetAllMembersArgs struct {
	// Specifies the IP address of the backend server.
	// Multiple IP addresses can be queried.
	Addresses []string `pulumi:"addresses"`
	// Specifies the ID of the enterprise project.
	// + If `enterpriseProjectId` is not specified, resources in all enterprise projects are queried by default.
	// + If `enterpriseProjectId` is specified, the value can be a specific enterprise project ID or **all_granted_eps**.
	//   Multiple values can be queried.
	EnterpriseProjectIds []string `pulumi:"enterpriseProjectIds"`
	// Specifies the IP address version supported by the backend server group.
	// The value can be **v4** or **v6**.
	// Multiple versions can be queried.
	IpVersions []string `pulumi:"ipVersions"`
	// Specifies the ID of the load balancer with which the load balancer is associated.
	// Multiple IDs can be queried.
	LoadbalancerIds []string `pulumi:"loadbalancerIds"`
	// Specifies the backend server ID.
	// Multiple IDs can be queried.
	MemberIds []string `pulumi:"memberIds"`
	// Specifies the backend server name.
	// Multiple IDs can be queried.
	Names []string `pulumi:"names"`
	// Specifies the operating status of the backend server.
	// Value options:
	// + **ONLINE**: The backend server is running normally.
	// + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
	// + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
	//   Multiple statuses can be queried.
	OperatingStatuses []string `pulumi:"operatingStatuses"`
	// Specifies the ID of the backend server group to which the backend server belongs.
	// Multiple IDs can be queried.
	PoolIds []string `pulumi:"poolIds"`
	// Specifies the port used by the backend servers.
	// Multiple ports can be queried.
	ProtocolPorts []int `pulumi:"protocolPorts"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the ID of the subnet where the backend server works.
	// Multiple IDs can be queried.
	SubnetCidrIds []string `pulumi:"subnetCidrIds"`
	// Specifies the weight of the backend server.
	// Multiple weights can be queried.
	Weights []int `pulumi:"weights"`
}

// A collection of values returned by getAllMembers.
type GetAllMembersResult struct {
	// Indicates the private IP address bound to the backend server.
	Addresses            []string `pulumi:"addresses"`
	EnterpriseProjectIds []string `pulumi:"enterpriseProjectIds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates the IP version supported by the backend server.
	IpVersions []string `pulumi:"ipVersions"`
	// Indicates the ID of the load balancer with which the backend server is associated.
	LoadbalancerIds []string `pulumi:"loadbalancerIds"`
	MemberIds       []string `pulumi:"memberIds"`
	// Indicates the list of backend servers.
	Members []GetAllMembersMember `pulumi:"members"`
	// Indicates the backend server name.
	Names []string `pulumi:"names"`
	// Indicates the health status of the backend server.
	OperatingStatuses []string `pulumi:"operatingStatuses"`
	// Indicates the ID of the backend server group to which the backend server belongs.
	PoolIds []string `pulumi:"poolIds"`
	// Indicates the port used by the backend server to receive requests.
	ProtocolPorts []int  `pulumi:"protocolPorts"`
	Region        string `pulumi:"region"`
	// Indicates the ID of the IPv4 or IPv6 subnet where the backend server resides.
	SubnetCidrIds []string `pulumi:"subnetCidrIds"`
	// Indicates the weight of the backend server.
	Weights []int `pulumi:"weights"`
}

func GetAllMembersOutput(ctx *pulumi.Context, args GetAllMembersOutputArgs, opts ...pulumi.InvokeOption) GetAllMembersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAllMembersResult, error) {
			args := v.(GetAllMembersArgs)
			r, err := GetAllMembers(ctx, &args, opts...)
			var s GetAllMembersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAllMembersResultOutput)
}

// A collection of arguments for invoking getAllMembers.
type GetAllMembersOutputArgs struct {
	// Specifies the IP address of the backend server.
	// Multiple IP addresses can be queried.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Specifies the ID of the enterprise project.
	// + If `enterpriseProjectId` is not specified, resources in all enterprise projects are queried by default.
	// + If `enterpriseProjectId` is specified, the value can be a specific enterprise project ID or **all_granted_eps**.
	//   Multiple values can be queried.
	EnterpriseProjectIds pulumi.StringArrayInput `pulumi:"enterpriseProjectIds"`
	// Specifies the IP address version supported by the backend server group.
	// The value can be **v4** or **v6**.
	// Multiple versions can be queried.
	IpVersions pulumi.StringArrayInput `pulumi:"ipVersions"`
	// Specifies the ID of the load balancer with which the load balancer is associated.
	// Multiple IDs can be queried.
	LoadbalancerIds pulumi.StringArrayInput `pulumi:"loadbalancerIds"`
	// Specifies the backend server ID.
	// Multiple IDs can be queried.
	MemberIds pulumi.StringArrayInput `pulumi:"memberIds"`
	// Specifies the backend server name.
	// Multiple IDs can be queried.
	Names pulumi.StringArrayInput `pulumi:"names"`
	// Specifies the operating status of the backend server.
	// Value options:
	// + **ONLINE**: The backend server is running normally.
	// + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
	// + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
	//   Multiple statuses can be queried.
	OperatingStatuses pulumi.StringArrayInput `pulumi:"operatingStatuses"`
	// Specifies the ID of the backend server group to which the backend server belongs.
	// Multiple IDs can be queried.
	PoolIds pulumi.StringArrayInput `pulumi:"poolIds"`
	// Specifies the port used by the backend servers.
	// Multiple ports can be queried.
	ProtocolPorts pulumi.IntArrayInput `pulumi:"protocolPorts"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the ID of the subnet where the backend server works.
	// Multiple IDs can be queried.
	SubnetCidrIds pulumi.StringArrayInput `pulumi:"subnetCidrIds"`
	// Specifies the weight of the backend server.
	// Multiple weights can be queried.
	Weights pulumi.IntArrayInput `pulumi:"weights"`
}

func (GetAllMembersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllMembersArgs)(nil)).Elem()
}

// A collection of values returned by getAllMembers.
type GetAllMembersResultOutput struct{ *pulumi.OutputState }

func (GetAllMembersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllMembersResult)(nil)).Elem()
}

func (o GetAllMembersResultOutput) ToGetAllMembersResultOutput() GetAllMembersResultOutput {
	return o
}

func (o GetAllMembersResultOutput) ToGetAllMembersResultOutputWithContext(ctx context.Context) GetAllMembersResultOutput {
	return o
}

// Indicates the private IP address bound to the backend server.
func (o GetAllMembersResultOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

func (o GetAllMembersResultOutput) EnterpriseProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.EnterpriseProjectIds }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAllMembersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllMembersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the IP version supported by the backend server.
func (o GetAllMembersResultOutput) IpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.IpVersions }).(pulumi.StringArrayOutput)
}

// Indicates the ID of the load balancer with which the backend server is associated.
func (o GetAllMembersResultOutput) LoadbalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.LoadbalancerIds }).(pulumi.StringArrayOutput)
}

func (o GetAllMembersResultOutput) MemberIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.MemberIds }).(pulumi.StringArrayOutput)
}

// Indicates the list of backend servers.
func (o GetAllMembersResultOutput) Members() GetAllMembersMemberArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []GetAllMembersMember { return v.Members }).(GetAllMembersMemberArrayOutput)
}

// Indicates the backend server name.
func (o GetAllMembersResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// Indicates the health status of the backend server.
func (o GetAllMembersResultOutput) OperatingStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.OperatingStatuses }).(pulumi.StringArrayOutput)
}

// Indicates the ID of the backend server group to which the backend server belongs.
func (o GetAllMembersResultOutput) PoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.PoolIds }).(pulumi.StringArrayOutput)
}

// Indicates the port used by the backend server to receive requests.
func (o GetAllMembersResultOutput) ProtocolPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []int { return v.ProtocolPorts }).(pulumi.IntArrayOutput)
}

func (o GetAllMembersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllMembersResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the ID of the IPv4 or IPv6 subnet where the backend server resides.
func (o GetAllMembersResultOutput) SubnetCidrIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []string { return v.SubnetCidrIds }).(pulumi.StringArrayOutput)
}

// Indicates the weight of the backend server.
func (o GetAllMembersResultOutput) Weights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAllMembersResult) []int { return v.Weights }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAllMembersResultOutput{})
}

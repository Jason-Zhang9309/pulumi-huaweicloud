// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB L7 Policy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			listenerId := cfg.RequireObject("listenerId")
//			poolId := cfg.RequireObject("poolId")
//			_, err := DedicatedElb.NewL7policy(ctx, "policy1", &DedicatedElb.L7policyArgs{
//				Description:    pulumi.String("test description"),
//				ListenerId:     pulumi.Any(listenerId),
//				RedirectPoolId: pulumi.Any(poolId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB policy can be imported using the policy ID, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/l7policy:L7policy policy_1 5c20fdad-7288-11eb-b817-0255ac10158b
//
// ```
type L7policy struct {
	pulumi.CustomResourceState

	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Listener on which the L7 Policy will be associated with. Changing
	// this creates a new L7 Policy.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Requests matching this policy will be redirected to the pool with this ID.
	RedirectPoolId pulumi.StringOutput `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewL7policy registers a new resource with the given unique name, arguments, and options.
func NewL7policy(ctx *pulumi.Context,
	name string, args *L7policyArgs, opts ...pulumi.ResourceOption) (*L7policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.RedirectPoolId == nil {
		return nil, errors.New("invalid value for required argument 'RedirectPoolId'")
	}
	var resource L7policy
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/l7policy:L7policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL7policy gets an existing L7policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7policy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L7policyState, opts ...pulumi.ResourceOption) (*L7policy, error) {
	var resource L7policy
	err := ctx.ReadResource("huaweicloud:DedicatedElb/l7policy:L7policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L7policy resources.
type l7policyState struct {
	// Human-readable description for the L7 Policy.
	Description *string `pulumi:"description"`
	// The Listener on which the L7 Policy will be associated with. Changing
	// this creates a new L7 Policy.
	ListenerId *string `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `pulumi:"name"`
	// Requests matching this policy will be redirected to the pool with this ID.
	RedirectPoolId *string `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region *string `pulumi:"region"`
}

type L7policyState struct {
	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrInput
	// The Listener on which the L7 Policy will be associated with. Changing
	// this creates a new L7 Policy.
	ListenerId pulumi.StringPtrInput
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringPtrInput
	// Requests matching this policy will be redirected to the pool with this ID.
	RedirectPoolId pulumi.StringPtrInput
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringPtrInput
}

func (L7policyState) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyState)(nil)).Elem()
}

type l7policyArgs struct {
	// Human-readable description for the L7 Policy.
	Description *string `pulumi:"description"`
	// The Listener on which the L7 Policy will be associated with. Changing
	// this creates a new L7 Policy.
	ListenerId string `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `pulumi:"name"`
	// Requests matching this policy will be redirected to the pool with this ID.
	RedirectPoolId string `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a L7policy resource.
type L7policyArgs struct {
	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrInput
	// The Listener on which the L7 Policy will be associated with. Changing
	// this creates a new L7 Policy.
	ListenerId pulumi.StringInput
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringPtrInput
	// Requests matching this policy will be redirected to the pool with this ID.
	RedirectPoolId pulumi.StringInput
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringPtrInput
}

func (L7policyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyArgs)(nil)).Elem()
}

type L7policyInput interface {
	pulumi.Input

	ToL7policyOutput() L7policyOutput
	ToL7policyOutputWithContext(ctx context.Context) L7policyOutput
}

func (*L7policy) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (i *L7policy) ToL7policyOutput() L7policyOutput {
	return i.ToL7policyOutputWithContext(context.Background())
}

func (i *L7policy) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyOutput)
}

// L7policyArrayInput is an input type that accepts L7policyArray and L7policyArrayOutput values.
// You can construct a concrete instance of `L7policyArrayInput` via:
//
//	L7policyArray{ L7policyArgs{...} }
type L7policyArrayInput interface {
	pulumi.Input

	ToL7policyArrayOutput() L7policyArrayOutput
	ToL7policyArrayOutputWithContext(context.Context) L7policyArrayOutput
}

type L7policyArray []L7policyInput

func (L7policyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (i L7policyArray) ToL7policyArrayOutput() L7policyArrayOutput {
	return i.ToL7policyArrayOutputWithContext(context.Background())
}

func (i L7policyArray) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyArrayOutput)
}

// L7policyMapInput is an input type that accepts L7policyMap and L7policyMapOutput values.
// You can construct a concrete instance of `L7policyMapInput` via:
//
//	L7policyMap{ "key": L7policyArgs{...} }
type L7policyMapInput interface {
	pulumi.Input

	ToL7policyMapOutput() L7policyMapOutput
	ToL7policyMapOutputWithContext(context.Context) L7policyMapOutput
}

type L7policyMap map[string]L7policyInput

func (L7policyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (i L7policyMap) ToL7policyMapOutput() L7policyMapOutput {
	return i.ToL7policyMapOutputWithContext(context.Background())
}

func (i L7policyMap) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyMapOutput)
}

type L7policyOutput struct{ *pulumi.OutputState }

func (L7policyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (o L7policyOutput) ToL7policyOutput() L7policyOutput {
	return o
}

func (o L7policyOutput) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return o
}

// Human-readable description for the L7 Policy.
func (o L7policyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Listener on which the L7 Policy will be associated with. Changing
// this creates a new L7 Policy.
func (o L7policyOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Human-readable name for the L7 Policy. Does not have to be unique.
func (o L7policyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Requests matching this policy will be redirected to the pool with this ID.
func (o L7policyOutput) RedirectPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.RedirectPoolId }).(pulumi.StringOutput)
}

// The region in which to create the L7 Policy resource. If omitted, the
// provider-level region will be used. Changing this creates a new L7 Policy.
func (o L7policyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type L7policyArrayOutput struct{ *pulumi.OutputState }

func (L7policyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (o L7policyArrayOutput) ToL7policyArrayOutput() L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) Index(i pulumi.IntInput) L7policyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].([]*L7policy)[vs[1].(int)]
	}).(L7policyOutput)
}

type L7policyMapOutput struct{ *pulumi.OutputState }

func (L7policyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (o L7policyMapOutput) ToL7policyMapOutput() L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) MapIndex(k pulumi.StringInput) L7policyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].(map[string]*L7policy)[vs[1].(string)]
	}).(L7policyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyInput)(nil)).Elem(), &L7policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyArrayInput)(nil)).Elem(), L7policyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyMapInput)(nil)).Elem(), L7policyMap{})
	pulumi.RegisterOutputType(L7policyOutput{})
	pulumi.RegisterOutputType(L7policyArrayOutput{})
	pulumi.RegisterOutputType(L7policyMapOutput{})
}

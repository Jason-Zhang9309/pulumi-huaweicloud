// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB certificate private key echo resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DedicatedElb.NewCertificatePrivateKeyEcho(ctx, "test", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The ELB certificate private key echo can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho test <id>
//
// ```
type CertificatePrivateKeyEcho struct {
	pulumi.CustomResourceState

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewCertificatePrivateKeyEcho registers a new resource with the given unique name, arguments, and options.
func NewCertificatePrivateKeyEcho(ctx *pulumi.Context,
	name string, args *CertificatePrivateKeyEchoArgs, opts ...pulumi.ResourceOption) (*CertificatePrivateKeyEcho, error) {
	if args == nil {
		args = &CertificatePrivateKeyEchoArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource CertificatePrivateKeyEcho
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificatePrivateKeyEcho gets an existing CertificatePrivateKeyEcho resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificatePrivateKeyEcho(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificatePrivateKeyEchoState, opts ...pulumi.ResourceOption) (*CertificatePrivateKeyEcho, error) {
	var resource CertificatePrivateKeyEcho
	err := ctx.ReadResource("huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificatePrivateKeyEcho resources.
type certificatePrivateKeyEchoState struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type CertificatePrivateKeyEchoState struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (CertificatePrivateKeyEchoState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePrivateKeyEchoState)(nil)).Elem()
}

type certificatePrivateKeyEchoArgs struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a CertificatePrivateKeyEcho resource.
type CertificatePrivateKeyEchoArgs struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (CertificatePrivateKeyEchoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePrivateKeyEchoArgs)(nil)).Elem()
}

type CertificatePrivateKeyEchoInput interface {
	pulumi.Input

	ToCertificatePrivateKeyEchoOutput() CertificatePrivateKeyEchoOutput
	ToCertificatePrivateKeyEchoOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoOutput
}

func (*CertificatePrivateKeyEcho) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePrivateKeyEcho)(nil)).Elem()
}

func (i *CertificatePrivateKeyEcho) ToCertificatePrivateKeyEchoOutput() CertificatePrivateKeyEchoOutput {
	return i.ToCertificatePrivateKeyEchoOutputWithContext(context.Background())
}

func (i *CertificatePrivateKeyEcho) ToCertificatePrivateKeyEchoOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePrivateKeyEchoOutput)
}

// CertificatePrivateKeyEchoArrayInput is an input type that accepts CertificatePrivateKeyEchoArray and CertificatePrivateKeyEchoArrayOutput values.
// You can construct a concrete instance of `CertificatePrivateKeyEchoArrayInput` via:
//
//	CertificatePrivateKeyEchoArray{ CertificatePrivateKeyEchoArgs{...} }
type CertificatePrivateKeyEchoArrayInput interface {
	pulumi.Input

	ToCertificatePrivateKeyEchoArrayOutput() CertificatePrivateKeyEchoArrayOutput
	ToCertificatePrivateKeyEchoArrayOutputWithContext(context.Context) CertificatePrivateKeyEchoArrayOutput
}

type CertificatePrivateKeyEchoArray []CertificatePrivateKeyEchoInput

func (CertificatePrivateKeyEchoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePrivateKeyEcho)(nil)).Elem()
}

func (i CertificatePrivateKeyEchoArray) ToCertificatePrivateKeyEchoArrayOutput() CertificatePrivateKeyEchoArrayOutput {
	return i.ToCertificatePrivateKeyEchoArrayOutputWithContext(context.Background())
}

func (i CertificatePrivateKeyEchoArray) ToCertificatePrivateKeyEchoArrayOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePrivateKeyEchoArrayOutput)
}

// CertificatePrivateKeyEchoMapInput is an input type that accepts CertificatePrivateKeyEchoMap and CertificatePrivateKeyEchoMapOutput values.
// You can construct a concrete instance of `CertificatePrivateKeyEchoMapInput` via:
//
//	CertificatePrivateKeyEchoMap{ "key": CertificatePrivateKeyEchoArgs{...} }
type CertificatePrivateKeyEchoMapInput interface {
	pulumi.Input

	ToCertificatePrivateKeyEchoMapOutput() CertificatePrivateKeyEchoMapOutput
	ToCertificatePrivateKeyEchoMapOutputWithContext(context.Context) CertificatePrivateKeyEchoMapOutput
}

type CertificatePrivateKeyEchoMap map[string]CertificatePrivateKeyEchoInput

func (CertificatePrivateKeyEchoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePrivateKeyEcho)(nil)).Elem()
}

func (i CertificatePrivateKeyEchoMap) ToCertificatePrivateKeyEchoMapOutput() CertificatePrivateKeyEchoMapOutput {
	return i.ToCertificatePrivateKeyEchoMapOutputWithContext(context.Background())
}

func (i CertificatePrivateKeyEchoMap) ToCertificatePrivateKeyEchoMapOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePrivateKeyEchoMapOutput)
}

type CertificatePrivateKeyEchoOutput struct{ *pulumi.OutputState }

func (CertificatePrivateKeyEchoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePrivateKeyEcho)(nil)).Elem()
}

func (o CertificatePrivateKeyEchoOutput) ToCertificatePrivateKeyEchoOutput() CertificatePrivateKeyEchoOutput {
	return o
}

func (o CertificatePrivateKeyEchoOutput) ToCertificatePrivateKeyEchoOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoOutput {
	return o
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o CertificatePrivateKeyEchoOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePrivateKeyEcho) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CertificatePrivateKeyEchoArrayOutput struct{ *pulumi.OutputState }

func (CertificatePrivateKeyEchoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePrivateKeyEcho)(nil)).Elem()
}

func (o CertificatePrivateKeyEchoArrayOutput) ToCertificatePrivateKeyEchoArrayOutput() CertificatePrivateKeyEchoArrayOutput {
	return o
}

func (o CertificatePrivateKeyEchoArrayOutput) ToCertificatePrivateKeyEchoArrayOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoArrayOutput {
	return o
}

func (o CertificatePrivateKeyEchoArrayOutput) Index(i pulumi.IntInput) CertificatePrivateKeyEchoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificatePrivateKeyEcho {
		return vs[0].([]*CertificatePrivateKeyEcho)[vs[1].(int)]
	}).(CertificatePrivateKeyEchoOutput)
}

type CertificatePrivateKeyEchoMapOutput struct{ *pulumi.OutputState }

func (CertificatePrivateKeyEchoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePrivateKeyEcho)(nil)).Elem()
}

func (o CertificatePrivateKeyEchoMapOutput) ToCertificatePrivateKeyEchoMapOutput() CertificatePrivateKeyEchoMapOutput {
	return o
}

func (o CertificatePrivateKeyEchoMapOutput) ToCertificatePrivateKeyEchoMapOutputWithContext(ctx context.Context) CertificatePrivateKeyEchoMapOutput {
	return o
}

func (o CertificatePrivateKeyEchoMapOutput) MapIndex(k pulumi.StringInput) CertificatePrivateKeyEchoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificatePrivateKeyEcho {
		return vs[0].(map[string]*CertificatePrivateKeyEcho)[vs[1].(string)]
	}).(CertificatePrivateKeyEchoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePrivateKeyEchoInput)(nil)).Elem(), &CertificatePrivateKeyEcho{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePrivateKeyEchoArrayInput)(nil)).Elem(), CertificatePrivateKeyEchoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePrivateKeyEchoMapInput)(nil)).Elem(), CertificatePrivateKeyEchoMap{})
	pulumi.RegisterOutputType(CertificatePrivateKeyEchoOutput{})
	pulumi.RegisterOutputType(CertificatePrivateKeyEchoArrayOutput{})
	pulumi.RegisterOutputType(CertificatePrivateKeyEchoMapOutput{})
}

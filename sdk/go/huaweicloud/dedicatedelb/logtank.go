// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage an ELB logtank resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			loadbalancerId := cfg.RequireObject("loadbalancerId")
//			groupId := cfg.RequireObject("groupId")
//			topicId := cfg.RequireObject("topicId")
//			_, err := DedicatedElb.NewLogtank(ctx, "test", &DedicatedElb.LogtankArgs{
//				LoadbalancerId: pulumi.Any(loadbalancerId),
//				LogGroupId:     pulumi.Any(groupId),
//				LogTopicId:     pulumi.Any(topicId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB logtank can be imported using the logtank ID, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/logtank:Logtank test 2f148a75-acd3-4ce7-8f63-d5c9fadab3a0
//
// ```
type Logtank struct {
	pulumi.CustomResourceState

	// Specifies the ID of a loadbalancer. Changing this
	// creates a new logtank
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// Specifies the ID of a log group. It is provided by other service.
	LogGroupId pulumi.StringOutput `pulumi:"logGroupId"`
	// Specifies the ID of the subscribe topic.
	LogTopicId pulumi.StringOutput `pulumi:"logTopicId"`
	// The region in which to create the logtank resource.
	// If omitted, the provider-level region will be used. Changing this creates a new logtank.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewLogtank registers a new resource with the given unique name, arguments, and options.
func NewLogtank(ctx *pulumi.Context,
	name string, args *LogtankArgs, opts ...pulumi.ResourceOption) (*Logtank, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	if args.LogGroupId == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupId'")
	}
	if args.LogTopicId == nil {
		return nil, errors.New("invalid value for required argument 'LogTopicId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Logtank
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/logtank:Logtank", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogtank gets an existing Logtank resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogtank(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogtankState, opts ...pulumi.ResourceOption) (*Logtank, error) {
	var resource Logtank
	err := ctx.ReadResource("huaweicloud:DedicatedElb/logtank:Logtank", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logtank resources.
type logtankState struct {
	// Specifies the ID of a loadbalancer. Changing this
	// creates a new logtank
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the ID of a log group. It is provided by other service.
	LogGroupId *string `pulumi:"logGroupId"`
	// Specifies the ID of the subscribe topic.
	LogTopicId *string `pulumi:"logTopicId"`
	// The region in which to create the logtank resource.
	// If omitted, the provider-level region will be used. Changing this creates a new logtank.
	Region *string `pulumi:"region"`
}

type LogtankState struct {
	// Specifies the ID of a loadbalancer. Changing this
	// creates a new logtank
	LoadbalancerId pulumi.StringPtrInput
	// Specifies the ID of a log group. It is provided by other service.
	LogGroupId pulumi.StringPtrInput
	// Specifies the ID of the subscribe topic.
	LogTopicId pulumi.StringPtrInput
	// The region in which to create the logtank resource.
	// If omitted, the provider-level region will be used. Changing this creates a new logtank.
	Region pulumi.StringPtrInput
}

func (LogtankState) ElementType() reflect.Type {
	return reflect.TypeOf((*logtankState)(nil)).Elem()
}

type logtankArgs struct {
	// Specifies the ID of a loadbalancer. Changing this
	// creates a new logtank
	LoadbalancerId string `pulumi:"loadbalancerId"`
	// Specifies the ID of a log group. It is provided by other service.
	LogGroupId string `pulumi:"logGroupId"`
	// Specifies the ID of the subscribe topic.
	LogTopicId string `pulumi:"logTopicId"`
	// The region in which to create the logtank resource.
	// If omitted, the provider-level region will be used. Changing this creates a new logtank.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Logtank resource.
type LogtankArgs struct {
	// Specifies the ID of a loadbalancer. Changing this
	// creates a new logtank
	LoadbalancerId pulumi.StringInput
	// Specifies the ID of a log group. It is provided by other service.
	LogGroupId pulumi.StringInput
	// Specifies the ID of the subscribe topic.
	LogTopicId pulumi.StringInput
	// The region in which to create the logtank resource.
	// If omitted, the provider-level region will be used. Changing this creates a new logtank.
	Region pulumi.StringPtrInput
}

func (LogtankArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logtankArgs)(nil)).Elem()
}

type LogtankInput interface {
	pulumi.Input

	ToLogtankOutput() LogtankOutput
	ToLogtankOutputWithContext(ctx context.Context) LogtankOutput
}

func (*Logtank) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtank)(nil)).Elem()
}

func (i *Logtank) ToLogtankOutput() LogtankOutput {
	return i.ToLogtankOutputWithContext(context.Background())
}

func (i *Logtank) ToLogtankOutputWithContext(ctx context.Context) LogtankOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogtankOutput)
}

// LogtankArrayInput is an input type that accepts LogtankArray and LogtankArrayOutput values.
// You can construct a concrete instance of `LogtankArrayInput` via:
//
//	LogtankArray{ LogtankArgs{...} }
type LogtankArrayInput interface {
	pulumi.Input

	ToLogtankArrayOutput() LogtankArrayOutput
	ToLogtankArrayOutputWithContext(context.Context) LogtankArrayOutput
}

type LogtankArray []LogtankInput

func (LogtankArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtank)(nil)).Elem()
}

func (i LogtankArray) ToLogtankArrayOutput() LogtankArrayOutput {
	return i.ToLogtankArrayOutputWithContext(context.Background())
}

func (i LogtankArray) ToLogtankArrayOutputWithContext(ctx context.Context) LogtankArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogtankArrayOutput)
}

// LogtankMapInput is an input type that accepts LogtankMap and LogtankMapOutput values.
// You can construct a concrete instance of `LogtankMapInput` via:
//
//	LogtankMap{ "key": LogtankArgs{...} }
type LogtankMapInput interface {
	pulumi.Input

	ToLogtankMapOutput() LogtankMapOutput
	ToLogtankMapOutputWithContext(context.Context) LogtankMapOutput
}

type LogtankMap map[string]LogtankInput

func (LogtankMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtank)(nil)).Elem()
}

func (i LogtankMap) ToLogtankMapOutput() LogtankMapOutput {
	return i.ToLogtankMapOutputWithContext(context.Background())
}

func (i LogtankMap) ToLogtankMapOutputWithContext(ctx context.Context) LogtankMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogtankMapOutput)
}

type LogtankOutput struct{ *pulumi.OutputState }

func (LogtankOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtank)(nil)).Elem()
}

func (o LogtankOutput) ToLogtankOutput() LogtankOutput {
	return o
}

func (o LogtankOutput) ToLogtankOutputWithContext(ctx context.Context) LogtankOutput {
	return o
}

// Specifies the ID of a loadbalancer. Changing this
// creates a new logtank
func (o LogtankOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtank) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// Specifies the ID of a log group. It is provided by other service.
func (o LogtankOutput) LogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtank) pulumi.StringOutput { return v.LogGroupId }).(pulumi.StringOutput)
}

// Specifies the ID of the subscribe topic.
func (o LogtankOutput) LogTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtank) pulumi.StringOutput { return v.LogTopicId }).(pulumi.StringOutput)
}

// The region in which to create the logtank resource.
// If omitted, the provider-level region will be used. Changing this creates a new logtank.
func (o LogtankOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtank) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type LogtankArrayOutput struct{ *pulumi.OutputState }

func (LogtankArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtank)(nil)).Elem()
}

func (o LogtankArrayOutput) ToLogtankArrayOutput() LogtankArrayOutput {
	return o
}

func (o LogtankArrayOutput) ToLogtankArrayOutputWithContext(ctx context.Context) LogtankArrayOutput {
	return o
}

func (o LogtankArrayOutput) Index(i pulumi.IntInput) LogtankOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logtank {
		return vs[0].([]*Logtank)[vs[1].(int)]
	}).(LogtankOutput)
}

type LogtankMapOutput struct{ *pulumi.OutputState }

func (LogtankMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtank)(nil)).Elem()
}

func (o LogtankMapOutput) ToLogtankMapOutput() LogtankMapOutput {
	return o
}

func (o LogtankMapOutput) ToLogtankMapOutputWithContext(ctx context.Context) LogtankMapOutput {
	return o
}

func (o LogtankMapOutput) MapIndex(k pulumi.StringInput) LogtankOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logtank {
		return vs[0].(map[string]*Logtank)[vs[1].(string)]
	}).(LogtankOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogtankInput)(nil)).Elem(), &Logtank{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogtankArrayInput)(nil)).Elem(), LogtankArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogtankMapInput)(nil)).Elem(), LogtankMap{})
	pulumi.RegisterOutputType(LogtankOutput{})
	pulumi.RegisterOutputType(LogtankArrayOutput{})
	pulumi.RegisterOutputType(LogtankMapOutput{})
}

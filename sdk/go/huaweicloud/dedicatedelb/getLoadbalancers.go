// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of ELB load balancers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			loadbalancerName := cfg.RequireObject("loadbalancerName")
//			_, err := DedicatedElb.GetLoadbalancers(ctx, &dedicatedelb.GetLoadbalancersArgs{
//				Name: pulumi.StringRef(loadbalancerName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLoadbalancers(ctx *pulumi.Context, args *GetLoadbalancersArgs, opts ...pulumi.InvokeOption) (*GetLoadbalancersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetLoadbalancersResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getLoadbalancers:getLoadbalancers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadbalancers.
type GetLoadbalancersArgs struct {
	// Specifies the description of the ELB load balancer.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ID of the IPv4 subnet where the load balancer resides.
	Ipv4SubnetId *string `pulumi:"ipv4SubnetId"`
	// Specifies the ID of the port bound to the IPv6 address of the load balancer.
	Ipv6NetworkId *string `pulumi:"ipv6NetworkId"`
	// Specifies the ID of a flavor at Layer 4.
	L4FlavorId *string `pulumi:"l4FlavorId"`
	// Specifies the ID of a flavor at Layer 7.
	L7FlavorId *string `pulumi:"l7FlavorId"`
	// Specifies the ID of the ELB load balancer.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the name of the ELB load balancer.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies whether the load balancer is a dedicated load balancer, Value options:
	// **dedicated**, **share**.
	Type *string `pulumi:"type"`
	// Specifies the ID of the VPC where the load balancer resides.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getLoadbalancers.
type GetLoadbalancersResult struct {
	// The description of load balancer.
	Description *string `pulumi:"description"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The  ID of the IPv4 subnet where the load balancer resides.
	Ipv4SubnetId *string `pulumi:"ipv4SubnetId"`
	// The ID of the IPv6 subnet where the load balancer resides.
	Ipv6NetworkId *string `pulumi:"ipv6NetworkId"`
	// The ID of a flavor at Layer 4.
	L4FlavorId *string `pulumi:"l4FlavorId"`
	// The ID of a flavor at Layer 7.
	L7FlavorId     *string `pulumi:"l7FlavorId"`
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// The List of load balancers.
	// The loadbalancers structure is documented below.
	Loadbalancers []GetLoadbalancersLoadbalancer `pulumi:"loadbalancers"`
	// The load balancer name.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Whether the load balancer is a dedicated load balancer.
	Type *string `pulumi:"type"`
	// The ID of the VPC where the load balancer resides.
	VpcId *string `pulumi:"vpcId"`
}

func GetLoadbalancersOutput(ctx *pulumi.Context, args GetLoadbalancersOutputArgs, opts ...pulumi.InvokeOption) GetLoadbalancersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLoadbalancersResult, error) {
			args := v.(GetLoadbalancersArgs)
			r, err := GetLoadbalancers(ctx, &args, opts...)
			var s GetLoadbalancersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLoadbalancersResultOutput)
}

// A collection of arguments for invoking getLoadbalancers.
type GetLoadbalancersOutputArgs struct {
	// Specifies the description of the ELB load balancer.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the ID of the IPv4 subnet where the load balancer resides.
	Ipv4SubnetId pulumi.StringPtrInput `pulumi:"ipv4SubnetId"`
	// Specifies the ID of the port bound to the IPv6 address of the load balancer.
	Ipv6NetworkId pulumi.StringPtrInput `pulumi:"ipv6NetworkId"`
	// Specifies the ID of a flavor at Layer 4.
	L4FlavorId pulumi.StringPtrInput `pulumi:"l4FlavorId"`
	// Specifies the ID of a flavor at Layer 7.
	L7FlavorId pulumi.StringPtrInput `pulumi:"l7FlavorId"`
	// Specifies the ID of the ELB load balancer.
	LoadbalancerId pulumi.StringPtrInput `pulumi:"loadbalancerId"`
	// Specifies the name of the ELB load balancer.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies whether the load balancer is a dedicated load balancer, Value options:
	// **dedicated**, **share**.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the ID of the VPC where the load balancer resides.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetLoadbalancersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancersArgs)(nil)).Elem()
}

// A collection of values returned by getLoadbalancers.
type GetLoadbalancersResultOutput struct{ *pulumi.OutputState }

func (GetLoadbalancersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancersResult)(nil)).Elem()
}

func (o GetLoadbalancersResultOutput) ToGetLoadbalancersResultOutput() GetLoadbalancersResultOutput {
	return o
}

func (o GetLoadbalancersResultOutput) ToGetLoadbalancersResultOutputWithContext(ctx context.Context) GetLoadbalancersResultOutput {
	return o
}

// The description of load balancer.
func (o GetLoadbalancersResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The enterprise project ID.
func (o GetLoadbalancersResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLoadbalancersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The  ID of the IPv4 subnet where the load balancer resides.
func (o GetLoadbalancersResultOutput) Ipv4SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.Ipv4SubnetId }).(pulumi.StringPtrOutput)
}

// The ID of the IPv6 subnet where the load balancer resides.
func (o GetLoadbalancersResultOutput) Ipv6NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.Ipv6NetworkId }).(pulumi.StringPtrOutput)
}

// The ID of a flavor at Layer 4.
func (o GetLoadbalancersResultOutput) L4FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.L4FlavorId }).(pulumi.StringPtrOutput)
}

// The ID of a flavor at Layer 7.
func (o GetLoadbalancersResultOutput) L7FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.L7FlavorId }).(pulumi.StringPtrOutput)
}

func (o GetLoadbalancersResultOutput) LoadbalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.LoadbalancerId }).(pulumi.StringPtrOutput)
}

// The List of load balancers.
// The loadbalancers structure is documented below.
func (o GetLoadbalancersResultOutput) Loadbalancers() GetLoadbalancersLoadbalancerArrayOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) []GetLoadbalancersLoadbalancer { return v.Loadbalancers }).(GetLoadbalancersLoadbalancerArrayOutput)
}

// The load balancer name.
func (o GetLoadbalancersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetLoadbalancersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) string { return v.Region }).(pulumi.StringOutput)
}

// Whether the load balancer is a dedicated load balancer.
func (o GetLoadbalancersResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The ID of the VPC where the load balancer resides.
func (o GetLoadbalancersResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancersResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLoadbalancersResultOutput{})
}

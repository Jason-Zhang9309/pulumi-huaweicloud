// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of RDS PostgreSQL SQL limits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			dbName := cfg.RequireObject("dbName")
//			_, err := Rds.GetPgSqlLimits(ctx, &rds.GetPgSqlLimitsArgs{
//				InstanceId: instanceId,
//				DbName:     dbName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPgSqlLimits(ctx *pulumi.Context, args *GetPgSqlLimitsArgs, opts ...pulumi.InvokeOption) (*GetPgSqlLimitsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPgSqlLimitsResult
	err := ctx.Invoke("huaweicloud:Rds/getPgSqlLimits:getPgSqlLimits", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPgSqlLimits.
type GetPgSqlLimitsArgs struct {
	// Specifies the name of the database.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether the SQL limit is effective.
	IsEffective *string `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting *string `pulumi:"maxWaiting"`
	// Specifies the query ID.
	QueryId *string `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	// Specifies the ID of SQL limit.
	SqlLimitId *string `pulumi:"sqlLimitId"`
}

// A collection of values returned by getPgSqlLimits.
type GetPgSqlLimitsResult struct {
	DbName string `pulumi:"dbName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Indicates whether the SQL limit is effective.
	IsEffective *string `pulumi:"isEffective"`
	// Indicates the number of SQL statements executed simultaneously.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// Indicates the max waiting time in seconds.
	MaxWaiting *string `pulumi:"maxWaiting"`
	// Indicates the query ID.
	QueryId *string `pulumi:"queryId"`
	// Indicates the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	Region      string  `pulumi:"region"`
	// Indicates the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	SqlLimitId *string `pulumi:"sqlLimitId"`
	// Indicates the list of SQL limits.
	SqlLimits []GetPgSqlLimitsSqlLimit `pulumi:"sqlLimits"`
}

func GetPgSqlLimitsOutput(ctx *pulumi.Context, args GetPgSqlLimitsOutputArgs, opts ...pulumi.InvokeOption) GetPgSqlLimitsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPgSqlLimitsResult, error) {
			args := v.(GetPgSqlLimitsArgs)
			r, err := GetPgSqlLimits(ctx, &args, opts...)
			var s GetPgSqlLimitsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPgSqlLimitsResultOutput)
}

// A collection of arguments for invoking getPgSqlLimits.
type GetPgSqlLimitsOutputArgs struct {
	// Specifies the name of the database.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// Specifies the ID of RDS PostgreSQL instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies whether the SQL limit is effective.
	IsEffective pulumi.StringPtrInput `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously.
	MaxConcurrency pulumi.StringPtrInput `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.StringPtrInput `pulumi:"maxWaiting"`
	// Specifies the query ID.
	QueryId pulumi.StringPtrInput `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrInput `pulumi:"queryString"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrInput `pulumi:"searchPath"`
	// Specifies the ID of SQL limit.
	SqlLimitId pulumi.StringPtrInput `pulumi:"sqlLimitId"`
}

func (GetPgSqlLimitsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPgSqlLimitsArgs)(nil)).Elem()
}

// A collection of values returned by getPgSqlLimits.
type GetPgSqlLimitsResultOutput struct{ *pulumi.OutputState }

func (GetPgSqlLimitsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPgSqlLimitsResult)(nil)).Elem()
}

func (o GetPgSqlLimitsResultOutput) ToGetPgSqlLimitsResultOutput() GetPgSqlLimitsResultOutput {
	return o
}

func (o GetPgSqlLimitsResultOutput) ToGetPgSqlLimitsResultOutputWithContext(ctx context.Context) GetPgSqlLimitsResultOutput {
	return o
}

func (o GetPgSqlLimitsResultOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) string { return v.DbName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPgSqlLimitsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPgSqlLimitsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates whether the SQL limit is effective.
func (o GetPgSqlLimitsResultOutput) IsEffective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.IsEffective }).(pulumi.StringPtrOutput)
}

// Indicates the number of SQL statements executed simultaneously.
func (o GetPgSqlLimitsResultOutput) MaxConcurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.MaxConcurrency }).(pulumi.StringPtrOutput)
}

// Indicates the max waiting time in seconds.
func (o GetPgSqlLimitsResultOutput) MaxWaiting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.MaxWaiting }).(pulumi.StringPtrOutput)
}

// Indicates the query ID.
func (o GetPgSqlLimitsResultOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

// Indicates the text form of SQL statement.
func (o GetPgSqlLimitsResultOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.QueryString }).(pulumi.StringPtrOutput)
}

func (o GetPgSqlLimitsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the query order for names that are not schema qualified.
func (o GetPgSqlLimitsResultOutput) SearchPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.SearchPath }).(pulumi.StringPtrOutput)
}

func (o GetPgSqlLimitsResultOutput) SqlLimitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) *string { return v.SqlLimitId }).(pulumi.StringPtrOutput)
}

// Indicates the list of SQL limits.
func (o GetPgSqlLimitsResultOutput) SqlLimits() GetPgSqlLimitsSqlLimitArrayOutput {
	return o.ApplyT(func(v GetPgSqlLimitsResult) []GetPgSqlLimitsSqlLimit { return v.SqlLimits }).(GetPgSqlLimitsSqlLimitArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPgSqlLimitsResultOutput{})
}

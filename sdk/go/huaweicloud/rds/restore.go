// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS instance restore resource within HuaweiCloud.
//
// ## Example Usage
// ### restore by backupId
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			targetInstanceId := cfg.RequireObject("targetInstanceId")
//			sourceInstanceId := cfg.RequireObject("sourceInstanceId")
//			backupId := cfg.RequireObject("backupId")
//			_, err := Rds.NewRestore(ctx, "test", &Rds.RestoreArgs{
//				TargetInstanceId: pulumi.Any(targetInstanceId),
//				SourceInstanceId: pulumi.Any(sourceInstanceId),
//				Type:             pulumi.String("backup"),
//				BackupId:         pulumi.Any(backupId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### restore by timestamp
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			targetInstanceId := cfg.RequireObject("targetInstanceId")
//			sourceInstanceId := cfg.RequireObject("sourceInstanceId")
//			_, err := Rds.NewRestore(ctx, "test", &Rds.RestoreArgs{
//				TargetInstanceId: pulumi.Any(targetInstanceId),
//				SourceInstanceId: pulumi.Any(sourceInstanceId),
//				Type:             pulumi.String("timestamp"),
//				RestoreTime:      pulumi.Int(1673852043000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Restore struct {
	pulumi.CustomResourceState

	// Specifies the ID of the backup to be restored. This parameter must be
	// specified when `type` is set to **backup** or left empty.
	BackupId pulumi.StringPtrOutput `pulumi:"backupId"`
	// Specifies the databases that will be restored. This parameter applies only
	// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
	// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
	// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
	// database names can contain but cannot be the same as the original database names. Note the following when you are
	// specifying new database names:
	// + New database names must be different from the original database names. If they are left blank, the original database
	//   names will be used for restoration by default.
	// + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
	//   database names are unique.
	// + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
	//   exceed the database quota specified by **rds_databases_quota**.
	// + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
	//   **tempdb**, **model** and **resource**.
	// + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
	//   hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
	// + New database names must be different from any database names on the original DB instance.
	// + New database names must be different from any database names on the existing or original DB instances where data is
	//   restored.
	DatabaseName pulumi.StringMapOutput `pulumi:"databaseName"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Specifies the time point of data restoration in the UNIX timestamp format.
	// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
	RestoreTime pulumi.IntPtrOutput `pulumi:"restoreTime"`
	// Specifies the source instance ID.
	SourceInstanceId pulumi.StringOutput `pulumi:"sourceInstanceId"`
	// Specifies the target instance ID.
	TargetInstanceId pulumi.StringOutput `pulumi:"targetInstanceId"`
	// Specifies the restoration type. Value options:
	// + **backup**: indicates using backup files for restoration.
	// + **timestamp**: indicates the point-in-time restoration mode.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewRestore registers a new resource with the given unique name, arguments, and options.
func NewRestore(ctx *pulumi.Context,
	name string, args *RestoreArgs, opts ...pulumi.ResourceOption) (*Restore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceInstanceId'")
	}
	if args.TargetInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetInstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Restore
	err := ctx.RegisterResource("huaweicloud:Rds/restore:Restore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestore gets an existing Restore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestoreState, opts ...pulumi.ResourceOption) (*Restore, error) {
	var resource Restore
	err := ctx.ReadResource("huaweicloud:Rds/restore:Restore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Restore resources.
type restoreState struct {
	// Specifies the ID of the backup to be restored. This parameter must be
	// specified when `type` is set to **backup** or left empty.
	BackupId *string `pulumi:"backupId"`
	// Specifies the databases that will be restored. This parameter applies only
	// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
	// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
	// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
	// database names can contain but cannot be the same as the original database names. Note the following when you are
	// specifying new database names:
	// + New database names must be different from the original database names. If they are left blank, the original database
	//   names will be used for restoration by default.
	// + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
	//   database names are unique.
	// + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
	//   exceed the database quota specified by **rds_databases_quota**.
	// + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
	//   **tempdb**, **model** and **resource**.
	// + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
	//   hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
	// + New database names must be different from any database names on the original DB instance.
	// + New database names must be different from any database names on the existing or original DB instances where data is
	//   restored.
	DatabaseName map[string]string `pulumi:"databaseName"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the time point of data restoration in the UNIX timestamp format.
	// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
	RestoreTime *int `pulumi:"restoreTime"`
	// Specifies the source instance ID.
	SourceInstanceId *string `pulumi:"sourceInstanceId"`
	// Specifies the target instance ID.
	TargetInstanceId *string `pulumi:"targetInstanceId"`
	// Specifies the restoration type. Value options:
	// + **backup**: indicates using backup files for restoration.
	// + **timestamp**: indicates the point-in-time restoration mode.
	Type *string `pulumi:"type"`
}

type RestoreState struct {
	// Specifies the ID of the backup to be restored. This parameter must be
	// specified when `type` is set to **backup** or left empty.
	BackupId pulumi.StringPtrInput
	// Specifies the databases that will be restored. This parameter applies only
	// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
	// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
	// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
	// database names can contain but cannot be the same as the original database names. Note the following when you are
	// specifying new database names:
	// + New database names must be different from the original database names. If they are left blank, the original database
	//   names will be used for restoration by default.
	// + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
	//   database names are unique.
	// + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
	//   exceed the database quota specified by **rds_databases_quota**.
	// + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
	//   **tempdb**, **model** and **resource**.
	// + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
	//   hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
	// + New database names must be different from any database names on the original DB instance.
	// + New database names must be different from any database names on the existing or original DB instances where data is
	//   restored.
	DatabaseName pulumi.StringMapInput
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the time point of data restoration in the UNIX timestamp format.
	// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
	RestoreTime pulumi.IntPtrInput
	// Specifies the source instance ID.
	SourceInstanceId pulumi.StringPtrInput
	// Specifies the target instance ID.
	TargetInstanceId pulumi.StringPtrInput
	// Specifies the restoration type. Value options:
	// + **backup**: indicates using backup files for restoration.
	// + **timestamp**: indicates the point-in-time restoration mode.
	Type pulumi.StringPtrInput
}

func (RestoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreState)(nil)).Elem()
}

type restoreArgs struct {
	// Specifies the ID of the backup to be restored. This parameter must be
	// specified when `type` is set to **backup** or left empty.
	BackupId *string `pulumi:"backupId"`
	// Specifies the databases that will be restored. This parameter applies only
	// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
	// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
	// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
	// database names can contain but cannot be the same as the original database names. Note the following when you are
	// specifying new database names:
	// + New database names must be different from the original database names. If they are left blank, the original database
	//   names will be used for restoration by default.
	// + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
	//   database names are unique.
	// + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
	//   exceed the database quota specified by **rds_databases_quota**.
	// + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
	//   **tempdb**, **model** and **resource**.
	// + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
	//   hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
	// + New database names must be different from any database names on the original DB instance.
	// + New database names must be different from any database names on the existing or original DB instances where data is
	//   restored.
	DatabaseName map[string]string `pulumi:"databaseName"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the time point of data restoration in the UNIX timestamp format.
	// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
	RestoreTime *int `pulumi:"restoreTime"`
	// Specifies the source instance ID.
	SourceInstanceId string `pulumi:"sourceInstanceId"`
	// Specifies the target instance ID.
	TargetInstanceId string `pulumi:"targetInstanceId"`
	// Specifies the restoration type. Value options:
	// + **backup**: indicates using backup files for restoration.
	// + **timestamp**: indicates the point-in-time restoration mode.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Restore resource.
type RestoreArgs struct {
	// Specifies the ID of the backup to be restored. This parameter must be
	// specified when `type` is set to **backup** or left empty.
	BackupId pulumi.StringPtrInput
	// Specifies the databases that will be restored. This parameter applies only
	// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
	// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
	// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
	// database names can contain but cannot be the same as the original database names. Note the following when you are
	// specifying new database names:
	// + New database names must be different from the original database names. If they are left blank, the original database
	//   names will be used for restoration by default.
	// + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
	//   database names are unique.
	// + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
	//   exceed the database quota specified by **rds_databases_quota**.
	// + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
	//   **tempdb**, **model** and **resource**.
	// + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
	//   hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
	// + New database names must be different from any database names on the original DB instance.
	// + New database names must be different from any database names on the existing or original DB instances where data is
	//   restored.
	DatabaseName pulumi.StringMapInput
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the time point of data restoration in the UNIX timestamp format.
	// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
	RestoreTime pulumi.IntPtrInput
	// Specifies the source instance ID.
	SourceInstanceId pulumi.StringInput
	// Specifies the target instance ID.
	TargetInstanceId pulumi.StringInput
	// Specifies the restoration type. Value options:
	// + **backup**: indicates using backup files for restoration.
	// + **timestamp**: indicates the point-in-time restoration mode.
	Type pulumi.StringPtrInput
}

func (RestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreArgs)(nil)).Elem()
}

type RestoreInput interface {
	pulumi.Input

	ToRestoreOutput() RestoreOutput
	ToRestoreOutputWithContext(ctx context.Context) RestoreOutput
}

func (*Restore) ElementType() reflect.Type {
	return reflect.TypeOf((**Restore)(nil)).Elem()
}

func (i *Restore) ToRestoreOutput() RestoreOutput {
	return i.ToRestoreOutputWithContext(context.Background())
}

func (i *Restore) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreOutput)
}

// RestoreArrayInput is an input type that accepts RestoreArray and RestoreArrayOutput values.
// You can construct a concrete instance of `RestoreArrayInput` via:
//
//	RestoreArray{ RestoreArgs{...} }
type RestoreArrayInput interface {
	pulumi.Input

	ToRestoreArrayOutput() RestoreArrayOutput
	ToRestoreArrayOutputWithContext(context.Context) RestoreArrayOutput
}

type RestoreArray []RestoreInput

func (RestoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Restore)(nil)).Elem()
}

func (i RestoreArray) ToRestoreArrayOutput() RestoreArrayOutput {
	return i.ToRestoreArrayOutputWithContext(context.Background())
}

func (i RestoreArray) ToRestoreArrayOutputWithContext(ctx context.Context) RestoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreArrayOutput)
}

// RestoreMapInput is an input type that accepts RestoreMap and RestoreMapOutput values.
// You can construct a concrete instance of `RestoreMapInput` via:
//
//	RestoreMap{ "key": RestoreArgs{...} }
type RestoreMapInput interface {
	pulumi.Input

	ToRestoreMapOutput() RestoreMapOutput
	ToRestoreMapOutputWithContext(context.Context) RestoreMapOutput
}

type RestoreMap map[string]RestoreInput

func (RestoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Restore)(nil)).Elem()
}

func (i RestoreMap) ToRestoreMapOutput() RestoreMapOutput {
	return i.ToRestoreMapOutputWithContext(context.Background())
}

func (i RestoreMap) ToRestoreMapOutputWithContext(ctx context.Context) RestoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreMapOutput)
}

type RestoreOutput struct{ *pulumi.OutputState }

func (RestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Restore)(nil)).Elem()
}

func (o RestoreOutput) ToRestoreOutput() RestoreOutput {
	return o
}

func (o RestoreOutput) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return o
}

// Specifies the ID of the backup to be restored. This parameter must be
// specified when `type` is set to **backup** or left empty.
func (o RestoreOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringPtrOutput { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Specifies the databases that will be restored. This parameter applies only
// to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
// specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
// databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
// database names can contain but cannot be the same as the original database names. Note the following when you are
// specifying new database names:
//   - New database names must be different from the original database names. If they are left blank, the original database
//     names will be used for restoration by default.
//   - The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
//     database names are unique.
//   - The total number of new and existing databases on the existing or original DB instances where data is restored cannot
//     exceed the database quota specified by **rds_databases_quota**.
//   - New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
//     **tempdb**, **model** and **resource**.
//   - New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
//     hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
//   - New database names must be different from any database names on the original DB instance.
//   - New database names must be different from any database names on the existing or original DB instances where data is
//     restored.
func (o RestoreOutput) DatabaseName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringMapOutput { return v.DatabaseName }).(pulumi.StringMapOutput)
}

// The region in which to create the rds instance resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o RestoreOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Specifies the time point of data restoration in the UNIX timestamp format.
// The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
func (o RestoreOutput) RestoreTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Restore) pulumi.IntPtrOutput { return v.RestoreTime }).(pulumi.IntPtrOutput)
}

// Specifies the source instance ID.
func (o RestoreOutput) SourceInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringOutput { return v.SourceInstanceId }).(pulumi.StringOutput)
}

// Specifies the target instance ID.
func (o RestoreOutput) TargetInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringOutput { return v.TargetInstanceId }).(pulumi.StringOutput)
}

// Specifies the restoration type. Value options:
// + **backup**: indicates using backup files for restoration.
// + **timestamp**: indicates the point-in-time restoration mode.
func (o RestoreOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Restore) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type RestoreArrayOutput struct{ *pulumi.OutputState }

func (RestoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Restore)(nil)).Elem()
}

func (o RestoreArrayOutput) ToRestoreArrayOutput() RestoreArrayOutput {
	return o
}

func (o RestoreArrayOutput) ToRestoreArrayOutputWithContext(ctx context.Context) RestoreArrayOutput {
	return o
}

func (o RestoreArrayOutput) Index(i pulumi.IntInput) RestoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Restore {
		return vs[0].([]*Restore)[vs[1].(int)]
	}).(RestoreOutput)
}

type RestoreMapOutput struct{ *pulumi.OutputState }

func (RestoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Restore)(nil)).Elem()
}

func (o RestoreMapOutput) ToRestoreMapOutput() RestoreMapOutput {
	return o
}

func (o RestoreMapOutput) ToRestoreMapOutputWithContext(ctx context.Context) RestoreMapOutput {
	return o
}

func (o RestoreMapOutput) MapIndex(k pulumi.StringInput) RestoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Restore {
		return vs[0].(map[string]*Restore)[vs[1].(string)]
	}).(RestoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreInput)(nil)).Elem(), &Restore{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreArrayInput)(nil)).Elem(), RestoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreMapInput)(nil)).Elem(), RestoreMap{})
	pulumi.RegisterOutputType(RestoreOutput{})
	pulumi.RegisterOutputType(RestoreArrayOutput{})
	pulumi.RegisterOutputType(RestoreMapOutput{})
}

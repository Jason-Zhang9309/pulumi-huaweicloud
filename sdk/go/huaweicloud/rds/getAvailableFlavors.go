// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the specifications that a RDS instance can be changed to.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Rds.GetAvailableFlavors(ctx, &rds.GetAvailableFlavorsArgs{
//				InstanceId:          instanceId,
//				AvailabilityZoneIds: "cn-north-4a",
//				HaMode:              "ha",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAvailableFlavors(ctx *pulumi.Context, args *GetAvailableFlavorsArgs, opts ...pulumi.InvokeOption) (*GetAvailableFlavorsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAvailableFlavorsResult
	err := ctx.Invoke("huaweicloud:Rds/getAvailableFlavors:getAvailableFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAvailableFlavors.
type GetAvailableFlavorsArgs struct {
	// Specifies the availability zone.
	AvailabilityZoneIds string `pulumi:"availabilityZoneIds"`
	// Specifies the flavor category type.
	FlavorCategoryType *string `pulumi:"flavorCategoryType"`
	// Specifies the HA mode. Value options: **single**, **ha**, **replica**.
	HaMode string `pulumi:"haMode"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether display highly available read-only types.
	IsRhaFlavor *bool `pulumi:"isRhaFlavor"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the resource specification code, fuzzy matching is supported.
	SpecCodeLike *string `pulumi:"specCodeLike"`
}

// A collection of values returned by getAvailableFlavors.
type GetAvailableFlavorsResult struct {
	AvailabilityZoneIds string  `pulumi:"availabilityZoneIds"`
	FlavorCategoryType  *string `pulumi:"flavorCategoryType"`
	HaMode              string  `pulumi:"haMode"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	InstanceId  string `pulumi:"instanceId"`
	IsRhaFlavor *bool  `pulumi:"isRhaFlavor"`
	// Indicates the list of available flavors.
	OptionalFlavors []GetAvailableFlavorsOptionalFlavor `pulumi:"optionalFlavors"`
	Region          string                              `pulumi:"region"`
	SpecCodeLike    *string                             `pulumi:"specCodeLike"`
}

func GetAvailableFlavorsOutput(ctx *pulumi.Context, args GetAvailableFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetAvailableFlavorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAvailableFlavorsResult, error) {
			args := v.(GetAvailableFlavorsArgs)
			r, err := GetAvailableFlavors(ctx, &args, opts...)
			var s GetAvailableFlavorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAvailableFlavorsResultOutput)
}

// A collection of arguments for invoking getAvailableFlavors.
type GetAvailableFlavorsOutputArgs struct {
	// Specifies the availability zone.
	AvailabilityZoneIds pulumi.StringInput `pulumi:"availabilityZoneIds"`
	// Specifies the flavor category type.
	FlavorCategoryType pulumi.StringPtrInput `pulumi:"flavorCategoryType"`
	// Specifies the HA mode. Value options: **single**, **ha**, **replica**.
	HaMode pulumi.StringInput `pulumi:"haMode"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies whether display highly available read-only types.
	IsRhaFlavor pulumi.BoolPtrInput `pulumi:"isRhaFlavor"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the resource specification code, fuzzy matching is supported.
	SpecCodeLike pulumi.StringPtrInput `pulumi:"specCodeLike"`
}

func (GetAvailableFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getAvailableFlavors.
type GetAvailableFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetAvailableFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableFlavorsResult)(nil)).Elem()
}

func (o GetAvailableFlavorsResultOutput) ToGetAvailableFlavorsResultOutput() GetAvailableFlavorsResultOutput {
	return o
}

func (o GetAvailableFlavorsResultOutput) ToGetAvailableFlavorsResultOutputWithContext(ctx context.Context) GetAvailableFlavorsResultOutput {
	return o
}

func (o GetAvailableFlavorsResultOutput) AvailabilityZoneIds() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) string { return v.AvailabilityZoneIds }).(pulumi.StringOutput)
}

func (o GetAvailableFlavorsResultOutput) FlavorCategoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) *string { return v.FlavorCategoryType }).(pulumi.StringPtrOutput)
}

func (o GetAvailableFlavorsResultOutput) HaMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) string { return v.HaMode }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAvailableFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAvailableFlavorsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetAvailableFlavorsResultOutput) IsRhaFlavor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) *bool { return v.IsRhaFlavor }).(pulumi.BoolPtrOutput)
}

// Indicates the list of available flavors.
func (o GetAvailableFlavorsResultOutput) OptionalFlavors() GetAvailableFlavorsOptionalFlavorArrayOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) []GetAvailableFlavorsOptionalFlavor { return v.OptionalFlavors }).(GetAvailableFlavorsOptionalFlavorArrayOutput)
}

func (o GetAvailableFlavorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetAvailableFlavorsResultOutput) SpecCodeLike() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAvailableFlavorsResult) *string { return v.SpecCodeLike }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAvailableFlavorsResultOutput{})
}

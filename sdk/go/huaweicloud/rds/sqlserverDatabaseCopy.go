// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS database copy resource within HuaweiCloud.
//
// > **NOTE:** Deleting RDS SQLServer database copy is not supported. If you destroy a resource of RDS SQLServer database
//
//	copy, it is only removed from the state, but still remains in the cloud. And the instance doesn't return to the state
//	before modifying.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Rds.NewSqlserverDatabaseCopy(ctx, "test", &Rds.SqlserverDatabaseCopyArgs{
//				InstanceId:    pulumi.Any(instanceId),
//				ProcedureName: pulumi.String("copy_database"),
//				DbNameSource:  pulumi.String("test_db_source"),
//				DbNameTarget:  pulumi.String("test_db_target"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SqlserverDatabaseCopy struct {
	pulumi.CustomResourceState

	// Specifies the name of the source database.
	DbNameSource pulumi.StringOutput `pulumi:"dbNameSource"`
	// Specifies the name of the target database.
	DbNameTarget   pulumi.StringOutput    `pulumi:"dbNameTarget"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the operation name. Value options: **copy_database**.
	ProcedureName pulumi.StringOutput `pulumi:"procedureName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSqlserverDatabaseCopy registers a new resource with the given unique name, arguments, and options.
func NewSqlserverDatabaseCopy(ctx *pulumi.Context,
	name string, args *SqlserverDatabaseCopyArgs, opts ...pulumi.ResourceOption) (*SqlserverDatabaseCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbNameSource == nil {
		return nil, errors.New("invalid value for required argument 'DbNameSource'")
	}
	if args.DbNameTarget == nil {
		return nil, errors.New("invalid value for required argument 'DbNameTarget'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProcedureName == nil {
		return nil, errors.New("invalid value for required argument 'ProcedureName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SqlserverDatabaseCopy
	err := ctx.RegisterResource("huaweicloud:Rds/sqlserverDatabaseCopy:SqlserverDatabaseCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlserverDatabaseCopy gets an existing SqlserverDatabaseCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlserverDatabaseCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlserverDatabaseCopyState, opts ...pulumi.ResourceOption) (*SqlserverDatabaseCopy, error) {
	var resource SqlserverDatabaseCopy
	err := ctx.ReadResource("huaweicloud:Rds/sqlserverDatabaseCopy:SqlserverDatabaseCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlserverDatabaseCopy resources.
type sqlserverDatabaseCopyState struct {
	// Specifies the name of the source database.
	DbNameSource *string `pulumi:"dbNameSource"`
	// Specifies the name of the target database.
	DbNameTarget   *string `pulumi:"dbNameTarget"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the operation name. Value options: **copy_database**.
	ProcedureName *string `pulumi:"procedureName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type SqlserverDatabaseCopyState struct {
	// Specifies the name of the source database.
	DbNameSource pulumi.StringPtrInput
	// Specifies the name of the target database.
	DbNameTarget   pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the operation name. Value options: **copy_database**.
	ProcedureName pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (SqlserverDatabaseCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverDatabaseCopyState)(nil)).Elem()
}

type sqlserverDatabaseCopyArgs struct {
	// Specifies the name of the source database.
	DbNameSource string `pulumi:"dbNameSource"`
	// Specifies the name of the target database.
	DbNameTarget   string  `pulumi:"dbNameTarget"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the operation name. Value options: **copy_database**.
	ProcedureName string `pulumi:"procedureName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SqlserverDatabaseCopy resource.
type SqlserverDatabaseCopyArgs struct {
	// Specifies the name of the source database.
	DbNameSource pulumi.StringInput
	// Specifies the name of the target database.
	DbNameTarget   pulumi.StringInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput
	// Specifies the operation name. Value options: **copy_database**.
	ProcedureName pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (SqlserverDatabaseCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverDatabaseCopyArgs)(nil)).Elem()
}

type SqlserverDatabaseCopyInput interface {
	pulumi.Input

	ToSqlserverDatabaseCopyOutput() SqlserverDatabaseCopyOutput
	ToSqlserverDatabaseCopyOutputWithContext(ctx context.Context) SqlserverDatabaseCopyOutput
}

func (*SqlserverDatabaseCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverDatabaseCopy)(nil)).Elem()
}

func (i *SqlserverDatabaseCopy) ToSqlserverDatabaseCopyOutput() SqlserverDatabaseCopyOutput {
	return i.ToSqlserverDatabaseCopyOutputWithContext(context.Background())
}

func (i *SqlserverDatabaseCopy) ToSqlserverDatabaseCopyOutputWithContext(ctx context.Context) SqlserverDatabaseCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabaseCopyOutput)
}

// SqlserverDatabaseCopyArrayInput is an input type that accepts SqlserverDatabaseCopyArray and SqlserverDatabaseCopyArrayOutput values.
// You can construct a concrete instance of `SqlserverDatabaseCopyArrayInput` via:
//
//	SqlserverDatabaseCopyArray{ SqlserverDatabaseCopyArgs{...} }
type SqlserverDatabaseCopyArrayInput interface {
	pulumi.Input

	ToSqlserverDatabaseCopyArrayOutput() SqlserverDatabaseCopyArrayOutput
	ToSqlserverDatabaseCopyArrayOutputWithContext(context.Context) SqlserverDatabaseCopyArrayOutput
}

type SqlserverDatabaseCopyArray []SqlserverDatabaseCopyInput

func (SqlserverDatabaseCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverDatabaseCopy)(nil)).Elem()
}

func (i SqlserverDatabaseCopyArray) ToSqlserverDatabaseCopyArrayOutput() SqlserverDatabaseCopyArrayOutput {
	return i.ToSqlserverDatabaseCopyArrayOutputWithContext(context.Background())
}

func (i SqlserverDatabaseCopyArray) ToSqlserverDatabaseCopyArrayOutputWithContext(ctx context.Context) SqlserverDatabaseCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabaseCopyArrayOutput)
}

// SqlserverDatabaseCopyMapInput is an input type that accepts SqlserverDatabaseCopyMap and SqlserverDatabaseCopyMapOutput values.
// You can construct a concrete instance of `SqlserverDatabaseCopyMapInput` via:
//
//	SqlserverDatabaseCopyMap{ "key": SqlserverDatabaseCopyArgs{...} }
type SqlserverDatabaseCopyMapInput interface {
	pulumi.Input

	ToSqlserverDatabaseCopyMapOutput() SqlserverDatabaseCopyMapOutput
	ToSqlserverDatabaseCopyMapOutputWithContext(context.Context) SqlserverDatabaseCopyMapOutput
}

type SqlserverDatabaseCopyMap map[string]SqlserverDatabaseCopyInput

func (SqlserverDatabaseCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverDatabaseCopy)(nil)).Elem()
}

func (i SqlserverDatabaseCopyMap) ToSqlserverDatabaseCopyMapOutput() SqlserverDatabaseCopyMapOutput {
	return i.ToSqlserverDatabaseCopyMapOutputWithContext(context.Background())
}

func (i SqlserverDatabaseCopyMap) ToSqlserverDatabaseCopyMapOutputWithContext(ctx context.Context) SqlserverDatabaseCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabaseCopyMapOutput)
}

type SqlserverDatabaseCopyOutput struct{ *pulumi.OutputState }

func (SqlserverDatabaseCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverDatabaseCopy)(nil)).Elem()
}

func (o SqlserverDatabaseCopyOutput) ToSqlserverDatabaseCopyOutput() SqlserverDatabaseCopyOutput {
	return o
}

func (o SqlserverDatabaseCopyOutput) ToSqlserverDatabaseCopyOutputWithContext(ctx context.Context) SqlserverDatabaseCopyOutput {
	return o
}

// Specifies the name of the source database.
func (o SqlserverDatabaseCopyOutput) DbNameSource() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringOutput { return v.DbNameSource }).(pulumi.StringOutput)
}

// Specifies the name of the target database.
func (o SqlserverDatabaseCopyOutput) DbNameTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringOutput { return v.DbNameTarget }).(pulumi.StringOutput)
}

func (o SqlserverDatabaseCopyOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the RDS instance.
func (o SqlserverDatabaseCopyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the operation name. Value options: **copy_database**.
func (o SqlserverDatabaseCopyOutput) ProcedureName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringOutput { return v.ProcedureName }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o SqlserverDatabaseCopyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabaseCopy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SqlserverDatabaseCopyArrayOutput struct{ *pulumi.OutputState }

func (SqlserverDatabaseCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverDatabaseCopy)(nil)).Elem()
}

func (o SqlserverDatabaseCopyArrayOutput) ToSqlserverDatabaseCopyArrayOutput() SqlserverDatabaseCopyArrayOutput {
	return o
}

func (o SqlserverDatabaseCopyArrayOutput) ToSqlserverDatabaseCopyArrayOutputWithContext(ctx context.Context) SqlserverDatabaseCopyArrayOutput {
	return o
}

func (o SqlserverDatabaseCopyArrayOutput) Index(i pulumi.IntInput) SqlserverDatabaseCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlserverDatabaseCopy {
		return vs[0].([]*SqlserverDatabaseCopy)[vs[1].(int)]
	}).(SqlserverDatabaseCopyOutput)
}

type SqlserverDatabaseCopyMapOutput struct{ *pulumi.OutputState }

func (SqlserverDatabaseCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverDatabaseCopy)(nil)).Elem()
}

func (o SqlserverDatabaseCopyMapOutput) ToSqlserverDatabaseCopyMapOutput() SqlserverDatabaseCopyMapOutput {
	return o
}

func (o SqlserverDatabaseCopyMapOutput) ToSqlserverDatabaseCopyMapOutputWithContext(ctx context.Context) SqlserverDatabaseCopyMapOutput {
	return o
}

func (o SqlserverDatabaseCopyMapOutput) MapIndex(k pulumi.StringInput) SqlserverDatabaseCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlserverDatabaseCopy {
		return vs[0].(map[string]*SqlserverDatabaseCopy)[vs[1].(string)]
	}).(SqlserverDatabaseCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabaseCopyInput)(nil)).Elem(), &SqlserverDatabaseCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabaseCopyArrayInput)(nil)).Elem(), SqlserverDatabaseCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabaseCopyMapInput)(nil)).Elem(), SqlserverDatabaseCopyMap{})
	pulumi.RegisterOutputType(SqlserverDatabaseCopyOutput{})
	pulumi.RegisterOutputType(SqlserverDatabaseCopyArrayOutput{})
	pulumi.RegisterOutputType(SqlserverDatabaseCopyMapOutput{})
}

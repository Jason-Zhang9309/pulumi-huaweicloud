// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS MySQL proxy restart resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			proxyId := cfg.RequireObject("proxyId")
//			_, err := Rds.NewMysqlProxyRestart(ctx, "test", &Rds.MysqlProxyRestartArgs{
//				InstanceId: pulumi.Any(instanceId),
//				ProxyId:    pulumi.Any(proxyId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MysqlProxyRestart struct {
	pulumi.CustomResourceState

	// Specifies the ID of the RDS MySQL instance. Changing this parameter will
	// create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
	// a new resource.
	ProxyId pulumi.StringOutput `pulumi:"proxyId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewMysqlProxyRestart registers a new resource with the given unique name, arguments, and options.
func NewMysqlProxyRestart(ctx *pulumi.Context,
	name string, args *MysqlProxyRestartArgs, opts ...pulumi.ResourceOption) (*MysqlProxyRestart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProxyId == nil {
		return nil, errors.New("invalid value for required argument 'ProxyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MysqlProxyRestart
	err := ctx.RegisterResource("huaweicloud:Rds/mysqlProxyRestart:MysqlProxyRestart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlProxyRestart gets an existing MysqlProxyRestart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlProxyRestart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlProxyRestartState, opts ...pulumi.ResourceOption) (*MysqlProxyRestart, error) {
	var resource MysqlProxyRestart
	err := ctx.ReadResource("huaweicloud:Rds/mysqlProxyRestart:MysqlProxyRestart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlProxyRestart resources.
type mysqlProxyRestartState struct {
	// Specifies the ID of the RDS MySQL instance. Changing this parameter will
	// create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
	// a new resource.
	ProxyId *string `pulumi:"proxyId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type MysqlProxyRestartState struct {
	// Specifies the ID of the RDS MySQL instance. Changing this parameter will
	// create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
	// a new resource.
	ProxyId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlProxyRestartState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyRestartState)(nil)).Elem()
}

type mysqlProxyRestartArgs struct {
	// Specifies the ID of the RDS MySQL instance. Changing this parameter will
	// create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
	// a new resource.
	ProxyId string `pulumi:"proxyId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MysqlProxyRestart resource.
type MysqlProxyRestartArgs struct {
	// Specifies the ID of the RDS MySQL instance. Changing this parameter will
	// create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
	// a new resource.
	ProxyId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlProxyRestartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyRestartArgs)(nil)).Elem()
}

type MysqlProxyRestartInput interface {
	pulumi.Input

	ToMysqlProxyRestartOutput() MysqlProxyRestartOutput
	ToMysqlProxyRestartOutputWithContext(ctx context.Context) MysqlProxyRestartOutput
}

func (*MysqlProxyRestart) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxyRestart)(nil)).Elem()
}

func (i *MysqlProxyRestart) ToMysqlProxyRestartOutput() MysqlProxyRestartOutput {
	return i.ToMysqlProxyRestartOutputWithContext(context.Background())
}

func (i *MysqlProxyRestart) ToMysqlProxyRestartOutputWithContext(ctx context.Context) MysqlProxyRestartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyRestartOutput)
}

// MysqlProxyRestartArrayInput is an input type that accepts MysqlProxyRestartArray and MysqlProxyRestartArrayOutput values.
// You can construct a concrete instance of `MysqlProxyRestartArrayInput` via:
//
//	MysqlProxyRestartArray{ MysqlProxyRestartArgs{...} }
type MysqlProxyRestartArrayInput interface {
	pulumi.Input

	ToMysqlProxyRestartArrayOutput() MysqlProxyRestartArrayOutput
	ToMysqlProxyRestartArrayOutputWithContext(context.Context) MysqlProxyRestartArrayOutput
}

type MysqlProxyRestartArray []MysqlProxyRestartInput

func (MysqlProxyRestartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxyRestart)(nil)).Elem()
}

func (i MysqlProxyRestartArray) ToMysqlProxyRestartArrayOutput() MysqlProxyRestartArrayOutput {
	return i.ToMysqlProxyRestartArrayOutputWithContext(context.Background())
}

func (i MysqlProxyRestartArray) ToMysqlProxyRestartArrayOutputWithContext(ctx context.Context) MysqlProxyRestartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyRestartArrayOutput)
}

// MysqlProxyRestartMapInput is an input type that accepts MysqlProxyRestartMap and MysqlProxyRestartMapOutput values.
// You can construct a concrete instance of `MysqlProxyRestartMapInput` via:
//
//	MysqlProxyRestartMap{ "key": MysqlProxyRestartArgs{...} }
type MysqlProxyRestartMapInput interface {
	pulumi.Input

	ToMysqlProxyRestartMapOutput() MysqlProxyRestartMapOutput
	ToMysqlProxyRestartMapOutputWithContext(context.Context) MysqlProxyRestartMapOutput
}

type MysqlProxyRestartMap map[string]MysqlProxyRestartInput

func (MysqlProxyRestartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxyRestart)(nil)).Elem()
}

func (i MysqlProxyRestartMap) ToMysqlProxyRestartMapOutput() MysqlProxyRestartMapOutput {
	return i.ToMysqlProxyRestartMapOutputWithContext(context.Background())
}

func (i MysqlProxyRestartMap) ToMysqlProxyRestartMapOutputWithContext(ctx context.Context) MysqlProxyRestartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyRestartMapOutput)
}

type MysqlProxyRestartOutput struct{ *pulumi.OutputState }

func (MysqlProxyRestartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxyRestart)(nil)).Elem()
}

func (o MysqlProxyRestartOutput) ToMysqlProxyRestartOutput() MysqlProxyRestartOutput {
	return o
}

func (o MysqlProxyRestartOutput) ToMysqlProxyRestartOutputWithContext(ctx context.Context) MysqlProxyRestartOutput {
	return o
}

// Specifies the ID of the RDS MySQL instance. Changing this parameter will
// create a new resource.
func (o MysqlProxyRestartOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxyRestart) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS MySQL proxy. Changing this parameter will create
// a new resource.
func (o MysqlProxyRestartOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxyRestart) pulumi.StringOutput { return v.ProxyId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o MysqlProxyRestartOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxyRestart) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MysqlProxyRestartArrayOutput struct{ *pulumi.OutputState }

func (MysqlProxyRestartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxyRestart)(nil)).Elem()
}

func (o MysqlProxyRestartArrayOutput) ToMysqlProxyRestartArrayOutput() MysqlProxyRestartArrayOutput {
	return o
}

func (o MysqlProxyRestartArrayOutput) ToMysqlProxyRestartArrayOutputWithContext(ctx context.Context) MysqlProxyRestartArrayOutput {
	return o
}

func (o MysqlProxyRestartArrayOutput) Index(i pulumi.IntInput) MysqlProxyRestartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlProxyRestart {
		return vs[0].([]*MysqlProxyRestart)[vs[1].(int)]
	}).(MysqlProxyRestartOutput)
}

type MysqlProxyRestartMapOutput struct{ *pulumi.OutputState }

func (MysqlProxyRestartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxyRestart)(nil)).Elem()
}

func (o MysqlProxyRestartMapOutput) ToMysqlProxyRestartMapOutput() MysqlProxyRestartMapOutput {
	return o
}

func (o MysqlProxyRestartMapOutput) ToMysqlProxyRestartMapOutputWithContext(ctx context.Context) MysqlProxyRestartMapOutput {
	return o
}

func (o MysqlProxyRestartMapOutput) MapIndex(k pulumi.StringInput) MysqlProxyRestartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlProxyRestart {
		return vs[0].(map[string]*MysqlProxyRestart)[vs[1].(string)]
	}).(MysqlProxyRestartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyRestartInput)(nil)).Elem(), &MysqlProxyRestart{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyRestartArrayInput)(nil)).Elem(), MysqlProxyRestartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyRestartMapInput)(nil)).Elem(), MysqlProxyRestartMap{})
	pulumi.RegisterOutputType(MysqlProxyRestartOutput{})
	pulumi.RegisterOutputType(MysqlProxyRestartArrayOutput{})
	pulumi.RegisterOutputType(MysqlProxyRestartMapOutput{})
}

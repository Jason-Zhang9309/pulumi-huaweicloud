// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of RDS SQLServer database privileges.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rds.GetSqlserverDatabasePrivileges(ctx, &rds.GetSqlserverDatabasePrivilegesArgs{
//				InstanceId: _var.Instance_id,
//				DbName:     _var.Db_name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlserverDatabasePrivileges(ctx *pulumi.Context, args *GetSqlserverDatabasePrivilegesArgs, opts ...pulumi.InvokeOption) (*GetSqlserverDatabasePrivilegesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetSqlserverDatabasePrivilegesResult
	err := ctx.Invoke("huaweicloud:Rds/getSqlserverDatabasePrivileges:getSqlserverDatabasePrivileges", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlserverDatabasePrivileges.
type GetSqlserverDatabasePrivilegesArgs struct {
	// Specifies the database name.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether the database permission is **read-only**. Values option:
	// + **true**: indicates the read-only permission.
	// + **false**: indicates the read and write permission.
	Readonly *bool `pulumi:"readonly"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the username of the database account.
	UserName *string `pulumi:"userName"`
}

// A collection of values returned by getSqlserverDatabasePrivileges.
type GetSqlserverDatabasePrivilegesResult struct {
	DbName string `pulumi:"dbName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// The read-only database permission.
	Readonly *bool   `pulumi:"readonly"`
	Region   string  `pulumi:"region"`
	UserName *string `pulumi:"userName"`
	// The list of the accounts that accociated with the database.
	// The users structure is documented below.
	Users []GetSqlserverDatabasePrivilegesUser `pulumi:"users"`
}

func GetSqlserverDatabasePrivilegesOutput(ctx *pulumi.Context, args GetSqlserverDatabasePrivilegesOutputArgs, opts ...pulumi.InvokeOption) GetSqlserverDatabasePrivilegesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlserverDatabasePrivilegesResult, error) {
			args := v.(GetSqlserverDatabasePrivilegesArgs)
			r, err := GetSqlserverDatabasePrivileges(ctx, &args, opts...)
			var s GetSqlserverDatabasePrivilegesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSqlserverDatabasePrivilegesResultOutput)
}

// A collection of arguments for invoking getSqlserverDatabasePrivileges.
type GetSqlserverDatabasePrivilegesOutputArgs struct {
	// Specifies the database name.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies whether the database permission is **read-only**. Values option:
	// + **true**: indicates the read-only permission.
	// + **false**: indicates the read and write permission.
	Readonly pulumi.BoolPtrInput `pulumi:"readonly"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the username of the database account.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetSqlserverDatabasePrivilegesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverDatabasePrivilegesArgs)(nil)).Elem()
}

// A collection of values returned by getSqlserverDatabasePrivileges.
type GetSqlserverDatabasePrivilegesResultOutput struct{ *pulumi.OutputState }

func (GetSqlserverDatabasePrivilegesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverDatabasePrivilegesResult)(nil)).Elem()
}

func (o GetSqlserverDatabasePrivilegesResultOutput) ToGetSqlserverDatabasePrivilegesResultOutput() GetSqlserverDatabasePrivilegesResultOutput {
	return o
}

func (o GetSqlserverDatabasePrivilegesResultOutput) ToGetSqlserverDatabasePrivilegesResultOutputWithContext(ctx context.Context) GetSqlserverDatabasePrivilegesResultOutput {
	return o
}

func (o GetSqlserverDatabasePrivilegesResultOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) string { return v.DbName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlserverDatabasePrivilegesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlserverDatabasePrivilegesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The read-only database permission.
func (o GetSqlserverDatabasePrivilegesResultOutput) Readonly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) *bool { return v.Readonly }).(pulumi.BoolPtrOutput)
}

func (o GetSqlserverDatabasePrivilegesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetSqlserverDatabasePrivilegesResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// The list of the accounts that accociated with the database.
// The users structure is documented below.
func (o GetSqlserverDatabasePrivilegesResultOutput) Users() GetSqlserverDatabasePrivilegesUserArrayOutput {
	return o.ApplyT(func(v GetSqlserverDatabasePrivilegesResult) []GetSqlserverDatabasePrivilegesUser { return v.Users }).(GetSqlserverDatabasePrivilegesUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlserverDatabasePrivilegesResultOutput{})
}

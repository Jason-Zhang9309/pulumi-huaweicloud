// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get available HuaweiCloud rds flavors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rds.GetFlavors(ctx, &rds.GetFlavorsArgs{
//				DbType:       "PostgreSQL",
//				DbVersion:    pulumi.StringRef("9.5"),
//				InstanceMode: pulumi.StringRef("ha"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFlavors(ctx *pulumi.Context, args *GetFlavorsArgs, opts ...pulumi.InvokeOption) (*GetFlavorsResult, error) {
	var rv GetFlavorsResult
	err := ctx.Invoke("huaweicloud:Rds/getFlavors:getFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsArgs struct {
	// Specifies the availability zone which the RDS flavor belongs to.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the DB engine. Value: MySQL, PostgreSQL, SQLServer.
	DbType string `pulumi:"dbType"`
	// Specifies the database version. For more detail, please see
	// [DB Engines and Versions](https://support.huaweicloud.com/intl/en-us/productdesc-rds/en-us_topic_0043898356.html).
	// Available value:
	DbVersion *string `pulumi:"dbVersion"`
	// Specifies the performance specification, the valid values are as follows:
	// + **normal**: General enhanced.
	// + **normal2**: General enhanced type II.
	// + **armFlavors**: KunPeng general enhancement.
	// + **dedicatedNormal**: (dedicatedNormalLocalssd): Dedicated for x86.
	// + **armLocalssd**: KunPeng general type.
	// + **normalLocalssd**: x86 general type.
	// + **general**: General type.
	// + **dedicated**:
	//   For MySQL engine: Dedicated type.
	//   For PostgreSQL and SQL Server engines: Dedicated type, only supported by cloud disk SSD.
	// + **rapid**:
	//   For MySQL engine: Dedicated (discontinued).
	//   For PostgreSQL and SQL Server engines: Dedicated, only supported by ultra-fast SSDs.
	// + **bigmem**: Large memory type.
	GroupType *string `pulumi:"groupType"`
	// The mode of instance. Value: *ha*(indicates primary/standby instance),
	// *single*(indicates single instance) and *replica*(indicates read replicas).
	InstanceMode *string `pulumi:"instanceMode"`
	// Specifies the memory size(GB) in the RDS flavor.
	Memory *int `pulumi:"memory"`
	// The region in which to obtain the RDS flavors. If omitted, the provider-level region
	// will be used.
	Region *string `pulumi:"region"`
	// Specifies the number of vCPUs in the RDS flavor.
	Vcpus *int `pulumi:"vcpus"`
}

// A collection of values returned by getFlavors.
type GetFlavorsResult struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	DbType           string  `pulumi:"dbType"`
	DbVersion        *string `pulumi:"dbVersion"`
	// Indicates the flavors information. Structure is documented below.
	Flavors []GetFlavorsFlavor `pulumi:"flavors"`
	// The performance specification.
	GroupType *string `pulumi:"groupType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The mode of instance.
	InstanceMode *string `pulumi:"instanceMode"`
	// The memory size in GB.
	Memory *int   `pulumi:"memory"`
	Region string `pulumi:"region"`
	// The CPU size.
	Vcpus *int `pulumi:"vcpus"`
}

func GetFlavorsOutput(ctx *pulumi.Context, args GetFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetFlavorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFlavorsResult, error) {
			args := v.(GetFlavorsArgs)
			r, err := GetFlavors(ctx, &args, opts...)
			var s GetFlavorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFlavorsResultOutput)
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsOutputArgs struct {
	// Specifies the availability zone which the RDS flavor belongs to.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// Specifies the DB engine. Value: MySQL, PostgreSQL, SQLServer.
	DbType pulumi.StringInput `pulumi:"dbType"`
	// Specifies the database version. For more detail, please see
	// [DB Engines and Versions](https://support.huaweicloud.com/intl/en-us/productdesc-rds/en-us_topic_0043898356.html).
	// Available value:
	DbVersion pulumi.StringPtrInput `pulumi:"dbVersion"`
	// Specifies the performance specification, the valid values are as follows:
	// + **normal**: General enhanced.
	// + **normal2**: General enhanced type II.
	// + **armFlavors**: KunPeng general enhancement.
	// + **dedicatedNormal**: (dedicatedNormalLocalssd): Dedicated for x86.
	// + **armLocalssd**: KunPeng general type.
	// + **normalLocalssd**: x86 general type.
	// + **general**: General type.
	// + **dedicated**:
	//   For MySQL engine: Dedicated type.
	//   For PostgreSQL and SQL Server engines: Dedicated type, only supported by cloud disk SSD.
	// + **rapid**:
	//   For MySQL engine: Dedicated (discontinued).
	//   For PostgreSQL and SQL Server engines: Dedicated, only supported by ultra-fast SSDs.
	// + **bigmem**: Large memory type.
	GroupType pulumi.StringPtrInput `pulumi:"groupType"`
	// The mode of instance. Value: *ha*(indicates primary/standby instance),
	// *single*(indicates single instance) and *replica*(indicates read replicas).
	InstanceMode pulumi.StringPtrInput `pulumi:"instanceMode"`
	// Specifies the memory size(GB) in the RDS flavor.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The region in which to obtain the RDS flavors. If omitted, the provider-level region
	// will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the number of vCPUs in the RDS flavor.
	Vcpus pulumi.IntPtrInput `pulumi:"vcpus"`
}

func (GetFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getFlavors.
type GetFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsResult)(nil)).Elem()
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutput() GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutputWithContext(ctx context.Context) GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o GetFlavorsResultOutput) DbType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.DbType }).(pulumi.StringOutput)
}

func (o GetFlavorsResultOutput) DbVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.DbVersion }).(pulumi.StringPtrOutput)
}

// Indicates the flavors information. Structure is documented below.
func (o GetFlavorsResultOutput) Flavors() GetFlavorsFlavorArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []GetFlavorsFlavor { return v.Flavors }).(GetFlavorsFlavorArrayOutput)
}

// The performance specification.
func (o GetFlavorsResultOutput) GroupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.GroupType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The mode of instance.
func (o GetFlavorsResultOutput) InstanceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.InstanceMode }).(pulumi.StringPtrOutput)
}

// The memory size in GB.
func (o GetFlavorsResultOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o GetFlavorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The CPU size.
func (o GetFlavorsResultOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlavorsResultOutput{})
}

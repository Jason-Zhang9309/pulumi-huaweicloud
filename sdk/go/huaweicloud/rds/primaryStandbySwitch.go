// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS instance primary standby switch resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Rds.NewPrimaryStandbySwitch(ctx, "test", &Rds.PrimaryStandbySwitchArgs{
//				InstanceId: pulumi.Any(_var.Target_instance_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PrimaryStandbySwitch struct {
	pulumi.CustomResourceState

	// Specifies whether to perform a forcible primary/standby switchover. This parameter
	// is valid only for the PostgreSQL DB engine.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// Specifies the ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewPrimaryStandbySwitch registers a new resource with the given unique name, arguments, and options.
func NewPrimaryStandbySwitch(ctx *pulumi.Context,
	name string, args *PrimaryStandbySwitchArgs, opts ...pulumi.ResourceOption) (*PrimaryStandbySwitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PrimaryStandbySwitch
	err := ctx.RegisterResource("huaweicloud:Rds/primaryStandbySwitch:PrimaryStandbySwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimaryStandbySwitch gets an existing PrimaryStandbySwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimaryStandbySwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimaryStandbySwitchState, opts ...pulumi.ResourceOption) (*PrimaryStandbySwitch, error) {
	var resource PrimaryStandbySwitch
	err := ctx.ReadResource("huaweicloud:Rds/primaryStandbySwitch:PrimaryStandbySwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrimaryStandbySwitch resources.
type primaryStandbySwitchState struct {
	// Specifies whether to perform a forcible primary/standby switchover. This parameter
	// is valid only for the PostgreSQL DB engine.
	Force *bool `pulumi:"force"`
	// Specifies the ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type PrimaryStandbySwitchState struct {
	// Specifies whether to perform a forcible primary/standby switchover. This parameter
	// is valid only for the PostgreSQL DB engine.
	Force pulumi.BoolPtrInput
	// Specifies the ID of instance.
	InstanceId pulumi.StringPtrInput
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (PrimaryStandbySwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryStandbySwitchState)(nil)).Elem()
}

type primaryStandbySwitchArgs struct {
	// Specifies whether to perform a forcible primary/standby switchover. This parameter
	// is valid only for the PostgreSQL DB engine.
	Force *bool `pulumi:"force"`
	// Specifies the ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a PrimaryStandbySwitch resource.
type PrimaryStandbySwitchArgs struct {
	// Specifies whether to perform a forcible primary/standby switchover. This parameter
	// is valid only for the PostgreSQL DB engine.
	Force pulumi.BoolPtrInput
	// Specifies the ID of instance.
	InstanceId pulumi.StringInput
	// The region in which to create the rds instance resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (PrimaryStandbySwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryStandbySwitchArgs)(nil)).Elem()
}

type PrimaryStandbySwitchInput interface {
	pulumi.Input

	ToPrimaryStandbySwitchOutput() PrimaryStandbySwitchOutput
	ToPrimaryStandbySwitchOutputWithContext(ctx context.Context) PrimaryStandbySwitchOutput
}

func (*PrimaryStandbySwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryStandbySwitch)(nil)).Elem()
}

func (i *PrimaryStandbySwitch) ToPrimaryStandbySwitchOutput() PrimaryStandbySwitchOutput {
	return i.ToPrimaryStandbySwitchOutputWithContext(context.Background())
}

func (i *PrimaryStandbySwitch) ToPrimaryStandbySwitchOutputWithContext(ctx context.Context) PrimaryStandbySwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryStandbySwitchOutput)
}

// PrimaryStandbySwitchArrayInput is an input type that accepts PrimaryStandbySwitchArray and PrimaryStandbySwitchArrayOutput values.
// You can construct a concrete instance of `PrimaryStandbySwitchArrayInput` via:
//
//	PrimaryStandbySwitchArray{ PrimaryStandbySwitchArgs{...} }
type PrimaryStandbySwitchArrayInput interface {
	pulumi.Input

	ToPrimaryStandbySwitchArrayOutput() PrimaryStandbySwitchArrayOutput
	ToPrimaryStandbySwitchArrayOutputWithContext(context.Context) PrimaryStandbySwitchArrayOutput
}

type PrimaryStandbySwitchArray []PrimaryStandbySwitchInput

func (PrimaryStandbySwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryStandbySwitch)(nil)).Elem()
}

func (i PrimaryStandbySwitchArray) ToPrimaryStandbySwitchArrayOutput() PrimaryStandbySwitchArrayOutput {
	return i.ToPrimaryStandbySwitchArrayOutputWithContext(context.Background())
}

func (i PrimaryStandbySwitchArray) ToPrimaryStandbySwitchArrayOutputWithContext(ctx context.Context) PrimaryStandbySwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryStandbySwitchArrayOutput)
}

// PrimaryStandbySwitchMapInput is an input type that accepts PrimaryStandbySwitchMap and PrimaryStandbySwitchMapOutput values.
// You can construct a concrete instance of `PrimaryStandbySwitchMapInput` via:
//
//	PrimaryStandbySwitchMap{ "key": PrimaryStandbySwitchArgs{...} }
type PrimaryStandbySwitchMapInput interface {
	pulumi.Input

	ToPrimaryStandbySwitchMapOutput() PrimaryStandbySwitchMapOutput
	ToPrimaryStandbySwitchMapOutputWithContext(context.Context) PrimaryStandbySwitchMapOutput
}

type PrimaryStandbySwitchMap map[string]PrimaryStandbySwitchInput

func (PrimaryStandbySwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryStandbySwitch)(nil)).Elem()
}

func (i PrimaryStandbySwitchMap) ToPrimaryStandbySwitchMapOutput() PrimaryStandbySwitchMapOutput {
	return i.ToPrimaryStandbySwitchMapOutputWithContext(context.Background())
}

func (i PrimaryStandbySwitchMap) ToPrimaryStandbySwitchMapOutputWithContext(ctx context.Context) PrimaryStandbySwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryStandbySwitchMapOutput)
}

type PrimaryStandbySwitchOutput struct{ *pulumi.OutputState }

func (PrimaryStandbySwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryStandbySwitch)(nil)).Elem()
}

func (o PrimaryStandbySwitchOutput) ToPrimaryStandbySwitchOutput() PrimaryStandbySwitchOutput {
	return o
}

func (o PrimaryStandbySwitchOutput) ToPrimaryStandbySwitchOutputWithContext(ctx context.Context) PrimaryStandbySwitchOutput {
	return o
}

// Specifies whether to perform a forcible primary/standby switchover. This parameter
// is valid only for the PostgreSQL DB engine.
func (o PrimaryStandbySwitchOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrimaryStandbySwitch) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of instance.
func (o PrimaryStandbySwitchOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryStandbySwitch) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region in which to create the rds instance resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o PrimaryStandbySwitchOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryStandbySwitch) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type PrimaryStandbySwitchArrayOutput struct{ *pulumi.OutputState }

func (PrimaryStandbySwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryStandbySwitch)(nil)).Elem()
}

func (o PrimaryStandbySwitchArrayOutput) ToPrimaryStandbySwitchArrayOutput() PrimaryStandbySwitchArrayOutput {
	return o
}

func (o PrimaryStandbySwitchArrayOutput) ToPrimaryStandbySwitchArrayOutputWithContext(ctx context.Context) PrimaryStandbySwitchArrayOutput {
	return o
}

func (o PrimaryStandbySwitchArrayOutput) Index(i pulumi.IntInput) PrimaryStandbySwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrimaryStandbySwitch {
		return vs[0].([]*PrimaryStandbySwitch)[vs[1].(int)]
	}).(PrimaryStandbySwitchOutput)
}

type PrimaryStandbySwitchMapOutput struct{ *pulumi.OutputState }

func (PrimaryStandbySwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryStandbySwitch)(nil)).Elem()
}

func (o PrimaryStandbySwitchMapOutput) ToPrimaryStandbySwitchMapOutput() PrimaryStandbySwitchMapOutput {
	return o
}

func (o PrimaryStandbySwitchMapOutput) ToPrimaryStandbySwitchMapOutputWithContext(ctx context.Context) PrimaryStandbySwitchMapOutput {
	return o
}

func (o PrimaryStandbySwitchMapOutput) MapIndex(k pulumi.StringInput) PrimaryStandbySwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrimaryStandbySwitch {
		return vs[0].(map[string]*PrimaryStandbySwitch)[vs[1].(string)]
	}).(PrimaryStandbySwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryStandbySwitchInput)(nil)).Elem(), &PrimaryStandbySwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryStandbySwitchArrayInput)(nil)).Elem(), PrimaryStandbySwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryStandbySwitchMapInput)(nil)).Elem(), PrimaryStandbySwitchMap{})
	pulumi.RegisterOutputType(PrimaryStandbySwitchOutput{})
	pulumi.RegisterOutputType(PrimaryStandbySwitchArrayOutput{})
	pulumi.RegisterOutputType(PrimaryStandbySwitchMapOutput{})
}

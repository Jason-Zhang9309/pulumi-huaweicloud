// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS plugin update resource within HuaweiCloud.
//
// > **NOTE:** Deleting RDS PostgreSQL plugin update modify is not supported. If you destroy a resource of RDS PostgreSQL
//
//	plugin update, it is only removed from the state, but still remains in the cloud. And the instance doesn't return to
//	the state before modifying.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			databaseName := cfg.RequireObject("databaseName")
//			extensionName := cfg.RequireObject("extensionName")
//			_, err := Rds.NewPgPluginUpdate(ctx, "test", &Rds.PgPluginUpdateArgs{
//				InstanceId:    pulumi.Any(instanceId),
//				DatabaseName:  pulumi.Any(databaseName),
//				ExtensionName: pulumi.Any(extensionName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PgPluginUpdate struct {
	pulumi.CustomResourceState

	// Specifies the database name.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName pulumi.StringOutput `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewPgPluginUpdate registers a new resource with the given unique name, arguments, and options.
func NewPgPluginUpdate(ctx *pulumi.Context,
	name string, args *PgPluginUpdateArgs, opts ...pulumi.ResourceOption) (*PgPluginUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ExtensionName == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PgPluginUpdate
	err := ctx.RegisterResource("huaweicloud:Rds/pgPluginUpdate:PgPluginUpdate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgPluginUpdate gets an existing PgPluginUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgPluginUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgPluginUpdateState, opts ...pulumi.ResourceOption) (*PgPluginUpdate, error) {
	var resource PgPluginUpdate
	err := ctx.ReadResource("huaweicloud:Rds/pgPluginUpdate:PgPluginUpdate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgPluginUpdate resources.
type pgPluginUpdateState struct {
	// Specifies the database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName *string `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type PgPluginUpdateState struct {
	// Specifies the database name.
	DatabaseName pulumi.StringPtrInput
	// Specifies the extension name.
	ExtensionName pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (PgPluginUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgPluginUpdateState)(nil)).Elem()
}

type pgPluginUpdateArgs struct {
	// Specifies the database name.
	DatabaseName string `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName string `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a PgPluginUpdate resource.
type PgPluginUpdateArgs struct {
	// Specifies the database name.
	DatabaseName pulumi.StringInput
	// Specifies the extension name.
	ExtensionName pulumi.StringInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (PgPluginUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgPluginUpdateArgs)(nil)).Elem()
}

type PgPluginUpdateInput interface {
	pulumi.Input

	ToPgPluginUpdateOutput() PgPluginUpdateOutput
	ToPgPluginUpdateOutputWithContext(ctx context.Context) PgPluginUpdateOutput
}

func (*PgPluginUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**PgPluginUpdate)(nil)).Elem()
}

func (i *PgPluginUpdate) ToPgPluginUpdateOutput() PgPluginUpdateOutput {
	return i.ToPgPluginUpdateOutputWithContext(context.Background())
}

func (i *PgPluginUpdate) ToPgPluginUpdateOutputWithContext(ctx context.Context) PgPluginUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginUpdateOutput)
}

// PgPluginUpdateArrayInput is an input type that accepts PgPluginUpdateArray and PgPluginUpdateArrayOutput values.
// You can construct a concrete instance of `PgPluginUpdateArrayInput` via:
//
//	PgPluginUpdateArray{ PgPluginUpdateArgs{...} }
type PgPluginUpdateArrayInput interface {
	pulumi.Input

	ToPgPluginUpdateArrayOutput() PgPluginUpdateArrayOutput
	ToPgPluginUpdateArrayOutputWithContext(context.Context) PgPluginUpdateArrayOutput
}

type PgPluginUpdateArray []PgPluginUpdateInput

func (PgPluginUpdateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgPluginUpdate)(nil)).Elem()
}

func (i PgPluginUpdateArray) ToPgPluginUpdateArrayOutput() PgPluginUpdateArrayOutput {
	return i.ToPgPluginUpdateArrayOutputWithContext(context.Background())
}

func (i PgPluginUpdateArray) ToPgPluginUpdateArrayOutputWithContext(ctx context.Context) PgPluginUpdateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginUpdateArrayOutput)
}

// PgPluginUpdateMapInput is an input type that accepts PgPluginUpdateMap and PgPluginUpdateMapOutput values.
// You can construct a concrete instance of `PgPluginUpdateMapInput` via:
//
//	PgPluginUpdateMap{ "key": PgPluginUpdateArgs{...} }
type PgPluginUpdateMapInput interface {
	pulumi.Input

	ToPgPluginUpdateMapOutput() PgPluginUpdateMapOutput
	ToPgPluginUpdateMapOutputWithContext(context.Context) PgPluginUpdateMapOutput
}

type PgPluginUpdateMap map[string]PgPluginUpdateInput

func (PgPluginUpdateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgPluginUpdate)(nil)).Elem()
}

func (i PgPluginUpdateMap) ToPgPluginUpdateMapOutput() PgPluginUpdateMapOutput {
	return i.ToPgPluginUpdateMapOutputWithContext(context.Background())
}

func (i PgPluginUpdateMap) ToPgPluginUpdateMapOutputWithContext(ctx context.Context) PgPluginUpdateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginUpdateMapOutput)
}

type PgPluginUpdateOutput struct{ *pulumi.OutputState }

func (PgPluginUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgPluginUpdate)(nil)).Elem()
}

func (o PgPluginUpdateOutput) ToPgPluginUpdateOutput() PgPluginUpdateOutput {
	return o
}

func (o PgPluginUpdateOutput) ToPgPluginUpdateOutputWithContext(ctx context.Context) PgPluginUpdateOutput {
	return o
}

// Specifies the database name.
func (o PgPluginUpdateOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPluginUpdate) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Specifies the extension name.
func (o PgPluginUpdateOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPluginUpdate) pulumi.StringOutput { return v.ExtensionName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS instance.
func (o PgPluginUpdateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPluginUpdate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o PgPluginUpdateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPluginUpdate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type PgPluginUpdateArrayOutput struct{ *pulumi.OutputState }

func (PgPluginUpdateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgPluginUpdate)(nil)).Elem()
}

func (o PgPluginUpdateArrayOutput) ToPgPluginUpdateArrayOutput() PgPluginUpdateArrayOutput {
	return o
}

func (o PgPluginUpdateArrayOutput) ToPgPluginUpdateArrayOutputWithContext(ctx context.Context) PgPluginUpdateArrayOutput {
	return o
}

func (o PgPluginUpdateArrayOutput) Index(i pulumi.IntInput) PgPluginUpdateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgPluginUpdate {
		return vs[0].([]*PgPluginUpdate)[vs[1].(int)]
	}).(PgPluginUpdateOutput)
}

type PgPluginUpdateMapOutput struct{ *pulumi.OutputState }

func (PgPluginUpdateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgPluginUpdate)(nil)).Elem()
}

func (o PgPluginUpdateMapOutput) ToPgPluginUpdateMapOutput() PgPluginUpdateMapOutput {
	return o
}

func (o PgPluginUpdateMapOutput) ToPgPluginUpdateMapOutputWithContext(ctx context.Context) PgPluginUpdateMapOutput {
	return o
}

func (o PgPluginUpdateMapOutput) MapIndex(k pulumi.StringInput) PgPluginUpdateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgPluginUpdate {
		return vs[0].(map[string]*PgPluginUpdate)[vs[1].(string)]
	}).(PgPluginUpdateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginUpdateInput)(nil)).Elem(), &PgPluginUpdate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginUpdateArrayInput)(nil)).Elem(), PgPluginUpdateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginUpdateMapInput)(nil)).Elem(), PgPluginUpdateMap{})
	pulumi.RegisterOutputType(PgPluginUpdateOutput{})
	pulumi.RegisterOutputType(PgPluginUpdateArrayOutput{})
	pulumi.RegisterOutputType(PgPluginUpdateMapOutput{})
}

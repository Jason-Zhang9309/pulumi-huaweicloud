// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of RDS cross-region backups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			backupType := cfg.RequireObject("backupType")
//			_, err := Rds.GetCrossRegionBackups(ctx, &rds.GetCrossRegionBackupsArgs{
//				InstanceId: instanceId,
//				BackupType: backupType,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCrossRegionBackups(ctx *pulumi.Context, args *GetCrossRegionBackupsArgs, opts ...pulumi.InvokeOption) (*GetCrossRegionBackupsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetCrossRegionBackupsResult
	err := ctx.Invoke("huaweicloud:Rds/getCrossRegionBackups:getCrossRegionBackups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossRegionBackups.
type GetCrossRegionBackupsArgs struct {
	// Specifies the ID of the cross-region backup.
	BackupId *string `pulumi:"backupId"`
	// Specifies the type of the cross-region backup.
	// Value options:
	// + **auto**: automated full backup. Microsoft SQL Server only supports the query of this backup type.
	// + **incremental**: automated incremental backup.
	BackupType string `pulumi:"backupType"`
	// Specifies the start time for obtaining the cross-region backup list.
	// The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `endTime`.
	BeginTime *string `pulumi:"beginTime"`
	// Specifies the end time for obtaining the cross-region backup list.
	// The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
	// This parameter must be used together with `beginTime`.
	EndTime *string `pulumi:"endTime"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the cross-region backup.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the status of the cross-region backup.
	// Value options:
	// + **BUILDING**: Backup in progress
	// + **COMPLETED**: Backup completed
	// + **FAILED**: Backup failed
	// + **DELETING**: Backup being deleted
	Status *string `pulumi:"status"`
}

// A collection of values returned by getCrossRegionBackups.
type GetCrossRegionBackupsResult struct {
	BackupId   *string `pulumi:"backupId"`
	BackupType string  `pulumi:"backupType"`
	// Indicates the list of the cross-region backups.
	Backups []GetCrossRegionBackupsBackup `pulumi:"backups"`
	// Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format
	BeginTime *string `pulumi:"beginTime"`
	// Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ"** format.
	EndTime *string `pulumi:"endTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates the ID of the RDS Instance.
	InstanceId string `pulumi:"instanceId"`
	// Indicates the database to be backed up for Microsoft SQL Server.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Indicates the status of the cross-region backup.
	Status *string `pulumi:"status"`
}

func GetCrossRegionBackupsOutput(ctx *pulumi.Context, args GetCrossRegionBackupsOutputArgs, opts ...pulumi.InvokeOption) GetCrossRegionBackupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCrossRegionBackupsResult, error) {
			args := v.(GetCrossRegionBackupsArgs)
			r, err := GetCrossRegionBackups(ctx, &args, opts...)
			var s GetCrossRegionBackupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCrossRegionBackupsResultOutput)
}

// A collection of arguments for invoking getCrossRegionBackups.
type GetCrossRegionBackupsOutputArgs struct {
	// Specifies the ID of the cross-region backup.
	BackupId pulumi.StringPtrInput `pulumi:"backupId"`
	// Specifies the type of the cross-region backup.
	// Value options:
	// + **auto**: automated full backup. Microsoft SQL Server only supports the query of this backup type.
	// + **incremental**: automated incremental backup.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// Specifies the start time for obtaining the cross-region backup list.
	// The format is **yyyy-mm-ddThh:mm:ssZ**. This parameter must be used together with `endTime`.
	BeginTime pulumi.StringPtrInput `pulumi:"beginTime"`
	// Specifies the end time for obtaining the cross-region backup list.
	// The format is **yyyy-mm-ddThh:mm:ssZ**. The end time must be later than the start time.
	// This parameter must be used together with `beginTime`.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the name of the cross-region backup.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the status of the cross-region backup.
	// Value options:
	// + **BUILDING**: Backup in progress
	// + **COMPLETED**: Backup completed
	// + **FAILED**: Backup failed
	// + **DELETING**: Backup being deleted
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetCrossRegionBackupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossRegionBackupsArgs)(nil)).Elem()
}

// A collection of values returned by getCrossRegionBackups.
type GetCrossRegionBackupsResultOutput struct{ *pulumi.OutputState }

func (GetCrossRegionBackupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossRegionBackupsResult)(nil)).Elem()
}

func (o GetCrossRegionBackupsResultOutput) ToGetCrossRegionBackupsResultOutput() GetCrossRegionBackupsResultOutput {
	return o
}

func (o GetCrossRegionBackupsResultOutput) ToGetCrossRegionBackupsResultOutputWithContext(ctx context.Context) GetCrossRegionBackupsResultOutput {
	return o
}

func (o GetCrossRegionBackupsResultOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) *string { return v.BackupId }).(pulumi.StringPtrOutput)
}

func (o GetCrossRegionBackupsResultOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) string { return v.BackupType }).(pulumi.StringOutput)
}

// Indicates the list of the cross-region backups.
func (o GetCrossRegionBackupsResultOutput) Backups() GetCrossRegionBackupsBackupArrayOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) []GetCrossRegionBackupsBackup { return v.Backups }).(GetCrossRegionBackupsBackupArrayOutput)
}

// Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format
func (o GetCrossRegionBackupsResultOutput) BeginTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) *string { return v.BeginTime }).(pulumi.StringPtrOutput)
}

// Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ"** format.
func (o GetCrossRegionBackupsResultOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCrossRegionBackupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the ID of the RDS Instance.
func (o GetCrossRegionBackupsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates the database to be backed up for Microsoft SQL Server.
func (o GetCrossRegionBackupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetCrossRegionBackupsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the status of the cross-region backup.
func (o GetCrossRegionBackupsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossRegionBackupsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCrossRegionBackupsResultOutput{})
}

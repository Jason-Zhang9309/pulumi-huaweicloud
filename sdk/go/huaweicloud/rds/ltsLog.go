// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a RDS LTS log resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			ltsGroupId := cfg.RequireObject("ltsGroupId")
//			ltsStreamId := cfg.RequireObject("ltsStreamId")
//			_, err := Rds.NewLtsLog(ctx, "test", &Rds.LtsLogArgs{
//				InstanceId:  pulumi.Any(instanceId),
//				Engine:      pulumi.String("mysql"),
//				LogType:     pulumi.String("error_log"),
//				LtsGroupId:  pulumi.Any(ltsGroupId),
//				LtsStreamId: pulumi.Any(ltsStreamId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The RDS LTS log can be imported using `instance_id` and `log_type` separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Rds/ltsLog:LtsLog test <instance_id>/<log_type>
//
// ```
type LtsLog struct {
	pulumi.CustomResourceState

	// Specifies the engine of the RDS instance.
	// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the type of the LTS log.
	// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
	LogType pulumi.StringOutput `pulumi:"logType"`
	// Specifies the ID of the LTS log group.
	LtsGroupId pulumi.StringOutput `pulumi:"ltsGroupId"`
	// Specifies the ID of the LTS log stream.
	LtsStreamId pulumi.StringOutput `pulumi:"ltsStreamId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewLtsLog registers a new resource with the given unique name, arguments, and options.
func NewLtsLog(ctx *pulumi.Context,
	name string, args *LtsLogArgs, opts ...pulumi.ResourceOption) (*LtsLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LogType == nil {
		return nil, errors.New("invalid value for required argument 'LogType'")
	}
	if args.LtsGroupId == nil {
		return nil, errors.New("invalid value for required argument 'LtsGroupId'")
	}
	if args.LtsStreamId == nil {
		return nil, errors.New("invalid value for required argument 'LtsStreamId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LtsLog
	err := ctx.RegisterResource("huaweicloud:Rds/ltsLog:LtsLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLtsLog gets an existing LtsLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLtsLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LtsLogState, opts ...pulumi.ResourceOption) (*LtsLog, error) {
	var resource LtsLog
	err := ctx.ReadResource("huaweicloud:Rds/ltsLog:LtsLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LtsLog resources.
type ltsLogState struct {
	// Specifies the engine of the RDS instance.
	// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
	Engine *string `pulumi:"engine"`
	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the type of the LTS log.
	// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
	LogType *string `pulumi:"logType"`
	// Specifies the ID of the LTS log group.
	LtsGroupId *string `pulumi:"ltsGroupId"`
	// Specifies the ID of the LTS log stream.
	LtsStreamId *string `pulumi:"ltsStreamId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type LtsLogState struct {
	// Specifies the engine of the RDS instance.
	// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
	Engine pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the type of the LTS log.
	// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
	LogType pulumi.StringPtrInput
	// Specifies the ID of the LTS log group.
	LtsGroupId pulumi.StringPtrInput
	// Specifies the ID of the LTS log stream.
	LtsStreamId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (LtsLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsLogState)(nil)).Elem()
}

type ltsLogArgs struct {
	// Specifies the engine of the RDS instance.
	// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
	Engine string `pulumi:"engine"`
	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the type of the LTS log.
	// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
	LogType string `pulumi:"logType"`
	// Specifies the ID of the LTS log group.
	LtsGroupId string `pulumi:"ltsGroupId"`
	// Specifies the ID of the LTS log stream.
	LtsStreamId string `pulumi:"ltsStreamId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a LtsLog resource.
type LtsLogArgs struct {
	// Specifies the engine of the RDS instance.
	// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
	Engine pulumi.StringInput
	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	InstanceId pulumi.StringInput
	// Specifies the type of the LTS log.
	// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
	LogType pulumi.StringInput
	// Specifies the ID of the LTS log group.
	LtsGroupId pulumi.StringInput
	// Specifies the ID of the LTS log stream.
	LtsStreamId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (LtsLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsLogArgs)(nil)).Elem()
}

type LtsLogInput interface {
	pulumi.Input

	ToLtsLogOutput() LtsLogOutput
	ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput
}

func (*LtsLog) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsLog)(nil)).Elem()
}

func (i *LtsLog) ToLtsLogOutput() LtsLogOutput {
	return i.ToLtsLogOutputWithContext(context.Background())
}

func (i *LtsLog) ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogOutput)
}

// LtsLogArrayInput is an input type that accepts LtsLogArray and LtsLogArrayOutput values.
// You can construct a concrete instance of `LtsLogArrayInput` via:
//
//	LtsLogArray{ LtsLogArgs{...} }
type LtsLogArrayInput interface {
	pulumi.Input

	ToLtsLogArrayOutput() LtsLogArrayOutput
	ToLtsLogArrayOutputWithContext(context.Context) LtsLogArrayOutput
}

type LtsLogArray []LtsLogInput

func (LtsLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsLog)(nil)).Elem()
}

func (i LtsLogArray) ToLtsLogArrayOutput() LtsLogArrayOutput {
	return i.ToLtsLogArrayOutputWithContext(context.Background())
}

func (i LtsLogArray) ToLtsLogArrayOutputWithContext(ctx context.Context) LtsLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogArrayOutput)
}

// LtsLogMapInput is an input type that accepts LtsLogMap and LtsLogMapOutput values.
// You can construct a concrete instance of `LtsLogMapInput` via:
//
//	LtsLogMap{ "key": LtsLogArgs{...} }
type LtsLogMapInput interface {
	pulumi.Input

	ToLtsLogMapOutput() LtsLogMapOutput
	ToLtsLogMapOutputWithContext(context.Context) LtsLogMapOutput
}

type LtsLogMap map[string]LtsLogInput

func (LtsLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsLog)(nil)).Elem()
}

func (i LtsLogMap) ToLtsLogMapOutput() LtsLogMapOutput {
	return i.ToLtsLogMapOutputWithContext(context.Background())
}

func (i LtsLogMap) ToLtsLogMapOutputWithContext(ctx context.Context) LtsLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogMapOutput)
}

type LtsLogOutput struct{ *pulumi.OutputState }

func (LtsLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsLog)(nil)).Elem()
}

func (o LtsLogOutput) ToLtsLogOutput() LtsLogOutput {
	return o
}

func (o LtsLogOutput) ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput {
	return o
}

// Specifies the engine of the RDS instance.
// Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
func (o LtsLogOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS instance.
// Changing this creates a new resource.
func (o LtsLogOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the type of the LTS log.
// Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
func (o LtsLogOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.LogType }).(pulumi.StringOutput)
}

// Specifies the ID of the LTS log group.
func (o LtsLogOutput) LtsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.LtsGroupId }).(pulumi.StringOutput)
}

// Specifies the ID of the LTS log stream.
func (o LtsLogOutput) LtsStreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.LtsStreamId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o LtsLogOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type LtsLogArrayOutput struct{ *pulumi.OutputState }

func (LtsLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsLog)(nil)).Elem()
}

func (o LtsLogArrayOutput) ToLtsLogArrayOutput() LtsLogArrayOutput {
	return o
}

func (o LtsLogArrayOutput) ToLtsLogArrayOutputWithContext(ctx context.Context) LtsLogArrayOutput {
	return o
}

func (o LtsLogArrayOutput) Index(i pulumi.IntInput) LtsLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LtsLog {
		return vs[0].([]*LtsLog)[vs[1].(int)]
	}).(LtsLogOutput)
}

type LtsLogMapOutput struct{ *pulumi.OutputState }

func (LtsLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsLog)(nil)).Elem()
}

func (o LtsLogMapOutput) ToLtsLogMapOutput() LtsLogMapOutput {
	return o
}

func (o LtsLogMapOutput) ToLtsLogMapOutputWithContext(ctx context.Context) LtsLogMapOutput {
	return o
}

func (o LtsLogMapOutput) MapIndex(k pulumi.StringInput) LtsLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LtsLog {
		return vs[0].(map[string]*LtsLog)[vs[1].(string)]
	}).(LtsLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogInput)(nil)).Elem(), &LtsLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogArrayInput)(nil)).Elem(), LtsLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogMapInput)(nil)).Elem(), LtsLogMap{})
	pulumi.RegisterOutputType(LtsLogOutput{})
	pulumi.RegisterOutputType(LtsLogArrayOutput{})
	pulumi.RegisterOutputType(LtsLogMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of RDS PostgreSQL plugins.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			databaseName := cfg.RequireObject("databaseName")
//			_, err := Rds.GetPgPlugins(ctx, &rds.GetPgPluginsArgs{
//				InstanceId:   instanceId,
//				DatabaseName: databaseName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPgPlugins(ctx *pulumi.Context, args *GetPgPluginsArgs, opts ...pulumi.InvokeOption) (*GetPgPluginsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPgPluginsResult
	err := ctx.Invoke("huaweicloud:Rds/getPgPlugins:getPgPlugins", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPgPlugins.
type GetPgPluginsArgs struct {
	// Specifies whether the plugin has been created. Defaults to: **false**.
	Created *bool `pulumi:"created"`
	// Specifies the database name of a PostgreSQL instance.
	DatabaseName string `pulumi:"databaseName"`
	// Specifies the ID of a PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the plugin name.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the plugin version.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getPgPlugins.
type GetPgPluginsResult struct {
	// Indicates whether the plugin has been created.
	Created      *bool  `pulumi:"created"`
	DatabaseName string `pulumi:"databaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Indicates the plugin name.
	Name *string `pulumi:"name"`
	// Indicates the plugin list.
	// The plugins structure is documented below.
	Plugins []GetPgPluginsPlugin `pulumi:"plugins"`
	Region  string               `pulumi:"region"`
	// Indicates the plugin version.
	Version *string `pulumi:"version"`
}

func GetPgPluginsOutput(ctx *pulumi.Context, args GetPgPluginsOutputArgs, opts ...pulumi.InvokeOption) GetPgPluginsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPgPluginsResult, error) {
			args := v.(GetPgPluginsArgs)
			r, err := GetPgPlugins(ctx, &args, opts...)
			var s GetPgPluginsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPgPluginsResultOutput)
}

// A collection of arguments for invoking getPgPlugins.
type GetPgPluginsOutputArgs struct {
	// Specifies whether the plugin has been created. Defaults to: **false**.
	Created pulumi.BoolPtrInput `pulumi:"created"`
	// Specifies the database name of a PostgreSQL instance.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Specifies the ID of a PostgreSQL instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the plugin name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the plugin version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GetPgPluginsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPgPluginsArgs)(nil)).Elem()
}

// A collection of values returned by getPgPlugins.
type GetPgPluginsResultOutput struct{ *pulumi.OutputState }

func (GetPgPluginsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPgPluginsResult)(nil)).Elem()
}

func (o GetPgPluginsResultOutput) ToGetPgPluginsResultOutput() GetPgPluginsResultOutput {
	return o
}

func (o GetPgPluginsResultOutput) ToGetPgPluginsResultOutputWithContext(ctx context.Context) GetPgPluginsResultOutput {
	return o
}

// Indicates whether the plugin has been created.
func (o GetPgPluginsResultOutput) Created() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPgPluginsResult) *bool { return v.Created }).(pulumi.BoolPtrOutput)
}

func (o GetPgPluginsResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgPluginsResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPgPluginsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgPluginsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPgPluginsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgPluginsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates the plugin name.
func (o GetPgPluginsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgPluginsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates the plugin list.
// The plugins structure is documented below.
func (o GetPgPluginsResultOutput) Plugins() GetPgPluginsPluginArrayOutput {
	return o.ApplyT(func(v GetPgPluginsResult) []GetPgPluginsPlugin { return v.Plugins }).(GetPgPluginsPluginArrayOutput)
}

func (o GetPgPluginsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPgPluginsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the plugin version.
func (o GetPgPluginsResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPgPluginsResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPgPluginsResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the binlog retention hours of RDS MySQL.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rds.GetMysqlBinlog(ctx, &rds.GetMysqlBinlogArgs{
//				InstanceId: _var.Instance_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMysqlBinlog(ctx *pulumi.Context, args *LookupMysqlBinlogArgs, opts ...pulumi.InvokeOption) (*LookupMysqlBinlogResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupMysqlBinlogResult
	err := ctx.Invoke("huaweicloud:Rds/getMysqlBinlog:getMysqlBinlog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMysqlBinlog.
type LookupMysqlBinlogArgs struct {
	// Specifies the ID of the RDS MySQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getMysqlBinlog.
type LookupMysqlBinlogResult struct {
	// The binlog retention period. Value range: 0 to 168 (7x24).
	BinlogRetentionHours int `pulumi:"binlogRetentionHours"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Region     string `pulumi:"region"`
}

func LookupMysqlBinlogOutput(ctx *pulumi.Context, args LookupMysqlBinlogOutputArgs, opts ...pulumi.InvokeOption) LookupMysqlBinlogResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMysqlBinlogResult, error) {
			args := v.(LookupMysqlBinlogArgs)
			r, err := LookupMysqlBinlog(ctx, &args, opts...)
			var s LookupMysqlBinlogResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMysqlBinlogResultOutput)
}

// A collection of arguments for invoking getMysqlBinlog.
type LookupMysqlBinlogOutputArgs struct {
	// Specifies the ID of the RDS MySQL instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupMysqlBinlogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMysqlBinlogArgs)(nil)).Elem()
}

// A collection of values returned by getMysqlBinlog.
type LookupMysqlBinlogResultOutput struct{ *pulumi.OutputState }

func (LookupMysqlBinlogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMysqlBinlogResult)(nil)).Elem()
}

func (o LookupMysqlBinlogResultOutput) ToLookupMysqlBinlogResultOutput() LookupMysqlBinlogResultOutput {
	return o
}

func (o LookupMysqlBinlogResultOutput) ToLookupMysqlBinlogResultOutputWithContext(ctx context.Context) LookupMysqlBinlogResultOutput {
	return o
}

// The binlog retention period. Value range: 0 to 168 (7x24).
func (o LookupMysqlBinlogResultOutput) BinlogRetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMysqlBinlogResult) int { return v.BinlogRetentionHours }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMysqlBinlogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMysqlBinlogResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMysqlBinlogResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMysqlBinlogResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupMysqlBinlogResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMysqlBinlogResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMysqlBinlogResultOutput{})
}

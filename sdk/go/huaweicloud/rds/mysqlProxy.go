// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages RDS mysql proxy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			replicaNodeId1 := cfg.RequireObject("replicaNodeId1")
//			replicaNodeId2 := cfg.RequireObject("replicaNodeId2")
//			_, err := Rds.NewMysqlProxy(ctx, "test", &Rds.MysqlProxyArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Flavor:     pulumi.String("rds.proxy.large.2"),
//				NodeNum:    pulumi.Int(3),
//				RouteMode:  pulumi.Int(0),
//				MasterNodeWeight: &rds.MysqlProxyMasterNodeWeightArgs{
//					Id:     pulumi.Any(instanceId),
//					Weight: pulumi.Int(10),
//				},
//				ReadonlyNodesWeights: rds.MysqlProxyReadonlyNodesWeightArray{
//					&rds.MysqlProxyReadonlyNodesWeightArgs{
//						Id:     pulumi.Any(replicaNodeId1),
//						Weight: pulumi.Int(20),
//					},
//					&rds.MysqlProxyReadonlyNodesWeightArgs{
//						Id:     pulumi.Any(replicaNodeId2),
//						Weight: pulumi.Int(30),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The RDS MySQL proxy can be imported using the `instance_id` and `id` separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Rds/mysqlProxy:MysqlProxy test <instance_id>/<id>
//
// ```
type MysqlProxy struct {
	pulumi.CustomResourceState

	// Indicates the read/write splitting address of the proxy.
	Address pulumi.StringOutput `pulumi:"address"`
	// Indicates the ALT switch status.
	AltFlag pulumi.BoolOutput `pulumi:"altFlag"`
	// Indicates the connection pool type. The value can be:
	// + **CLOSED**: The connection pool is closed.
	// + **SESSION**: The session-level connection pool is enabled.
	ConnectionPoolType pulumi.StringOutput `pulumi:"connectionPoolType"`
	// Indicates the delay threshold, in seconds.
	DelayThresholdInSeconds pulumi.IntOutput `pulumi:"delayThresholdInSeconds"`
	// Indicates the private domain name for the read/write splitting address of the proxy.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Specifies the flavor of the proxy.
	// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// Indicates the CPU architecture. The value can be: **X86**, **ARM**.
	FlavorGroupType pulumi.StringOutput `pulumi:"flavorGroupType"`
	// Indicates whether to forcibly route read requests to read replicas.
	ForceReadOnly pulumi.BoolOutput `pulumi:"forceReadOnly"`
	// Specifies the ID of the RDS MySQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightPtrOutput `pulumi:"masterNodeWeight"`
	// Indicates the memory size of the proxy.
	Memory pulumi.StringOutput `pulumi:"memory"`
	// Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Specifies the node number of the proxy nodes.
	// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
	// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
	NodeNum pulumi.IntOutput `pulumi:"nodeNum"`
	// Indicates the list of proxy nodes.
	// The nodes structure is documented below.
	Nodes MysqlProxyNodeArrayOutput `pulumi:"nodes"`
	// Indicates the billing mode of the proxy. The value can be:
	// + **0**: pay-per-use billing.
	// + **1**: yearly/monthly billing.
	PayMode pulumi.StringOutput `pulumi:"payMode"`
	// Indicates the port number.
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies the read/write mode of the proxy. Value options:
	// + **readwrite(default value)**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringOutput `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name must start with a letter and
	// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
	ProxyName pulumi.StringOutput `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayOutput `pulumi:"readonlyNodesWeights"`
	// The region in which to create the RDS MySQL proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the routing policy of the proxy. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntOutput `pulumi:"routeMode"`
	// Indicates the status of monitoring by seconds of the proxy. The value can be:
	// **on**, **off**.
	SecondsLevelMonitorFunStatus pulumi.StringOutput `pulumi:"secondsLevelMonitorFunStatus"`
	// Indicates the SSL switch status.
	SslOption pulumi.BoolOutput `pulumi:"sslOption"`
	// Indicates the proxy node status. The values can be:
	// + **NORMAL**: The node is normal.
	// + **ABNORMAL**: The node is abnormal.
	// + **CREATING**: The node is being created.
	// + **CREATEFAIL**: The node failed to be created.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the network ID of a subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Indicates whether load balancing can be enabled for the proxy.
	SupportBalanceRouteMode pulumi.BoolOutput `pulumi:"supportBalanceRouteMode"`
	// Indicates whether SSL can be enabled for the proxy.
	SupportProxySsl pulumi.BoolOutput `pulumi:"supportProxySsl"`
	// Indicates whether the session connection pool type can be changed for the proxy.
	SupportSwitchConnectionPoolType pulumi.BoolOutput `pulumi:"supportSwitchConnectionPoolType"`
	// Indicates whether transaction splitting can be enabled for the proxy.
	SupportTransactionSplit pulumi.BoolOutput `pulumi:"supportTransactionSplit"`
	// Indicates the status of transaction splitting for the proxy.
	TransactionSplit pulumi.StringOutput `pulumi:"transactionSplit"`
	// Indicates the vCPUs of the proxy.
	Vcpus pulumi.StringOutput `pulumi:"vcpus"`
}

// NewMysqlProxy registers a new resource with the given unique name, arguments, and options.
func NewMysqlProxy(ctx *pulumi.Context,
	name string, args *MysqlProxyArgs, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeNum == nil {
		return nil, errors.New("invalid value for required argument 'NodeNum'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MysqlProxy
	err := ctx.RegisterResource("huaweicloud:Rds/mysqlProxy:MysqlProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlProxy gets an existing MysqlProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlProxyState, opts ...pulumi.ResourceOption) (*MysqlProxy, error) {
	var resource MysqlProxy
	err := ctx.ReadResource("huaweicloud:Rds/mysqlProxy:MysqlProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlProxy resources.
type mysqlProxyState struct {
	// Indicates the read/write splitting address of the proxy.
	Address *string `pulumi:"address"`
	// Indicates the ALT switch status.
	AltFlag *bool `pulumi:"altFlag"`
	// Indicates the connection pool type. The value can be:
	// + **CLOSED**: The connection pool is closed.
	// + **SESSION**: The session-level connection pool is enabled.
	ConnectionPoolType *string `pulumi:"connectionPoolType"`
	// Indicates the delay threshold, in seconds.
	DelayThresholdInSeconds *int `pulumi:"delayThresholdInSeconds"`
	// Indicates the private domain name for the read/write splitting address of the proxy.
	DnsName *string `pulumi:"dnsName"`
	// Specifies the flavor of the proxy.
	// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
	Flavor *string `pulumi:"flavor"`
	// Indicates the CPU architecture. The value can be: **X86**, **ARM**.
	FlavorGroupType *string `pulumi:"flavorGroupType"`
	// Indicates whether to forcibly route read requests to read replicas.
	ForceReadOnly *bool `pulumi:"forceReadOnly"`
	// Specifies the ID of the RDS MySQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight *MysqlProxyMasterNodeWeight `pulumi:"masterNodeWeight"`
	// Indicates the memory size of the proxy.
	Memory *string `pulumi:"memory"`
	// Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
	Mode *string `pulumi:"mode"`
	// Specifies the node number of the proxy nodes.
	// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
	// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
	NodeNum *int `pulumi:"nodeNum"`
	// Indicates the list of proxy nodes.
	// The nodes structure is documented below.
	Nodes []MysqlProxyNode `pulumi:"nodes"`
	// Indicates the billing mode of the proxy. The value can be:
	// + **0**: pay-per-use billing.
	// + **1**: yearly/monthly billing.
	PayMode *string `pulumi:"payMode"`
	// Indicates the port number.
	Port *int `pulumi:"port"`
	// Specifies the read/write mode of the proxy. Value options:
	// + **readwrite(default value)**: read and write.
	// + **readonly**: read-only.
	ProxyMode *string `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name must start with a letter and
	// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
	ProxyName *string `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights []MysqlProxyReadonlyNodesWeight `pulumi:"readonlyNodesWeights"`
	// The region in which to create the RDS MySQL proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the routing policy of the proxy. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode *int `pulumi:"routeMode"`
	// Indicates the status of monitoring by seconds of the proxy. The value can be:
	// **on**, **off**.
	SecondsLevelMonitorFunStatus *string `pulumi:"secondsLevelMonitorFunStatus"`
	// Indicates the SSL switch status.
	SslOption *bool `pulumi:"sslOption"`
	// Indicates the proxy node status. The values can be:
	// + **NORMAL**: The node is normal.
	// + **ABNORMAL**: The node is abnormal.
	// + **CREATING**: The node is being created.
	// + **CREATEFAIL**: The node failed to be created.
	Status *string `pulumi:"status"`
	// Specifies the network ID of a subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Indicates whether load balancing can be enabled for the proxy.
	SupportBalanceRouteMode *bool `pulumi:"supportBalanceRouteMode"`
	// Indicates whether SSL can be enabled for the proxy.
	SupportProxySsl *bool `pulumi:"supportProxySsl"`
	// Indicates whether the session connection pool type can be changed for the proxy.
	SupportSwitchConnectionPoolType *bool `pulumi:"supportSwitchConnectionPoolType"`
	// Indicates whether transaction splitting can be enabled for the proxy.
	SupportTransactionSplit *bool `pulumi:"supportTransactionSplit"`
	// Indicates the status of transaction splitting for the proxy.
	TransactionSplit *string `pulumi:"transactionSplit"`
	// Indicates the vCPUs of the proxy.
	Vcpus *string `pulumi:"vcpus"`
}

type MysqlProxyState struct {
	// Indicates the read/write splitting address of the proxy.
	Address pulumi.StringPtrInput
	// Indicates the ALT switch status.
	AltFlag pulumi.BoolPtrInput
	// Indicates the connection pool type. The value can be:
	// + **CLOSED**: The connection pool is closed.
	// + **SESSION**: The session-level connection pool is enabled.
	ConnectionPoolType pulumi.StringPtrInput
	// Indicates the delay threshold, in seconds.
	DelayThresholdInSeconds pulumi.IntPtrInput
	// Indicates the private domain name for the read/write splitting address of the proxy.
	DnsName pulumi.StringPtrInput
	// Specifies the flavor of the proxy.
	// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
	Flavor pulumi.StringPtrInput
	// Indicates the CPU architecture. The value can be: **X86**, **ARM**.
	FlavorGroupType pulumi.StringPtrInput
	// Indicates whether to forcibly route read requests to read replicas.
	ForceReadOnly pulumi.BoolPtrInput
	// Specifies the ID of the RDS MySQL instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightPtrInput
	// Indicates the memory size of the proxy.
	Memory pulumi.StringPtrInput
	// Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
	Mode pulumi.StringPtrInput
	// Specifies the node number of the proxy nodes.
	// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
	// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
	NodeNum pulumi.IntPtrInput
	// Indicates the list of proxy nodes.
	// The nodes structure is documented below.
	Nodes MysqlProxyNodeArrayInput
	// Indicates the billing mode of the proxy. The value can be:
	// + **0**: pay-per-use billing.
	// + **1**: yearly/monthly billing.
	PayMode pulumi.StringPtrInput
	// Indicates the port number.
	Port pulumi.IntPtrInput
	// Specifies the read/write mode of the proxy. Value options:
	// + **readwrite(default value)**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringPtrInput
	// Specifies the name of the proxy. The name must start with a letter and
	// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
	ProxyName pulumi.StringPtrInput
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayInput
	// The region in which to create the RDS MySQL proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the routing policy of the proxy. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntPtrInput
	// Indicates the status of monitoring by seconds of the proxy. The value can be:
	// **on**, **off**.
	SecondsLevelMonitorFunStatus pulumi.StringPtrInput
	// Indicates the SSL switch status.
	SslOption pulumi.BoolPtrInput
	// Indicates the proxy node status. The values can be:
	// + **NORMAL**: The node is normal.
	// + **ABNORMAL**: The node is abnormal.
	// + **CREATING**: The node is being created.
	// + **CREATEFAIL**: The node failed to be created.
	Status pulumi.StringPtrInput
	// Specifies the network ID of a subnet.
	SubnetId pulumi.StringPtrInput
	// Indicates whether load balancing can be enabled for the proxy.
	SupportBalanceRouteMode pulumi.BoolPtrInput
	// Indicates whether SSL can be enabled for the proxy.
	SupportProxySsl pulumi.BoolPtrInput
	// Indicates whether the session connection pool type can be changed for the proxy.
	SupportSwitchConnectionPoolType pulumi.BoolPtrInput
	// Indicates whether transaction splitting can be enabled for the proxy.
	SupportTransactionSplit pulumi.BoolPtrInput
	// Indicates the status of transaction splitting for the proxy.
	TransactionSplit pulumi.StringPtrInput
	// Indicates the vCPUs of the proxy.
	Vcpus pulumi.StringPtrInput
}

func (MysqlProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyState)(nil)).Elem()
}

type mysqlProxyArgs struct {
	// Specifies the flavor of the proxy.
	// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
	Flavor string `pulumi:"flavor"`
	// Specifies the ID of the RDS MySQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight *MysqlProxyMasterNodeWeight `pulumi:"masterNodeWeight"`
	// Specifies the node number of the proxy nodes.
	// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
	// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
	NodeNum int `pulumi:"nodeNum"`
	// Specifies the read/write mode of the proxy. Value options:
	// + **readwrite(default value)**: read and write.
	// + **readonly**: read-only.
	ProxyMode *string `pulumi:"proxyMode"`
	// Specifies the name of the proxy. The name must start with a letter and
	// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
	ProxyName *string `pulumi:"proxyName"`
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights []MysqlProxyReadonlyNodesWeight `pulumi:"readonlyNodesWeights"`
	// The region in which to create the RDS MySQL proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the routing policy of the proxy. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode *int `pulumi:"routeMode"`
	// Specifies the network ID of a subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a MysqlProxy resource.
type MysqlProxyArgs struct {
	// Specifies the flavor of the proxy.
	// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
	Flavor pulumi.StringInput
	// Specifies the ID of the RDS MySQL instance.
	InstanceId pulumi.StringInput
	// Specifies the read weight of the master node.
	// The masterNodeWeight structure is documented below.
	MasterNodeWeight MysqlProxyMasterNodeWeightPtrInput
	// Specifies the node number of the proxy nodes.
	// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
	// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
	NodeNum pulumi.IntInput
	// Specifies the read/write mode of the proxy. Value options:
	// + **readwrite(default value)**: read and write.
	// + **readonly**: read-only.
	ProxyMode pulumi.StringPtrInput
	// Specifies the name of the proxy. The name must start with a letter and
	// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
	ProxyName pulumi.StringPtrInput
	// Specifies the read weight of the read-only node.
	// The readonlyNodesWeight structure is documented below.
	ReadonlyNodesWeights MysqlProxyReadonlyNodesWeightArrayInput
	// The region in which to create the RDS MySQL proxy resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the routing policy of the proxy. Value options:
	// + **0**: weighted load balancing.
	// + **1**: load balancing (The primary node does not process read requests).
	// + **2**: load balancing (The primary node processes read requests).
	RouteMode pulumi.IntPtrInput
	// Specifies the network ID of a subnet.
	SubnetId pulumi.StringPtrInput
}

func (MysqlProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlProxyArgs)(nil)).Elem()
}

type MysqlProxyInput interface {
	pulumi.Input

	ToMysqlProxyOutput() MysqlProxyOutput
	ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput
}

func (*MysqlProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (i *MysqlProxy) ToMysqlProxyOutput() MysqlProxyOutput {
	return i.ToMysqlProxyOutputWithContext(context.Background())
}

func (i *MysqlProxy) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyOutput)
}

// MysqlProxyArrayInput is an input type that accepts MysqlProxyArray and MysqlProxyArrayOutput values.
// You can construct a concrete instance of `MysqlProxyArrayInput` via:
//
//	MysqlProxyArray{ MysqlProxyArgs{...} }
type MysqlProxyArrayInput interface {
	pulumi.Input

	ToMysqlProxyArrayOutput() MysqlProxyArrayOutput
	ToMysqlProxyArrayOutputWithContext(context.Context) MysqlProxyArrayOutput
}

type MysqlProxyArray []MysqlProxyInput

func (MysqlProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return i.ToMysqlProxyArrayOutputWithContext(context.Background())
}

func (i MysqlProxyArray) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyArrayOutput)
}

// MysqlProxyMapInput is an input type that accepts MysqlProxyMap and MysqlProxyMapOutput values.
// You can construct a concrete instance of `MysqlProxyMapInput` via:
//
//	MysqlProxyMap{ "key": MysqlProxyArgs{...} }
type MysqlProxyMapInput interface {
	pulumi.Input

	ToMysqlProxyMapOutput() MysqlProxyMapOutput
	ToMysqlProxyMapOutputWithContext(context.Context) MysqlProxyMapOutput
}

type MysqlProxyMap map[string]MysqlProxyInput

func (MysqlProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (i MysqlProxyMap) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return i.ToMysqlProxyMapOutputWithContext(context.Background())
}

func (i MysqlProxyMap) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProxyMapOutput)
}

type MysqlProxyOutput struct{ *pulumi.OutputState }

func (MysqlProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyOutput) ToMysqlProxyOutput() MysqlProxyOutput {
	return o
}

func (o MysqlProxyOutput) ToMysqlProxyOutputWithContext(ctx context.Context) MysqlProxyOutput {
	return o
}

// Indicates the read/write splitting address of the proxy.
func (o MysqlProxyOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Indicates the ALT switch status.
func (o MysqlProxyOutput) AltFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.AltFlag }).(pulumi.BoolOutput)
}

// Indicates the connection pool type. The value can be:
// + **CLOSED**: The connection pool is closed.
// + **SESSION**: The session-level connection pool is enabled.
func (o MysqlProxyOutput) ConnectionPoolType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ConnectionPoolType }).(pulumi.StringOutput)
}

// Indicates the delay threshold, in seconds.
func (o MysqlProxyOutput) DelayThresholdInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.DelayThresholdInSeconds }).(pulumi.IntOutput)
}

// Indicates the private domain name for the read/write splitting address of the proxy.
func (o MysqlProxyOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Specifies the flavor of the proxy.
// + When the site supports the proxy in primary/standby mode, this parameter does not take effect.
func (o MysqlProxyOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// Indicates the CPU architecture. The value can be: **X86**, **ARM**.
func (o MysqlProxyOutput) FlavorGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.FlavorGroupType }).(pulumi.StringOutput)
}

// Indicates whether to forcibly route read requests to read replicas.
func (o MysqlProxyOutput) ForceReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.ForceReadOnly }).(pulumi.BoolOutput)
}

// Specifies the ID of the RDS MySQL instance.
func (o MysqlProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the read weight of the master node.
// The masterNodeWeight structure is documented below.
func (o MysqlProxyOutput) MasterNodeWeight() MysqlProxyMasterNodeWeightPtrOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyMasterNodeWeightPtrOutput { return v.MasterNodeWeight }).(MysqlProxyMasterNodeWeightPtrOutput)
}

// Indicates the memory size of the proxy.
func (o MysqlProxyOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Memory }).(pulumi.StringOutput)
}

// Indicates the proxy mode. The value can be: **Cluster**, **Ha**.
func (o MysqlProxyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the node number of the proxy nodes.
// + When the site supports the proxy in primary/standby mode, set this parameter to **2**.
// + When the site supports the proxy in cluster mode, the minimum value of this parameter is **2**.
func (o MysqlProxyOutput) NodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.NodeNum }).(pulumi.IntOutput)
}

// Indicates the list of proxy nodes.
// The nodes structure is documented below.
func (o MysqlProxyOutput) Nodes() MysqlProxyNodeArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyNodeArrayOutput { return v.Nodes }).(MysqlProxyNodeArrayOutput)
}

// Indicates the billing mode of the proxy. The value can be:
// + **0**: pay-per-use billing.
// + **1**: yearly/monthly billing.
func (o MysqlProxyOutput) PayMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.PayMode }).(pulumi.StringOutput)
}

// Indicates the port number.
func (o MysqlProxyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Specifies the read/write mode of the proxy. Value options:
// + **readwrite(default value)**: read and write.
// + **readonly**: read-only.
func (o MysqlProxyOutput) ProxyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ProxyMode }).(pulumi.StringOutput)
}

// Specifies the name of the proxy. The name must start with a letter and
// consist of **4** to **64** characters. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed.
func (o MysqlProxyOutput) ProxyName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.ProxyName }).(pulumi.StringOutput)
}

// Specifies the read weight of the read-only node.
// The readonlyNodesWeight structure is documented below.
func (o MysqlProxyOutput) ReadonlyNodesWeights() MysqlProxyReadonlyNodesWeightArrayOutput {
	return o.ApplyT(func(v *MysqlProxy) MysqlProxyReadonlyNodesWeightArrayOutput { return v.ReadonlyNodesWeights }).(MysqlProxyReadonlyNodesWeightArrayOutput)
}

// The region in which to create the RDS MySQL proxy resource. If omitted,
// the provider-level region will be used. Changing this creates a new resource.
func (o MysqlProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the routing policy of the proxy. Value options:
// + **0**: weighted load balancing.
// + **1**: load balancing (The primary node does not process read requests).
// + **2**: load balancing (The primary node processes read requests).
func (o MysqlProxyOutput) RouteMode() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.IntOutput { return v.RouteMode }).(pulumi.IntOutput)
}

// Indicates the status of monitoring by seconds of the proxy. The value can be:
// **on**, **off**.
func (o MysqlProxyOutput) SecondsLevelMonitorFunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.SecondsLevelMonitorFunStatus }).(pulumi.StringOutput)
}

// Indicates the SSL switch status.
func (o MysqlProxyOutput) SslOption() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SslOption }).(pulumi.BoolOutput)
}

// Indicates the proxy node status. The values can be:
// + **NORMAL**: The node is normal.
// + **ABNORMAL**: The node is abnormal.
// + **CREATING**: The node is being created.
// + **CREATEFAIL**: The node failed to be created.
func (o MysqlProxyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the network ID of a subnet.
func (o MysqlProxyOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Indicates whether load balancing can be enabled for the proxy.
func (o MysqlProxyOutput) SupportBalanceRouteMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SupportBalanceRouteMode }).(pulumi.BoolOutput)
}

// Indicates whether SSL can be enabled for the proxy.
func (o MysqlProxyOutput) SupportProxySsl() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SupportProxySsl }).(pulumi.BoolOutput)
}

// Indicates whether the session connection pool type can be changed for the proxy.
func (o MysqlProxyOutput) SupportSwitchConnectionPoolType() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SupportSwitchConnectionPoolType }).(pulumi.BoolOutput)
}

// Indicates whether transaction splitting can be enabled for the proxy.
func (o MysqlProxyOutput) SupportTransactionSplit() pulumi.BoolOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.BoolOutput { return v.SupportTransactionSplit }).(pulumi.BoolOutput)
}

// Indicates the status of transaction splitting for the proxy.
func (o MysqlProxyOutput) TransactionSplit() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.TransactionSplit }).(pulumi.StringOutput)
}

// Indicates the vCPUs of the proxy.
func (o MysqlProxyOutput) Vcpus() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlProxy) pulumi.StringOutput { return v.Vcpus }).(pulumi.StringOutput)
}

type MysqlProxyArrayOutput struct{ *pulumi.OutputState }

func (MysqlProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutput() MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) ToMysqlProxyArrayOutputWithContext(ctx context.Context) MysqlProxyArrayOutput {
	return o
}

func (o MysqlProxyArrayOutput) Index(i pulumi.IntInput) MysqlProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].([]*MysqlProxy)[vs[1].(int)]
	}).(MysqlProxyOutput)
}

type MysqlProxyMapOutput struct{ *pulumi.OutputState }

func (MysqlProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlProxy)(nil)).Elem()
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutput() MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) ToMysqlProxyMapOutputWithContext(ctx context.Context) MysqlProxyMapOutput {
	return o
}

func (o MysqlProxyMapOutput) MapIndex(k pulumi.StringInput) MysqlProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlProxy {
		return vs[0].(map[string]*MysqlProxy)[vs[1].(string)]
	}).(MysqlProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyInput)(nil)).Elem(), &MysqlProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyArrayInput)(nil)).Elem(), MysqlProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProxyMapInput)(nil)).Elem(), MysqlProxyMap{})
	pulumi.RegisterOutputType(MysqlProxyOutput{})
	pulumi.RegisterOutputType(MysqlProxyArrayOutput{})
	pulumi.RegisterOutputType(MysqlProxyMapOutput{})
}

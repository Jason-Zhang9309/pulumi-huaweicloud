// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the link for downloading a backup file.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rds.GetBackupFiles(ctx, &rds.GetBackupFilesArgs{
//				BackupId: _var.Backup_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBackupFiles(ctx *pulumi.Context, args *GetBackupFilesArgs, opts ...pulumi.InvokeOption) (*GetBackupFilesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBackupFilesResult
	err := ctx.Invoke("huaweicloud:Rds/getBackupFiles:getBackupFiles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackupFiles.
type GetBackupFilesArgs struct {
	// Specifies the backup ID.
	BackupId string `pulumi:"backupId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getBackupFiles.
type GetBackupFilesResult struct {
	BackupId string `pulumi:"backupId"`
	// Indicates the name of the bucket where the file is located.
	Bucket string `pulumi:"bucket"`
	// Indicates the list of backup files.
	Files []GetBackupFilesFile `pulumi:"files"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Region string `pulumi:"region"`
}

func GetBackupFilesOutput(ctx *pulumi.Context, args GetBackupFilesOutputArgs, opts ...pulumi.InvokeOption) GetBackupFilesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBackupFilesResult, error) {
			args := v.(GetBackupFilesArgs)
			r, err := GetBackupFiles(ctx, &args, opts...)
			var s GetBackupFilesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBackupFilesResultOutput)
}

// A collection of arguments for invoking getBackupFiles.
type GetBackupFilesOutputArgs struct {
	// Specifies the backup ID.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetBackupFilesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupFilesArgs)(nil)).Elem()
}

// A collection of values returned by getBackupFiles.
type GetBackupFilesResultOutput struct{ *pulumi.OutputState }

func (GetBackupFilesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupFilesResult)(nil)).Elem()
}

func (o GetBackupFilesResultOutput) ToGetBackupFilesResultOutput() GetBackupFilesResultOutput {
	return o
}

func (o GetBackupFilesResultOutput) ToGetBackupFilesResultOutputWithContext(ctx context.Context) GetBackupFilesResultOutput {
	return o
}

func (o GetBackupFilesResultOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupFilesResult) string { return v.BackupId }).(pulumi.StringOutput)
}

// Indicates the name of the bucket where the file is located.
func (o GetBackupFilesResultOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupFilesResult) string { return v.Bucket }).(pulumi.StringOutput)
}

// Indicates the list of backup files.
func (o GetBackupFilesResultOutput) Files() GetBackupFilesFileArrayOutput {
	return o.ApplyT(func(v GetBackupFilesResult) []GetBackupFilesFile { return v.Files }).(GetBackupFilesFileArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBackupFilesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupFilesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBackupFilesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupFilesResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBackupFilesResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of RDS SQLServer accounts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rds.GetSqlserverAccounts(ctx, &rds.GetSqlserverAccountsArgs{
//				InstanceId: _var.Instance_id,
//				UserName:   pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlserverAccounts(ctx *pulumi.Context, args *GetSqlserverAccountsArgs, opts ...pulumi.InvokeOption) (*GetSqlserverAccountsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetSqlserverAccountsResult
	err := ctx.Invoke("huaweicloud:Rds/getSqlserverAccounts:getSqlserverAccounts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlserverAccounts.
type GetSqlserverAccountsArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the database user status. Its value can be any of the following:
	// + **unavailable**: The database user is unavailable.
	// + **available**: The database user is available.
	State *string `pulumi:"state"`
	// Specifies the username of the database account.
	UserName *string `pulumi:"userName"`
}

// A collection of values returned by getSqlserverAccounts.
type GetSqlserverAccountsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Region     string `pulumi:"region"`
	// Indicates the database user status.
	State    *string `pulumi:"state"`
	UserName *string `pulumi:"userName"`
	// Indicates the list of users.
	// The users structure is documented below.
	Users []GetSqlserverAccountsUser `pulumi:"users"`
}

func GetSqlserverAccountsOutput(ctx *pulumi.Context, args GetSqlserverAccountsOutputArgs, opts ...pulumi.InvokeOption) GetSqlserverAccountsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlserverAccountsResult, error) {
			args := v.(GetSqlserverAccountsArgs)
			r, err := GetSqlserverAccounts(ctx, &args, opts...)
			var s GetSqlserverAccountsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSqlserverAccountsResultOutput)
}

// A collection of arguments for invoking getSqlserverAccounts.
type GetSqlserverAccountsOutputArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the database user status. Its value can be any of the following:
	// + **unavailable**: The database user is unavailable.
	// + **available**: The database user is available.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the username of the database account.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetSqlserverAccountsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverAccountsArgs)(nil)).Elem()
}

// A collection of values returned by getSqlserverAccounts.
type GetSqlserverAccountsResultOutput struct{ *pulumi.OutputState }

func (GetSqlserverAccountsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverAccountsResult)(nil)).Elem()
}

func (o GetSqlserverAccountsResultOutput) ToGetSqlserverAccountsResultOutput() GetSqlserverAccountsResultOutput {
	return o
}

func (o GetSqlserverAccountsResultOutput) ToGetSqlserverAccountsResultOutputWithContext(ctx context.Context) GetSqlserverAccountsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlserverAccountsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlserverAccountsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetSqlserverAccountsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the database user status.
func (o GetSqlserverAccountsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o GetSqlserverAccountsResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// Indicates the list of users.
// The users structure is documented below.
func (o GetSqlserverAccountsResultOutput) Users() GetSqlserverAccountsUserArrayOutput {
	return o.ApplyT(func(v GetSqlserverAccountsResult) []GetSqlserverAccountsUser { return v.Users }).(GetSqlserverAccountsUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlserverAccountsResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages RDS cross-region backup strategy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			destinationRegion := cfg.RequireObject("destinationRegion")
//			destinationProjectId := cfg.RequireObject("destinationProjectId")
//			_, err := Rds.NewCrossRegionBackupStrategy(ctx, "test", &Rds.CrossRegionBackupStrategyArgs{
//				InstanceId:           pulumi.Any(instanceId),
//				BackupType:           pulumi.String("all"),
//				KeepDays:             pulumi.Int(5),
//				DestinationRegion:    pulumi.Any(destinationRegion),
//				DestinationProjectId: pulumi.Any(destinationProjectId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The RDS cross-region backup strategy can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Rds/crossRegionBackupStrategy:CrossRegionBackupStrategy test <id>
//
// ```
type CrossRegionBackupStrategy struct {
	pulumi.CustomResourceState

	// Specifies the backup type. Value options:
	// + **auto**: open automated full backup.
	// + **all**: open both automated full backup and automated incremental backup.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// Specifies the target project ID for the cross-region backup
	// policy.
	DestinationProjectId pulumi.StringOutput `pulumi:"destinationProjectId"`
	// Specifies the target region ID for the cross-region backup policy.
	DestinationRegion pulumi.StringOutput `pulumi:"destinationRegion"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the number of days to retain the generated backup files.
	// Value ranges from `1` to `1,825`.
	KeepDays pulumi.IntOutput `pulumi:"keepDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewCrossRegionBackupStrategy registers a new resource with the given unique name, arguments, and options.
func NewCrossRegionBackupStrategy(ctx *pulumi.Context,
	name string, args *CrossRegionBackupStrategyArgs, opts ...pulumi.ResourceOption) (*CrossRegionBackupStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupType == nil {
		return nil, errors.New("invalid value for required argument 'BackupType'")
	}
	if args.DestinationProjectId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationProjectId'")
	}
	if args.DestinationRegion == nil {
		return nil, errors.New("invalid value for required argument 'DestinationRegion'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.KeepDays == nil {
		return nil, errors.New("invalid value for required argument 'KeepDays'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CrossRegionBackupStrategy
	err := ctx.RegisterResource("huaweicloud:Rds/crossRegionBackupStrategy:CrossRegionBackupStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrossRegionBackupStrategy gets an existing CrossRegionBackupStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrossRegionBackupStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrossRegionBackupStrategyState, opts ...pulumi.ResourceOption) (*CrossRegionBackupStrategy, error) {
	var resource CrossRegionBackupStrategy
	err := ctx.ReadResource("huaweicloud:Rds/crossRegionBackupStrategy:CrossRegionBackupStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CrossRegionBackupStrategy resources.
type crossRegionBackupStrategyState struct {
	// Specifies the backup type. Value options:
	// + **auto**: open automated full backup.
	// + **all**: open both automated full backup and automated incremental backup.
	BackupType *string `pulumi:"backupType"`
	// Specifies the target project ID for the cross-region backup
	// policy.
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// Specifies the target region ID for the cross-region backup policy.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Specifies the ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the number of days to retain the generated backup files.
	// Value ranges from `1` to `1,825`.
	KeepDays *int `pulumi:"keepDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type CrossRegionBackupStrategyState struct {
	// Specifies the backup type. Value options:
	// + **auto**: open automated full backup.
	// + **all**: open both automated full backup and automated incremental backup.
	BackupType pulumi.StringPtrInput
	// Specifies the target project ID for the cross-region backup
	// policy.
	DestinationProjectId pulumi.StringPtrInput
	// Specifies the target region ID for the cross-region backup policy.
	DestinationRegion pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the number of days to retain the generated backup files.
	// Value ranges from `1` to `1,825`.
	KeepDays pulumi.IntPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (CrossRegionBackupStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*crossRegionBackupStrategyState)(nil)).Elem()
}

type crossRegionBackupStrategyArgs struct {
	// Specifies the backup type. Value options:
	// + **auto**: open automated full backup.
	// + **all**: open both automated full backup and automated incremental backup.
	BackupType string `pulumi:"backupType"`
	// Specifies the target project ID for the cross-region backup
	// policy.
	DestinationProjectId string `pulumi:"destinationProjectId"`
	// Specifies the target region ID for the cross-region backup policy.
	DestinationRegion string `pulumi:"destinationRegion"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the number of days to retain the generated backup files.
	// Value ranges from `1` to `1,825`.
	KeepDays int `pulumi:"keepDays"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a CrossRegionBackupStrategy resource.
type CrossRegionBackupStrategyArgs struct {
	// Specifies the backup type. Value options:
	// + **auto**: open automated full backup.
	// + **all**: open both automated full backup and automated incremental backup.
	BackupType pulumi.StringInput
	// Specifies the target project ID for the cross-region backup
	// policy.
	DestinationProjectId pulumi.StringInput
	// Specifies the target region ID for the cross-region backup policy.
	DestinationRegion pulumi.StringInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput
	// Specifies the number of days to retain the generated backup files.
	// Value ranges from `1` to `1,825`.
	KeepDays pulumi.IntInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (CrossRegionBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crossRegionBackupStrategyArgs)(nil)).Elem()
}

type CrossRegionBackupStrategyInput interface {
	pulumi.Input

	ToCrossRegionBackupStrategyOutput() CrossRegionBackupStrategyOutput
	ToCrossRegionBackupStrategyOutputWithContext(ctx context.Context) CrossRegionBackupStrategyOutput
}

func (*CrossRegionBackupStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossRegionBackupStrategy)(nil)).Elem()
}

func (i *CrossRegionBackupStrategy) ToCrossRegionBackupStrategyOutput() CrossRegionBackupStrategyOutput {
	return i.ToCrossRegionBackupStrategyOutputWithContext(context.Background())
}

func (i *CrossRegionBackupStrategy) ToCrossRegionBackupStrategyOutputWithContext(ctx context.Context) CrossRegionBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossRegionBackupStrategyOutput)
}

// CrossRegionBackupStrategyArrayInput is an input type that accepts CrossRegionBackupStrategyArray and CrossRegionBackupStrategyArrayOutput values.
// You can construct a concrete instance of `CrossRegionBackupStrategyArrayInput` via:
//
//	CrossRegionBackupStrategyArray{ CrossRegionBackupStrategyArgs{...} }
type CrossRegionBackupStrategyArrayInput interface {
	pulumi.Input

	ToCrossRegionBackupStrategyArrayOutput() CrossRegionBackupStrategyArrayOutput
	ToCrossRegionBackupStrategyArrayOutputWithContext(context.Context) CrossRegionBackupStrategyArrayOutput
}

type CrossRegionBackupStrategyArray []CrossRegionBackupStrategyInput

func (CrossRegionBackupStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossRegionBackupStrategy)(nil)).Elem()
}

func (i CrossRegionBackupStrategyArray) ToCrossRegionBackupStrategyArrayOutput() CrossRegionBackupStrategyArrayOutput {
	return i.ToCrossRegionBackupStrategyArrayOutputWithContext(context.Background())
}

func (i CrossRegionBackupStrategyArray) ToCrossRegionBackupStrategyArrayOutputWithContext(ctx context.Context) CrossRegionBackupStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossRegionBackupStrategyArrayOutput)
}

// CrossRegionBackupStrategyMapInput is an input type that accepts CrossRegionBackupStrategyMap and CrossRegionBackupStrategyMapOutput values.
// You can construct a concrete instance of `CrossRegionBackupStrategyMapInput` via:
//
//	CrossRegionBackupStrategyMap{ "key": CrossRegionBackupStrategyArgs{...} }
type CrossRegionBackupStrategyMapInput interface {
	pulumi.Input

	ToCrossRegionBackupStrategyMapOutput() CrossRegionBackupStrategyMapOutput
	ToCrossRegionBackupStrategyMapOutputWithContext(context.Context) CrossRegionBackupStrategyMapOutput
}

type CrossRegionBackupStrategyMap map[string]CrossRegionBackupStrategyInput

func (CrossRegionBackupStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossRegionBackupStrategy)(nil)).Elem()
}

func (i CrossRegionBackupStrategyMap) ToCrossRegionBackupStrategyMapOutput() CrossRegionBackupStrategyMapOutput {
	return i.ToCrossRegionBackupStrategyMapOutputWithContext(context.Background())
}

func (i CrossRegionBackupStrategyMap) ToCrossRegionBackupStrategyMapOutputWithContext(ctx context.Context) CrossRegionBackupStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossRegionBackupStrategyMapOutput)
}

type CrossRegionBackupStrategyOutput struct{ *pulumi.OutputState }

func (CrossRegionBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossRegionBackupStrategy)(nil)).Elem()
}

func (o CrossRegionBackupStrategyOutput) ToCrossRegionBackupStrategyOutput() CrossRegionBackupStrategyOutput {
	return o
}

func (o CrossRegionBackupStrategyOutput) ToCrossRegionBackupStrategyOutputWithContext(ctx context.Context) CrossRegionBackupStrategyOutput {
	return o
}

// Specifies the backup type. Value options:
// + **auto**: open automated full backup.
// + **all**: open both automated full backup and automated incremental backup.
func (o CrossRegionBackupStrategyOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// Specifies the target project ID for the cross-region backup
// policy.
func (o CrossRegionBackupStrategyOutput) DestinationProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.StringOutput { return v.DestinationProjectId }).(pulumi.StringOutput)
}

// Specifies the target region ID for the cross-region backup policy.
func (o CrossRegionBackupStrategyOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.StringOutput { return v.DestinationRegion }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS instance.
func (o CrossRegionBackupStrategyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the number of days to retain the generated backup files.
// Value ranges from `1` to `1,825`.
func (o CrossRegionBackupStrategyOutput) KeepDays() pulumi.IntOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.IntOutput { return v.KeepDays }).(pulumi.IntOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o CrossRegionBackupStrategyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossRegionBackupStrategy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CrossRegionBackupStrategyArrayOutput struct{ *pulumi.OutputState }

func (CrossRegionBackupStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossRegionBackupStrategy)(nil)).Elem()
}

func (o CrossRegionBackupStrategyArrayOutput) ToCrossRegionBackupStrategyArrayOutput() CrossRegionBackupStrategyArrayOutput {
	return o
}

func (o CrossRegionBackupStrategyArrayOutput) ToCrossRegionBackupStrategyArrayOutputWithContext(ctx context.Context) CrossRegionBackupStrategyArrayOutput {
	return o
}

func (o CrossRegionBackupStrategyArrayOutput) Index(i pulumi.IntInput) CrossRegionBackupStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CrossRegionBackupStrategy {
		return vs[0].([]*CrossRegionBackupStrategy)[vs[1].(int)]
	}).(CrossRegionBackupStrategyOutput)
}

type CrossRegionBackupStrategyMapOutput struct{ *pulumi.OutputState }

func (CrossRegionBackupStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossRegionBackupStrategy)(nil)).Elem()
}

func (o CrossRegionBackupStrategyMapOutput) ToCrossRegionBackupStrategyMapOutput() CrossRegionBackupStrategyMapOutput {
	return o
}

func (o CrossRegionBackupStrategyMapOutput) ToCrossRegionBackupStrategyMapOutputWithContext(ctx context.Context) CrossRegionBackupStrategyMapOutput {
	return o
}

func (o CrossRegionBackupStrategyMapOutput) MapIndex(k pulumi.StringInput) CrossRegionBackupStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CrossRegionBackupStrategy {
		return vs[0].(map[string]*CrossRegionBackupStrategy)[vs[1].(string)]
	}).(CrossRegionBackupStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrossRegionBackupStrategyInput)(nil)).Elem(), &CrossRegionBackupStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossRegionBackupStrategyArrayInput)(nil)).Elem(), CrossRegionBackupStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossRegionBackupStrategyMapInput)(nil)).Elem(), CrossRegionBackupStrategyMap{})
	pulumi.RegisterOutputType(CrossRegionBackupStrategyOutput{})
	pulumi.RegisterOutputType(CrossRegionBackupStrategyArrayOutput{})
	pulumi.RegisterOutputType(CrossRegionBackupStrategyMapOutput{})
}

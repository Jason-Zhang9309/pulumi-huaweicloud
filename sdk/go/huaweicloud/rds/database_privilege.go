// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages RDS Mysql database privilege resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			dbName := cfg.RequireObject("dbName")
//			userName1 := cfg.RequireObject("userName1")
//			userName2 := cfg.RequireObject("userName2")
//			_, err := Rds.NewDatabase_privilege(ctx, "test", &Rds.Database_privilegeArgs{
//				InstanceId: pulumi.Any(instanceId),
//				DbName:     pulumi.Any(dbName),
//				Users: rds.Database_privilegeUserArray{
//					&rds.Database_privilegeUserArgs{
//						Name:     pulumi.Any(userName1),
//						Readonly: pulumi.Bool(true),
//					},
//					&rds.Database_privilegeUserArgs{
//						Name:     pulumi.Any(userName2),
//						Readonly: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS database privilege can be imported using the `instance id` and `database name`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Rds/database_privilege:Database_privilege test instance_id/database_name
//
// ```
type Database_privilege struct {
	pulumi.CustomResourceState

	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	Users Database_privilegeUserArrayOutput `pulumi:"users"`
}

// NewDatabase_privilege registers a new resource with the given unique name, arguments, and options.
func NewDatabase_privilege(ctx *pulumi.Context,
	name string, args *Database_privilegeArgs, opts ...pulumi.ResourceOption) (*Database_privilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Database_privilege
	err := ctx.RegisterResource("huaweicloud:Rds/database_privilege:Database_privilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase_privilege gets an existing Database_privilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase_privilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Database_privilegeState, opts ...pulumi.ResourceOption) (*Database_privilege, error) {
	var resource Database_privilege
	err := ctx.ReadResource("huaweicloud:Rds/database_privilege:Database_privilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database_privilege resources.
type database_privilegeState struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName *string `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	Users []Database_privilegeUser `pulumi:"users"`
}

type Database_privilegeState struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringPtrInput
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	Users Database_privilegeUserArrayInput
}

func (Database_privilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*database_privilegeState)(nil)).Elem()
}

type database_privilegeArgs struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName string `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	Users []Database_privilegeUser `pulumi:"users"`
}

// The set of arguments for constructing a Database_privilege resource.
type Database_privilegeArgs struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringInput
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	Users Database_privilegeUserArrayInput
}

func (Database_privilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*database_privilegeArgs)(nil)).Elem()
}

type Database_privilegeInput interface {
	pulumi.Input

	ToDatabase_privilegeOutput() Database_privilegeOutput
	ToDatabase_privilegeOutputWithContext(ctx context.Context) Database_privilegeOutput
}

func (*Database_privilege) ElementType() reflect.Type {
	return reflect.TypeOf((**Database_privilege)(nil)).Elem()
}

func (i *Database_privilege) ToDatabase_privilegeOutput() Database_privilegeOutput {
	return i.ToDatabase_privilegeOutputWithContext(context.Background())
}

func (i *Database_privilege) ToDatabase_privilegeOutputWithContext(ctx context.Context) Database_privilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Database_privilegeOutput)
}

// Database_privilegeArrayInput is an input type that accepts Database_privilegeArray and Database_privilegeArrayOutput values.
// You can construct a concrete instance of `Database_privilegeArrayInput` via:
//
//	Database_privilegeArray{ Database_privilegeArgs{...} }
type Database_privilegeArrayInput interface {
	pulumi.Input

	ToDatabase_privilegeArrayOutput() Database_privilegeArrayOutput
	ToDatabase_privilegeArrayOutputWithContext(context.Context) Database_privilegeArrayOutput
}

type Database_privilegeArray []Database_privilegeInput

func (Database_privilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database_privilege)(nil)).Elem()
}

func (i Database_privilegeArray) ToDatabase_privilegeArrayOutput() Database_privilegeArrayOutput {
	return i.ToDatabase_privilegeArrayOutputWithContext(context.Background())
}

func (i Database_privilegeArray) ToDatabase_privilegeArrayOutputWithContext(ctx context.Context) Database_privilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Database_privilegeArrayOutput)
}

// Database_privilegeMapInput is an input type that accepts Database_privilegeMap and Database_privilegeMapOutput values.
// You can construct a concrete instance of `Database_privilegeMapInput` via:
//
//	Database_privilegeMap{ "key": Database_privilegeArgs{...} }
type Database_privilegeMapInput interface {
	pulumi.Input

	ToDatabase_privilegeMapOutput() Database_privilegeMapOutput
	ToDatabase_privilegeMapOutputWithContext(context.Context) Database_privilegeMapOutput
}

type Database_privilegeMap map[string]Database_privilegeInput

func (Database_privilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database_privilege)(nil)).Elem()
}

func (i Database_privilegeMap) ToDatabase_privilegeMapOutput() Database_privilegeMapOutput {
	return i.ToDatabase_privilegeMapOutputWithContext(context.Background())
}

func (i Database_privilegeMap) ToDatabase_privilegeMapOutputWithContext(ctx context.Context) Database_privilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Database_privilegeMapOutput)
}

type Database_privilegeOutput struct{ *pulumi.OutputState }

func (Database_privilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database_privilege)(nil)).Elem()
}

func (o Database_privilegeOutput) ToDatabase_privilegeOutput() Database_privilegeOutput {
	return o
}

func (o Database_privilegeOutput) ToDatabase_privilegeOutputWithContext(ctx context.Context) Database_privilegeOutput {
	return o
}

// Specifies the database name. Changing this creates a new resource.
func (o Database_privilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database_privilege) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the RDS instance ID. Changing this will create a new resource.
func (o Database_privilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database_privilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region in which to create the RDS database privilege resource. If omitted,
// the provider-level region will be used. Changing this creates a new resource.
func (o Database_privilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Database_privilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the account that associated with the database. This parameter supports
// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
func (o Database_privilegeOutput) Users() Database_privilegeUserArrayOutput {
	return o.ApplyT(func(v *Database_privilege) Database_privilegeUserArrayOutput { return v.Users }).(Database_privilegeUserArrayOutput)
}

type Database_privilegeArrayOutput struct{ *pulumi.OutputState }

func (Database_privilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database_privilege)(nil)).Elem()
}

func (o Database_privilegeArrayOutput) ToDatabase_privilegeArrayOutput() Database_privilegeArrayOutput {
	return o
}

func (o Database_privilegeArrayOutput) ToDatabase_privilegeArrayOutputWithContext(ctx context.Context) Database_privilegeArrayOutput {
	return o
}

func (o Database_privilegeArrayOutput) Index(i pulumi.IntInput) Database_privilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database_privilege {
		return vs[0].([]*Database_privilege)[vs[1].(int)]
	}).(Database_privilegeOutput)
}

type Database_privilegeMapOutput struct{ *pulumi.OutputState }

func (Database_privilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database_privilege)(nil)).Elem()
}

func (o Database_privilegeMapOutput) ToDatabase_privilegeMapOutput() Database_privilegeMapOutput {
	return o
}

func (o Database_privilegeMapOutput) ToDatabase_privilegeMapOutputWithContext(ctx context.Context) Database_privilegeMapOutput {
	return o
}

func (o Database_privilegeMapOutput) MapIndex(k pulumi.StringInput) Database_privilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database_privilege {
		return vs[0].(map[string]*Database_privilege)[vs[1].(string)]
	}).(Database_privilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Database_privilegeInput)(nil)).Elem(), &Database_privilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*Database_privilegeArrayInput)(nil)).Elem(), Database_privilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Database_privilegeMapInput)(nil)).Elem(), Database_privilegeMap{})
	pulumi.RegisterOutputType(Database_privilegeOutput{})
	pulumi.RegisterOutputType(Database_privilegeArrayOutput{})
	pulumi.RegisterOutputType(Database_privilegeMapOutput{})
}

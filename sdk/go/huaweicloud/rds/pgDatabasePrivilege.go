// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS PostgreSQL database privilege resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			dbName := cfg.RequireObject("dbName")
//			userName1 := cfg.RequireObject("userName1")
//			userName2 := cfg.RequireObject("userName2")
//			schemaName1 := cfg.RequireObject("schemaName1")
//			schemaName2 := cfg.RequireObject("schemaName2")
//			_, err := Rds.NewPgDatabasePrivilege(ctx, "test", &Rds.PgDatabasePrivilegeArgs{
//				InstanceId: pulumi.Any(instanceId),
//				DbName:     pulumi.Any(dbName),
//				Users: rds.PgDatabasePrivilegeUserArray{
//					&rds.PgDatabasePrivilegeUserArgs{
//						Name:       pulumi.Any(userName1),
//						Readonly:   pulumi.Bool(true),
//						SchemaName: pulumi.Any(schemaName1),
//					},
//					&rds.PgDatabasePrivilegeUserArgs{
//						Name:       pulumi.Any(userName2),
//						Readonly:   pulumi.Bool(false),
//						SchemaName: pulumi.Any(schemaName2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PgDatabasePrivilege struct {
	pulumi.CustomResourceState

	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the account that associated with the database.
	// The users structure is documented below.
	Users PgDatabasePrivilegeUserArrayOutput `pulumi:"users"`
}

// NewPgDatabasePrivilege registers a new resource with the given unique name, arguments, and options.
func NewPgDatabasePrivilege(ctx *pulumi.Context,
	name string, args *PgDatabasePrivilegeArgs, opts ...pulumi.ResourceOption) (*PgDatabasePrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PgDatabasePrivilege
	err := ctx.RegisterResource("huaweicloud:Rds/pgDatabasePrivilege:PgDatabasePrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgDatabasePrivilege gets an existing PgDatabasePrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgDatabasePrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgDatabasePrivilegeState, opts ...pulumi.ResourceOption) (*PgDatabasePrivilege, error) {
	var resource PgDatabasePrivilege
	err := ctx.ReadResource("huaweicloud:Rds/pgDatabasePrivilege:PgDatabasePrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgDatabasePrivilege resources.
type pgDatabasePrivilegeState struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName *string `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database.
	// The users structure is documented below.
	Users []PgDatabasePrivilegeUser `pulumi:"users"`
}

type PgDatabasePrivilegeState struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringPtrInput
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database.
	// The users structure is documented below.
	Users PgDatabasePrivilegeUserArrayInput
}

func (PgDatabasePrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgDatabasePrivilegeState)(nil)).Elem()
}

type pgDatabasePrivilegeArgs struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName string `pulumi:"dbName"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database.
	// The users structure is documented below.
	Users []PgDatabasePrivilegeUser `pulumi:"users"`
}

// The set of arguments for constructing a PgDatabasePrivilege resource.
type PgDatabasePrivilegeArgs struct {
	// Specifies the database name. Changing this creates a new resource.
	DbName pulumi.StringInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringInput
	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database.
	// The users structure is documented below.
	Users PgDatabasePrivilegeUserArrayInput
}

func (PgDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgDatabasePrivilegeArgs)(nil)).Elem()
}

type PgDatabasePrivilegeInput interface {
	pulumi.Input

	ToPgDatabasePrivilegeOutput() PgDatabasePrivilegeOutput
	ToPgDatabasePrivilegeOutputWithContext(ctx context.Context) PgDatabasePrivilegeOutput
}

func (*PgDatabasePrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**PgDatabasePrivilege)(nil)).Elem()
}

func (i *PgDatabasePrivilege) ToPgDatabasePrivilegeOutput() PgDatabasePrivilegeOutput {
	return i.ToPgDatabasePrivilegeOutputWithContext(context.Background())
}

func (i *PgDatabasePrivilege) ToPgDatabasePrivilegeOutputWithContext(ctx context.Context) PgDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabasePrivilegeOutput)
}

// PgDatabasePrivilegeArrayInput is an input type that accepts PgDatabasePrivilegeArray and PgDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `PgDatabasePrivilegeArrayInput` via:
//
//	PgDatabasePrivilegeArray{ PgDatabasePrivilegeArgs{...} }
type PgDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToPgDatabasePrivilegeArrayOutput() PgDatabasePrivilegeArrayOutput
	ToPgDatabasePrivilegeArrayOutputWithContext(context.Context) PgDatabasePrivilegeArrayOutput
}

type PgDatabasePrivilegeArray []PgDatabasePrivilegeInput

func (PgDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgDatabasePrivilege)(nil)).Elem()
}

func (i PgDatabasePrivilegeArray) ToPgDatabasePrivilegeArrayOutput() PgDatabasePrivilegeArrayOutput {
	return i.ToPgDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i PgDatabasePrivilegeArray) ToPgDatabasePrivilegeArrayOutputWithContext(ctx context.Context) PgDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabasePrivilegeArrayOutput)
}

// PgDatabasePrivilegeMapInput is an input type that accepts PgDatabasePrivilegeMap and PgDatabasePrivilegeMapOutput values.
// You can construct a concrete instance of `PgDatabasePrivilegeMapInput` via:
//
//	PgDatabasePrivilegeMap{ "key": PgDatabasePrivilegeArgs{...} }
type PgDatabasePrivilegeMapInput interface {
	pulumi.Input

	ToPgDatabasePrivilegeMapOutput() PgDatabasePrivilegeMapOutput
	ToPgDatabasePrivilegeMapOutputWithContext(context.Context) PgDatabasePrivilegeMapOutput
}

type PgDatabasePrivilegeMap map[string]PgDatabasePrivilegeInput

func (PgDatabasePrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgDatabasePrivilege)(nil)).Elem()
}

func (i PgDatabasePrivilegeMap) ToPgDatabasePrivilegeMapOutput() PgDatabasePrivilegeMapOutput {
	return i.ToPgDatabasePrivilegeMapOutputWithContext(context.Background())
}

func (i PgDatabasePrivilegeMap) ToPgDatabasePrivilegeMapOutputWithContext(ctx context.Context) PgDatabasePrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabasePrivilegeMapOutput)
}

type PgDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (PgDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgDatabasePrivilege)(nil)).Elem()
}

func (o PgDatabasePrivilegeOutput) ToPgDatabasePrivilegeOutput() PgDatabasePrivilegeOutput {
	return o
}

func (o PgDatabasePrivilegeOutput) ToPgDatabasePrivilegeOutputWithContext(ctx context.Context) PgDatabasePrivilegeOutput {
	return o
}

// Specifies the database name. Changing this creates a new resource.
func (o PgDatabasePrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabasePrivilege) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the RDS instance ID. Changing this will create a new resource.
func (o PgDatabasePrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabasePrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region in which to create the RDS database privilege resource. If omitted,
// the provider-level region will be used. Changing this creates a new resource.
func (o PgDatabasePrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabasePrivilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the account that associated with the database.
// The users structure is documented below.
func (o PgDatabasePrivilegeOutput) Users() PgDatabasePrivilegeUserArrayOutput {
	return o.ApplyT(func(v *PgDatabasePrivilege) PgDatabasePrivilegeUserArrayOutput { return v.Users }).(PgDatabasePrivilegeUserArrayOutput)
}

type PgDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PgDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgDatabasePrivilege)(nil)).Elem()
}

func (o PgDatabasePrivilegeArrayOutput) ToPgDatabasePrivilegeArrayOutput() PgDatabasePrivilegeArrayOutput {
	return o
}

func (o PgDatabasePrivilegeArrayOutput) ToPgDatabasePrivilegeArrayOutputWithContext(ctx context.Context) PgDatabasePrivilegeArrayOutput {
	return o
}

func (o PgDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) PgDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgDatabasePrivilege {
		return vs[0].([]*PgDatabasePrivilege)[vs[1].(int)]
	}).(PgDatabasePrivilegeOutput)
}

type PgDatabasePrivilegeMapOutput struct{ *pulumi.OutputState }

func (PgDatabasePrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgDatabasePrivilege)(nil)).Elem()
}

func (o PgDatabasePrivilegeMapOutput) ToPgDatabasePrivilegeMapOutput() PgDatabasePrivilegeMapOutput {
	return o
}

func (o PgDatabasePrivilegeMapOutput) ToPgDatabasePrivilegeMapOutputWithContext(ctx context.Context) PgDatabasePrivilegeMapOutput {
	return o
}

func (o PgDatabasePrivilegeMapOutput) MapIndex(k pulumi.StringInput) PgDatabasePrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgDatabasePrivilege {
		return vs[0].(map[string]*PgDatabasePrivilege)[vs[1].(string)]
	}).(PgDatabasePrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabasePrivilegeInput)(nil)).Elem(), &PgDatabasePrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabasePrivilegeArrayInput)(nil)).Elem(), PgDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabasePrivilegeMapInput)(nil)).Elem(), PgDatabasePrivilegeMap{})
	pulumi.RegisterOutputType(PgDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(PgDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PgDatabasePrivilegeMapOutput{})
}

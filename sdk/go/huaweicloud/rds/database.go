// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages RDS Mysql database resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := Rds.NewDatabase(ctx, "test", &Rds.DatabaseArgs{
//				InstanceId:   pulumi.Any(instanceId),
//				CharacterSet: pulumi.String("utf8"),
//				Description:  pulumi.String("test database"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS database can be imported using the `instance id` and `database name`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Rds/database:Database database_1 instance_id/database_name
//
// ```
type Database struct {
	pulumi.CustomResourceState

	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the database description. The value can contain **0** to **512** characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the database name. The database name contains **1** to **64**
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CharacterSet == nil {
		return nil, errors.New("invalid value for required argument 'CharacterSet'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource Database
	err := ctx.RegisterResource("huaweicloud:Rds/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("huaweicloud:Rds/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description. The value can contain **0** to **512** characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description *string `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the database name. The database name contains **1** to **64**
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type DatabaseState struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description. The value can contain **0** to **512** characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the database name. The database name contains **1** to **64**
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet string `pulumi:"characterSet"`
	// Specifies the database description. The value can contain **0** to **512** characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description *string `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the database name. The database name contains **1** to **64**
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringInput
	// Specifies the database description. The value can contain **0** to **512** characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the database name. The database name contains **1** to **64**
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// Specifies the character set used by the database, For example **utf8**,
// **gbk**, **ascii**, etc. Changing this will create a new resource.
func (o DatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the database description. The value can contain **0** to **512** characters.
// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
// or **8.0.21.4**.
func (o DatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the RDS instance ID. Changing this will create a new resource.
func (o DatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the database name. The database name contains **1** to **64**
// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed **10**. RDS for **MySQL 8.0** does not
// support dollar signs ($). Changing this will create a new resource.
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the RDS database resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o DatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}

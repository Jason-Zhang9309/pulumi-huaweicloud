// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to upgrade a CCE cluster within HuaweiCloud.
//
// ## Example Usage
type ClusterUpgrade struct {
	pulumi.CustomResourceState

	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons ClusterUpgradeAddonArrayOutput `pulumi:"addons"`
	// Specifies the cluster ID.
	ClusterId      pulumi.StringOutput    `pulumi:"clusterId"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	NodeOrder pulumi.StringMapOutput `pulumi:"nodeOrder"`
	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is the priority of the node pool. **0** indicating the lowest priority.
	// A larger value indicates a higher priority.
	NodepoolOrder pulumi.IntMapOutput `pulumi:"nodepoolOrder"`
	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy ClusterUpgradeStrategyOutput `pulumi:"strategy"`
	// Specifies the target version.
	TargetVersion pulumi.StringOutput `pulumi:"targetVersion"`
}

// NewClusterUpgrade registers a new resource with the given unique name, arguments, and options.
func NewClusterUpgrade(ctx *pulumi.Context,
	name string, args *ClusterUpgradeArgs, opts ...pulumi.ResourceOption) (*ClusterUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	if args.TargetVersion == nil {
		return nil, errors.New("invalid value for required argument 'TargetVersion'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ClusterUpgrade
	err := ctx.RegisterResource("huaweicloud:Cce/clusterUpgrade:ClusterUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterUpgrade gets an existing ClusterUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterUpgradeState, opts ...pulumi.ResourceOption) (*ClusterUpgrade, error) {
	var resource ClusterUpgrade
	err := ctx.ReadResource("huaweicloud:Cce/clusterUpgrade:ClusterUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterUpgrade resources.
type clusterUpgradeState struct {
	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons []ClusterUpgradeAddon `pulumi:"addons"`
	// Specifies the cluster ID.
	ClusterId      *string `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	NodeOrder map[string]string `pulumi:"nodeOrder"`
	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is the priority of the node pool. **0** indicating the lowest priority.
	// A larger value indicates a higher priority.
	NodepoolOrder map[string]int `pulumi:"nodepoolOrder"`
	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy *ClusterUpgradeStrategy `pulumi:"strategy"`
	// Specifies the target version.
	TargetVersion *string `pulumi:"targetVersion"`
}

type ClusterUpgradeState struct {
	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons ClusterUpgradeAddonArrayInput
	// Specifies the cluster ID.
	ClusterId      pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	NodeOrder pulumi.StringMapInput
	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is the priority of the node pool. **0** indicating the lowest priority.
	// A larger value indicates a higher priority.
	NodepoolOrder pulumi.IntMapInput
	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy ClusterUpgradeStrategyPtrInput
	// Specifies the target version.
	TargetVersion pulumi.StringPtrInput
}

func (ClusterUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterUpgradeState)(nil)).Elem()
}

type clusterUpgradeArgs struct {
	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons []ClusterUpgradeAddon `pulumi:"addons"`
	// Specifies the cluster ID.
	ClusterId      string  `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	NodeOrder map[string]string `pulumi:"nodeOrder"`
	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is the priority of the node pool. **0** indicating the lowest priority.
	// A larger value indicates a higher priority.
	NodepoolOrder map[string]int `pulumi:"nodepoolOrder"`
	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy ClusterUpgradeStrategy `pulumi:"strategy"`
	// Specifies the target version.
	TargetVersion string `pulumi:"targetVersion"`
}

// The set of arguments for constructing a ClusterUpgrade resource.
type ClusterUpgradeArgs struct {
	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons ClusterUpgradeAddonArrayInput
	// Specifies the cluster ID.
	ClusterId      pulumi.StringInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	NodeOrder pulumi.StringMapInput
	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, **DefaultPool** indicates the default pool.
	// The value is the priority of the node pool. **0** indicating the lowest priority.
	// A larger value indicates a higher priority.
	NodepoolOrder pulumi.IntMapInput
	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy ClusterUpgradeStrategyInput
	// Specifies the target version.
	TargetVersion pulumi.StringInput
}

func (ClusterUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterUpgradeArgs)(nil)).Elem()
}

type ClusterUpgradeInput interface {
	pulumi.Input

	ToClusterUpgradeOutput() ClusterUpgradeOutput
	ToClusterUpgradeOutputWithContext(ctx context.Context) ClusterUpgradeOutput
}

func (*ClusterUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgrade)(nil)).Elem()
}

func (i *ClusterUpgrade) ToClusterUpgradeOutput() ClusterUpgradeOutput {
	return i.ToClusterUpgradeOutputWithContext(context.Background())
}

func (i *ClusterUpgrade) ToClusterUpgradeOutputWithContext(ctx context.Context) ClusterUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeOutput)
}

// ClusterUpgradeArrayInput is an input type that accepts ClusterUpgradeArray and ClusterUpgradeArrayOutput values.
// You can construct a concrete instance of `ClusterUpgradeArrayInput` via:
//
//	ClusterUpgradeArray{ ClusterUpgradeArgs{...} }
type ClusterUpgradeArrayInput interface {
	pulumi.Input

	ToClusterUpgradeArrayOutput() ClusterUpgradeArrayOutput
	ToClusterUpgradeArrayOutputWithContext(context.Context) ClusterUpgradeArrayOutput
}

type ClusterUpgradeArray []ClusterUpgradeInput

func (ClusterUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterUpgrade)(nil)).Elem()
}

func (i ClusterUpgradeArray) ToClusterUpgradeArrayOutput() ClusterUpgradeArrayOutput {
	return i.ToClusterUpgradeArrayOutputWithContext(context.Background())
}

func (i ClusterUpgradeArray) ToClusterUpgradeArrayOutputWithContext(ctx context.Context) ClusterUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeArrayOutput)
}

// ClusterUpgradeMapInput is an input type that accepts ClusterUpgradeMap and ClusterUpgradeMapOutput values.
// You can construct a concrete instance of `ClusterUpgradeMapInput` via:
//
//	ClusterUpgradeMap{ "key": ClusterUpgradeArgs{...} }
type ClusterUpgradeMapInput interface {
	pulumi.Input

	ToClusterUpgradeMapOutput() ClusterUpgradeMapOutput
	ToClusterUpgradeMapOutputWithContext(context.Context) ClusterUpgradeMapOutput
}

type ClusterUpgradeMap map[string]ClusterUpgradeInput

func (ClusterUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterUpgrade)(nil)).Elem()
}

func (i ClusterUpgradeMap) ToClusterUpgradeMapOutput() ClusterUpgradeMapOutput {
	return i.ToClusterUpgradeMapOutputWithContext(context.Background())
}

func (i ClusterUpgradeMap) ToClusterUpgradeMapOutputWithContext(ctx context.Context) ClusterUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeMapOutput)
}

type ClusterUpgradeOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgrade)(nil)).Elem()
}

func (o ClusterUpgradeOutput) ToClusterUpgradeOutput() ClusterUpgradeOutput {
	return o
}

func (o ClusterUpgradeOutput) ToClusterUpgradeOutputWithContext(ctx context.Context) ClusterUpgradeOutput {
	return o
}

// Specifies the add-on configuration list
// The addons structure is documented below.
func (o ClusterUpgradeOutput) Addons() ClusterUpgradeAddonArrayOutput {
	return o.ApplyT(func(v *ClusterUpgrade) ClusterUpgradeAddonArrayOutput { return v.Addons }).(ClusterUpgradeAddonArrayOutput)
}

// Specifies the cluster ID.
func (o ClusterUpgradeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o ClusterUpgradeOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the upgrade sequence of nodes in the node pools.
// The key is the node pool ID, **DefaultPool** indicates the default pool.
// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
func (o ClusterUpgradeOutput) NodeOrder() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.StringMapOutput { return v.NodeOrder }).(pulumi.StringMapOutput)
}

// Specifies the upgrade sequence of node pools, in key-value pairs.
// The key is the node pool ID, **DefaultPool** indicates the default pool.
// The value is the priority of the node pool. **0** indicating the lowest priority.
// A larger value indicates a higher priority.
func (o ClusterUpgradeOutput) NodepoolOrder() pulumi.IntMapOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.IntMapOutput { return v.NodepoolOrder }).(pulumi.IntMapOutput)
}

// The region in which to create the CCE cluster upgrade resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ClusterUpgradeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the upgrade strategy.
// The strategy structure is documented below.
func (o ClusterUpgradeOutput) Strategy() ClusterUpgradeStrategyOutput {
	return o.ApplyT(func(v *ClusterUpgrade) ClusterUpgradeStrategyOutput { return v.Strategy }).(ClusterUpgradeStrategyOutput)
}

// Specifies the target version.
func (o ClusterUpgradeOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterUpgrade) pulumi.StringOutput { return v.TargetVersion }).(pulumi.StringOutput)
}

type ClusterUpgradeArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterUpgrade)(nil)).Elem()
}

func (o ClusterUpgradeArrayOutput) ToClusterUpgradeArrayOutput() ClusterUpgradeArrayOutput {
	return o
}

func (o ClusterUpgradeArrayOutput) ToClusterUpgradeArrayOutputWithContext(ctx context.Context) ClusterUpgradeArrayOutput {
	return o
}

func (o ClusterUpgradeArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterUpgrade {
		return vs[0].([]*ClusterUpgrade)[vs[1].(int)]
	}).(ClusterUpgradeOutput)
}

type ClusterUpgradeMapOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterUpgrade)(nil)).Elem()
}

func (o ClusterUpgradeMapOutput) ToClusterUpgradeMapOutput() ClusterUpgradeMapOutput {
	return o
}

func (o ClusterUpgradeMapOutput) ToClusterUpgradeMapOutputWithContext(ctx context.Context) ClusterUpgradeMapOutput {
	return o
}

func (o ClusterUpgradeMapOutput) MapIndex(k pulumi.StringInput) ClusterUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterUpgrade {
		return vs[0].(map[string]*ClusterUpgrade)[vs[1].(string)]
	}).(ClusterUpgradeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeInput)(nil)).Elem(), &ClusterUpgrade{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeArrayInput)(nil)).Elem(), ClusterUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeMapInput)(nil)).Elem(), ClusterUpgradeMap{})
	pulumi.RegisterOutputType(ClusterUpgradeOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeMapOutput{})
}

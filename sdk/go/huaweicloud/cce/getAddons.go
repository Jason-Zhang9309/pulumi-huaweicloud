// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the add-on instance list of a CCE cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			_, err := Cce.GetAddons(ctx, &cce.GetAddonsArgs{
//				ClusterId: clusterId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAddons(ctx *pulumi.Context, args *GetAddonsArgs, opts ...pulumi.InvokeOption) (*GetAddonsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAddonsResult
	err := ctx.Invoke("huaweicloud:Cce/getAddons:getAddons", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddons.
type GetAddonsArgs struct {
	// Specifies the ID of the cluster to which the add-on instance belongs.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getAddons.
type GetAddonsResult struct {
	// The cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The add-on instance list.
	Items  []GetAddonsItem `pulumi:"items"`
	Region string          `pulumi:"region"`
}

func GetAddonsOutput(ctx *pulumi.Context, args GetAddonsOutputArgs, opts ...pulumi.InvokeOption) GetAddonsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAddonsResult, error) {
			args := v.(GetAddonsArgs)
			r, err := GetAddons(ctx, &args, opts...)
			var s GetAddonsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAddonsResultOutput)
}

// A collection of arguments for invoking getAddons.
type GetAddonsOutputArgs struct {
	// Specifies the ID of the cluster to which the add-on instance belongs.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetAddonsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonsArgs)(nil)).Elem()
}

// A collection of values returned by getAddons.
type GetAddonsResultOutput struct{ *pulumi.OutputState }

func (GetAddonsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonsResult)(nil)).Elem()
}

func (o GetAddonsResultOutput) ToGetAddonsResultOutput() GetAddonsResultOutput {
	return o
}

func (o GetAddonsResultOutput) ToGetAddonsResultOutputWithContext(ctx context.Context) GetAddonsResultOutput {
	return o
}

// The cluster ID.
func (o GetAddonsResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonsResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAddonsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The add-on instance list.
func (o GetAddonsResultOutput) Items() GetAddonsItemArrayOutput {
	return o.ApplyT(func(v GetAddonsResult) []GetAddonsItem { return v.Items }).(GetAddonsItemArrayOutput)
}

func (o GetAddonsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonsResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAddonsResultOutput{})
}

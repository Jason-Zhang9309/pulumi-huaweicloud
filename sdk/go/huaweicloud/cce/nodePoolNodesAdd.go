// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to add nodes into a node pool within HuaweiCloud.
//
// ## Example Usage
type NodePoolNodesAdd struct {
	pulumi.CustomResourceState

	// Specifies the cluster ID.
	ClusterId      pulumi.StringOutput    `pulumi:"clusterId"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the list of nodes to add into the pool.
	// The nodeList structure is documented below.
	NodeLists NodePoolNodesAddNodeListArrayOutput `pulumi:"nodeLists"`
	// Specifies the node pool ID.
	NodepoolId pulumi.StringOutput `pulumi:"nodepoolId"`
	// The region in which to create the CCE pool nodes add resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewNodePoolNodesAdd registers a new resource with the given unique name, arguments, and options.
func NewNodePoolNodesAdd(ctx *pulumi.Context,
	name string, args *NodePoolNodesAddArgs, opts ...pulumi.ResourceOption) (*NodePoolNodesAdd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeLists == nil {
		return nil, errors.New("invalid value for required argument 'NodeLists'")
	}
	if args.NodepoolId == nil {
		return nil, errors.New("invalid value for required argument 'NodepoolId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodePoolNodesAdd
	err := ctx.RegisterResource("huaweicloud:Cce/nodePoolNodesAdd:NodePoolNodesAdd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePoolNodesAdd gets an existing NodePoolNodesAdd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePoolNodesAdd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolNodesAddState, opts ...pulumi.ResourceOption) (*NodePoolNodesAdd, error) {
	var resource NodePoolNodesAdd
	err := ctx.ReadResource("huaweicloud:Cce/nodePoolNodesAdd:NodePoolNodesAdd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePoolNodesAdd resources.
type nodePoolNodesAddState struct {
	// Specifies the cluster ID.
	ClusterId      *string `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the list of nodes to add into the pool.
	// The nodeList structure is documented below.
	NodeLists []NodePoolNodesAddNodeList `pulumi:"nodeLists"`
	// Specifies the node pool ID.
	NodepoolId *string `pulumi:"nodepoolId"`
	// The region in which to create the CCE pool nodes add resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type NodePoolNodesAddState struct {
	// Specifies the cluster ID.
	ClusterId      pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the list of nodes to add into the pool.
	// The nodeList structure is documented below.
	NodeLists NodePoolNodesAddNodeListArrayInput
	// Specifies the node pool ID.
	NodepoolId pulumi.StringPtrInput
	// The region in which to create the CCE pool nodes add resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (NodePoolNodesAddState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolNodesAddState)(nil)).Elem()
}

type nodePoolNodesAddArgs struct {
	// Specifies the cluster ID.
	ClusterId      string  `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the list of nodes to add into the pool.
	// The nodeList structure is documented below.
	NodeLists []NodePoolNodesAddNodeList `pulumi:"nodeLists"`
	// Specifies the node pool ID.
	NodepoolId string `pulumi:"nodepoolId"`
	// The region in which to create the CCE pool nodes add resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NodePoolNodesAdd resource.
type NodePoolNodesAddArgs struct {
	// Specifies the cluster ID.
	ClusterId      pulumi.StringInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the list of nodes to add into the pool.
	// The nodeList structure is documented below.
	NodeLists NodePoolNodesAddNodeListArrayInput
	// Specifies the node pool ID.
	NodepoolId pulumi.StringInput
	// The region in which to create the CCE pool nodes add resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (NodePoolNodesAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolNodesAddArgs)(nil)).Elem()
}

type NodePoolNodesAddInput interface {
	pulumi.Input

	ToNodePoolNodesAddOutput() NodePoolNodesAddOutput
	ToNodePoolNodesAddOutputWithContext(ctx context.Context) NodePoolNodesAddOutput
}

func (*NodePoolNodesAdd) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolNodesAdd)(nil)).Elem()
}

func (i *NodePoolNodesAdd) ToNodePoolNodesAddOutput() NodePoolNodesAddOutput {
	return i.ToNodePoolNodesAddOutputWithContext(context.Background())
}

func (i *NodePoolNodesAdd) ToNodePoolNodesAddOutputWithContext(ctx context.Context) NodePoolNodesAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolNodesAddOutput)
}

// NodePoolNodesAddArrayInput is an input type that accepts NodePoolNodesAddArray and NodePoolNodesAddArrayOutput values.
// You can construct a concrete instance of `NodePoolNodesAddArrayInput` via:
//
//	NodePoolNodesAddArray{ NodePoolNodesAddArgs{...} }
type NodePoolNodesAddArrayInput interface {
	pulumi.Input

	ToNodePoolNodesAddArrayOutput() NodePoolNodesAddArrayOutput
	ToNodePoolNodesAddArrayOutputWithContext(context.Context) NodePoolNodesAddArrayOutput
}

type NodePoolNodesAddArray []NodePoolNodesAddInput

func (NodePoolNodesAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePoolNodesAdd)(nil)).Elem()
}

func (i NodePoolNodesAddArray) ToNodePoolNodesAddArrayOutput() NodePoolNodesAddArrayOutput {
	return i.ToNodePoolNodesAddArrayOutputWithContext(context.Background())
}

func (i NodePoolNodesAddArray) ToNodePoolNodesAddArrayOutputWithContext(ctx context.Context) NodePoolNodesAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolNodesAddArrayOutput)
}

// NodePoolNodesAddMapInput is an input type that accepts NodePoolNodesAddMap and NodePoolNodesAddMapOutput values.
// You can construct a concrete instance of `NodePoolNodesAddMapInput` via:
//
//	NodePoolNodesAddMap{ "key": NodePoolNodesAddArgs{...} }
type NodePoolNodesAddMapInput interface {
	pulumi.Input

	ToNodePoolNodesAddMapOutput() NodePoolNodesAddMapOutput
	ToNodePoolNodesAddMapOutputWithContext(context.Context) NodePoolNodesAddMapOutput
}

type NodePoolNodesAddMap map[string]NodePoolNodesAddInput

func (NodePoolNodesAddMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePoolNodesAdd)(nil)).Elem()
}

func (i NodePoolNodesAddMap) ToNodePoolNodesAddMapOutput() NodePoolNodesAddMapOutput {
	return i.ToNodePoolNodesAddMapOutputWithContext(context.Background())
}

func (i NodePoolNodesAddMap) ToNodePoolNodesAddMapOutputWithContext(ctx context.Context) NodePoolNodesAddMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolNodesAddMapOutput)
}

type NodePoolNodesAddOutput struct{ *pulumi.OutputState }

func (NodePoolNodesAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolNodesAdd)(nil)).Elem()
}

func (o NodePoolNodesAddOutput) ToNodePoolNodesAddOutput() NodePoolNodesAddOutput {
	return o
}

func (o NodePoolNodesAddOutput) ToNodePoolNodesAddOutputWithContext(ctx context.Context) NodePoolNodesAddOutput {
	return o
}

// Specifies the cluster ID.
func (o NodePoolNodesAddOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePoolNodesAdd) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o NodePoolNodesAddOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolNodesAdd) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the list of nodes to add into the pool.
// The nodeList structure is documented below.
func (o NodePoolNodesAddOutput) NodeLists() NodePoolNodesAddNodeListArrayOutput {
	return o.ApplyT(func(v *NodePoolNodesAdd) NodePoolNodesAddNodeListArrayOutput { return v.NodeLists }).(NodePoolNodesAddNodeListArrayOutput)
}

// Specifies the node pool ID.
func (o NodePoolNodesAddOutput) NodepoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePoolNodesAdd) pulumi.StringOutput { return v.NodepoolId }).(pulumi.StringOutput)
}

// The region in which to create the CCE pool nodes add resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o NodePoolNodesAddOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePoolNodesAdd) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type NodePoolNodesAddArrayOutput struct{ *pulumi.OutputState }

func (NodePoolNodesAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePoolNodesAdd)(nil)).Elem()
}

func (o NodePoolNodesAddArrayOutput) ToNodePoolNodesAddArrayOutput() NodePoolNodesAddArrayOutput {
	return o
}

func (o NodePoolNodesAddArrayOutput) ToNodePoolNodesAddArrayOutputWithContext(ctx context.Context) NodePoolNodesAddArrayOutput {
	return o
}

func (o NodePoolNodesAddArrayOutput) Index(i pulumi.IntInput) NodePoolNodesAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePoolNodesAdd {
		return vs[0].([]*NodePoolNodesAdd)[vs[1].(int)]
	}).(NodePoolNodesAddOutput)
}

type NodePoolNodesAddMapOutput struct{ *pulumi.OutputState }

func (NodePoolNodesAddMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePoolNodesAdd)(nil)).Elem()
}

func (o NodePoolNodesAddMapOutput) ToNodePoolNodesAddMapOutput() NodePoolNodesAddMapOutput {
	return o
}

func (o NodePoolNodesAddMapOutput) ToNodePoolNodesAddMapOutputWithContext(ctx context.Context) NodePoolNodesAddMapOutput {
	return o
}

func (o NodePoolNodesAddMapOutput) MapIndex(k pulumi.StringInput) NodePoolNodesAddOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePoolNodesAdd {
		return vs[0].(map[string]*NodePoolNodesAdd)[vs[1].(string)]
	}).(NodePoolNodesAddOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolNodesAddInput)(nil)).Elem(), &NodePoolNodesAdd{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolNodesAddArrayInput)(nil)).Elem(), NodePoolNodesAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolNodesAddMapInput)(nil)).Elem(), NodePoolNodesAddMap{})
	pulumi.RegisterOutputType(NodePoolNodesAddOutput{})
	pulumi.RegisterOutputType(NodePoolNodesAddArrayOutput{})
	pulumi.RegisterOutputType(NodePoolNodesAddMapOutput{})
}

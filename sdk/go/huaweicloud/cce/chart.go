// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CCE chart resource within HuaweiCloud.
//
// ## Example Usage
// ### Basic Example
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cce.NewChart(ctx, "test", &Cce.ChartArgs{
//				Content:    pulumi.String("./kube-prometheus-stack-55.4.1.tgz"),
//				Parameters: pulumi.String("{\"override\":true,\"skip_lint\":true,\"source\":\"package\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CCE chart can be imported using the `id`, e.g.bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cce/chart:Chart test 19413aa0-9fe4-11ee-83b0-0255ac10026b
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`content` and `parameters`. It is generally recommended running `terraform plan` after importing an CCE chart. You can then decide if changes should be applied to the chart, or the resource definition should be updated to align with the chart. Also you can ignore changes as below. hcl resource "huaweicloud_cce_chart" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	content, parameters,
//
//	]
//
//	} }
type Chart struct {
	pulumi.CustomResourceState

	// The chart url.
	ChartUrl pulumi.StringOutput `pulumi:"chartUrl"`
	// Specifies the path of the chart package to be uploaded.
	Content pulumi.StringOutput `pulumi:"content"`
	// The create time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the chart.
	Description pulumi.StringOutput `pulumi:"description"`
	// The instruction of the chart.
	Instruction pulumi.StringOutput `pulumi:"instruction"`
	// The chart name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the parameters of the CCE chart.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// Whether the chart is public.
	Public pulumi.BoolOutput `pulumi:"public"`
	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The source of the chart.
	Source pulumi.StringOutput `pulumi:"source"`
	// The traslate source of the chart.
	Translate pulumi.StringOutput `pulumi:"translate"`
	// The update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The value of the chart.
	Value pulumi.StringOutput `pulumi:"value"`
	// The chart version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewChart registers a new resource with the given unique name, arguments, and options.
func NewChart(ctx *pulumi.Context,
	name string, args *ChartArgs, opts ...pulumi.ResourceOption) (*Chart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Chart
	err := ctx.RegisterResource("huaweicloud:Cce/chart:Chart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChart gets an existing Chart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChartState, opts ...pulumi.ResourceOption) (*Chart, error) {
	var resource Chart
	err := ctx.ReadResource("huaweicloud:Cce/chart:Chart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Chart resources.
type chartState struct {
	// The chart url.
	ChartUrl *string `pulumi:"chartUrl"`
	// Specifies the path of the chart package to be uploaded.
	Content *string `pulumi:"content"`
	// The create time.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the chart.
	Description *string `pulumi:"description"`
	// The instruction of the chart.
	Instruction *string `pulumi:"instruction"`
	// The chart name.
	Name *string `pulumi:"name"`
	// Specifies the parameters of the CCE chart.
	Parameters *string `pulumi:"parameters"`
	// Whether the chart is public.
	Public *bool `pulumi:"public"`
	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region *string `pulumi:"region"`
	// The source of the chart.
	Source *string `pulumi:"source"`
	// The traslate source of the chart.
	Translate *string `pulumi:"translate"`
	// The update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The value of the chart.
	Value *string `pulumi:"value"`
	// The chart version.
	Version *string `pulumi:"version"`
}

type ChartState struct {
	// The chart url.
	ChartUrl pulumi.StringPtrInput
	// Specifies the path of the chart package to be uploaded.
	Content pulumi.StringPtrInput
	// The create time.
	CreatedAt pulumi.StringPtrInput
	// The description of the chart.
	Description pulumi.StringPtrInput
	// The instruction of the chart.
	Instruction pulumi.StringPtrInput
	// The chart name.
	Name pulumi.StringPtrInput
	// Specifies the parameters of the CCE chart.
	Parameters pulumi.StringPtrInput
	// Whether the chart is public.
	Public pulumi.BoolPtrInput
	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region pulumi.StringPtrInput
	// The source of the chart.
	Source pulumi.StringPtrInput
	// The traslate source of the chart.
	Translate pulumi.StringPtrInput
	// The update time.
	UpdatedAt pulumi.StringPtrInput
	// The value of the chart.
	Value pulumi.StringPtrInput
	// The chart version.
	Version pulumi.StringPtrInput
}

func (ChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*chartState)(nil)).Elem()
}

type chartArgs struct {
	// Specifies the path of the chart package to be uploaded.
	Content string `pulumi:"content"`
	// Specifies the parameters of the CCE chart.
	Parameters *string `pulumi:"parameters"`
	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Chart resource.
type ChartArgs struct {
	// Specifies the path of the chart package to be uploaded.
	Content pulumi.StringInput
	// Specifies the parameters of the CCE chart.
	Parameters pulumi.StringPtrInput
	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region pulumi.StringPtrInput
}

func (ChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chartArgs)(nil)).Elem()
}

type ChartInput interface {
	pulumi.Input

	ToChartOutput() ChartOutput
	ToChartOutputWithContext(ctx context.Context) ChartOutput
}

func (*Chart) ElementType() reflect.Type {
	return reflect.TypeOf((**Chart)(nil)).Elem()
}

func (i *Chart) ToChartOutput() ChartOutput {
	return i.ToChartOutputWithContext(context.Background())
}

func (i *Chart) ToChartOutputWithContext(ctx context.Context) ChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartOutput)
}

// ChartArrayInput is an input type that accepts ChartArray and ChartArrayOutput values.
// You can construct a concrete instance of `ChartArrayInput` via:
//
//	ChartArray{ ChartArgs{...} }
type ChartArrayInput interface {
	pulumi.Input

	ToChartArrayOutput() ChartArrayOutput
	ToChartArrayOutputWithContext(context.Context) ChartArrayOutput
}

type ChartArray []ChartInput

func (ChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Chart)(nil)).Elem()
}

func (i ChartArray) ToChartArrayOutput() ChartArrayOutput {
	return i.ToChartArrayOutputWithContext(context.Background())
}

func (i ChartArray) ToChartArrayOutputWithContext(ctx context.Context) ChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartArrayOutput)
}

// ChartMapInput is an input type that accepts ChartMap and ChartMapOutput values.
// You can construct a concrete instance of `ChartMapInput` via:
//
//	ChartMap{ "key": ChartArgs{...} }
type ChartMapInput interface {
	pulumi.Input

	ToChartMapOutput() ChartMapOutput
	ToChartMapOutputWithContext(context.Context) ChartMapOutput
}

type ChartMap map[string]ChartInput

func (ChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Chart)(nil)).Elem()
}

func (i ChartMap) ToChartMapOutput() ChartMapOutput {
	return i.ToChartMapOutputWithContext(context.Background())
}

func (i ChartMap) ToChartMapOutputWithContext(ctx context.Context) ChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartMapOutput)
}

type ChartOutput struct{ *pulumi.OutputState }

func (ChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Chart)(nil)).Elem()
}

func (o ChartOutput) ToChartOutput() ChartOutput {
	return o
}

func (o ChartOutput) ToChartOutputWithContext(ctx context.Context) ChartOutput {
	return o
}

// The chart url.
func (o ChartOutput) ChartUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.ChartUrl }).(pulumi.StringOutput)
}

// Specifies the path of the chart package to be uploaded.
func (o ChartOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The create time.
func (o ChartOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the chart.
func (o ChartOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The instruction of the chart.
func (o ChartOutput) Instruction() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Instruction }).(pulumi.StringOutput)
}

// The chart name.
func (o ChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parameters of the CCE chart.
func (o ChartOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

// Whether the chart is public.
func (o ChartOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v *Chart) pulumi.BoolOutput { return v.Public }).(pulumi.BoolOutput)
}

// Specifies the region in which to create the CCE chart resource.
// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
func (o ChartOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The source of the chart.
func (o ChartOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The traslate source of the chart.
func (o ChartOutput) Translate() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Translate }).(pulumi.StringOutput)
}

// The update time.
func (o ChartOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The value of the chart.
func (o ChartOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// The chart version.
func (o ChartOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ChartArrayOutput struct{ *pulumi.OutputState }

func (ChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Chart)(nil)).Elem()
}

func (o ChartArrayOutput) ToChartArrayOutput() ChartArrayOutput {
	return o
}

func (o ChartArrayOutput) ToChartArrayOutputWithContext(ctx context.Context) ChartArrayOutput {
	return o
}

func (o ChartArrayOutput) Index(i pulumi.IntInput) ChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Chart {
		return vs[0].([]*Chart)[vs[1].(int)]
	}).(ChartOutput)
}

type ChartMapOutput struct{ *pulumi.OutputState }

func (ChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Chart)(nil)).Elem()
}

func (o ChartMapOutput) ToChartMapOutput() ChartMapOutput {
	return o
}

func (o ChartMapOutput) ToChartMapOutputWithContext(ctx context.Context) ChartMapOutput {
	return o
}

func (o ChartMapOutput) MapIndex(k pulumi.StringInput) ChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Chart {
		return vs[0].(map[string]*Chart)[vs[1].(string)]
	}).(ChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChartInput)(nil)).Elem(), &Chart{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartArrayInput)(nil)).Elem(), ChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartMapInput)(nil)).Elem(), ChartMap{})
	pulumi.RegisterOutputType(ChartOutput{})
	pulumi.RegisterOutputType(ChartArrayOutput{})
	pulumi.RegisterOutputType(ChartMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to manage the log config of a CCE cluster within HuaweiCloud.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			_, err := Cce.NewClusterLogConfig(ctx, "test", &Cce.ClusterLogConfigArgs{
//				ClusterId: pulumi.Any(clusterId),
//				TtlInDays: pulumi.Int(3),
//				LogConfigs: cce.ClusterLogConfigLogConfigArray{
//					&cce.ClusterLogConfigLogConfigArgs{
//						Name:   pulumi.String("kube-apiserver"),
//						Enable: pulumi.Bool(true),
//					},
//					&cce.ClusterLogConfigLogConfigArgs{
//						Name:   pulumi.String("kube-controller-manager"),
//						Enable: pulumi.Bool(false),
//					},
//					&cce.ClusterLogConfigLogConfigArgs{
//						Name:   pulumi.String("kube-scheduler"),
//						Enable: pulumi.Bool(false),
//					},
//					&cce.ClusterLogConfigLogConfigArgs{
//						Name:   pulumi.String("audit"),
//						Enable: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The cluster log config can be imported using the cluster ID, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cce/clusterLogConfig:ClusterLogConfig test <cluster_id>
//
// ```
type ClusterLogConfig struct {
	pulumi.CustomResourceState

	// Specifies the cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the list of log configs.
	// The logConfigs structure is documented below.
	LogConfigs ClusterLogConfigLogConfigArrayOutput `pulumi:"logConfigs"`
	// Specifies the region in which to create the cluster log config resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the log keeping days, default to `7`.
	TtlInDays pulumi.IntOutput `pulumi:"ttlInDays"`
}

// NewClusterLogConfig registers a new resource with the given unique name, arguments, and options.
func NewClusterLogConfig(ctx *pulumi.Context,
	name string, args *ClusterLogConfigArgs, opts ...pulumi.ResourceOption) (*ClusterLogConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ClusterLogConfig
	err := ctx.RegisterResource("huaweicloud:Cce/clusterLogConfig:ClusterLogConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterLogConfig gets an existing ClusterLogConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterLogConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterLogConfigState, opts ...pulumi.ResourceOption) (*ClusterLogConfig, error) {
	var resource ClusterLogConfig
	err := ctx.ReadResource("huaweicloud:Cce/clusterLogConfig:ClusterLogConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterLogConfig resources.
type clusterLogConfigState struct {
	// Specifies the cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the list of log configs.
	// The logConfigs structure is documented below.
	LogConfigs []ClusterLogConfigLogConfig `pulumi:"logConfigs"`
	// Specifies the region in which to create the cluster log config resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the log keeping days, default to `7`.
	TtlInDays *int `pulumi:"ttlInDays"`
}

type ClusterLogConfigState struct {
	// Specifies the cluster ID.
	ClusterId pulumi.StringPtrInput
	// Specifies the list of log configs.
	// The logConfigs structure is documented below.
	LogConfigs ClusterLogConfigLogConfigArrayInput
	// Specifies the region in which to create the cluster log config resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the log keeping days, default to `7`.
	TtlInDays pulumi.IntPtrInput
}

func (ClusterLogConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLogConfigState)(nil)).Elem()
}

type clusterLogConfigArgs struct {
	// Specifies the cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the list of log configs.
	// The logConfigs structure is documented below.
	LogConfigs []ClusterLogConfigLogConfig `pulumi:"logConfigs"`
	// Specifies the region in which to create the cluster log config resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the log keeping days, default to `7`.
	TtlInDays *int `pulumi:"ttlInDays"`
}

// The set of arguments for constructing a ClusterLogConfig resource.
type ClusterLogConfigArgs struct {
	// Specifies the cluster ID.
	ClusterId pulumi.StringInput
	// Specifies the list of log configs.
	// The logConfigs structure is documented below.
	LogConfigs ClusterLogConfigLogConfigArrayInput
	// Specifies the region in which to create the cluster log config resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the log keeping days, default to `7`.
	TtlInDays pulumi.IntPtrInput
}

func (ClusterLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLogConfigArgs)(nil)).Elem()
}

type ClusterLogConfigInput interface {
	pulumi.Input

	ToClusterLogConfigOutput() ClusterLogConfigOutput
	ToClusterLogConfigOutputWithContext(ctx context.Context) ClusterLogConfigOutput
}

func (*ClusterLogConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogConfig)(nil)).Elem()
}

func (i *ClusterLogConfig) ToClusterLogConfigOutput() ClusterLogConfigOutput {
	return i.ToClusterLogConfigOutputWithContext(context.Background())
}

func (i *ClusterLogConfig) ToClusterLogConfigOutputWithContext(ctx context.Context) ClusterLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogConfigOutput)
}

// ClusterLogConfigArrayInput is an input type that accepts ClusterLogConfigArray and ClusterLogConfigArrayOutput values.
// You can construct a concrete instance of `ClusterLogConfigArrayInput` via:
//
//	ClusterLogConfigArray{ ClusterLogConfigArgs{...} }
type ClusterLogConfigArrayInput interface {
	pulumi.Input

	ToClusterLogConfigArrayOutput() ClusterLogConfigArrayOutput
	ToClusterLogConfigArrayOutputWithContext(context.Context) ClusterLogConfigArrayOutput
}

type ClusterLogConfigArray []ClusterLogConfigInput

func (ClusterLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLogConfig)(nil)).Elem()
}

func (i ClusterLogConfigArray) ToClusterLogConfigArrayOutput() ClusterLogConfigArrayOutput {
	return i.ToClusterLogConfigArrayOutputWithContext(context.Background())
}

func (i ClusterLogConfigArray) ToClusterLogConfigArrayOutputWithContext(ctx context.Context) ClusterLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogConfigArrayOutput)
}

// ClusterLogConfigMapInput is an input type that accepts ClusterLogConfigMap and ClusterLogConfigMapOutput values.
// You can construct a concrete instance of `ClusterLogConfigMapInput` via:
//
//	ClusterLogConfigMap{ "key": ClusterLogConfigArgs{...} }
type ClusterLogConfigMapInput interface {
	pulumi.Input

	ToClusterLogConfigMapOutput() ClusterLogConfigMapOutput
	ToClusterLogConfigMapOutputWithContext(context.Context) ClusterLogConfigMapOutput
}

type ClusterLogConfigMap map[string]ClusterLogConfigInput

func (ClusterLogConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLogConfig)(nil)).Elem()
}

func (i ClusterLogConfigMap) ToClusterLogConfigMapOutput() ClusterLogConfigMapOutput {
	return i.ToClusterLogConfigMapOutputWithContext(context.Background())
}

func (i ClusterLogConfigMap) ToClusterLogConfigMapOutputWithContext(ctx context.Context) ClusterLogConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogConfigMapOutput)
}

type ClusterLogConfigOutput struct{ *pulumi.OutputState }

func (ClusterLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogConfig)(nil)).Elem()
}

func (o ClusterLogConfigOutput) ToClusterLogConfigOutput() ClusterLogConfigOutput {
	return o
}

func (o ClusterLogConfigOutput) ToClusterLogConfigOutputWithContext(ctx context.Context) ClusterLogConfigOutput {
	return o
}

// Specifies the cluster ID.
func (o ClusterLogConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterLogConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specifies the list of log configs.
// The logConfigs structure is documented below.
func (o ClusterLogConfigOutput) LogConfigs() ClusterLogConfigLogConfigArrayOutput {
	return o.ApplyT(func(v *ClusterLogConfig) ClusterLogConfigLogConfigArrayOutput { return v.LogConfigs }).(ClusterLogConfigLogConfigArrayOutput)
}

// Specifies the region in which to create the cluster log config resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ClusterLogConfigOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterLogConfig) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the log keeping days, default to `7`.
func (o ClusterLogConfigOutput) TtlInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterLogConfig) pulumi.IntOutput { return v.TtlInDays }).(pulumi.IntOutput)
}

type ClusterLogConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLogConfig)(nil)).Elem()
}

func (o ClusterLogConfigArrayOutput) ToClusterLogConfigArrayOutput() ClusterLogConfigArrayOutput {
	return o
}

func (o ClusterLogConfigArrayOutput) ToClusterLogConfigArrayOutputWithContext(ctx context.Context) ClusterLogConfigArrayOutput {
	return o
}

func (o ClusterLogConfigArrayOutput) Index(i pulumi.IntInput) ClusterLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterLogConfig {
		return vs[0].([]*ClusterLogConfig)[vs[1].(int)]
	}).(ClusterLogConfigOutput)
}

type ClusterLogConfigMapOutput struct{ *pulumi.OutputState }

func (ClusterLogConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLogConfig)(nil)).Elem()
}

func (o ClusterLogConfigMapOutput) ToClusterLogConfigMapOutput() ClusterLogConfigMapOutput {
	return o
}

func (o ClusterLogConfigMapOutput) ToClusterLogConfigMapOutputWithContext(ctx context.Context) ClusterLogConfigMapOutput {
	return o
}

func (o ClusterLogConfigMapOutput) MapIndex(k pulumi.StringInput) ClusterLogConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterLogConfig {
		return vs[0].(map[string]*ClusterLogConfig)[vs[1].(string)]
	}).(ClusterLogConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLogConfigInput)(nil)).Elem(), &ClusterLogConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLogConfigArrayInput)(nil)).Elem(), ClusterLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLogConfigMapInput)(nil)).Elem(), ClusterLogConfigMap{})
	pulumi.RegisterOutputType(ClusterLogConfigOutput{})
	pulumi.RegisterOutputType(ClusterLogConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterLogConfigMapOutput{})
}

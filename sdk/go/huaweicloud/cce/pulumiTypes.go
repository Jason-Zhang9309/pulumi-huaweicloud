// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AddonValues struct {
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `basicJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Basic map[string]string `pulumi:"basic"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	BasicJson *string `pulumi:"basicJson"`
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `customJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Custom map[string]string `pulumi:"custom"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	CustomJson *string `pulumi:"customJson"`
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `flavorJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Flavor map[string]string `pulumi:"flavor"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	FlavorJson *string `pulumi:"flavorJson"`
}

// AddonValuesInput is an input type that accepts AddonValuesArgs and AddonValuesOutput values.
// You can construct a concrete instance of `AddonValuesInput` via:
//
//	AddonValuesArgs{...}
type AddonValuesInput interface {
	pulumi.Input

	ToAddonValuesOutput() AddonValuesOutput
	ToAddonValuesOutputWithContext(context.Context) AddonValuesOutput
}

type AddonValuesArgs struct {
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `basicJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Basic pulumi.StringMapInput `pulumi:"basic"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	BasicJson pulumi.StringPtrInput `pulumi:"basicJson"`
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `customJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Custom pulumi.StringMapInput `pulumi:"custom"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	CustomJson pulumi.StringPtrInput `pulumi:"customJson"`
	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to `flavorJson`, but it is not recommended.
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringMapInput `pulumi:"flavor"`
	// Specifies the json string vary depending on the add-on.
	// Changing this parameter will create a new resource.
	FlavorJson pulumi.StringPtrInput `pulumi:"flavorJson"`
}

func (AddonValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonValues)(nil)).Elem()
}

func (i AddonValuesArgs) ToAddonValuesOutput() AddonValuesOutput {
	return i.ToAddonValuesOutputWithContext(context.Background())
}

func (i AddonValuesArgs) ToAddonValuesOutputWithContext(ctx context.Context) AddonValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesOutput)
}

func (i AddonValuesArgs) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return i.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (i AddonValuesArgs) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesOutput).ToAddonValuesPtrOutputWithContext(ctx)
}

// AddonValuesPtrInput is an input type that accepts AddonValuesArgs, AddonValuesPtr and AddonValuesPtrOutput values.
// You can construct a concrete instance of `AddonValuesPtrInput` via:
//
//	        AddonValuesArgs{...}
//
//	or:
//
//	        nil
type AddonValuesPtrInput interface {
	pulumi.Input

	ToAddonValuesPtrOutput() AddonValuesPtrOutput
	ToAddonValuesPtrOutputWithContext(context.Context) AddonValuesPtrOutput
}

type addonValuesPtrType AddonValuesArgs

func AddonValuesPtr(v *AddonValuesArgs) AddonValuesPtrInput {
	return (*addonValuesPtrType)(v)
}

func (*addonValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonValues)(nil)).Elem()
}

func (i *addonValuesPtrType) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return i.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (i *addonValuesPtrType) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesPtrOutput)
}

type AddonValuesOutput struct{ *pulumi.OutputState }

func (AddonValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonValues)(nil)).Elem()
}

func (o AddonValuesOutput) ToAddonValuesOutput() AddonValuesOutput {
	return o
}

func (o AddonValuesOutput) ToAddonValuesOutputWithContext(ctx context.Context) AddonValuesOutput {
	return o
}

func (o AddonValuesOutput) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return o.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (o AddonValuesOutput) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddonValues) *AddonValues {
		return &v
	}).(AddonValuesPtrOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `basicJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) Basic() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Basic }).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) BasicJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.BasicJson }).(pulumi.StringPtrOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `customJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Custom }).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) CustomJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.CustomJson }).(pulumi.StringPtrOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `flavorJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) Flavor() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Flavor }).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesOutput) FlavorJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.FlavorJson }).(pulumi.StringPtrOutput)
}

type AddonValuesPtrOutput struct{ *pulumi.OutputState }

func (AddonValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonValues)(nil)).Elem()
}

func (o AddonValuesPtrOutput) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return o
}

func (o AddonValuesPtrOutput) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return o
}

func (o AddonValuesPtrOutput) Elem() AddonValuesOutput {
	return o.ApplyT(func(v *AddonValues) AddonValues {
		if v != nil {
			return *v
		}
		var ret AddonValues
		return ret
	}).(AddonValuesOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `basicJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) Basic() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) BasicJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.BasicJson
	}).(pulumi.StringPtrOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `customJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Custom
	}).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) CustomJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.CustomJson
	}).(pulumi.StringPtrOutput)
}

// Specifies the key/value pairs vary depending on the add-on.
// Only supports non-nested structure and only supports string type elements.
// This is an alternative to `flavorJson`, but it is not recommended.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) Flavor() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Flavor
	}).(pulumi.StringMapOutput)
}

// Specifies the json string vary depending on the add-on.
// Changing this parameter will create a new resource.
func (o AddonValuesPtrOutput) FlavorJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.FlavorJson
	}).(pulumi.StringPtrOutput)
}

type ClusterCertificateCluster struct {
	// The certificate data.
	CertificateAuthorityData *string `pulumi:"certificateAuthorityData"`
	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name *string `pulumi:"name"`
	// The server IP address.
	Server *string `pulumi:"server"`
}

// ClusterCertificateClusterInput is an input type that accepts ClusterCertificateClusterArgs and ClusterCertificateClusterOutput values.
// You can construct a concrete instance of `ClusterCertificateClusterInput` via:
//
//	ClusterCertificateClusterArgs{...}
type ClusterCertificateClusterInput interface {
	pulumi.Input

	ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput
	ToClusterCertificateClusterOutputWithContext(context.Context) ClusterCertificateClusterOutput
}

type ClusterCertificateClusterArgs struct {
	// The certificate data.
	CertificateAuthorityData pulumi.StringPtrInput `pulumi:"certificateAuthorityData"`
	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The server IP address.
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCluster)(nil)).Elem()
}

func (i ClusterCertificateClusterArgs) ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput {
	return i.ToClusterCertificateClusterOutputWithContext(context.Background())
}

func (i ClusterCertificateClusterArgs) ToClusterCertificateClusterOutputWithContext(ctx context.Context) ClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateClusterOutput)
}

// ClusterCertificateClusterArrayInput is an input type that accepts ClusterCertificateClusterArray and ClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `ClusterCertificateClusterArrayInput` via:
//
//	ClusterCertificateClusterArray{ ClusterCertificateClusterArgs{...} }
type ClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput
	ToClusterCertificateClusterArrayOutputWithContext(context.Context) ClusterCertificateClusterArrayOutput
}

type ClusterCertificateClusterArray []ClusterCertificateClusterInput

func (ClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCluster)(nil)).Elem()
}

func (i ClusterCertificateClusterArray) ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput {
	return i.ToClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateClusterArray) ToClusterCertificateClusterArrayOutputWithContext(ctx context.Context) ClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateClusterArrayOutput)
}

type ClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (ClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCluster)(nil)).Elem()
}

func (o ClusterCertificateClusterOutput) ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput {
	return o
}

func (o ClusterCertificateClusterOutput) ToClusterCertificateClusterOutputWithContext(ctx context.Context) ClusterCertificateClusterOutput {
	return o
}

// The certificate data.
func (o ClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.CertificateAuthorityData }).(pulumi.StringPtrOutput)
}

// Specifies the cluster name.
// Changing this parameter will create a new cluster resource.
func (o ClusterCertificateClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The server IP address.
func (o ClusterCertificateClusterOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCluster)(nil)).Elem()
}

func (o ClusterCertificateClusterArrayOutput) ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput {
	return o
}

func (o ClusterCertificateClusterArrayOutput) ToClusterCertificateClusterArrayOutputWithContext(ctx context.Context) ClusterCertificateClusterArrayOutput {
	return o
}

func (o ClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) ClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateCluster {
		return vs[0].([]ClusterCertificateCluster)[vs[1].(int)]
	}).(ClusterCertificateClusterOutput)
}

type ClusterCertificateUser struct {
	// The client certificate data.
	ClientCertificateData *string `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData *string `pulumi:"clientKeyData"`
	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name *string `pulumi:"name"`
}

// ClusterCertificateUserInput is an input type that accepts ClusterCertificateUserArgs and ClusterCertificateUserOutput values.
// You can construct a concrete instance of `ClusterCertificateUserInput` via:
//
//	ClusterCertificateUserArgs{...}
type ClusterCertificateUserInput interface {
	pulumi.Input

	ToClusterCertificateUserOutput() ClusterCertificateUserOutput
	ToClusterCertificateUserOutputWithContext(context.Context) ClusterCertificateUserOutput
}

type ClusterCertificateUserArgs struct {
	// The client certificate data.
	ClientCertificateData pulumi.StringPtrInput `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData pulumi.StringPtrInput `pulumi:"clientKeyData"`
	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateUser)(nil)).Elem()
}

func (i ClusterCertificateUserArgs) ToClusterCertificateUserOutput() ClusterCertificateUserOutput {
	return i.ToClusterCertificateUserOutputWithContext(context.Background())
}

func (i ClusterCertificateUserArgs) ToClusterCertificateUserOutputWithContext(ctx context.Context) ClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateUserOutput)
}

// ClusterCertificateUserArrayInput is an input type that accepts ClusterCertificateUserArray and ClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `ClusterCertificateUserArrayInput` via:
//
//	ClusterCertificateUserArray{ ClusterCertificateUserArgs{...} }
type ClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput
	ToClusterCertificateUserArrayOutputWithContext(context.Context) ClusterCertificateUserArrayOutput
}

type ClusterCertificateUserArray []ClusterCertificateUserInput

func (ClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateUser)(nil)).Elem()
}

func (i ClusterCertificateUserArray) ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput {
	return i.ToClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateUserArray) ToClusterCertificateUserArrayOutputWithContext(ctx context.Context) ClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateUserArrayOutput)
}

type ClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (ClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateUser)(nil)).Elem()
}

func (o ClusterCertificateUserOutput) ToClusterCertificateUserOutput() ClusterCertificateUserOutput {
	return o
}

func (o ClusterCertificateUserOutput) ToClusterCertificateUserOutputWithContext(ctx context.Context) ClusterCertificateUserOutput {
	return o
}

// The client certificate data.
func (o ClusterCertificateUserOutput) ClientCertificateData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.ClientCertificateData }).(pulumi.StringPtrOutput)
}

// The client key data.
func (o ClusterCertificateUserOutput) ClientKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.ClientKeyData }).(pulumi.StringPtrOutput)
}

// Specifies the cluster name.
// Changing this parameter will create a new cluster resource.
func (o ClusterCertificateUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateUser)(nil)).Elem()
}

func (o ClusterCertificateUserArrayOutput) ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput {
	return o
}

func (o ClusterCertificateUserArrayOutput) ToClusterCertificateUserArrayOutputWithContext(ctx context.Context) ClusterCertificateUserArrayOutput {
	return o
}

func (o ClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) ClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateUser {
		return vs[0].([]ClusterCertificateUser)[vs[1].(int)]
	}).(ClusterCertificateUserOutput)
}

type ClusterMaster struct {
	// Specifies the availability zone of the master node.
	// Changing this parameter will create a new cluster resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
}

// ClusterMasterInput is an input type that accepts ClusterMasterArgs and ClusterMasterOutput values.
// You can construct a concrete instance of `ClusterMasterInput` via:
//
//	ClusterMasterArgs{...}
type ClusterMasterInput interface {
	pulumi.Input

	ToClusterMasterOutput() ClusterMasterOutput
	ToClusterMasterOutputWithContext(context.Context) ClusterMasterOutput
}

type ClusterMasterArgs struct {
	// Specifies the availability zone of the master node.
	// Changing this parameter will create a new cluster resource.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
}

func (ClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaster)(nil)).Elem()
}

func (i ClusterMasterArgs) ToClusterMasterOutput() ClusterMasterOutput {
	return i.ToClusterMasterOutputWithContext(context.Background())
}

func (i ClusterMasterArgs) ToClusterMasterOutputWithContext(ctx context.Context) ClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterOutput)
}

// ClusterMasterArrayInput is an input type that accepts ClusterMasterArray and ClusterMasterArrayOutput values.
// You can construct a concrete instance of `ClusterMasterArrayInput` via:
//
//	ClusterMasterArray{ ClusterMasterArgs{...} }
type ClusterMasterArrayInput interface {
	pulumi.Input

	ToClusterMasterArrayOutput() ClusterMasterArrayOutput
	ToClusterMasterArrayOutputWithContext(context.Context) ClusterMasterArrayOutput
}

type ClusterMasterArray []ClusterMasterInput

func (ClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaster)(nil)).Elem()
}

func (i ClusterMasterArray) ToClusterMasterArrayOutput() ClusterMasterArrayOutput {
	return i.ToClusterMasterArrayOutputWithContext(context.Background())
}

func (i ClusterMasterArray) ToClusterMasterArrayOutputWithContext(ctx context.Context) ClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterArrayOutput)
}

type ClusterMasterOutput struct{ *pulumi.OutputState }

func (ClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaster)(nil)).Elem()
}

func (o ClusterMasterOutput) ToClusterMasterOutput() ClusterMasterOutput {
	return o
}

func (o ClusterMasterOutput) ToClusterMasterOutputWithContext(ctx context.Context) ClusterMasterOutput {
	return o
}

// Specifies the availability zone of the master node.
// Changing this parameter will create a new cluster resource.
func (o ClusterMasterOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterMaster) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

type ClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (ClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaster)(nil)).Elem()
}

func (o ClusterMasterArrayOutput) ToClusterMasterArrayOutput() ClusterMasterArrayOutput {
	return o
}

func (o ClusterMasterArrayOutput) ToClusterMasterArrayOutputWithContext(ctx context.Context) ClusterMasterArrayOutput {
	return o
}

func (o ClusterMasterArrayOutput) Index(i pulumi.IntInput) ClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterMaster {
		return vs[0].([]ClusterMaster)[vs[1].(int)]
	}).(ClusterMasterOutput)
}

type NodeAttachDataVolume struct {
	ExtendParam   *string           `pulumi:"extendParam"`
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	KmsKeyId      *string           `pulumi:"kmsKeyId"`
	Size          *int              `pulumi:"size"`
	Volumetype    *string           `pulumi:"volumetype"`
}

// NodeAttachDataVolumeInput is an input type that accepts NodeAttachDataVolumeArgs and NodeAttachDataVolumeOutput values.
// You can construct a concrete instance of `NodeAttachDataVolumeInput` via:
//
//	NodeAttachDataVolumeArgs{...}
type NodeAttachDataVolumeInput interface {
	pulumi.Input

	ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput
	ToNodeAttachDataVolumeOutputWithContext(context.Context) NodeAttachDataVolumeOutput
}

type NodeAttachDataVolumeArgs struct {
	ExtendParam   pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntPtrInput    `pulumi:"size"`
	Volumetype    pulumi.StringPtrInput `pulumi:"volumetype"`
}

func (NodeAttachDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachDataVolume)(nil)).Elem()
}

func (i NodeAttachDataVolumeArgs) ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput {
	return i.ToNodeAttachDataVolumeOutputWithContext(context.Background())
}

func (i NodeAttachDataVolumeArgs) ToNodeAttachDataVolumeOutputWithContext(ctx context.Context) NodeAttachDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachDataVolumeOutput)
}

// NodeAttachDataVolumeArrayInput is an input type that accepts NodeAttachDataVolumeArray and NodeAttachDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodeAttachDataVolumeArrayInput` via:
//
//	NodeAttachDataVolumeArray{ NodeAttachDataVolumeArgs{...} }
type NodeAttachDataVolumeArrayInput interface {
	pulumi.Input

	ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput
	ToNodeAttachDataVolumeArrayOutputWithContext(context.Context) NodeAttachDataVolumeArrayOutput
}

type NodeAttachDataVolumeArray []NodeAttachDataVolumeInput

func (NodeAttachDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachDataVolume)(nil)).Elem()
}

func (i NodeAttachDataVolumeArray) ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput {
	return i.ToNodeAttachDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodeAttachDataVolumeArray) ToNodeAttachDataVolumeArrayOutputWithContext(ctx context.Context) NodeAttachDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachDataVolumeArrayOutput)
}

type NodeAttachDataVolumeOutput struct{ *pulumi.OutputState }

func (NodeAttachDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachDataVolume)(nil)).Elem()
}

func (o NodeAttachDataVolumeOutput) ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput {
	return o
}

func (o NodeAttachDataVolumeOutput) ToNodeAttachDataVolumeOutputWithContext(ctx context.Context) NodeAttachDataVolumeOutput {
	return o
}

func (o NodeAttachDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeAttachDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodeAttachDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeAttachDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.Volumetype }).(pulumi.StringPtrOutput)
}

type NodeAttachDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachDataVolume)(nil)).Elem()
}

func (o NodeAttachDataVolumeArrayOutput) ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput {
	return o
}

func (o NodeAttachDataVolumeArrayOutput) ToNodeAttachDataVolumeArrayOutputWithContext(ctx context.Context) NodeAttachDataVolumeArrayOutput {
	return o
}

func (o NodeAttachDataVolumeArrayOutput) Index(i pulumi.IntInput) NodeAttachDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachDataVolume {
		return vs[0].([]NodeAttachDataVolume)[vs[1].(int)]
	}).(NodeAttachDataVolumeOutput)
}

type NodeAttachRootVolume struct {
	ExtendParam   *string           `pulumi:"extendParam"`
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	Size          *int              `pulumi:"size"`
	Volumetype    *string           `pulumi:"volumetype"`
}

// NodeAttachRootVolumeInput is an input type that accepts NodeAttachRootVolumeArgs and NodeAttachRootVolumeOutput values.
// You can construct a concrete instance of `NodeAttachRootVolumeInput` via:
//
//	NodeAttachRootVolumeArgs{...}
type NodeAttachRootVolumeInput interface {
	pulumi.Input

	ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput
	ToNodeAttachRootVolumeOutputWithContext(context.Context) NodeAttachRootVolumeOutput
}

type NodeAttachRootVolumeArgs struct {
	ExtendParam   pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Size          pulumi.IntPtrInput    `pulumi:"size"`
	Volumetype    pulumi.StringPtrInput `pulumi:"volumetype"`
}

func (NodeAttachRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachRootVolume)(nil)).Elem()
}

func (i NodeAttachRootVolumeArgs) ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput {
	return i.ToNodeAttachRootVolumeOutputWithContext(context.Background())
}

func (i NodeAttachRootVolumeArgs) ToNodeAttachRootVolumeOutputWithContext(ctx context.Context) NodeAttachRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachRootVolumeOutput)
}

// NodeAttachRootVolumeArrayInput is an input type that accepts NodeAttachRootVolumeArray and NodeAttachRootVolumeArrayOutput values.
// You can construct a concrete instance of `NodeAttachRootVolumeArrayInput` via:
//
//	NodeAttachRootVolumeArray{ NodeAttachRootVolumeArgs{...} }
type NodeAttachRootVolumeArrayInput interface {
	pulumi.Input

	ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput
	ToNodeAttachRootVolumeArrayOutputWithContext(context.Context) NodeAttachRootVolumeArrayOutput
}

type NodeAttachRootVolumeArray []NodeAttachRootVolumeInput

func (NodeAttachRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachRootVolume)(nil)).Elem()
}

func (i NodeAttachRootVolumeArray) ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput {
	return i.ToNodeAttachRootVolumeArrayOutputWithContext(context.Background())
}

func (i NodeAttachRootVolumeArray) ToNodeAttachRootVolumeArrayOutputWithContext(ctx context.Context) NodeAttachRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachRootVolumeArrayOutput)
}

type NodeAttachRootVolumeOutput struct{ *pulumi.OutputState }

func (NodeAttachRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachRootVolume)(nil)).Elem()
}

func (o NodeAttachRootVolumeOutput) ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput {
	return o
}

func (o NodeAttachRootVolumeOutput) ToNodeAttachRootVolumeOutputWithContext(ctx context.Context) NodeAttachRootVolumeOutput {
	return o
}

func (o NodeAttachRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeAttachRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodeAttachRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.Volumetype }).(pulumi.StringPtrOutput)
}

type NodeAttachRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachRootVolume)(nil)).Elem()
}

func (o NodeAttachRootVolumeArrayOutput) ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput {
	return o
}

func (o NodeAttachRootVolumeArrayOutput) ToNodeAttachRootVolumeArrayOutputWithContext(ctx context.Context) NodeAttachRootVolumeArrayOutput {
	return o
}

func (o NodeAttachRootVolumeArrayOutput) Index(i pulumi.IntInput) NodeAttachRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachRootVolume {
		return vs[0].([]NodeAttachRootVolume)[vs[1].(int)]
	}).(NodeAttachRootVolumeOutput)
}

type NodeAttachTaint struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect string `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key string `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value string `pulumi:"value"`
}

// NodeAttachTaintInput is an input type that accepts NodeAttachTaintArgs and NodeAttachTaintOutput values.
// You can construct a concrete instance of `NodeAttachTaintInput` via:
//
//	NodeAttachTaintArgs{...}
type NodeAttachTaintInput interface {
	pulumi.Input

	ToNodeAttachTaintOutput() NodeAttachTaintOutput
	ToNodeAttachTaintOutputWithContext(context.Context) NodeAttachTaintOutput
}

type NodeAttachTaintArgs struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect pulumi.StringInput `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key pulumi.StringInput `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NodeAttachTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachTaint)(nil)).Elem()
}

func (i NodeAttachTaintArgs) ToNodeAttachTaintOutput() NodeAttachTaintOutput {
	return i.ToNodeAttachTaintOutputWithContext(context.Background())
}

func (i NodeAttachTaintArgs) ToNodeAttachTaintOutputWithContext(ctx context.Context) NodeAttachTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachTaintOutput)
}

// NodeAttachTaintArrayInput is an input type that accepts NodeAttachTaintArray and NodeAttachTaintArrayOutput values.
// You can construct a concrete instance of `NodeAttachTaintArrayInput` via:
//
//	NodeAttachTaintArray{ NodeAttachTaintArgs{...} }
type NodeAttachTaintArrayInput interface {
	pulumi.Input

	ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput
	ToNodeAttachTaintArrayOutputWithContext(context.Context) NodeAttachTaintArrayOutput
}

type NodeAttachTaintArray []NodeAttachTaintInput

func (NodeAttachTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachTaint)(nil)).Elem()
}

func (i NodeAttachTaintArray) ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput {
	return i.ToNodeAttachTaintArrayOutputWithContext(context.Background())
}

func (i NodeAttachTaintArray) ToNodeAttachTaintArrayOutputWithContext(ctx context.Context) NodeAttachTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachTaintArrayOutput)
}

type NodeAttachTaintOutput struct{ *pulumi.OutputState }

func (NodeAttachTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachTaint)(nil)).Elem()
}

func (o NodeAttachTaintOutput) ToNodeAttachTaintOutput() NodeAttachTaintOutput {
	return o
}

func (o NodeAttachTaintOutput) ToNodeAttachTaintOutputWithContext(ctx context.Context) NodeAttachTaintOutput {
	return o
}

// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
// Changing this parameter will create a new resource.
func (o NodeAttachTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Effect }).(pulumi.StringOutput)
}

// A key must contain 1 to 63 characters starting with a letter or digit.
// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
// as the prefix of a key. Changing this parameter will create a new resource.
func (o NodeAttachTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Key }).(pulumi.StringOutput)
}

// A value must start with a letter or digit and can contain a maximum of 63
// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
// create a new resource.
func (o NodeAttachTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Value }).(pulumi.StringOutput)
}

type NodeAttachTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachTaint)(nil)).Elem()
}

func (o NodeAttachTaintArrayOutput) ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput {
	return o
}

func (o NodeAttachTaintArrayOutput) ToNodeAttachTaintArrayOutputWithContext(ctx context.Context) NodeAttachTaintArrayOutput {
	return o
}

func (o NodeAttachTaintArrayOutput) Index(i pulumi.IntInput) NodeAttachTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachTaint {
		return vs[0].([]NodeAttachTaint)[vs[1].(int)]
	}).(NodeAttachTaintOutput)
}

type NodeDataVolume struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam *string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype string `pulumi:"volumetype"`
}

// NodeDataVolumeInput is an input type that accepts NodeDataVolumeArgs and NodeDataVolumeOutput values.
// You can construct a concrete instance of `NodeDataVolumeInput` via:
//
//	NodeDataVolumeArgs{...}
type NodeDataVolumeInput interface {
	pulumi.Input

	ToNodeDataVolumeOutput() NodeDataVolumeOutput
	ToNodeDataVolumeOutputWithContext(context.Context) NodeDataVolumeOutput
}

type NodeDataVolumeArgs struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam pulumi.StringPtrInput `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (NodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDataVolume)(nil)).Elem()
}

func (i NodeDataVolumeArgs) ToNodeDataVolumeOutput() NodeDataVolumeOutput {
	return i.ToNodeDataVolumeOutputWithContext(context.Background())
}

func (i NodeDataVolumeArgs) ToNodeDataVolumeOutputWithContext(ctx context.Context) NodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDataVolumeOutput)
}

// NodeDataVolumeArrayInput is an input type that accepts NodeDataVolumeArray and NodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodeDataVolumeArrayInput` via:
//
//	NodeDataVolumeArray{ NodeDataVolumeArgs{...} }
type NodeDataVolumeArrayInput interface {
	pulumi.Input

	ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput
	ToNodeDataVolumeArrayOutputWithContext(context.Context) NodeDataVolumeArrayOutput
}

type NodeDataVolumeArray []NodeDataVolumeInput

func (NodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeDataVolume)(nil)).Elem()
}

func (i NodeDataVolumeArray) ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput {
	return i.ToNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodeDataVolumeArray) ToNodeDataVolumeArrayOutputWithContext(ctx context.Context) NodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDataVolumeArrayOutput)
}

type NodeDataVolumeOutput struct{ *pulumi.OutputState }

func (NodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDataVolume)(nil)).Elem()
}

func (o NodeDataVolumeOutput) ToNodeDataVolumeOutput() NodeDataVolumeOutput {
	return o
}

func (o NodeDataVolumeOutput) ToNodeDataVolumeOutputWithContext(ctx context.Context) NodeDataVolumeOutput {
	return o
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodeDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodeDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of a KMS key. This is used to encrypt the volume.
// Changing this parameter will create a new resource.
func (o NodeDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the size of a virtual space. Only an integer percentage is supported.
// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
// Changing this parameter will create a new resource.
func (o NodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the disk type.
// Changing this parameter will create a new resource.
func (o NodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeDataVolume)(nil)).Elem()
}

func (o NodeDataVolumeArrayOutput) ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput {
	return o
}

func (o NodeDataVolumeArrayOutput) ToNodeDataVolumeArrayOutputWithContext(ctx context.Context) NodeDataVolumeArrayOutput {
	return o
}

func (o NodeDataVolumeArrayOutput) Index(i pulumi.IntInput) NodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeDataVolume {
		return vs[0].([]NodeDataVolume)[vs[1].(int)]
	}).(NodeDataVolumeOutput)
}

type NodePoolDataVolume struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam *string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype string `pulumi:"volumetype"`
}

// NodePoolDataVolumeInput is an input type that accepts NodePoolDataVolumeArgs and NodePoolDataVolumeOutput values.
// You can construct a concrete instance of `NodePoolDataVolumeInput` via:
//
//	NodePoolDataVolumeArgs{...}
type NodePoolDataVolumeInput interface {
	pulumi.Input

	ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput
	ToNodePoolDataVolumeOutputWithContext(context.Context) NodePoolDataVolumeOutput
}

type NodePoolDataVolumeArgs struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam pulumi.StringPtrInput `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (NodePoolDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDataVolume)(nil)).Elem()
}

func (i NodePoolDataVolumeArgs) ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput {
	return i.ToNodePoolDataVolumeOutputWithContext(context.Background())
}

func (i NodePoolDataVolumeArgs) ToNodePoolDataVolumeOutputWithContext(ctx context.Context) NodePoolDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDataVolumeOutput)
}

// NodePoolDataVolumeArrayInput is an input type that accepts NodePoolDataVolumeArray and NodePoolDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodePoolDataVolumeArrayInput` via:
//
//	NodePoolDataVolumeArray{ NodePoolDataVolumeArgs{...} }
type NodePoolDataVolumeArrayInput interface {
	pulumi.Input

	ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput
	ToNodePoolDataVolumeArrayOutputWithContext(context.Context) NodePoolDataVolumeArrayOutput
}

type NodePoolDataVolumeArray []NodePoolDataVolumeInput

func (NodePoolDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolDataVolume)(nil)).Elem()
}

func (i NodePoolDataVolumeArray) ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput {
	return i.ToNodePoolDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodePoolDataVolumeArray) ToNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) NodePoolDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDataVolumeArrayOutput)
}

type NodePoolDataVolumeOutput struct{ *pulumi.OutputState }

func (NodePoolDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDataVolume)(nil)).Elem()
}

func (o NodePoolDataVolumeOutput) ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput {
	return o
}

func (o NodePoolDataVolumeOutput) ToNodePoolDataVolumeOutputWithContext(ctx context.Context) NodePoolDataVolumeOutput {
	return o
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodePoolDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodePoolDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodePoolDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodePoolDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

// Specifies the KMS key ID. This is used to encrypt the volume.
// Changing this parameter will create a new resource.
func (o NodePoolDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the disk size in GB. Changing this parameter will create a new resource.
func (o NodePoolDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the disk type. Changing this parameter will create a new resource.
func (o NodePoolDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodePoolDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodePoolDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolDataVolume)(nil)).Elem()
}

func (o NodePoolDataVolumeArrayOutput) ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput {
	return o
}

func (o NodePoolDataVolumeArrayOutput) ToNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) NodePoolDataVolumeArrayOutput {
	return o
}

func (o NodePoolDataVolumeArrayOutput) Index(i pulumi.IntInput) NodePoolDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolDataVolume {
		return vs[0].([]NodePoolDataVolume)[vs[1].(int)]
	}).(NodePoolDataVolumeOutput)
}

type NodePoolRootVolume struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam *string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype string `pulumi:"volumetype"`
}

// NodePoolRootVolumeInput is an input type that accepts NodePoolRootVolumeArgs and NodePoolRootVolumeOutput values.
// You can construct a concrete instance of `NodePoolRootVolumeInput` via:
//
//	NodePoolRootVolumeArgs{...}
type NodePoolRootVolumeInput interface {
	pulumi.Input

	ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput
	ToNodePoolRootVolumeOutputWithContext(context.Context) NodePoolRootVolumeOutput
}

type NodePoolRootVolumeArgs struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam pulumi.StringPtrInput `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (NodePoolRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolRootVolume)(nil)).Elem()
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput {
	return i.ToNodePoolRootVolumeOutputWithContext(context.Background())
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumeOutputWithContext(ctx context.Context) NodePoolRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumeOutput)
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return i.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumeOutput).ToNodePoolRootVolumePtrOutputWithContext(ctx)
}

// NodePoolRootVolumePtrInput is an input type that accepts NodePoolRootVolumeArgs, NodePoolRootVolumePtr and NodePoolRootVolumePtrOutput values.
// You can construct a concrete instance of `NodePoolRootVolumePtrInput` via:
//
//	        NodePoolRootVolumeArgs{...}
//
//	or:
//
//	        nil
type NodePoolRootVolumePtrInput interface {
	pulumi.Input

	ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput
	ToNodePoolRootVolumePtrOutputWithContext(context.Context) NodePoolRootVolumePtrOutput
}

type nodePoolRootVolumePtrType NodePoolRootVolumeArgs

func NodePoolRootVolumePtr(v *NodePoolRootVolumeArgs) NodePoolRootVolumePtrInput {
	return (*nodePoolRootVolumePtrType)(v)
}

func (*nodePoolRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolRootVolume)(nil)).Elem()
}

func (i *nodePoolRootVolumePtrType) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return i.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (i *nodePoolRootVolumePtrType) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumePtrOutput)
}

type NodePoolRootVolumeOutput struct{ *pulumi.OutputState }

func (NodePoolRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolRootVolume)(nil)).Elem()
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput {
	return o
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumeOutputWithContext(ctx context.Context) NodePoolRootVolumeOutput {
	return o
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return o.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolRootVolume) *NodePoolRootVolume {
		return &v
	}).(NodePoolRootVolumePtrOutput)
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodePoolRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodePoolRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodePoolRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodePoolRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

// Specifies the disk size in GB. Changing this parameter will create a new resource.
func (o NodePoolRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the disk type. Changing this parameter will create a new resource.
func (o NodePoolRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodePoolRootVolumePtrOutput struct{ *pulumi.OutputState }

func (NodePoolRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolRootVolume)(nil)).Elem()
}

func (o NodePoolRootVolumePtrOutput) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return o
}

func (o NodePoolRootVolumePtrOutput) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return o
}

func (o NodePoolRootVolumePtrOutput) Elem() NodePoolRootVolumeOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) NodePoolRootVolume {
		if v != nil {
			return *v
		}
		var ret NodePoolRootVolume
		return ret
	}).(NodePoolRootVolumeOutput)
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodePoolRootVolumePtrOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.ExtendParam
	}).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodePoolRootVolumePtrOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendParams
	}).(pulumi.StringMapOutput)
}

func (o NodePoolRootVolumePtrOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.HwPassthrough
	}).(pulumi.BoolPtrOutput)
}

// Specifies the disk size in GB. Changing this parameter will create a new resource.
func (o NodePoolRootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the disk type. Changing this parameter will create a new resource.
func (o NodePoolRootVolumePtrOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Volumetype
	}).(pulumi.StringPtrOutput)
}

type NodePoolTaint struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect string `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
	// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
	// prefix of a key.
	Key string `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63 characters,
	// including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value string `pulumi:"value"`
}

// NodePoolTaintInput is an input type that accepts NodePoolTaintArgs and NodePoolTaintOutput values.
// You can construct a concrete instance of `NodePoolTaintInput` via:
//
//	NodePoolTaintArgs{...}
type NodePoolTaintInput interface {
	pulumi.Input

	ToNodePoolTaintOutput() NodePoolTaintOutput
	ToNodePoolTaintOutputWithContext(context.Context) NodePoolTaintOutput
}

type NodePoolTaintArgs struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect pulumi.StringInput `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
	// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
	// prefix of a key.
	Key pulumi.StringInput `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63 characters,
	// including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value pulumi.StringInput `pulumi:"value"`
}

func (NodePoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolTaint)(nil)).Elem()
}

func (i NodePoolTaintArgs) ToNodePoolTaintOutput() NodePoolTaintOutput {
	return i.ToNodePoolTaintOutputWithContext(context.Background())
}

func (i NodePoolTaintArgs) ToNodePoolTaintOutputWithContext(ctx context.Context) NodePoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTaintOutput)
}

// NodePoolTaintArrayInput is an input type that accepts NodePoolTaintArray and NodePoolTaintArrayOutput values.
// You can construct a concrete instance of `NodePoolTaintArrayInput` via:
//
//	NodePoolTaintArray{ NodePoolTaintArgs{...} }
type NodePoolTaintArrayInput interface {
	pulumi.Input

	ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput
	ToNodePoolTaintArrayOutputWithContext(context.Context) NodePoolTaintArrayOutput
}

type NodePoolTaintArray []NodePoolTaintInput

func (NodePoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolTaint)(nil)).Elem()
}

func (i NodePoolTaintArray) ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput {
	return i.ToNodePoolTaintArrayOutputWithContext(context.Background())
}

func (i NodePoolTaintArray) ToNodePoolTaintArrayOutputWithContext(ctx context.Context) NodePoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTaintArrayOutput)
}

type NodePoolTaintOutput struct{ *pulumi.OutputState }

func (NodePoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolTaint)(nil)).Elem()
}

func (o NodePoolTaintOutput) ToNodePoolTaintOutput() NodePoolTaintOutput {
	return o
}

func (o NodePoolTaintOutput) ToNodePoolTaintOutputWithContext(ctx context.Context) NodePoolTaintOutput {
	return o
}

// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
func (o NodePoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
// prefix of a key.
func (o NodePoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

// A value must start with a letter or digit and can contain a maximum of 63 characters,
// including letters, digits, hyphens (-), underscores (_), and periods (.).
func (o NodePoolTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Value }).(pulumi.StringOutput)
}

type NodePoolTaintArrayOutput struct{ *pulumi.OutputState }

func (NodePoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolTaint)(nil)).Elem()
}

func (o NodePoolTaintArrayOutput) ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput {
	return o
}

func (o NodePoolTaintArrayOutput) ToNodePoolTaintArrayOutputWithContext(ctx context.Context) NodePoolTaintArrayOutput {
	return o
}

func (o NodePoolTaintArrayOutput) Index(i pulumi.IntInput) NodePoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolTaint {
		return vs[0].([]NodePoolTaint)[vs[1].(int)]
	}).(NodePoolTaintOutput)
}

type NodeRootVolume struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam *string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  map[string]string `pulumi:"extendParams"`
	HwPassthrough *bool             `pulumi:"hwPassthrough"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype string `pulumi:"volumetype"`
}

// NodeRootVolumeInput is an input type that accepts NodeRootVolumeArgs and NodeRootVolumeOutput values.
// You can construct a concrete instance of `NodeRootVolumeInput` via:
//
//	NodeRootVolumeArgs{...}
type NodeRootVolumeInput interface {
	pulumi.Input

	ToNodeRootVolumeOutput() NodeRootVolumeOutput
	ToNodeRootVolumeOutputWithContext(context.Context) NodeRootVolumeOutput
}

type NodeRootVolumeArgs struct {
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	//
	// Deprecated: use extend_params instead
	ExtendParam pulumi.StringPtrInput `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams  pulumi.StringMapInput `pulumi:"extendParams"`
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (NodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRootVolume)(nil)).Elem()
}

func (i NodeRootVolumeArgs) ToNodeRootVolumeOutput() NodeRootVolumeOutput {
	return i.ToNodeRootVolumeOutputWithContext(context.Background())
}

func (i NodeRootVolumeArgs) ToNodeRootVolumeOutputWithContext(ctx context.Context) NodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumeOutput)
}

func (i NodeRootVolumeArgs) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return i.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (i NodeRootVolumeArgs) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumeOutput).ToNodeRootVolumePtrOutputWithContext(ctx)
}

// NodeRootVolumePtrInput is an input type that accepts NodeRootVolumeArgs, NodeRootVolumePtr and NodeRootVolumePtrOutput values.
// You can construct a concrete instance of `NodeRootVolumePtrInput` via:
//
//	        NodeRootVolumeArgs{...}
//
//	or:
//
//	        nil
type NodeRootVolumePtrInput interface {
	pulumi.Input

	ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput
	ToNodeRootVolumePtrOutputWithContext(context.Context) NodeRootVolumePtrOutput
}

type nodeRootVolumePtrType NodeRootVolumeArgs

func NodeRootVolumePtr(v *NodeRootVolumeArgs) NodeRootVolumePtrInput {
	return (*nodeRootVolumePtrType)(v)
}

func (*nodeRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRootVolume)(nil)).Elem()
}

func (i *nodeRootVolumePtrType) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return i.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (i *nodeRootVolumePtrType) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumePtrOutput)
}

type NodeRootVolumeOutput struct{ *pulumi.OutputState }

func (NodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRootVolume)(nil)).Elem()
}

func (o NodeRootVolumeOutput) ToNodeRootVolumeOutput() NodeRootVolumeOutput {
	return o
}

func (o NodeRootVolumeOutput) ToNodeRootVolumeOutputWithContext(ctx context.Context) NodeRootVolumeOutput {
	return o
}

func (o NodeRootVolumeOutput) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return o.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (o NodeRootVolumeOutput) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeRootVolume) *NodeRootVolume {
		return &v
	}).(NodeRootVolumePtrOutput)
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodeRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o NodeRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

// Specifies the size of a virtual space. Only an integer percentage is supported.
// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
// Changing this parameter will create a new resource.
func (o NodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the disk type.
// Changing this parameter will create a new resource.
func (o NodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodeRootVolumePtrOutput struct{ *pulumi.OutputState }

func (NodeRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRootVolume)(nil)).Elem()
}

func (o NodeRootVolumePtrOutput) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return o
}

func (o NodeRootVolumePtrOutput) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return o
}

func (o NodeRootVolumePtrOutput) Elem() NodeRootVolumeOutput {
	return o.ApplyT(func(v *NodeRootVolume) NodeRootVolume {
		if v != nil {
			return *v
		}
		var ret NodeRootVolume
		return ret
	}).(NodeRootVolumeOutput)
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
//
// Deprecated: use extend_params instead
func (o NodeRootVolumePtrOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.ExtendParam
	}).(pulumi.StringPtrOutput)
}

// Specifies the disk expansion parameters.
// Changing this parameter will create a new resource.
func (o NodeRootVolumePtrOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeRootVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendParams
	}).(pulumi.StringMapOutput)
}

func (o NodeRootVolumePtrOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.HwPassthrough
	}).(pulumi.BoolPtrOutput)
}

// Specifies the size of a virtual space. Only an integer percentage is supported.
// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
// Changing this parameter will create a new resource.
func (o NodeRootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the disk type.
// Changing this parameter will create a new resource.
func (o NodeRootVolumePtrOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Volumetype
	}).(pulumi.StringPtrOutput)
}

type NodeStorage struct {
	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups []NodeStorageGroup `pulumi:"groups"`
	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors []NodeStorageSelector `pulumi:"selectors"`
}

// NodeStorageInput is an input type that accepts NodeStorageArgs and NodeStorageOutput values.
// You can construct a concrete instance of `NodeStorageInput` via:
//
//	NodeStorageArgs{...}
type NodeStorageInput interface {
	pulumi.Input

	ToNodeStorageOutput() NodeStorageOutput
	ToNodeStorageOutputWithContext(context.Context) NodeStorageOutput
}

type NodeStorageArgs struct {
	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups NodeStorageGroupArrayInput `pulumi:"groups"`
	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors NodeStorageSelectorArrayInput `pulumi:"selectors"`
}

func (NodeStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorage)(nil)).Elem()
}

func (i NodeStorageArgs) ToNodeStorageOutput() NodeStorageOutput {
	return i.ToNodeStorageOutputWithContext(context.Background())
}

func (i NodeStorageArgs) ToNodeStorageOutputWithContext(ctx context.Context) NodeStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageOutput)
}

func (i NodeStorageArgs) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return i.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (i NodeStorageArgs) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageOutput).ToNodeStoragePtrOutputWithContext(ctx)
}

// NodeStoragePtrInput is an input type that accepts NodeStorageArgs, NodeStoragePtr and NodeStoragePtrOutput values.
// You can construct a concrete instance of `NodeStoragePtrInput` via:
//
//	        NodeStorageArgs{...}
//
//	or:
//
//	        nil
type NodeStoragePtrInput interface {
	pulumi.Input

	ToNodeStoragePtrOutput() NodeStoragePtrOutput
	ToNodeStoragePtrOutputWithContext(context.Context) NodeStoragePtrOutput
}

type nodeStoragePtrType NodeStorageArgs

func NodeStoragePtr(v *NodeStorageArgs) NodeStoragePtrInput {
	return (*nodeStoragePtrType)(v)
}

func (*nodeStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStorage)(nil)).Elem()
}

func (i *nodeStoragePtrType) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return i.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (i *nodeStoragePtrType) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStoragePtrOutput)
}

type NodeStorageOutput struct{ *pulumi.OutputState }

func (NodeStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorage)(nil)).Elem()
}

func (o NodeStorageOutput) ToNodeStorageOutput() NodeStorageOutput {
	return o
}

func (o NodeStorageOutput) ToNodeStorageOutputWithContext(ctx context.Context) NodeStorageOutput {
	return o
}

func (o NodeStorageOutput) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return o.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (o NodeStorageOutput) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeStorage) *NodeStorage {
		return &v
	}).(NodeStoragePtrOutput)
}

// Specifies the storage group consists of multiple storage devices.
// This is used to divide storage space. Structure is documented below.
// Changing this parameter will create a new resource.
func (o NodeStorageOutput) Groups() NodeStorageGroupArrayOutput {
	return o.ApplyT(func(v NodeStorage) []NodeStorageGroup { return v.Groups }).(NodeStorageGroupArrayOutput)
}

// Specifies the disk selection.
// Matched disks are managed according to match labels and storage type. Structure is documented below.
// Changing this parameter will create a new resource.
func (o NodeStorageOutput) Selectors() NodeStorageSelectorArrayOutput {
	return o.ApplyT(func(v NodeStorage) []NodeStorageSelector { return v.Selectors }).(NodeStorageSelectorArrayOutput)
}

type NodeStoragePtrOutput struct{ *pulumi.OutputState }

func (NodeStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStorage)(nil)).Elem()
}

func (o NodeStoragePtrOutput) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return o
}

func (o NodeStoragePtrOutput) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return o
}

func (o NodeStoragePtrOutput) Elem() NodeStorageOutput {
	return o.ApplyT(func(v *NodeStorage) NodeStorage {
		if v != nil {
			return *v
		}
		var ret NodeStorage
		return ret
	}).(NodeStorageOutput)
}

// Specifies the storage group consists of multiple storage devices.
// This is used to divide storage space. Structure is documented below.
// Changing this parameter will create a new resource.
func (o NodeStoragePtrOutput) Groups() NodeStorageGroupArrayOutput {
	return o.ApplyT(func(v *NodeStorage) []NodeStorageGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(NodeStorageGroupArrayOutput)
}

// Specifies the disk selection.
// Matched disks are managed according to match labels and storage type. Structure is documented below.
// Changing this parameter will create a new resource.
func (o NodeStoragePtrOutput) Selectors() NodeStorageSelectorArrayOutput {
	return o.ApplyT(func(v *NodeStorage) []NodeStorageSelector {
		if v == nil {
			return nil
		}
		return v.Selectors
	}).(NodeStorageSelectorArrayOutput)
}

type NodeStorageGroup struct {
	// Specifies the whether the storage space is for **kubernetes** and
	// **runtime** components. Only one group can be set to true. The default value is **false**.
	// Changing this parameter will create a new resource.
	CceManaged *bool `pulumi:"cceManaged"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name string `pulumi:"name"`
	// Specifies the list of names of seletors to match.
	// This parameter corresponds to name in `selectors`. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames []string `pulumi:"selectorNames"`
	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces []NodeStorageGroupVirtualSpace `pulumi:"virtualSpaces"`
}

// NodeStorageGroupInput is an input type that accepts NodeStorageGroupArgs and NodeStorageGroupOutput values.
// You can construct a concrete instance of `NodeStorageGroupInput` via:
//
//	NodeStorageGroupArgs{...}
type NodeStorageGroupInput interface {
	pulumi.Input

	ToNodeStorageGroupOutput() NodeStorageGroupOutput
	ToNodeStorageGroupOutputWithContext(context.Context) NodeStorageGroupOutput
}

type NodeStorageGroupArgs struct {
	// Specifies the whether the storage space is for **kubernetes** and
	// **runtime** components. Only one group can be set to true. The default value is **false**.
	// Changing this parameter will create a new resource.
	CceManaged pulumi.BoolPtrInput `pulumi:"cceManaged"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the list of names of seletors to match.
	// This parameter corresponds to name in `selectors`. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames pulumi.StringArrayInput `pulumi:"selectorNames"`
	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces NodeStorageGroupVirtualSpaceArrayInput `pulumi:"virtualSpaces"`
}

func (NodeStorageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroup)(nil)).Elem()
}

func (i NodeStorageGroupArgs) ToNodeStorageGroupOutput() NodeStorageGroupOutput {
	return i.ToNodeStorageGroupOutputWithContext(context.Background())
}

func (i NodeStorageGroupArgs) ToNodeStorageGroupOutputWithContext(ctx context.Context) NodeStorageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupOutput)
}

// NodeStorageGroupArrayInput is an input type that accepts NodeStorageGroupArray and NodeStorageGroupArrayOutput values.
// You can construct a concrete instance of `NodeStorageGroupArrayInput` via:
//
//	NodeStorageGroupArray{ NodeStorageGroupArgs{...} }
type NodeStorageGroupArrayInput interface {
	pulumi.Input

	ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput
	ToNodeStorageGroupArrayOutputWithContext(context.Context) NodeStorageGroupArrayOutput
}

type NodeStorageGroupArray []NodeStorageGroupInput

func (NodeStorageGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroup)(nil)).Elem()
}

func (i NodeStorageGroupArray) ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput {
	return i.ToNodeStorageGroupArrayOutputWithContext(context.Background())
}

func (i NodeStorageGroupArray) ToNodeStorageGroupArrayOutputWithContext(ctx context.Context) NodeStorageGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupArrayOutput)
}

type NodeStorageGroupOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroup)(nil)).Elem()
}

func (o NodeStorageGroupOutput) ToNodeStorageGroupOutput() NodeStorageGroupOutput {
	return o
}

func (o NodeStorageGroupOutput) ToNodeStorageGroupOutputWithContext(ctx context.Context) NodeStorageGroupOutput {
	return o
}

// Specifies the whether the storage space is for **kubernetes** and
// **runtime** components. Only one group can be set to true. The default value is **false**.
// Changing this parameter will create a new resource.
func (o NodeStorageGroupOutput) CceManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeStorageGroup) *bool { return v.CceManaged }).(pulumi.BoolPtrOutput)
}

// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
// and **user** are supported. Changing this parameter will create a new resource.
func (o NodeStorageGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the list of names of seletors to match.
// This parameter corresponds to name in `selectors`. A group can match multiple selectors,
// but a selector can match only one group. Changing this parameter will create a new resource.
func (o NodeStorageGroupOutput) SelectorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeStorageGroup) []string { return v.SelectorNames }).(pulumi.StringArrayOutput)
}

// Specifies the detailed management of space configuration in a group.
// Changing this parameter will create a new resource.
func (o NodeStorageGroupOutput) VirtualSpaces() NodeStorageGroupVirtualSpaceArrayOutput {
	return o.ApplyT(func(v NodeStorageGroup) []NodeStorageGroupVirtualSpace { return v.VirtualSpaces }).(NodeStorageGroupVirtualSpaceArrayOutput)
}

type NodeStorageGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroup)(nil)).Elem()
}

func (o NodeStorageGroupArrayOutput) ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput {
	return o
}

func (o NodeStorageGroupArrayOutput) ToNodeStorageGroupArrayOutputWithContext(ctx context.Context) NodeStorageGroupArrayOutput {
	return o
}

func (o NodeStorageGroupArrayOutput) Index(i pulumi.IntInput) NodeStorageGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageGroup {
		return vs[0].([]NodeStorageGroup)[vs[1].(int)]
	}).(NodeStorageGroupOutput)
}

type NodeStorageGroupVirtualSpace struct {
	// Specifies the LVM write mode, values can be **linear** and **striped**.
	// This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `pulumi:"lvmLvType"`
	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
	LvmPath *string `pulumi:"lvmPath"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name string `pulumi:"name"`
	// Specifies the LVM write mode, values can be **linear** and **striped**.
	// This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
	RuntimeLvType *string `pulumi:"runtimeLvType"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size string `pulumi:"size"`
}

// NodeStorageGroupVirtualSpaceInput is an input type that accepts NodeStorageGroupVirtualSpaceArgs and NodeStorageGroupVirtualSpaceOutput values.
// You can construct a concrete instance of `NodeStorageGroupVirtualSpaceInput` via:
//
//	NodeStorageGroupVirtualSpaceArgs{...}
type NodeStorageGroupVirtualSpaceInput interface {
	pulumi.Input

	ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput
	ToNodeStorageGroupVirtualSpaceOutputWithContext(context.Context) NodeStorageGroupVirtualSpaceOutput
}

type NodeStorageGroupVirtualSpaceArgs struct {
	// Specifies the LVM write mode, values can be **linear** and **striped**.
	// This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
	// a new resource.
	LvmLvType pulumi.StringPtrInput `pulumi:"lvmLvType"`
	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
	LvmPath pulumi.StringPtrInput `pulumi:"lvmPath"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the LVM write mode, values can be **linear** and **striped**.
	// This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
	RuntimeLvType pulumi.StringPtrInput `pulumi:"runtimeLvType"`
	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size pulumi.StringInput `pulumi:"size"`
}

func (NodeStorageGroupVirtualSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeStorageGroupVirtualSpaceArgs) ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput {
	return i.ToNodeStorageGroupVirtualSpaceOutputWithContext(context.Background())
}

func (i NodeStorageGroupVirtualSpaceArgs) ToNodeStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupVirtualSpaceOutput)
}

// NodeStorageGroupVirtualSpaceArrayInput is an input type that accepts NodeStorageGroupVirtualSpaceArray and NodeStorageGroupVirtualSpaceArrayOutput values.
// You can construct a concrete instance of `NodeStorageGroupVirtualSpaceArrayInput` via:
//
//	NodeStorageGroupVirtualSpaceArray{ NodeStorageGroupVirtualSpaceArgs{...} }
type NodeStorageGroupVirtualSpaceArrayInput interface {
	pulumi.Input

	ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput
	ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(context.Context) NodeStorageGroupVirtualSpaceArrayOutput
}

type NodeStorageGroupVirtualSpaceArray []NodeStorageGroupVirtualSpaceInput

func (NodeStorageGroupVirtualSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeStorageGroupVirtualSpaceArray) ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput {
	return i.ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(context.Background())
}

func (i NodeStorageGroupVirtualSpaceArray) ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupVirtualSpaceArrayOutput)
}

type NodeStorageGroupVirtualSpaceOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupVirtualSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeStorageGroupVirtualSpaceOutput) ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceOutput) ToNodeStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceOutput {
	return o
}

// Specifies the LVM write mode, values can be **linear** and **striped**.
// This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
// a new resource.
func (o NodeStorageGroupVirtualSpaceOutput) LvmLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.LvmLvType }).(pulumi.StringPtrOutput)
}

// Specifies the absolute path to which the disk is attached.
// This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
func (o NodeStorageGroupVirtualSpaceOutput) LvmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.LvmPath }).(pulumi.StringPtrOutput)
}

// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
// and **user** are supported. Changing this parameter will create a new resource.
func (o NodeStorageGroupVirtualSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the LVM write mode, values can be **linear** and **striped**.
// This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
func (o NodeStorageGroupVirtualSpaceOutput) RuntimeLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.RuntimeLvType }).(pulumi.StringPtrOutput)
}

// Specifies the size of a virtual space. Only an integer percentage is supported.
// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
// Changing this parameter will create a new resource.
func (o NodeStorageGroupVirtualSpaceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) string { return v.Size }).(pulumi.StringOutput)
}

type NodeStorageGroupVirtualSpaceArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupVirtualSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) Index(i pulumi.IntInput) NodeStorageGroupVirtualSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageGroupVirtualSpace {
		return vs[0].([]NodeStorageGroupVirtualSpace)[vs[1].(int)]
	}).(NodeStorageGroupVirtualSpaceOutput)
}

type NodeStorageSelector struct {
	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount *string `pulumi:"matchLabelCount"`
	// Specifies the cstomer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid *string `pulumi:"matchLabelMetadataCmkid"`
	// Specifies the disk encryption identifier.
	// Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted *string `pulumi:"matchLabelMetadataEncrypted"`
	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize *string `pulumi:"matchLabelSize"`
	// Specifies the EVS disk type. Currently,
	// **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType *string `pulumi:"matchLabelVolumeType"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name string `pulumi:"name"`
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
}

// NodeStorageSelectorInput is an input type that accepts NodeStorageSelectorArgs and NodeStorageSelectorOutput values.
// You can construct a concrete instance of `NodeStorageSelectorInput` via:
//
//	NodeStorageSelectorArgs{...}
type NodeStorageSelectorInput interface {
	pulumi.Input

	ToNodeStorageSelectorOutput() NodeStorageSelectorOutput
	ToNodeStorageSelectorOutputWithContext(context.Context) NodeStorageSelectorOutput
}

type NodeStorageSelectorArgs struct {
	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount pulumi.StringPtrInput `pulumi:"matchLabelCount"`
	// Specifies the cstomer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid pulumi.StringPtrInput `pulumi:"matchLabelMetadataCmkid"`
	// Specifies the disk encryption identifier.
	// Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted pulumi.StringPtrInput `pulumi:"matchLabelMetadataEncrypted"`
	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize pulumi.StringPtrInput `pulumi:"matchLabelSize"`
	// Specifies the EVS disk type. Currently,
	// **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType pulumi.StringPtrInput `pulumi:"matchLabelVolumeType"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodeStorageSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageSelector)(nil)).Elem()
}

func (i NodeStorageSelectorArgs) ToNodeStorageSelectorOutput() NodeStorageSelectorOutput {
	return i.ToNodeStorageSelectorOutputWithContext(context.Background())
}

func (i NodeStorageSelectorArgs) ToNodeStorageSelectorOutputWithContext(ctx context.Context) NodeStorageSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageSelectorOutput)
}

// NodeStorageSelectorArrayInput is an input type that accepts NodeStorageSelectorArray and NodeStorageSelectorArrayOutput values.
// You can construct a concrete instance of `NodeStorageSelectorArrayInput` via:
//
//	NodeStorageSelectorArray{ NodeStorageSelectorArgs{...} }
type NodeStorageSelectorArrayInput interface {
	pulumi.Input

	ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput
	ToNodeStorageSelectorArrayOutputWithContext(context.Context) NodeStorageSelectorArrayOutput
}

type NodeStorageSelectorArray []NodeStorageSelectorInput

func (NodeStorageSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageSelector)(nil)).Elem()
}

func (i NodeStorageSelectorArray) ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput {
	return i.ToNodeStorageSelectorArrayOutputWithContext(context.Background())
}

func (i NodeStorageSelectorArray) ToNodeStorageSelectorArrayOutputWithContext(ctx context.Context) NodeStorageSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageSelectorArrayOutput)
}

type NodeStorageSelectorOutput struct{ *pulumi.OutputState }

func (NodeStorageSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageSelector)(nil)).Elem()
}

func (o NodeStorageSelectorOutput) ToNodeStorageSelectorOutput() NodeStorageSelectorOutput {
	return o
}

func (o NodeStorageSelectorOutput) ToNodeStorageSelectorOutputWithContext(ctx context.Context) NodeStorageSelectorOutput {
	return o
}

// Specifies the number of disks to be selected. If omitted,
// all disks of this type are selected. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) MatchLabelCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelCount }).(pulumi.StringPtrOutput)
}

// Specifies the cstomer master key ID of an encrypted
// disk. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) MatchLabelMetadataCmkid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelMetadataCmkid }).(pulumi.StringPtrOutput)
}

// Specifies the disk encryption identifier.
// Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) MatchLabelMetadataEncrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelMetadataEncrypted }).(pulumi.StringPtrOutput)
}

// Specifies the matched disk size. If omitted,
// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) MatchLabelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelSize }).(pulumi.StringPtrOutput)
}

// Specifies the EVS disk type. Currently,
// **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
// Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) MatchLabelVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelVolumeType }).(pulumi.StringPtrOutput)
}

// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
// and **user** are supported. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageSelector) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
// The default value is **evs**. Changing this parameter will create a new resource.
func (o NodeStorageSelectorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodeStorageSelectorArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageSelector)(nil)).Elem()
}

func (o NodeStorageSelectorArrayOutput) ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput {
	return o
}

func (o NodeStorageSelectorArrayOutput) ToNodeStorageSelectorArrayOutputWithContext(ctx context.Context) NodeStorageSelectorArrayOutput {
	return o
}

func (o NodeStorageSelectorArrayOutput) Index(i pulumi.IntInput) NodeStorageSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageSelector {
		return vs[0].([]NodeStorageSelector)[vs[1].(int)]
	}).(NodeStorageSelectorOutput)
}

type NodeTaint struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect string `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key string `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//	NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

type NodeTaintArgs struct {
	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect pulumi.StringInput `pulumi:"effect"`
	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key pulumi.StringInput `pulumi:"key"`
	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//	NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
// Changing this parameter will create a new resource.
func (o NodeTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaint) string { return v.Effect }).(pulumi.StringOutput)
}

// A key must contain 1 to 63 characters starting with a letter or digit.
// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
// as the prefix of a key. Changing this parameter will create a new resource.
func (o NodeTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaint) string { return v.Key }).(pulumi.StringOutput)
}

// A value must start with a letter or digit and can contain a maximum of 63
// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
// create a new resource.
func (o NodeTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaint) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

type GetAddonTemplateSupportVersion struct {
	BareMetals      []string `pulumi:"bareMetals"`
	VirtualMachines []string `pulumi:"virtualMachines"`
}

// GetAddonTemplateSupportVersionInput is an input type that accepts GetAddonTemplateSupportVersionArgs and GetAddonTemplateSupportVersionOutput values.
// You can construct a concrete instance of `GetAddonTemplateSupportVersionInput` via:
//
//	GetAddonTemplateSupportVersionArgs{...}
type GetAddonTemplateSupportVersionInput interface {
	pulumi.Input

	ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput
	ToGetAddonTemplateSupportVersionOutputWithContext(context.Context) GetAddonTemplateSupportVersionOutput
}

type GetAddonTemplateSupportVersionArgs struct {
	BareMetals      pulumi.StringArrayInput `pulumi:"bareMetals"`
	VirtualMachines pulumi.StringArrayInput `pulumi:"virtualMachines"`
}

func (GetAddonTemplateSupportVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (i GetAddonTemplateSupportVersionArgs) ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput {
	return i.ToGetAddonTemplateSupportVersionOutputWithContext(context.Background())
}

func (i GetAddonTemplateSupportVersionArgs) ToGetAddonTemplateSupportVersionOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAddonTemplateSupportVersionOutput)
}

// GetAddonTemplateSupportVersionArrayInput is an input type that accepts GetAddonTemplateSupportVersionArray and GetAddonTemplateSupportVersionArrayOutput values.
// You can construct a concrete instance of `GetAddonTemplateSupportVersionArrayInput` via:
//
//	GetAddonTemplateSupportVersionArray{ GetAddonTemplateSupportVersionArgs{...} }
type GetAddonTemplateSupportVersionArrayInput interface {
	pulumi.Input

	ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput
	ToGetAddonTemplateSupportVersionArrayOutputWithContext(context.Context) GetAddonTemplateSupportVersionArrayOutput
}

type GetAddonTemplateSupportVersionArray []GetAddonTemplateSupportVersionInput

func (GetAddonTemplateSupportVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (i GetAddonTemplateSupportVersionArray) ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput {
	return i.ToGetAddonTemplateSupportVersionArrayOutputWithContext(context.Background())
}

func (i GetAddonTemplateSupportVersionArray) ToGetAddonTemplateSupportVersionArrayOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAddonTemplateSupportVersionArrayOutput)
}

type GetAddonTemplateSupportVersionOutput struct{ *pulumi.OutputState }

func (GetAddonTemplateSupportVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (o GetAddonTemplateSupportVersionOutput) ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput {
	return o
}

func (o GetAddonTemplateSupportVersionOutput) ToGetAddonTemplateSupportVersionOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionOutput {
	return o
}

func (o GetAddonTemplateSupportVersionOutput) BareMetals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAddonTemplateSupportVersion) []string { return v.BareMetals }).(pulumi.StringArrayOutput)
}

func (o GetAddonTemplateSupportVersionOutput) VirtualMachines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAddonTemplateSupportVersion) []string { return v.VirtualMachines }).(pulumi.StringArrayOutput)
}

type GetAddonTemplateSupportVersionArrayOutput struct{ *pulumi.OutputState }

func (GetAddonTemplateSupportVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (o GetAddonTemplateSupportVersionArrayOutput) ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput {
	return o
}

func (o GetAddonTemplateSupportVersionArrayOutput) ToGetAddonTemplateSupportVersionArrayOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionArrayOutput {
	return o
}

func (o GetAddonTemplateSupportVersionArrayOutput) Index(i pulumi.IntInput) GetAddonTemplateSupportVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAddonTemplateSupportVersion {
		return vs[0].([]GetAddonTemplateSupportVersion)[vs[1].(int)]
	}).(GetAddonTemplateSupportVersionOutput)
}

type GetClusterCertificateCluster struct {
	// The certificate data.
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	// Specifies the name of the cluster.
	Name string `pulumi:"name"`
	// The server IP address.
	Server string `pulumi:"server"`
}

// GetClusterCertificateClusterInput is an input type that accepts GetClusterCertificateClusterArgs and GetClusterCertificateClusterOutput values.
// You can construct a concrete instance of `GetClusterCertificateClusterInput` via:
//
//	GetClusterCertificateClusterArgs{...}
type GetClusterCertificateClusterInput interface {
	pulumi.Input

	ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput
	ToGetClusterCertificateClusterOutputWithContext(context.Context) GetClusterCertificateClusterOutput
}

type GetClusterCertificateClusterArgs struct {
	// The certificate data.
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	// Specifies the name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The server IP address.
	Server pulumi.StringInput `pulumi:"server"`
}

func (GetClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateCluster)(nil)).Elem()
}

func (i GetClusterCertificateClusterArgs) ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput {
	return i.ToGetClusterCertificateClusterOutputWithContext(context.Background())
}

func (i GetClusterCertificateClusterArgs) ToGetClusterCertificateClusterOutputWithContext(ctx context.Context) GetClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateClusterOutput)
}

// GetClusterCertificateClusterArrayInput is an input type that accepts GetClusterCertificateClusterArray and GetClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificateClusterArrayInput` via:
//
//	GetClusterCertificateClusterArray{ GetClusterCertificateClusterArgs{...} }
type GetClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput
	ToGetClusterCertificateClusterArrayOutputWithContext(context.Context) GetClusterCertificateClusterArrayOutput
}

type GetClusterCertificateClusterArray []GetClusterCertificateClusterInput

func (GetClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateCluster)(nil)).Elem()
}

func (i GetClusterCertificateClusterArray) ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput {
	return i.ToGetClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificateClusterArray) ToGetClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateClusterArrayOutput)
}

type GetClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateCluster)(nil)).Elem()
}

func (o GetClusterCertificateClusterOutput) ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput {
	return o
}

func (o GetClusterCertificateClusterOutput) ToGetClusterCertificateClusterOutputWithContext(ctx context.Context) GetClusterCertificateClusterOutput {
	return o
}

// The certificate data.
func (o GetClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

// Specifies the name of the cluster.
func (o GetClusterCertificateClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The server IP address.
func (o GetClusterCertificateClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.Server }).(pulumi.StringOutput)
}

type GetClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateCluster)(nil)).Elem()
}

func (o GetClusterCertificateClusterArrayOutput) ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClusterCertificateClusterArrayOutput) ToGetClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) GetClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificateCluster {
		return vs[0].([]GetClusterCertificateCluster)[vs[1].(int)]
	}).(GetClusterCertificateClusterOutput)
}

type GetClusterCertificateUser struct {
	// The client certificate data.
	ClientCertificateData string `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData string `pulumi:"clientKeyData"`
	// Specifies the name of the cluster.
	Name string `pulumi:"name"`
}

// GetClusterCertificateUserInput is an input type that accepts GetClusterCertificateUserArgs and GetClusterCertificateUserOutput values.
// You can construct a concrete instance of `GetClusterCertificateUserInput` via:
//
//	GetClusterCertificateUserArgs{...}
type GetClusterCertificateUserInput interface {
	pulumi.Input

	ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput
	ToGetClusterCertificateUserOutputWithContext(context.Context) GetClusterCertificateUserOutput
}

type GetClusterCertificateUserArgs struct {
	// The client certificate data.
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData pulumi.StringInput `pulumi:"clientKeyData"`
	// Specifies the name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateUser)(nil)).Elem()
}

func (i GetClusterCertificateUserArgs) ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput {
	return i.ToGetClusterCertificateUserOutputWithContext(context.Background())
}

func (i GetClusterCertificateUserArgs) ToGetClusterCertificateUserOutputWithContext(ctx context.Context) GetClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateUserOutput)
}

// GetClusterCertificateUserArrayInput is an input type that accepts GetClusterCertificateUserArray and GetClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificateUserArrayInput` via:
//
//	GetClusterCertificateUserArray{ GetClusterCertificateUserArgs{...} }
type GetClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput
	ToGetClusterCertificateUserArrayOutputWithContext(context.Context) GetClusterCertificateUserArrayOutput
}

type GetClusterCertificateUserArray []GetClusterCertificateUserInput

func (GetClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateUser)(nil)).Elem()
}

func (i GetClusterCertificateUserArray) ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput {
	return i.ToGetClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificateUserArray) ToGetClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateUserArrayOutput)
}

type GetClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateUser)(nil)).Elem()
}

func (o GetClusterCertificateUserOutput) ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput {
	return o
}

func (o GetClusterCertificateUserOutput) ToGetClusterCertificateUserOutputWithContext(ctx context.Context) GetClusterCertificateUserOutput {
	return o
}

// The client certificate data.
func (o GetClusterCertificateUserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

// The client key data.
func (o GetClusterCertificateUserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

// Specifies the name of the cluster.
func (o GetClusterCertificateUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateUser)(nil)).Elem()
}

func (o GetClusterCertificateUserArrayOutput) ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput {
	return o
}

func (o GetClusterCertificateUserArrayOutput) ToGetClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClusterCertificateUserArrayOutput {
	return o
}

func (o GetClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) GetClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificateUser {
		return vs[0].([]GetClusterCertificateUser)[vs[1].(int)]
	}).(GetClusterCertificateUserOutput)
}

type GetClusterEndpoint struct {
	// The type of the cluster access address.
	// + **Internal**: The user's subnet access address.
	// + **External**: The public network access address.
	Type string `pulumi:"type"`
	// The URL of the cluster access address.
	Url string `pulumi:"url"`
}

// GetClusterEndpointInput is an input type that accepts GetClusterEndpointArgs and GetClusterEndpointOutput values.
// You can construct a concrete instance of `GetClusterEndpointInput` via:
//
//	GetClusterEndpointArgs{...}
type GetClusterEndpointInput interface {
	pulumi.Input

	ToGetClusterEndpointOutput() GetClusterEndpointOutput
	ToGetClusterEndpointOutputWithContext(context.Context) GetClusterEndpointOutput
}

type GetClusterEndpointArgs struct {
	// The type of the cluster access address.
	// + **Internal**: The user's subnet access address.
	// + **External**: The public network access address.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the cluster access address.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterEndpoint)(nil)).Elem()
}

func (i GetClusterEndpointArgs) ToGetClusterEndpointOutput() GetClusterEndpointOutput {
	return i.ToGetClusterEndpointOutputWithContext(context.Background())
}

func (i GetClusterEndpointArgs) ToGetClusterEndpointOutputWithContext(ctx context.Context) GetClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterEndpointOutput)
}

// GetClusterEndpointArrayInput is an input type that accepts GetClusterEndpointArray and GetClusterEndpointArrayOutput values.
// You can construct a concrete instance of `GetClusterEndpointArrayInput` via:
//
//	GetClusterEndpointArray{ GetClusterEndpointArgs{...} }
type GetClusterEndpointArrayInput interface {
	pulumi.Input

	ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput
	ToGetClusterEndpointArrayOutputWithContext(context.Context) GetClusterEndpointArrayOutput
}

type GetClusterEndpointArray []GetClusterEndpointInput

func (GetClusterEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterEndpoint)(nil)).Elem()
}

func (i GetClusterEndpointArray) ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput {
	return i.ToGetClusterEndpointArrayOutputWithContext(context.Background())
}

func (i GetClusterEndpointArray) ToGetClusterEndpointArrayOutputWithContext(ctx context.Context) GetClusterEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterEndpointArrayOutput)
}

type GetClusterEndpointOutput struct{ *pulumi.OutputState }

func (GetClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterEndpoint)(nil)).Elem()
}

func (o GetClusterEndpointOutput) ToGetClusterEndpointOutput() GetClusterEndpointOutput {
	return o
}

func (o GetClusterEndpointOutput) ToGetClusterEndpointOutputWithContext(ctx context.Context) GetClusterEndpointOutput {
	return o
}

// The type of the cluster access address.
// + **Internal**: The user's subnet access address.
// + **External**: The public network access address.
func (o GetClusterEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the cluster access address.
func (o GetClusterEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type GetClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterEndpoint)(nil)).Elem()
}

func (o GetClusterEndpointArrayOutput) ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput {
	return o
}

func (o GetClusterEndpointArrayOutput) ToGetClusterEndpointArrayOutputWithContext(ctx context.Context) GetClusterEndpointArrayOutput {
	return o
}

func (o GetClusterEndpointArrayOutput) Index(i pulumi.IntInput) GetClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterEndpoint {
		return vs[0].([]GetClusterEndpoint)[vs[1].(int)]
	}).(GetClusterEndpointOutput)
}

type GetClusterMaster struct {
	// The availability zone (AZ) of the master node.
	AvailabilityZone string `pulumi:"availabilityZone"`
}

// GetClusterMasterInput is an input type that accepts GetClusterMasterArgs and GetClusterMasterOutput values.
// You can construct a concrete instance of `GetClusterMasterInput` via:
//
//	GetClusterMasterArgs{...}
type GetClusterMasterInput interface {
	pulumi.Input

	ToGetClusterMasterOutput() GetClusterMasterOutput
	ToGetClusterMasterOutputWithContext(context.Context) GetClusterMasterOutput
}

type GetClusterMasterArgs struct {
	// The availability zone (AZ) of the master node.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
}

func (GetClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaster)(nil)).Elem()
}

func (i GetClusterMasterArgs) ToGetClusterMasterOutput() GetClusterMasterOutput {
	return i.ToGetClusterMasterOutputWithContext(context.Background())
}

func (i GetClusterMasterArgs) ToGetClusterMasterOutputWithContext(ctx context.Context) GetClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMasterOutput)
}

// GetClusterMasterArrayInput is an input type that accepts GetClusterMasterArray and GetClusterMasterArrayOutput values.
// You can construct a concrete instance of `GetClusterMasterArrayInput` via:
//
//	GetClusterMasterArray{ GetClusterMasterArgs{...} }
type GetClusterMasterArrayInput interface {
	pulumi.Input

	ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput
	ToGetClusterMasterArrayOutputWithContext(context.Context) GetClusterMasterArrayOutput
}

type GetClusterMasterArray []GetClusterMasterInput

func (GetClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaster)(nil)).Elem()
}

func (i GetClusterMasterArray) ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput {
	return i.ToGetClusterMasterArrayOutputWithContext(context.Background())
}

func (i GetClusterMasterArray) ToGetClusterMasterArrayOutputWithContext(ctx context.Context) GetClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMasterArrayOutput)
}

type GetClusterMasterOutput struct{ *pulumi.OutputState }

func (GetClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaster)(nil)).Elem()
}

func (o GetClusterMasterOutput) ToGetClusterMasterOutput() GetClusterMasterOutput {
	return o
}

func (o GetClusterMasterOutput) ToGetClusterMasterOutputWithContext(ctx context.Context) GetClusterMasterOutput {
	return o
}

// The availability zone (AZ) of the master node.
func (o GetClusterMasterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaster) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

type GetClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaster)(nil)).Elem()
}

func (o GetClusterMasterArrayOutput) ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput {
	return o
}

func (o GetClusterMasterArrayOutput) ToGetClusterMasterArrayOutputWithContext(ctx context.Context) GetClusterMasterArrayOutput {
	return o
}

func (o GetClusterMasterArrayOutput) Index(i pulumi.IntInput) GetClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterMaster {
		return vs[0].([]GetClusterMaster)[vs[1].(int)]
	}).(GetClusterMasterOutput)
}

type GetClustersCluster struct {
	// The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
	AuthenticationMode string `pulumi:"authenticationMode"`
	// The charging mode of the cluster.
	BillingMode int `pulumi:"billingMode"`
	// The certificate clusters. Structure is documented below.
	CertificateClusters []GetClustersClusterCertificateCluster `pulumi:"certificateClusters"`
	// The certificate users. Structure is documented below.
	CertificateUsers []GetClustersClusterCertificateUser `pulumi:"certificateUsers"`
	// Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
	ClusterType string `pulumi:"clusterType"`
	// The version of the cluster.
	ClusterVersion string `pulumi:"clusterVersion"`
	// The container network segment.
	ContainerNetworkCidr string `pulumi:"containerNetworkCidr"`
	// The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
	ContainerNetworkType string `pulumi:"containerNetworkType"`
	// The description of the cluster.
	Description string `pulumi:"description"`
	// The access addresses of kube-apiserver in the cluster. Structure is documented below.
	Endpoints []GetClustersClusterEndpoint `pulumi:"endpoints"`
	// The ENI network segment.
	EniSubnetCidr string `pulumi:"eniSubnetCidr"`
	// The ENI subnet ID.
	EniSubnetId string `pulumi:"eniSubnetId"`
	// Specifies the enterprise project ID of the cluster.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The specification of the cluster.
	FlavorId string `pulumi:"flavorId"`
	// The ID of the cluster.
	Id string `pulumi:"id"`
	// The raw Kubernetes config to be used by kubectl and other compatible tools.
	KubeConfigRaw string `pulumi:"kubeConfigRaw"`
	// The advanced configuration of master nodes.
	Masters []GetClustersClusterMaster `pulumi:"masters"`
	// Specifies the name of the cluster.
	Name string `pulumi:"name"`
	// The security group ID of the cluster.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The service network segment.
	ServiceNetworkCidr string `pulumi:"serviceNetworkCidr"`
	// Specifies the status of the cluster.
	Status string `pulumi:"status"`
	// The ID of the subnet used to create the node.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the VPC ID to which the cluster belongs.
	VpcId string `pulumi:"vpcId"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	// The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
	AuthenticationMode pulumi.StringInput `pulumi:"authenticationMode"`
	// The charging mode of the cluster.
	BillingMode pulumi.IntInput `pulumi:"billingMode"`
	// The certificate clusters. Structure is documented below.
	CertificateClusters GetClustersClusterCertificateClusterArrayInput `pulumi:"certificateClusters"`
	// The certificate users. Structure is documented below.
	CertificateUsers GetClustersClusterCertificateUserArrayInput `pulumi:"certificateUsers"`
	// Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
	ClusterType pulumi.StringInput `pulumi:"clusterType"`
	// The version of the cluster.
	ClusterVersion pulumi.StringInput `pulumi:"clusterVersion"`
	// The container network segment.
	ContainerNetworkCidr pulumi.StringInput `pulumi:"containerNetworkCidr"`
	// The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
	ContainerNetworkType pulumi.StringInput `pulumi:"containerNetworkType"`
	// The description of the cluster.
	Description pulumi.StringInput `pulumi:"description"`
	// The access addresses of kube-apiserver in the cluster. Structure is documented below.
	Endpoints GetClustersClusterEndpointArrayInput `pulumi:"endpoints"`
	// The ENI network segment.
	EniSubnetCidr pulumi.StringInput `pulumi:"eniSubnetCidr"`
	// The ENI subnet ID.
	EniSubnetId pulumi.StringInput `pulumi:"eniSubnetId"`
	// Specifies the enterprise project ID of the cluster.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The specification of the cluster.
	FlavorId pulumi.StringInput `pulumi:"flavorId"`
	// The ID of the cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// The raw Kubernetes config to be used by kubectl and other compatible tools.
	KubeConfigRaw pulumi.StringInput `pulumi:"kubeConfigRaw"`
	// The advanced configuration of master nodes.
	Masters GetClustersClusterMasterArrayInput `pulumi:"masters"`
	// Specifies the name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The security group ID of the cluster.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The service network segment.
	ServiceNetworkCidr pulumi.StringInput `pulumi:"serviceNetworkCidr"`
	// Specifies the status of the cluster.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the subnet used to create the node.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Specifies the VPC ID to which the cluster belongs.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

// The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
func (o GetClustersClusterOutput) AuthenticationMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.AuthenticationMode }).(pulumi.StringOutput)
}

// The charging mode of the cluster.
func (o GetClustersClusterOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetClustersCluster) int { return v.BillingMode }).(pulumi.IntOutput)
}

// The certificate clusters. Structure is documented below.
func (o GetClustersClusterOutput) CertificateClusters() GetClustersClusterCertificateClusterArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterCertificateCluster { return v.CertificateClusters }).(GetClustersClusterCertificateClusterArrayOutput)
}

// The certificate users. Structure is documented below.
func (o GetClustersClusterOutput) CertificateUsers() GetClustersClusterCertificateUserArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterCertificateUser { return v.CertificateUsers }).(GetClustersClusterCertificateUserArrayOutput)
}

// Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
func (o GetClustersClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterType }).(pulumi.StringOutput)
}

// The version of the cluster.
func (o GetClustersClusterOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// The container network segment.
func (o GetClustersClusterOutput) ContainerNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ContainerNetworkCidr }).(pulumi.StringOutput)
}

// The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
func (o GetClustersClusterOutput) ContainerNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ContainerNetworkType }).(pulumi.StringOutput)
}

// The description of the cluster.
func (o GetClustersClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Description }).(pulumi.StringOutput)
}

// The access addresses of kube-apiserver in the cluster. Structure is documented below.
func (o GetClustersClusterOutput) Endpoints() GetClustersClusterEndpointArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterEndpoint { return v.Endpoints }).(GetClustersClusterEndpointArrayOutput)
}

// The ENI network segment.
func (o GetClustersClusterOutput) EniSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EniSubnetCidr }).(pulumi.StringOutput)
}

// The ENI subnet ID.
func (o GetClustersClusterOutput) EniSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EniSubnetId }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID of the cluster.
func (o GetClustersClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The specification of the cluster.
func (o GetClustersClusterOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.FlavorId }).(pulumi.StringOutput)
}

// The ID of the cluster.
func (o GetClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The raw Kubernetes config to be used by kubectl and other compatible tools.
func (o GetClustersClusterOutput) KubeConfigRaw() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.KubeConfigRaw }).(pulumi.StringOutput)
}

// The advanced configuration of master nodes.
func (o GetClustersClusterOutput) Masters() GetClustersClusterMasterArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterMaster { return v.Masters }).(GetClustersClusterMasterArrayOutput)
}

// Specifies the name of the cluster.
func (o GetClustersClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The security group ID of the cluster.
func (o GetClustersClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The service network segment.
func (o GetClustersClusterOutput) ServiceNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ServiceNetworkCidr }).(pulumi.StringOutput)
}

// Specifies the status of the cluster.
func (o GetClustersClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subnet used to create the node.
func (o GetClustersClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the VPC ID to which the cluster belongs.
func (o GetClustersClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetClustersClusterCertificateCluster struct {
	// The certificate data.
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	// Specifies the name of the cluster.
	Name string `pulumi:"name"`
	// The server IP address.
	Server string `pulumi:"server"`
}

// GetClustersClusterCertificateClusterInput is an input type that accepts GetClustersClusterCertificateClusterArgs and GetClustersClusterCertificateClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateClusterInput` via:
//
//	GetClustersClusterCertificateClusterArgs{...}
type GetClustersClusterCertificateClusterInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput
	ToGetClustersClusterCertificateClusterOutputWithContext(context.Context) GetClustersClusterCertificateClusterOutput
}

type GetClustersClusterCertificateClusterArgs struct {
	// The certificate data.
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	// Specifies the name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The server IP address.
	Server pulumi.StringInput `pulumi:"server"`
}

func (GetClustersClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (i GetClustersClusterCertificateClusterArgs) ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput {
	return i.ToGetClustersClusterCertificateClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateClusterArgs) ToGetClustersClusterCertificateClusterOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateClusterOutput)
}

// GetClustersClusterCertificateClusterArrayInput is an input type that accepts GetClustersClusterCertificateClusterArray and GetClustersClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateClusterArrayInput` via:
//
//	GetClustersClusterCertificateClusterArray{ GetClustersClusterCertificateClusterArgs{...} }
type GetClustersClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput
	ToGetClustersClusterCertificateClusterArrayOutputWithContext(context.Context) GetClustersClusterCertificateClusterArrayOutput
}

type GetClustersClusterCertificateClusterArray []GetClustersClusterCertificateClusterInput

func (GetClustersClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (i GetClustersClusterCertificateClusterArray) ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput {
	return i.ToGetClustersClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateClusterArray) ToGetClustersClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateClusterArrayOutput)
}

type GetClustersClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (o GetClustersClusterCertificateClusterOutput) ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput {
	return o
}

func (o GetClustersClusterCertificateClusterOutput) ToGetClustersClusterCertificateClusterOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterOutput {
	return o
}

// The certificate data.
func (o GetClustersClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

// Specifies the name of the cluster.
func (o GetClustersClusterCertificateClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The server IP address.
func (o GetClustersClusterCertificateClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.Server }).(pulumi.StringOutput)
}

type GetClustersClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (o GetClustersClusterCertificateClusterArrayOutput) ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClustersClusterCertificateClusterArrayOutput) ToGetClustersClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClustersClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterCertificateCluster {
		return vs[0].([]GetClustersClusterCertificateCluster)[vs[1].(int)]
	}).(GetClustersClusterCertificateClusterOutput)
}

type GetClustersClusterCertificateUser struct {
	// The client certificate data.
	ClientCertificateData string `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData string `pulumi:"clientKeyData"`
	// Specifies the name of the cluster.
	Name string `pulumi:"name"`
}

// GetClustersClusterCertificateUserInput is an input type that accepts GetClustersClusterCertificateUserArgs and GetClustersClusterCertificateUserOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateUserInput` via:
//
//	GetClustersClusterCertificateUserArgs{...}
type GetClustersClusterCertificateUserInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput
	ToGetClustersClusterCertificateUserOutputWithContext(context.Context) GetClustersClusterCertificateUserOutput
}

type GetClustersClusterCertificateUserArgs struct {
	// The client certificate data.
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	// The client key data.
	ClientKeyData pulumi.StringInput `pulumi:"clientKeyData"`
	// Specifies the name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClustersClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateUser)(nil)).Elem()
}

func (i GetClustersClusterCertificateUserArgs) ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput {
	return i.ToGetClustersClusterCertificateUserOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateUserArgs) ToGetClustersClusterCertificateUserOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateUserOutput)
}

// GetClustersClusterCertificateUserArrayInput is an input type that accepts GetClustersClusterCertificateUserArray and GetClustersClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateUserArrayInput` via:
//
//	GetClustersClusterCertificateUserArray{ GetClustersClusterCertificateUserArgs{...} }
type GetClustersClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput
	ToGetClustersClusterCertificateUserArrayOutputWithContext(context.Context) GetClustersClusterCertificateUserArrayOutput
}

type GetClustersClusterCertificateUserArray []GetClustersClusterCertificateUserInput

func (GetClustersClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateUser)(nil)).Elem()
}

func (i GetClustersClusterCertificateUserArray) ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput {
	return i.ToGetClustersClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateUserArray) ToGetClustersClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateUserArrayOutput)
}

type GetClustersClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateUser)(nil)).Elem()
}

func (o GetClustersClusterCertificateUserOutput) ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput {
	return o
}

func (o GetClustersClusterCertificateUserOutput) ToGetClustersClusterCertificateUserOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserOutput {
	return o
}

// The client certificate data.
func (o GetClustersClusterCertificateUserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

// The client key data.
func (o GetClustersClusterCertificateUserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

// Specifies the name of the cluster.
func (o GetClustersClusterCertificateUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateUser)(nil)).Elem()
}

func (o GetClustersClusterCertificateUserArrayOutput) ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput {
	return o
}

func (o GetClustersClusterCertificateUserArrayOutput) ToGetClustersClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserArrayOutput {
	return o
}

func (o GetClustersClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) GetClustersClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterCertificateUser {
		return vs[0].([]GetClustersClusterCertificateUser)[vs[1].(int)]
	}).(GetClustersClusterCertificateUserOutput)
}

type GetClustersClusterEndpoint struct {
	// The type of the cluster access address.
	// + **Internal**: The user's subnet access address.
	// + **External**: The public network access address.
	Type string `pulumi:"type"`
	// The URL of the cluster access address.
	Url string `pulumi:"url"`
}

// GetClustersClusterEndpointInput is an input type that accepts GetClustersClusterEndpointArgs and GetClustersClusterEndpointOutput values.
// You can construct a concrete instance of `GetClustersClusterEndpointInput` via:
//
//	GetClustersClusterEndpointArgs{...}
type GetClustersClusterEndpointInput interface {
	pulumi.Input

	ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput
	ToGetClustersClusterEndpointOutputWithContext(context.Context) GetClustersClusterEndpointOutput
}

type GetClustersClusterEndpointArgs struct {
	// The type of the cluster access address.
	// + **Internal**: The user's subnet access address.
	// + **External**: The public network access address.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the cluster access address.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetClustersClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterEndpoint)(nil)).Elem()
}

func (i GetClustersClusterEndpointArgs) ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput {
	return i.ToGetClustersClusterEndpointOutputWithContext(context.Background())
}

func (i GetClustersClusterEndpointArgs) ToGetClustersClusterEndpointOutputWithContext(ctx context.Context) GetClustersClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterEndpointOutput)
}

// GetClustersClusterEndpointArrayInput is an input type that accepts GetClustersClusterEndpointArray and GetClustersClusterEndpointArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterEndpointArrayInput` via:
//
//	GetClustersClusterEndpointArray{ GetClustersClusterEndpointArgs{...} }
type GetClustersClusterEndpointArrayInput interface {
	pulumi.Input

	ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput
	ToGetClustersClusterEndpointArrayOutputWithContext(context.Context) GetClustersClusterEndpointArrayOutput
}

type GetClustersClusterEndpointArray []GetClustersClusterEndpointInput

func (GetClustersClusterEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterEndpoint)(nil)).Elem()
}

func (i GetClustersClusterEndpointArray) ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput {
	return i.ToGetClustersClusterEndpointArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterEndpointArray) ToGetClustersClusterEndpointArrayOutputWithContext(ctx context.Context) GetClustersClusterEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterEndpointArrayOutput)
}

type GetClustersClusterEndpointOutput struct{ *pulumi.OutputState }

func (GetClustersClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterEndpoint)(nil)).Elem()
}

func (o GetClustersClusterEndpointOutput) ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput {
	return o
}

func (o GetClustersClusterEndpointOutput) ToGetClustersClusterEndpointOutputWithContext(ctx context.Context) GetClustersClusterEndpointOutput {
	return o
}

// The type of the cluster access address.
// + **Internal**: The user's subnet access address.
// + **External**: The public network access address.
func (o GetClustersClusterEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the cluster access address.
func (o GetClustersClusterEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type GetClustersClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterEndpoint)(nil)).Elem()
}

func (o GetClustersClusterEndpointArrayOutput) ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput {
	return o
}

func (o GetClustersClusterEndpointArrayOutput) ToGetClustersClusterEndpointArrayOutputWithContext(ctx context.Context) GetClustersClusterEndpointArrayOutput {
	return o
}

func (o GetClustersClusterEndpointArrayOutput) Index(i pulumi.IntInput) GetClustersClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterEndpoint {
		return vs[0].([]GetClustersClusterEndpoint)[vs[1].(int)]
	}).(GetClustersClusterEndpointOutput)
}

type GetClustersClusterMaster struct {
	AvailabilityZone string `pulumi:"availabilityZone"`
}

// GetClustersClusterMasterInput is an input type that accepts GetClustersClusterMasterArgs and GetClustersClusterMasterOutput values.
// You can construct a concrete instance of `GetClustersClusterMasterInput` via:
//
//	GetClustersClusterMasterArgs{...}
type GetClustersClusterMasterInput interface {
	pulumi.Input

	ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput
	ToGetClustersClusterMasterOutputWithContext(context.Context) GetClustersClusterMasterOutput
}

type GetClustersClusterMasterArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
}

func (GetClustersClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaster)(nil)).Elem()
}

func (i GetClustersClusterMasterArgs) ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput {
	return i.ToGetClustersClusterMasterOutputWithContext(context.Background())
}

func (i GetClustersClusterMasterArgs) ToGetClustersClusterMasterOutputWithContext(ctx context.Context) GetClustersClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMasterOutput)
}

// GetClustersClusterMasterArrayInput is an input type that accepts GetClustersClusterMasterArray and GetClustersClusterMasterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterMasterArrayInput` via:
//
//	GetClustersClusterMasterArray{ GetClustersClusterMasterArgs{...} }
type GetClustersClusterMasterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput
	ToGetClustersClusterMasterArrayOutputWithContext(context.Context) GetClustersClusterMasterArrayOutput
}

type GetClustersClusterMasterArray []GetClustersClusterMasterInput

func (GetClustersClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaster)(nil)).Elem()
}

func (i GetClustersClusterMasterArray) ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput {
	return i.ToGetClustersClusterMasterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterMasterArray) ToGetClustersClusterMasterArrayOutputWithContext(ctx context.Context) GetClustersClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMasterArrayOutput)
}

type GetClustersClusterMasterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaster)(nil)).Elem()
}

func (o GetClustersClusterMasterOutput) ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput {
	return o
}

func (o GetClustersClusterMasterOutput) ToGetClustersClusterMasterOutputWithContext(ctx context.Context) GetClustersClusterMasterOutput {
	return o
}

func (o GetClustersClusterMasterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterMaster) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

type GetClustersClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaster)(nil)).Elem()
}

func (o GetClustersClusterMasterArrayOutput) ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput {
	return o
}

func (o GetClustersClusterMasterArrayOutput) ToGetClustersClusterMasterArrayOutputWithContext(ctx context.Context) GetClustersClusterMasterArrayOutput {
	return o
}

func (o GetClustersClusterMasterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterMaster {
		return vs[0].([]GetClustersClusterMaster)[vs[1].(int)]
	}).(GetClustersClusterMasterOutput)
}

type GetNodeDataVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodeDataVolumeInput is an input type that accepts GetNodeDataVolumeArgs and GetNodeDataVolumeOutput values.
// You can construct a concrete instance of `GetNodeDataVolumeInput` via:
//
//	GetNodeDataVolumeArgs{...}
type GetNodeDataVolumeInput interface {
	pulumi.Input

	ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput
	ToGetNodeDataVolumeOutputWithContext(context.Context) GetNodeDataVolumeOutput
}

type GetNodeDataVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDataVolume)(nil)).Elem()
}

func (i GetNodeDataVolumeArgs) ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput {
	return i.ToGetNodeDataVolumeOutputWithContext(context.Background())
}

func (i GetNodeDataVolumeArgs) ToGetNodeDataVolumeOutputWithContext(ctx context.Context) GetNodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeDataVolumeOutput)
}

// GetNodeDataVolumeArrayInput is an input type that accepts GetNodeDataVolumeArray and GetNodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodeDataVolumeArrayInput` via:
//
//	GetNodeDataVolumeArray{ GetNodeDataVolumeArgs{...} }
type GetNodeDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput
	ToGetNodeDataVolumeArrayOutputWithContext(context.Context) GetNodeDataVolumeArrayOutput
}

type GetNodeDataVolumeArray []GetNodeDataVolumeInput

func (GetNodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeDataVolume)(nil)).Elem()
}

func (i GetNodeDataVolumeArray) ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput {
	return i.ToGetNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodeDataVolumeArray) ToGetNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeDataVolumeArrayOutput)
}

type GetNodeDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDataVolume)(nil)).Elem()
}

func (o GetNodeDataVolumeOutput) ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput {
	return o
}

func (o GetNodeDataVolumeOutput) ToGetNodeDataVolumeOutputWithContext(ctx context.Context) GetNodeDataVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeDataVolume)(nil)).Elem()
}

func (o GetNodeDataVolumeArrayOutput) ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodeDataVolumeArrayOutput) ToGetNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodeDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeDataVolume {
		return vs[0].([]GetNodeDataVolume)[vs[1].(int)]
	}).(GetNodeDataVolumeOutput)
}

type GetNodePoolDataVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodePoolDataVolumeInput is an input type that accepts GetNodePoolDataVolumeArgs and GetNodePoolDataVolumeOutput values.
// You can construct a concrete instance of `GetNodePoolDataVolumeInput` via:
//
//	GetNodePoolDataVolumeArgs{...}
type GetNodePoolDataVolumeInput interface {
	pulumi.Input

	ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput
	ToGetNodePoolDataVolumeOutputWithContext(context.Context) GetNodePoolDataVolumeOutput
}

type GetNodePoolDataVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodePoolDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolDataVolume)(nil)).Elem()
}

func (i GetNodePoolDataVolumeArgs) ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput {
	return i.ToGetNodePoolDataVolumeOutputWithContext(context.Background())
}

func (i GetNodePoolDataVolumeArgs) ToGetNodePoolDataVolumeOutputWithContext(ctx context.Context) GetNodePoolDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolDataVolumeOutput)
}

// GetNodePoolDataVolumeArrayInput is an input type that accepts GetNodePoolDataVolumeArray and GetNodePoolDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodePoolDataVolumeArrayInput` via:
//
//	GetNodePoolDataVolumeArray{ GetNodePoolDataVolumeArgs{...} }
type GetNodePoolDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput
	ToGetNodePoolDataVolumeArrayOutputWithContext(context.Context) GetNodePoolDataVolumeArrayOutput
}

type GetNodePoolDataVolumeArray []GetNodePoolDataVolumeInput

func (GetNodePoolDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolDataVolume)(nil)).Elem()
}

func (i GetNodePoolDataVolumeArray) ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput {
	return i.ToGetNodePoolDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodePoolDataVolumeArray) ToGetNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolDataVolumeArrayOutput)
}

type GetNodePoolDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodePoolDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolDataVolume)(nil)).Elem()
}

func (o GetNodePoolDataVolumeOutput) ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput {
	return o
}

func (o GetNodePoolDataVolumeOutput) ToGetNodePoolDataVolumeOutputWithContext(ctx context.Context) GetNodePoolDataVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodePoolDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodePoolDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodePoolDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodePoolDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolDataVolume)(nil)).Elem()
}

func (o GetNodePoolDataVolumeArrayOutput) ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput {
	return o
}

func (o GetNodePoolDataVolumeArrayOutput) ToGetNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolDataVolumeArrayOutput {
	return o
}

func (o GetNodePoolDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodePoolDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolDataVolume {
		return vs[0].([]GetNodePoolDataVolume)[vs[1].(int)]
	}).(GetNodePoolDataVolumeOutput)
}

type GetNodePoolRootVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodePoolRootVolumeInput is an input type that accepts GetNodePoolRootVolumeArgs and GetNodePoolRootVolumeOutput values.
// You can construct a concrete instance of `GetNodePoolRootVolumeInput` via:
//
//	GetNodePoolRootVolumeArgs{...}
type GetNodePoolRootVolumeInput interface {
	pulumi.Input

	ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput
	ToGetNodePoolRootVolumeOutputWithContext(context.Context) GetNodePoolRootVolumeOutput
}

type GetNodePoolRootVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodePoolRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolRootVolume)(nil)).Elem()
}

func (i GetNodePoolRootVolumeArgs) ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput {
	return i.ToGetNodePoolRootVolumeOutputWithContext(context.Background())
}

func (i GetNodePoolRootVolumeArgs) ToGetNodePoolRootVolumeOutputWithContext(ctx context.Context) GetNodePoolRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolRootVolumeOutput)
}

// GetNodePoolRootVolumeArrayInput is an input type that accepts GetNodePoolRootVolumeArray and GetNodePoolRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodePoolRootVolumeArrayInput` via:
//
//	GetNodePoolRootVolumeArray{ GetNodePoolRootVolumeArgs{...} }
type GetNodePoolRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput
	ToGetNodePoolRootVolumeArrayOutputWithContext(context.Context) GetNodePoolRootVolumeArrayOutput
}

type GetNodePoolRootVolumeArray []GetNodePoolRootVolumeInput

func (GetNodePoolRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolRootVolume)(nil)).Elem()
}

func (i GetNodePoolRootVolumeArray) ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput {
	return i.ToGetNodePoolRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodePoolRootVolumeArray) ToGetNodePoolRootVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolRootVolumeArrayOutput)
}

type GetNodePoolRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodePoolRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolRootVolume)(nil)).Elem()
}

func (o GetNodePoolRootVolumeOutput) ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput {
	return o
}

func (o GetNodePoolRootVolumeOutput) ToGetNodePoolRootVolumeOutputWithContext(ctx context.Context) GetNodePoolRootVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodePoolRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodePoolRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodePoolRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodePoolRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolRootVolume)(nil)).Elem()
}

func (o GetNodePoolRootVolumeArrayOutput) ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput {
	return o
}

func (o GetNodePoolRootVolumeArrayOutput) ToGetNodePoolRootVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolRootVolumeArrayOutput {
	return o
}

func (o GetNodePoolRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodePoolRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolRootVolume {
		return vs[0].([]GetNodePoolRootVolume)[vs[1].(int)]
	}).(GetNodePoolRootVolumeOutput)
}

type GetNodeRootVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodeRootVolumeInput is an input type that accepts GetNodeRootVolumeArgs and GetNodeRootVolumeOutput values.
// You can construct a concrete instance of `GetNodeRootVolumeInput` via:
//
//	GetNodeRootVolumeArgs{...}
type GetNodeRootVolumeInput interface {
	pulumi.Input

	ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput
	ToGetNodeRootVolumeOutputWithContext(context.Context) GetNodeRootVolumeOutput
}

type GetNodeRootVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeRootVolume)(nil)).Elem()
}

func (i GetNodeRootVolumeArgs) ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput {
	return i.ToGetNodeRootVolumeOutputWithContext(context.Background())
}

func (i GetNodeRootVolumeArgs) ToGetNodeRootVolumeOutputWithContext(ctx context.Context) GetNodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeRootVolumeOutput)
}

// GetNodeRootVolumeArrayInput is an input type that accepts GetNodeRootVolumeArray and GetNodeRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodeRootVolumeArrayInput` via:
//
//	GetNodeRootVolumeArray{ GetNodeRootVolumeArgs{...} }
type GetNodeRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput
	ToGetNodeRootVolumeArrayOutputWithContext(context.Context) GetNodeRootVolumeArrayOutput
}

type GetNodeRootVolumeArray []GetNodeRootVolumeInput

func (GetNodeRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeRootVolume)(nil)).Elem()
}

func (i GetNodeRootVolumeArray) ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput {
	return i.ToGetNodeRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodeRootVolumeArray) ToGetNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodeRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeRootVolumeArrayOutput)
}

type GetNodeRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeRootVolume)(nil)).Elem()
}

func (o GetNodeRootVolumeOutput) ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput {
	return o
}

func (o GetNodeRootVolumeOutput) ToGetNodeRootVolumeOutputWithContext(ctx context.Context) GetNodeRootVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodeRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodeRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeRootVolume)(nil)).Elem()
}

func (o GetNodeRootVolumeArrayOutput) ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodeRootVolumeArrayOutput) ToGetNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodeRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodeRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeRootVolume {
		return vs[0].([]GetNodeRootVolume)[vs[1].(int)]
	}).(GetNodeRootVolumeOutput)
}

type GetNodesNode struct {
	// The available partitions where the node is located.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The node's billing mode: The value is 0 (on demand).
	BillingMode int `pulumi:"billingMode"`
	// The data related configuration. Structure is documented below.
	DataVolumes []GetNodesNodeDataVolume `pulumi:"dataVolumes"`
	// The ID of ECS group to which the node belongs.
	EcsGroupId string `pulumi:"ecsGroupId"`
	// The flavor ID to be used.
	FlavorId string `pulumi:"flavorId"`
	// The ID of the node.
	Id string `pulumi:"id"`
	// The key pair name when logging in to select the key pair mode.
	KeyPair string `pulumi:"keyPair"`
	// Specifies the of the node.
	Name string `pulumi:"name"`
	// The operating System of the node.
	Os string `pulumi:"os"`
	// The private IP of the node.
	PrivateIp string `pulumi:"privateIp"`
	// The elastic IP parameters of the node.
	PublicIp string `pulumi:"publicIp"`
	// The system disk related configuration. Structure is documented below.
	RootVolumes []GetNodesNodeRootVolume `pulumi:"rootVolumes"`
	// The node's virtual machine ID in ECS.
	ServerId string `pulumi:"serverId"`
	// Specifies the status of the node.
	Status string `pulumi:"status"`
	// The ID of the subnet to which the NIC belongs.
	SubnetId string `pulumi:"subnetId"`
	// The tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
}

// GetNodesNodeInput is an input type that accepts GetNodesNodeArgs and GetNodesNodeOutput values.
// You can construct a concrete instance of `GetNodesNodeInput` via:
//
//	GetNodesNodeArgs{...}
type GetNodesNodeInput interface {
	pulumi.Input

	ToGetNodesNodeOutput() GetNodesNodeOutput
	ToGetNodesNodeOutputWithContext(context.Context) GetNodesNodeOutput
}

type GetNodesNodeArgs struct {
	// The available partitions where the node is located.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The node's billing mode: The value is 0 (on demand).
	BillingMode pulumi.IntInput `pulumi:"billingMode"`
	// The data related configuration. Structure is documented below.
	DataVolumes GetNodesNodeDataVolumeArrayInput `pulumi:"dataVolumes"`
	// The ID of ECS group to which the node belongs.
	EcsGroupId pulumi.StringInput `pulumi:"ecsGroupId"`
	// The flavor ID to be used.
	FlavorId pulumi.StringInput `pulumi:"flavorId"`
	// The ID of the node.
	Id pulumi.StringInput `pulumi:"id"`
	// The key pair name when logging in to select the key pair mode.
	KeyPair pulumi.StringInput `pulumi:"keyPair"`
	// Specifies the of the node.
	Name pulumi.StringInput `pulumi:"name"`
	// The operating System of the node.
	Os pulumi.StringInput `pulumi:"os"`
	// The private IP of the node.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The elastic IP parameters of the node.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The system disk related configuration. Structure is documented below.
	RootVolumes GetNodesNodeRootVolumeArrayInput `pulumi:"rootVolumes"`
	// The node's virtual machine ID in ECS.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// Specifies the status of the node.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return i.ToGetNodesNodeOutputWithContext(context.Background())
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeOutput)
}

// GetNodesNodeArrayInput is an input type that accepts GetNodesNodeArray and GetNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeArrayInput` via:
//
//	GetNodesNodeArray{ GetNodesNodeArgs{...} }
type GetNodesNodeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput
	ToGetNodesNodeArrayOutputWithContext(context.Context) GetNodesNodeArrayOutput
}

type GetNodesNodeArray []GetNodesNodeInput

func (GetNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return i.ToGetNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeArrayOutput)
}

type GetNodesNodeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return o
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return o
}

// The available partitions where the node is located.
func (o GetNodesNodeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The node's billing mode: The value is 0 (on demand).
func (o GetNodesNodeOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNode) int { return v.BillingMode }).(pulumi.IntOutput)
}

// The data related configuration. Structure is documented below.
func (o GetNodesNodeOutput) DataVolumes() GetNodesNodeDataVolumeArrayOutput {
	return o.ApplyT(func(v GetNodesNode) []GetNodesNodeDataVolume { return v.DataVolumes }).(GetNodesNodeDataVolumeArrayOutput)
}

// The ID of ECS group to which the node belongs.
func (o GetNodesNodeOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.EcsGroupId }).(pulumi.StringOutput)
}

// The flavor ID to be used.
func (o GetNodesNodeOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.FlavorId }).(pulumi.StringOutput)
}

// The ID of the node.
func (o GetNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

// The key pair name when logging in to select the key pair mode.
func (o GetNodesNodeOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.KeyPair }).(pulumi.StringOutput)
}

// Specifies the of the node.
func (o GetNodesNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Name }).(pulumi.StringOutput)
}

// The operating System of the node.
func (o GetNodesNodeOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Os }).(pulumi.StringOutput)
}

// The private IP of the node.
func (o GetNodesNodeOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The elastic IP parameters of the node.
func (o GetNodesNodeOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The system disk related configuration. Structure is documented below.
func (o GetNodesNodeOutput) RootVolumes() GetNodesNodeRootVolumeArrayOutput {
	return o.ApplyT(func(v GetNodesNode) []GetNodesNodeRootVolume { return v.RootVolumes }).(GetNodesNodeRootVolumeArrayOutput)
}

// The node's virtual machine ID in ECS.
func (o GetNodesNodeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.ServerId }).(pulumi.StringOutput)
}

// Specifies the status of the node.
func (o GetNodesNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subnet to which the NIC belongs.
func (o GetNodesNodeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of a VM node, key/value pair format.
func (o GetNodesNodeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNode) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNode {
		return vs[0].([]GetNodesNode)[vs[1].(int)]
	}).(GetNodesNodeOutput)
}

type GetNodesNodeDataVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodesNodeDataVolumeInput is an input type that accepts GetNodesNodeDataVolumeArgs and GetNodesNodeDataVolumeOutput values.
// You can construct a concrete instance of `GetNodesNodeDataVolumeInput` via:
//
//	GetNodesNodeDataVolumeArgs{...}
type GetNodesNodeDataVolumeInput interface {
	pulumi.Input

	ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput
	ToGetNodesNodeDataVolumeOutputWithContext(context.Context) GetNodesNodeDataVolumeOutput
}

type GetNodesNodeDataVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodesNodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeDataVolume)(nil)).Elem()
}

func (i GetNodesNodeDataVolumeArgs) ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput {
	return i.ToGetNodesNodeDataVolumeOutputWithContext(context.Background())
}

func (i GetNodesNodeDataVolumeArgs) ToGetNodesNodeDataVolumeOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeDataVolumeOutput)
}

// GetNodesNodeDataVolumeArrayInput is an input type that accepts GetNodesNodeDataVolumeArray and GetNodesNodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeDataVolumeArrayInput` via:
//
//	GetNodesNodeDataVolumeArray{ GetNodesNodeDataVolumeArgs{...} }
type GetNodesNodeDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput
	ToGetNodesNodeDataVolumeArrayOutputWithContext(context.Context) GetNodesNodeDataVolumeArrayOutput
}

type GetNodesNodeDataVolumeArray []GetNodesNodeDataVolumeInput

func (GetNodesNodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeDataVolume)(nil)).Elem()
}

func (i GetNodesNodeDataVolumeArray) ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput {
	return i.ToGetNodesNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeDataVolumeArray) ToGetNodesNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeDataVolumeArrayOutput)
}

type GetNodesNodeDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeDataVolume)(nil)).Elem()
}

func (o GetNodesNodeDataVolumeOutput) ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput {
	return o
}

func (o GetNodesNodeDataVolumeOutput) ToGetNodesNodeDataVolumeOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodesNodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodesNodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodesNodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodesNodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeDataVolume)(nil)).Elem()
}

func (o GetNodesNodeDataVolumeArrayOutput) ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodesNodeDataVolumeArrayOutput) ToGetNodesNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodesNodeDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNodeDataVolume {
		return vs[0].([]GetNodesNodeDataVolume)[vs[1].(int)]
	}).(GetNodesNodeDataVolumeOutput)
}

type GetNodesNodeRootVolume struct {
	// Disk expansion parameters.
	ExtendParams map[string]string `pulumi:"extendParams"`
	// Disk size in GB.
	Size int `pulumi:"size"`
	// Disk type.
	Volumetype string `pulumi:"volumetype"`
}

// GetNodesNodeRootVolumeInput is an input type that accepts GetNodesNodeRootVolumeArgs and GetNodesNodeRootVolumeOutput values.
// You can construct a concrete instance of `GetNodesNodeRootVolumeInput` via:
//
//	GetNodesNodeRootVolumeArgs{...}
type GetNodesNodeRootVolumeInput interface {
	pulumi.Input

	ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput
	ToGetNodesNodeRootVolumeOutputWithContext(context.Context) GetNodesNodeRootVolumeOutput
}

type GetNodesNodeRootVolumeArgs struct {
	// Disk expansion parameters.
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// Disk size in GB.
	Size pulumi.IntInput `pulumi:"size"`
	// Disk type.
	Volumetype pulumi.StringInput `pulumi:"volumetype"`
}

func (GetNodesNodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeRootVolume)(nil)).Elem()
}

func (i GetNodesNodeRootVolumeArgs) ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput {
	return i.ToGetNodesNodeRootVolumeOutputWithContext(context.Background())
}

func (i GetNodesNodeRootVolumeArgs) ToGetNodesNodeRootVolumeOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeRootVolumeOutput)
}

// GetNodesNodeRootVolumeArrayInput is an input type that accepts GetNodesNodeRootVolumeArray and GetNodesNodeRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeRootVolumeArrayInput` via:
//
//	GetNodesNodeRootVolumeArray{ GetNodesNodeRootVolumeArgs{...} }
type GetNodesNodeRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput
	ToGetNodesNodeRootVolumeArrayOutputWithContext(context.Context) GetNodesNodeRootVolumeArrayOutput
}

type GetNodesNodeRootVolumeArray []GetNodesNodeRootVolumeInput

func (GetNodesNodeRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeRootVolume)(nil)).Elem()
}

func (i GetNodesNodeRootVolumeArray) ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput {
	return i.ToGetNodesNodeRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeRootVolumeArray) ToGetNodesNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeRootVolumeArrayOutput)
}

type GetNodesNodeRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeRootVolume)(nil)).Elem()
}

func (o GetNodesNodeRootVolumeOutput) ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput {
	return o
}

func (o GetNodesNodeRootVolumeOutput) ToGetNodesNodeRootVolumeOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeOutput {
	return o
}

// Disk expansion parameters.
func (o GetNodesNodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// Disk size in GB.
func (o GetNodesNodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Disk type.
func (o GetNodesNodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodesNodeRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeRootVolume)(nil)).Elem()
}

func (o GetNodesNodeRootVolumeArrayOutput) ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodesNodeRootVolumeArrayOutput) ToGetNodesNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodesNodeRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNodeRootVolume {
		return vs[0].([]GetNodesNodeRootVolume)[vs[1].(int)]
	}).(GetNodesNodeRootVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonValuesInput)(nil)).Elem(), AddonValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonValuesPtrInput)(nil)).Elem(), AddonValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateClusterInput)(nil)).Elem(), ClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateClusterArrayInput)(nil)).Elem(), ClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateUserInput)(nil)).Elem(), ClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateUserArrayInput)(nil)).Elem(), ClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterInput)(nil)).Elem(), ClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterArrayInput)(nil)).Elem(), ClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachDataVolumeInput)(nil)).Elem(), NodeAttachDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachDataVolumeArrayInput)(nil)).Elem(), NodeAttachDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachRootVolumeInput)(nil)).Elem(), NodeAttachRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachRootVolumeArrayInput)(nil)).Elem(), NodeAttachRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachTaintInput)(nil)).Elem(), NodeAttachTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachTaintArrayInput)(nil)).Elem(), NodeAttachTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDataVolumeInput)(nil)).Elem(), NodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDataVolumeArrayInput)(nil)).Elem(), NodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDataVolumeInput)(nil)).Elem(), NodePoolDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDataVolumeArrayInput)(nil)).Elem(), NodePoolDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolRootVolumeInput)(nil)).Elem(), NodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolRootVolumePtrInput)(nil)).Elem(), NodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTaintInput)(nil)).Elem(), NodePoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTaintArrayInput)(nil)).Elem(), NodePoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRootVolumeInput)(nil)).Elem(), NodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRootVolumePtrInput)(nil)).Elem(), NodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageInput)(nil)).Elem(), NodeStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStoragePtrInput)(nil)).Elem(), NodeStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupInput)(nil)).Elem(), NodeStorageGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupArrayInput)(nil)).Elem(), NodeStorageGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupVirtualSpaceInput)(nil)).Elem(), NodeStorageGroupVirtualSpaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupVirtualSpaceArrayInput)(nil)).Elem(), NodeStorageGroupVirtualSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageSelectorInput)(nil)).Elem(), NodeStorageSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageSelectorArrayInput)(nil)).Elem(), NodeStorageSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintInput)(nil)).Elem(), NodeTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintArrayInput)(nil)).Elem(), NodeTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAddonTemplateSupportVersionInput)(nil)).Elem(), GetAddonTemplateSupportVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAddonTemplateSupportVersionArrayInput)(nil)).Elem(), GetAddonTemplateSupportVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateClusterInput)(nil)).Elem(), GetClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateClusterArrayInput)(nil)).Elem(), GetClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateUserInput)(nil)).Elem(), GetClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateUserArrayInput)(nil)).Elem(), GetClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterEndpointInput)(nil)).Elem(), GetClusterEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterEndpointArrayInput)(nil)).Elem(), GetClusterEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMasterInput)(nil)).Elem(), GetClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMasterArrayInput)(nil)).Elem(), GetClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateClusterInput)(nil)).Elem(), GetClustersClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateClusterArrayInput)(nil)).Elem(), GetClustersClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateUserInput)(nil)).Elem(), GetClustersClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateUserArrayInput)(nil)).Elem(), GetClustersClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterEndpointInput)(nil)).Elem(), GetClustersClusterEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterEndpointArrayInput)(nil)).Elem(), GetClustersClusterEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMasterInput)(nil)).Elem(), GetClustersClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMasterArrayInput)(nil)).Elem(), GetClustersClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeDataVolumeInput)(nil)).Elem(), GetNodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeDataVolumeArrayInput)(nil)).Elem(), GetNodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolDataVolumeInput)(nil)).Elem(), GetNodePoolDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolDataVolumeArrayInput)(nil)).Elem(), GetNodePoolDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolRootVolumeInput)(nil)).Elem(), GetNodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolRootVolumeArrayInput)(nil)).Elem(), GetNodePoolRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeRootVolumeInput)(nil)).Elem(), GetNodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeRootVolumeArrayInput)(nil)).Elem(), GetNodeRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeInput)(nil)).Elem(), GetNodesNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeArrayInput)(nil)).Elem(), GetNodesNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeDataVolumeInput)(nil)).Elem(), GetNodesNodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeDataVolumeArrayInput)(nil)).Elem(), GetNodesNodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeRootVolumeInput)(nil)).Elem(), GetNodesNodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeRootVolumeArrayInput)(nil)).Elem(), GetNodesNodeRootVolumeArray{})
	pulumi.RegisterOutputType(AddonValuesOutput{})
	pulumi.RegisterOutputType(AddonValuesPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(ClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(ClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(ClusterMasterOutput{})
	pulumi.RegisterOutputType(ClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachDataVolumeOutput{})
	pulumi.RegisterOutputType(NodeAttachDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachRootVolumeOutput{})
	pulumi.RegisterOutputType(NodeAttachRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachTaintOutput{})
	pulumi.RegisterOutputType(NodeAttachTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeDataVolumeOutput{})
	pulumi.RegisterOutputType(NodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolDataVolumeOutput{})
	pulumi.RegisterOutputType(NodePoolDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolRootVolumeOutput{})
	pulumi.RegisterOutputType(NodePoolRootVolumePtrOutput{})
	pulumi.RegisterOutputType(NodePoolTaintOutput{})
	pulumi.RegisterOutputType(NodePoolTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeRootVolumeOutput{})
	pulumi.RegisterOutputType(NodeRootVolumePtrOutput{})
	pulumi.RegisterOutputType(NodeStorageOutput{})
	pulumi.RegisterOutputType(NodeStoragePtrOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupVirtualSpaceOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupVirtualSpaceArrayOutput{})
	pulumi.RegisterOutputType(NodeStorageSelectorOutput{})
	pulumi.RegisterOutputType(NodeStorageSelectorArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(GetAddonTemplateSupportVersionOutput{})
	pulumi.RegisterOutputType(GetAddonTemplateSupportVersionArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(GetClusterEndpointOutput{})
	pulumi.RegisterOutputType(GetClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetClusterMasterOutput{})
	pulumi.RegisterOutputType(GetClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterEndpointOutput{})
	pulumi.RegisterOutputType(GetClustersClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMasterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(GetNodeDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodePoolDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodePoolRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodeRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodeRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeRootVolumeArrayOutput{})
}

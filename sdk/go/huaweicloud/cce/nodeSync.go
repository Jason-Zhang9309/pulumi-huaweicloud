// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to sync the CCE node within HuaweiCloud.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeId := cfg.RequireObject("nodeId")
//			_, err := Cce.NewNodeSync(ctx, "test", &Cce.NodeSyncArgs{
//				ClusterId: pulumi.Any(clusterId),
//				NodeId:    pulumi.Any(nodeId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > Deleting node sync is not supported, it will only be removed from the state.
type NodeSync struct {
	pulumi.CustomResourceState

	// Specifies the cluster ID.
	ClusterId      pulumi.StringOutput    `pulumi:"clusterId"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the node ID.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// Specifies the region in which to create the node sync resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewNodeSync registers a new resource with the given unique name, arguments, and options.
func NewNodeSync(ctx *pulumi.Context,
	name string, args *NodeSyncArgs, opts ...pulumi.ResourceOption) (*NodeSync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeId == nil {
		return nil, errors.New("invalid value for required argument 'NodeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodeSync
	err := ctx.RegisterResource("huaweicloud:Cce/nodeSync:NodeSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeSync gets an existing NodeSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeSyncState, opts ...pulumi.ResourceOption) (*NodeSync, error) {
	var resource NodeSync
	err := ctx.ReadResource("huaweicloud:Cce/nodeSync:NodeSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeSync resources.
type nodeSyncState struct {
	// Specifies the cluster ID.
	ClusterId      *string `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the node ID.
	NodeId *string `pulumi:"nodeId"`
	// Specifies the region in which to create the node sync resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
}

type NodeSyncState struct {
	// Specifies the cluster ID.
	ClusterId      pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the node ID.
	NodeId pulumi.StringPtrInput
	// Specifies the region in which to create the node sync resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
}

func (NodeSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeSyncState)(nil)).Elem()
}

type nodeSyncArgs struct {
	// Specifies the cluster ID.
	ClusterId      string  `pulumi:"clusterId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the node ID.
	NodeId string `pulumi:"nodeId"`
	// Specifies the region in which to create the node sync resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NodeSync resource.
type NodeSyncArgs struct {
	// Specifies the cluster ID.
	ClusterId      pulumi.StringInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the node ID.
	NodeId pulumi.StringInput
	// Specifies the region in which to create the node sync resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
}

func (NodeSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeSyncArgs)(nil)).Elem()
}

type NodeSyncInput interface {
	pulumi.Input

	ToNodeSyncOutput() NodeSyncOutput
	ToNodeSyncOutputWithContext(ctx context.Context) NodeSyncOutput
}

func (*NodeSync) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSync)(nil)).Elem()
}

func (i *NodeSync) ToNodeSyncOutput() NodeSyncOutput {
	return i.ToNodeSyncOutputWithContext(context.Background())
}

func (i *NodeSync) ToNodeSyncOutputWithContext(ctx context.Context) NodeSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSyncOutput)
}

// NodeSyncArrayInput is an input type that accepts NodeSyncArray and NodeSyncArrayOutput values.
// You can construct a concrete instance of `NodeSyncArrayInput` via:
//
//	NodeSyncArray{ NodeSyncArgs{...} }
type NodeSyncArrayInput interface {
	pulumi.Input

	ToNodeSyncArrayOutput() NodeSyncArrayOutput
	ToNodeSyncArrayOutputWithContext(context.Context) NodeSyncArrayOutput
}

type NodeSyncArray []NodeSyncInput

func (NodeSyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeSync)(nil)).Elem()
}

func (i NodeSyncArray) ToNodeSyncArrayOutput() NodeSyncArrayOutput {
	return i.ToNodeSyncArrayOutputWithContext(context.Background())
}

func (i NodeSyncArray) ToNodeSyncArrayOutputWithContext(ctx context.Context) NodeSyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSyncArrayOutput)
}

// NodeSyncMapInput is an input type that accepts NodeSyncMap and NodeSyncMapOutput values.
// You can construct a concrete instance of `NodeSyncMapInput` via:
//
//	NodeSyncMap{ "key": NodeSyncArgs{...} }
type NodeSyncMapInput interface {
	pulumi.Input

	ToNodeSyncMapOutput() NodeSyncMapOutput
	ToNodeSyncMapOutputWithContext(context.Context) NodeSyncMapOutput
}

type NodeSyncMap map[string]NodeSyncInput

func (NodeSyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeSync)(nil)).Elem()
}

func (i NodeSyncMap) ToNodeSyncMapOutput() NodeSyncMapOutput {
	return i.ToNodeSyncMapOutputWithContext(context.Background())
}

func (i NodeSyncMap) ToNodeSyncMapOutputWithContext(ctx context.Context) NodeSyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSyncMapOutput)
}

type NodeSyncOutput struct{ *pulumi.OutputState }

func (NodeSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSync)(nil)).Elem()
}

func (o NodeSyncOutput) ToNodeSyncOutput() NodeSyncOutput {
	return o
}

func (o NodeSyncOutput) ToNodeSyncOutputWithContext(ctx context.Context) NodeSyncOutput {
	return o
}

// Specifies the cluster ID.
func (o NodeSyncOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeSync) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o NodeSyncOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSync) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the node ID.
func (o NodeSyncOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeSync) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the node sync resource.
// If omitted, the provider-level region will be used. Changing this will create a new resource.
func (o NodeSyncOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeSync) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type NodeSyncArrayOutput struct{ *pulumi.OutputState }

func (NodeSyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeSync)(nil)).Elem()
}

func (o NodeSyncArrayOutput) ToNodeSyncArrayOutput() NodeSyncArrayOutput {
	return o
}

func (o NodeSyncArrayOutput) ToNodeSyncArrayOutputWithContext(ctx context.Context) NodeSyncArrayOutput {
	return o
}

func (o NodeSyncArrayOutput) Index(i pulumi.IntInput) NodeSyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeSync {
		return vs[0].([]*NodeSync)[vs[1].(int)]
	}).(NodeSyncOutput)
}

type NodeSyncMapOutput struct{ *pulumi.OutputState }

func (NodeSyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeSync)(nil)).Elem()
}

func (o NodeSyncMapOutput) ToNodeSyncMapOutput() NodeSyncMapOutput {
	return o
}

func (o NodeSyncMapOutput) ToNodeSyncMapOutputWithContext(ctx context.Context) NodeSyncMapOutput {
	return o
}

func (o NodeSyncMapOutput) MapIndex(k pulumi.StringInput) NodeSyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeSync {
		return vs[0].(map[string]*NodeSync)[vs[1].(string)]
	}).(NodeSyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSyncInput)(nil)).Elem(), &NodeSync{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSyncArrayInput)(nil)).Elem(), NodeSyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSyncMapInput)(nil)).Elem(), NodeSyncMap{})
	pulumi.RegisterOutputType(NodeSyncOutput{})
	pulumi.RegisterOutputType(NodeSyncArrayOutput{})
	pulumi.RegisterOutputType(NodeSyncMapOutput{})
}

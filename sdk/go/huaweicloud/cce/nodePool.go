// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Add a node pool to a container cluster.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			keyPair := cfg.RequireObject("keyPair")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Cce.NewNodePool(ctx, "nodePool", &Cce.NodePoolArgs{
//				ClusterId:             pulumi.Any(clusterId),
//				Os:                    pulumi.String("EulerOS 2.5"),
//				InitialNodeCount:      pulumi.Int(2),
//				FlavorId:              pulumi.String("s3.large.4"),
//				AvailabilityZone:      pulumi.Any(availabilityZone),
//				KeyPair:               pulumi.Any(_var.Keypair),
//				ScallEnable:           pulumi.Bool(true),
//				MinNodeCount:          pulumi.Int(1),
//				MaxNodeCount:          pulumi.Int(10),
//				ScaleDownCooldownTime: pulumi.Int(100),
//				Priority:              pulumi.Int(1),
//				Type:                  pulumi.String("vm"),
//				RootVolume: &cce.NodePoolRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SAS"),
//				},
//				DataVolumes: cce.NodePoolDataVolumeArray{
//					&cce.NodePoolDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SAS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Node pool with storage configuration
// ### PrePaid node pool
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			keyPair := cfg.RequireObject("keyPair")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Cce.NewNodePool(ctx, "nodePool", &Cce.NodePoolArgs{
//				ClusterId:             pulumi.Any(clusterId),
//				Os:                    pulumi.String("EulerOS 2.5"),
//				InitialNodeCount:      pulumi.Int(2),
//				FlavorId:              pulumi.String("s3.large.4"),
//				AvailabilityZone:      pulumi.Any(availabilityZone),
//				KeyPair:               pulumi.Any(_var.Keypair),
//				ScallEnable:           pulumi.Bool(true),
//				MinNodeCount:          pulumi.Int(1),
//				MaxNodeCount:          pulumi.Int(10),
//				ScaleDownCooldownTime: pulumi.Int(100),
//				Priority:              pulumi.Int(1),
//				Type:                  pulumi.String("vm"),
//				ChargingMode:          pulumi.String("prePaid"),
//				PeriodUnit:            pulumi.String("month"),
//				Period:                pulumi.Int(1),
//				RootVolume: &cce.NodePoolRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SAS"),
//				},
//				DataVolumes: cce.NodePoolDataVolumeArray{
//					&cce.NodePoolDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SAS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
//	> You need to remove all nodes in the node pool on the console, before deleting a prepaid node pool.
//
// ## Import
//
// CCE node pool can be imported using the cluster ID and node pool ID separated by a slash, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cce/nodePool:NodePool my_node_pool 5c20fdad-7288-11eb-b817-0255ac10158b/e9287dff-7288-11eb-b817-0255ac10158b
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`password`, `subnet_id`, `preinstall`, `posteinstall`, `taints`, `initial_node_count` and `pod_security_groups`. It is generally recommended running `terraform plan` after importing a node pool. You can then decide if changes should be applied to the node pool, or the resource definition should be updated to align with the node pool. Also you can ignore changes as below. resource "huaweicloud_cce_node_pool" "my_node_pool" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	password, subnet_id,
//
//	]
//
//	} }
type NodePool struct {
	pulumi.CustomResourceState

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// Billing mode of a node.
	BillingMode pulumi.IntOutput `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The current number of the nodes.
	CurrentNodeCount pulumi.IntOutput `pulumi:"currentNodeCount"`
	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes NodePoolDataVolumeArrayOutput `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupId pulumi.StringPtrOutput `pulumi:"ecsGroupId"`
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	ExtendParam pulumi.StringMapOutput `pulumi:"extendParam"`
	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntOutput `pulumi:"initialNodeCount"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount pulumi.IntPtrOutput `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntOutput `pulumi:"maxPods"`
	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount pulumi.IntPtrOutput `pulumi:"minNodeCount"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the operating system of the node.
	// Changing this parameter will create a new resource.
	Os pulumi.StringOutput `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will create a new resource.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this parameter will create a new resource.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups pulumi.StringArrayOutput `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrOutput `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrOutput `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume NodePoolRootVolumeOutput `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*. Changing this creates a new resource.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrOutput `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrOutput `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Node status information.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage NodePoolStorageOutput `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayOutput `pulumi:"taints"`
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.DataVolumes == nil {
		return nil, errors.New("invalid value for required argument 'DataVolumes'")
	}
	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.InitialNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'InitialNodeCount'")
	}
	if args.RootVolume == nil {
		return nil, errors.New("invalid value for required argument 'RootVolume'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("huaweicloud:Cce/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("huaweicloud:Cce/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Billing mode of a node.
	BillingMode *int `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterId *string `pulumi:"clusterId"`
	// The current number of the nodes.
	CurrentNodeCount *int `pulumi:"currentNodeCount"`
	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes []NodePoolDataVolume `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupId *string `pulumi:"ecsGroupId"`
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will create a new resource.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the operating system of the node.
	// Changing this parameter will create a new resource.
	Os *string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will create a new resource.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this parameter will create a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups []string `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *int `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume *NodePoolRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*. Changing this creates a new resource.
	Runtime *string `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *int `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups []string `pulumi:"securityGroups"`
	// Node status information.
	Status *string `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage *NodePoolStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
}

type NodePoolState struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone pulumi.StringPtrInput
	// Billing mode of a node.
	BillingMode pulumi.IntPtrInput
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringPtrInput
	// The current number of the nodes.
	CurrentNodeCount pulumi.IntPtrInput
	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes NodePoolDataVolumeArrayInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupId pulumi.StringPtrInput
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	ExtendParam pulumi.StringMapInput
	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorId pulumi.StringPtrInput
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntPtrInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount pulumi.IntPtrInput
	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntPtrInput
	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount pulumi.IntPtrInput
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// Changing this parameter will create a new resource.
	Os pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will create a new resource.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this parameter will create a new resource.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups pulumi.StringArrayInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrInput
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrInput
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume NodePoolRootVolumePtrInput
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*. Changing this creates a new resource.
	Runtime pulumi.StringPtrInput
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrInput
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrInput
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayInput
	// Node status information.
	Status pulumi.StringPtrInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage NodePoolStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayInput
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes []NodePoolDataVolume `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupId *string `pulumi:"ecsGroupId"`
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorId string `pulumi:"flavorId"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount int `pulumi:"initialNodeCount"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will create a new resource.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the operating system of the node.
	// Changing this parameter will create a new resource.
	Os *string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will create a new resource.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this parameter will create a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups []string `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *int `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume NodePoolRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*. Changing this creates a new resource.
	Runtime *string `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *int `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage *NodePoolStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringInput
	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes NodePoolDataVolumeArrayInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupId pulumi.StringPtrInput
	// Specifies the extended parameter.
	// Changing this parameter will create a new resource.
	// The available keys are as follows:
	// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
	// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
	// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
	// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
	ExtendParam pulumi.StringMapInput
	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorId pulumi.StringInput
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount pulumi.IntPtrInput
	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntPtrInput
	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount pulumi.IntPtrInput
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported. Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// Changing this parameter will create a new resource.
	Os pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will create a new resource.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this parameter will create a new resource.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups pulumi.StringArrayInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrInput
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrInput
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume NodePoolRootVolumeInput
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*. Changing this creates a new resource.
	Runtime pulumi.StringPtrInput
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrInput
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrInput
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage NodePoolStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayInput
	// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
	// The default value is **evs**. Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

// Specifies whether auto renew is enabled. Valid values are "true" and "false".
// Changing this parameter will create a new resource.
func (o NodePoolOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the name of the available partition (AZ). Default value
// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
func (o NodePoolOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Billing mode of a node.
func (o NodePoolOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.BillingMode }).(pulumi.IntOutput)
}

// Specifies the charging mode of the CCE node pool. Valid values are
// *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
func (o NodePoolOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the cluster ID.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The current number of the nodes.
func (o NodePoolOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

// Specifies the configuration of the data disks.
// The structure is described below. Changing this parameter will create a new resource.
func (o NodePoolOutput) DataVolumes() NodePoolDataVolumeArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolDataVolumeArrayOutput { return v.DataVolumes }).(NodePoolDataVolumeArrayOutput)
}

// Specifies the ECS group ID. If specified, the node will be created under
// the cloud server group. Changing this parameter will create a new resource.
func (o NodePoolOutput) EcsGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.EcsGroupId }).(pulumi.StringPtrOutput)
}

// Specifies the extended parameter.
// Changing this parameter will create a new resource.
// The available keys are as follows:
// + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
// + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
// + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
// + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
func (o NodePoolOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.ExtendParam }).(pulumi.StringMapOutput)
}

// Specifies the flavor ID. Changing this parameter will create a new
// resource.
func (o NodePoolOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Specifies the initial number of expected nodes in the node pool.
// This parameter can be also used to manually scale the node count afterwards.
func (o NodePoolOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// Specifies the key pair name when logging in to select the key pair mode.
// This parameter and `password` are alternative. Changing this parameter will create a new resource.
func (o NodePoolOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the tags of a Kubernetes node, key/value pair format.
func (o NodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the maximum number of nodes allowed if auto scaling is enabled.
func (o NodePoolOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of instances a node is allowed to create.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) MaxPods() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.MaxPods }).(pulumi.IntOutput)
}

// Specifies the minimum number of nodes allowed if auto scaling is enabled.
func (o NodePoolOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
// and **user** are supported. Changing this parameter will create a new resource.
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the operating system of the node.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// Specifies the root password when logging in to select the password mode.
// This parameter can be plain or salted and is alternative to `keyPair`.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
// is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
func (o NodePoolOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the CCE node pool.
// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the list of security group IDs for the pod.
// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
func (o NodePoolOutput) PodSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.PodSecurityGroups }).(pulumi.StringArrayOutput)
}

// Specifies the script to be executed after installation.
// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
func (o NodePoolOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

// Specifies the script to be executed before installation.
// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
func (o NodePoolOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

// Specifies the weight of the node pool.
// A node pool with a higher weight has a higher priority during scaling.
func (o NodePoolOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// The region in which to create the CCE pool resource. If omitted, the
// provider-level region will be used. Changing this creates a new CCE node pool resource.
func (o NodePoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the configuration of the system disk.
// The structure is described below. Changing this parameter will create a new resource.
func (o NodePoolOutput) RootVolume() NodePoolRootVolumeOutput {
	return o.ApplyT(func(v *NodePool) NodePoolRootVolumeOutput { return v.RootVolume }).(NodePoolRootVolumeOutput)
}

// Specifies the runtime of the CCE node pool. Valid values are *docker* and
// *containerd*. Changing this creates a new resource.
func (o NodePoolOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// Specifies the time interval between two scaling operations, in minutes.
func (o NodePoolOutput) ScaleDownCooldownTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.ScaleDownCooldownTime }).(pulumi.IntPtrOutput)
}

// Specifies whether to enable auto scaling.
// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
func (o NodePoolOutput) ScallEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.ScallEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the list of custom security group IDs for the node pool.
// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
// the rules of the port on which CCE running depends. For details, see
// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
func (o NodePoolOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Node status information.
func (o NodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the disk initialization management parameter.
// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
func (o NodePoolOutput) Storage() NodePoolStorageOutput {
	return o.ApplyT(func(v *NodePool) NodePoolStorageOutput { return v.Storage }).(NodePoolStorageOutput)
}

// Specifies the ID of the subnet to which the NIC belongs.
// Changing this parameter will create a new resource.
func (o NodePoolOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Specifies the tags of a VM node, key/value pair format.
func (o NodePoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the taints configuration of the nodes to set anti-affinity.
// The structure is described below.
func (o NodePoolOutput) Taints() NodePoolTaintArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolTaintArrayOutput { return v.Taints }).(NodePoolTaintArrayOutput)
}

// Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
// The default value is **evs**. Changing this parameter will create a new resource.
func (o NodePoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get available HuaweiCloud CCE add-on template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			addonName := cfg.RequireObject("addonName")
//			addonVersion := cfg.RequireObject("addonVersion")
//			_, err := Cce.GetAddonTemplate(ctx, &cce.GetAddonTemplateArgs{
//				ClusterId: clusterId,
//				Name:      addonName,
//				Version:   addonVersion,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAddonTemplate(ctx *pulumi.Context, args *GetAddonTemplateArgs, opts ...pulumi.InvokeOption) (*GetAddonTemplateResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAddonTemplateResult
	err := ctx.Invoke("huaweicloud:Cce/getAddonTemplate:getAddonTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddonTemplate.
type GetAddonTemplateArgs struct {
	// Specifies the ID of container cluster.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the add-on name.
	Name string `pulumi:"name"`
	// Specifies the region in which to obtain the CCE add-ons. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
	// Specifies the add-on version.
	Version string `pulumi:"version"`
}

// A collection of values returned by getAddonTemplate.
type GetAddonTemplateResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The description of the add-on.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Name   string `pulumi:"name"`
	Region string `pulumi:"region"`
	// The detail configuration of the add-on template.
	Spec string `pulumi:"spec"`
	// Whether the add-on template is a stable version.
	Stable bool `pulumi:"stable"`
	// The cluster information.
	SupportVersions []GetAddonTemplateSupportVersion `pulumi:"supportVersions"`
	Version         string                           `pulumi:"version"`
}

func GetAddonTemplateOutput(ctx *pulumi.Context, args GetAddonTemplateOutputArgs, opts ...pulumi.InvokeOption) GetAddonTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAddonTemplateResult, error) {
			args := v.(GetAddonTemplateArgs)
			r, err := GetAddonTemplate(ctx, &args, opts...)
			var s GetAddonTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAddonTemplateResultOutput)
}

// A collection of arguments for invoking getAddonTemplate.
type GetAddonTemplateOutputArgs struct {
	// Specifies the ID of container cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Specifies the add-on name.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the region in which to obtain the CCE add-ons. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the add-on version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetAddonTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getAddonTemplate.
type GetAddonTemplateResultOutput struct{ *pulumi.OutputState }

func (GetAddonTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateResult)(nil)).Elem()
}

func (o GetAddonTemplateResultOutput) ToGetAddonTemplateResultOutput() GetAddonTemplateResultOutput {
	return o
}

func (o GetAddonTemplateResultOutput) ToGetAddonTemplateResultOutputWithContext(ctx context.Context) GetAddonTemplateResultOutput {
	return o
}

func (o GetAddonTemplateResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The description of the add-on.
func (o GetAddonTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAddonTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAddonTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAddonTemplateResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Region }).(pulumi.StringOutput)
}

// The detail configuration of the add-on template.
func (o GetAddonTemplateResultOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Spec }).(pulumi.StringOutput)
}

// Whether the add-on template is a stable version.
func (o GetAddonTemplateResultOutput) Stable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) bool { return v.Stable }).(pulumi.BoolOutput)
}

// The cluster information.
func (o GetAddonTemplateResultOutput) SupportVersions() GetAddonTemplateSupportVersionArrayOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) []GetAddonTemplateSupportVersion { return v.SupportVersions }).(GetAddonTemplateSupportVersionArrayOutput)
}

func (o GetAddonTemplateResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonTemplateResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAddonTemplateResultOutput{})
}

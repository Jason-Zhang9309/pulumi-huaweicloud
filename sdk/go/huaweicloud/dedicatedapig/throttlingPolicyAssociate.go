// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedapig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to bind the APIs to the throttling policy within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedApig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			policyId := cfg.RequireObject("policyId")
//			apiPublishIds := cfg.Require("apiPublishIds")
//			_, err := DedicatedApig.NewThrottlingPolicyAssociate(ctx, "test", &DedicatedApig.ThrottlingPolicyAssociateArgs{
//				InstanceId: pulumi.Any(instanceId),
//				PolicyId:   pulumi.Any(policyId),
//				PublishIds: apiPublishIds,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Associate resources can be imported using their `policy_id` and the APIG dedicated instance ID to which the policy belongs, separated by a slash, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedApig/throttlingPolicyAssociate:ThrottlingPolicyAssociate test <instance_id>/<policy_id>
//
// ```
type ThrottlingPolicyAssociate struct {
	pulumi.CustomResourceState

	// Specifies the ID of the dedicated instance to which the APIs and the
	// throttling policy belongs.
	// Changing this will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the ID of the throttling policy.\
	// Changing this will create a new resource.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
	PublishIds pulumi.StringArrayOutput `pulumi:"publishIds"`
	// Specifies the region where the dedicated instance and the throttling policy
	// are located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewThrottlingPolicyAssociate registers a new resource with the given unique name, arguments, and options.
func NewThrottlingPolicyAssociate(ctx *pulumi.Context,
	name string, args *ThrottlingPolicyAssociateArgs, opts ...pulumi.ResourceOption) (*ThrottlingPolicyAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.PublishIds == nil {
		return nil, errors.New("invalid value for required argument 'PublishIds'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ThrottlingPolicyAssociate
	err := ctx.RegisterResource("huaweicloud:DedicatedApig/throttlingPolicyAssociate:ThrottlingPolicyAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThrottlingPolicyAssociate gets an existing ThrottlingPolicyAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThrottlingPolicyAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThrottlingPolicyAssociateState, opts ...pulumi.ResourceOption) (*ThrottlingPolicyAssociate, error) {
	var resource ThrottlingPolicyAssociate
	err := ctx.ReadResource("huaweicloud:DedicatedApig/throttlingPolicyAssociate:ThrottlingPolicyAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThrottlingPolicyAssociate resources.
type throttlingPolicyAssociateState struct {
	// Specifies the ID of the dedicated instance to which the APIs and the
	// throttling policy belongs.
	// Changing this will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the ID of the throttling policy.\
	// Changing this will create a new resource.
	PolicyId *string `pulumi:"policyId"`
	// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
	PublishIds []string `pulumi:"publishIds"`
	// Specifies the region where the dedicated instance and the throttling policy
	// are located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
}

type ThrottlingPolicyAssociateState struct {
	// Specifies the ID of the dedicated instance to which the APIs and the
	// throttling policy belongs.
	// Changing this will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the ID of the throttling policy.\
	// Changing this will create a new resource.
	PolicyId pulumi.StringPtrInput
	// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
	PublishIds pulumi.StringArrayInput
	// Specifies the region where the dedicated instance and the throttling policy
	// are located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
}

func (ThrottlingPolicyAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*throttlingPolicyAssociateState)(nil)).Elem()
}

type throttlingPolicyAssociateArgs struct {
	// Specifies the ID of the dedicated instance to which the APIs and the
	// throttling policy belongs.
	// Changing this will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the ID of the throttling policy.\
	// Changing this will create a new resource.
	PolicyId string `pulumi:"policyId"`
	// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
	PublishIds []string `pulumi:"publishIds"`
	// Specifies the region where the dedicated instance and the throttling policy
	// are located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ThrottlingPolicyAssociate resource.
type ThrottlingPolicyAssociateArgs struct {
	// Specifies the ID of the dedicated instance to which the APIs and the
	// throttling policy belongs.
	// Changing this will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the ID of the throttling policy.\
	// Changing this will create a new resource.
	PolicyId pulumi.StringInput
	// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
	PublishIds pulumi.StringArrayInput
	// Specifies the region where the dedicated instance and the throttling policy
	// are located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
}

func (ThrottlingPolicyAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*throttlingPolicyAssociateArgs)(nil)).Elem()
}

type ThrottlingPolicyAssociateInput interface {
	pulumi.Input

	ToThrottlingPolicyAssociateOutput() ThrottlingPolicyAssociateOutput
	ToThrottlingPolicyAssociateOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateOutput
}

func (*ThrottlingPolicyAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingPolicyAssociate)(nil)).Elem()
}

func (i *ThrottlingPolicyAssociate) ToThrottlingPolicyAssociateOutput() ThrottlingPolicyAssociateOutput {
	return i.ToThrottlingPolicyAssociateOutputWithContext(context.Background())
}

func (i *ThrottlingPolicyAssociate) ToThrottlingPolicyAssociateOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyAssociateOutput)
}

// ThrottlingPolicyAssociateArrayInput is an input type that accepts ThrottlingPolicyAssociateArray and ThrottlingPolicyAssociateArrayOutput values.
// You can construct a concrete instance of `ThrottlingPolicyAssociateArrayInput` via:
//
//	ThrottlingPolicyAssociateArray{ ThrottlingPolicyAssociateArgs{...} }
type ThrottlingPolicyAssociateArrayInput interface {
	pulumi.Input

	ToThrottlingPolicyAssociateArrayOutput() ThrottlingPolicyAssociateArrayOutput
	ToThrottlingPolicyAssociateArrayOutputWithContext(context.Context) ThrottlingPolicyAssociateArrayOutput
}

type ThrottlingPolicyAssociateArray []ThrottlingPolicyAssociateInput

func (ThrottlingPolicyAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThrottlingPolicyAssociate)(nil)).Elem()
}

func (i ThrottlingPolicyAssociateArray) ToThrottlingPolicyAssociateArrayOutput() ThrottlingPolicyAssociateArrayOutput {
	return i.ToThrottlingPolicyAssociateArrayOutputWithContext(context.Background())
}

func (i ThrottlingPolicyAssociateArray) ToThrottlingPolicyAssociateArrayOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyAssociateArrayOutput)
}

// ThrottlingPolicyAssociateMapInput is an input type that accepts ThrottlingPolicyAssociateMap and ThrottlingPolicyAssociateMapOutput values.
// You can construct a concrete instance of `ThrottlingPolicyAssociateMapInput` via:
//
//	ThrottlingPolicyAssociateMap{ "key": ThrottlingPolicyAssociateArgs{...} }
type ThrottlingPolicyAssociateMapInput interface {
	pulumi.Input

	ToThrottlingPolicyAssociateMapOutput() ThrottlingPolicyAssociateMapOutput
	ToThrottlingPolicyAssociateMapOutputWithContext(context.Context) ThrottlingPolicyAssociateMapOutput
}

type ThrottlingPolicyAssociateMap map[string]ThrottlingPolicyAssociateInput

func (ThrottlingPolicyAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThrottlingPolicyAssociate)(nil)).Elem()
}

func (i ThrottlingPolicyAssociateMap) ToThrottlingPolicyAssociateMapOutput() ThrottlingPolicyAssociateMapOutput {
	return i.ToThrottlingPolicyAssociateMapOutputWithContext(context.Background())
}

func (i ThrottlingPolicyAssociateMap) ToThrottlingPolicyAssociateMapOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyAssociateMapOutput)
}

type ThrottlingPolicyAssociateOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingPolicyAssociate)(nil)).Elem()
}

func (o ThrottlingPolicyAssociateOutput) ToThrottlingPolicyAssociateOutput() ThrottlingPolicyAssociateOutput {
	return o
}

func (o ThrottlingPolicyAssociateOutput) ToThrottlingPolicyAssociateOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateOutput {
	return o
}

// Specifies the ID of the dedicated instance to which the APIs and the
// throttling policy belongs.
// Changing this will create a new resource.
func (o ThrottlingPolicyAssociateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicyAssociate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the ID of the throttling policy.\
// Changing this will create a new resource.
func (o ThrottlingPolicyAssociateOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicyAssociate) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Specifies the publish IDs corresponding to the APIs bound by the throttling policy.
func (o ThrottlingPolicyAssociateOutput) PublishIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThrottlingPolicyAssociate) pulumi.StringArrayOutput { return v.PublishIds }).(pulumi.StringArrayOutput)
}

// Specifies the region where the dedicated instance and the throttling policy
// are located.
// If omitted, the provider-level region will be used. Changing this will create a new resource.
func (o ThrottlingPolicyAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicyAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ThrottlingPolicyAssociateArrayOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThrottlingPolicyAssociate)(nil)).Elem()
}

func (o ThrottlingPolicyAssociateArrayOutput) ToThrottlingPolicyAssociateArrayOutput() ThrottlingPolicyAssociateArrayOutput {
	return o
}

func (o ThrottlingPolicyAssociateArrayOutput) ToThrottlingPolicyAssociateArrayOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateArrayOutput {
	return o
}

func (o ThrottlingPolicyAssociateArrayOutput) Index(i pulumi.IntInput) ThrottlingPolicyAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ThrottlingPolicyAssociate {
		return vs[0].([]*ThrottlingPolicyAssociate)[vs[1].(int)]
	}).(ThrottlingPolicyAssociateOutput)
}

type ThrottlingPolicyAssociateMapOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThrottlingPolicyAssociate)(nil)).Elem()
}

func (o ThrottlingPolicyAssociateMapOutput) ToThrottlingPolicyAssociateMapOutput() ThrottlingPolicyAssociateMapOutput {
	return o
}

func (o ThrottlingPolicyAssociateMapOutput) ToThrottlingPolicyAssociateMapOutputWithContext(ctx context.Context) ThrottlingPolicyAssociateMapOutput {
	return o
}

func (o ThrottlingPolicyAssociateMapOutput) MapIndex(k pulumi.StringInput) ThrottlingPolicyAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ThrottlingPolicyAssociate {
		return vs[0].(map[string]*ThrottlingPolicyAssociate)[vs[1].(string)]
	}).(ThrottlingPolicyAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyAssociateInput)(nil)).Elem(), &ThrottlingPolicyAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyAssociateArrayInput)(nil)).Elem(), ThrottlingPolicyAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyAssociateMapInput)(nil)).Elem(), ThrottlingPolicyAssociateMap{})
	pulumi.RegisterOutputType(ThrottlingPolicyAssociateOutput{})
	pulumi.RegisterOutputType(ThrottlingPolicyAssociateArrayOutput{})
	pulumi.RegisterOutputType(ThrottlingPolicyAssociateMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IAM user role assignment within HuaweiCloud IAM.
//
// > **NOTE:** 1. You *must* have admin privileges to use this resource.
//
//	<br/>2. When the resource is created, the permissions will take effect after 15 to 30 minutes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			enterpriseProjectId := cfg.RequireObject("enterpriseProjectId")
//			user1Password := cfg.RequireObject("user1Password")
//			testRole, err := Iam.GetRole(ctx, &iam.GetRoleArgs{
//				DisplayName: pulumi.StringRef("ECS FullAccess"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testUser, err := Iam.NewUser(ctx, "testUser", &Iam.UserArgs{
//				Description: pulumi.String("A user"),
//				Password:    pulumi.Any(user1Password),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Iam.NewUserRoleAssignment(ctx, "testUserRoleAssignment", &Iam.UserRoleAssignmentArgs{
//				UserId:              testUser.ID(),
//				RoleId:              pulumi.String(testRole.Id),
//				EnterpriseProjectId: pulumi.Any(enterpriseProjectId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The role assignments can be imported using the `user_id`, `role_id` and
//
// `enterprise_project_id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Iam/userRoleAssignment:UserRoleAssignment test <user_id>/<role_id>/<enterprise_project_id>
//
// ```
type UserRoleAssignment struct {
	pulumi.CustomResourceState

	// Specifies the ID of the enterprise project
	// to assign the role in. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// Specifies the the ID of user to assign the role to.
	// Changing this parameter will create a new resource.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewUserRoleAssignment(ctx *pulumi.Context,
	name string, args *UserRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*UserRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnterpriseProjectId == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseProjectId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserRoleAssignment
	err := ctx.RegisterResource("huaweicloud:Iam/userRoleAssignment:UserRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserRoleAssignment gets an existing UserRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserRoleAssignmentState, opts ...pulumi.ResourceOption) (*UserRoleAssignment, error) {
	var resource UserRoleAssignment
	err := ctx.ReadResource("huaweicloud:Iam/userRoleAssignment:UserRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserRoleAssignment resources.
type userRoleAssignmentState struct {
	// Specifies the ID of the enterprise project
	// to assign the role in. Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleId *string `pulumi:"roleId"`
	// Specifies the the ID of user to assign the role to.
	// Changing this parameter will create a new resource.
	UserId *string `pulumi:"userId"`
}

type UserRoleAssignmentState struct {
	// Specifies the ID of the enterprise project
	// to assign the role in. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleId pulumi.StringPtrInput
	// Specifies the the ID of user to assign the role to.
	// Changing this parameter will create a new resource.
	UserId pulumi.StringPtrInput
}

func (UserRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleAssignmentState)(nil)).Elem()
}

type userRoleAssignmentArgs struct {
	// Specifies the ID of the enterprise project
	// to assign the role in. Changing this parameter will create a new resource.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleId string `pulumi:"roleId"`
	// Specifies the the ID of user to assign the role to.
	// Changing this parameter will create a new resource.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserRoleAssignment resource.
type UserRoleAssignmentArgs struct {
	// Specifies the ID of the enterprise project
	// to assign the role in. Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringInput
	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleId pulumi.StringInput
	// Specifies the the ID of user to assign the role to.
	// Changing this parameter will create a new resource.
	UserId pulumi.StringInput
}

func (UserRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleAssignmentArgs)(nil)).Elem()
}

type UserRoleAssignmentInput interface {
	pulumi.Input

	ToUserRoleAssignmentOutput() UserRoleAssignmentOutput
	ToUserRoleAssignmentOutputWithContext(ctx context.Context) UserRoleAssignmentOutput
}

func (*UserRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoleAssignment)(nil)).Elem()
}

func (i *UserRoleAssignment) ToUserRoleAssignmentOutput() UserRoleAssignmentOutput {
	return i.ToUserRoleAssignmentOutputWithContext(context.Background())
}

func (i *UserRoleAssignment) ToUserRoleAssignmentOutputWithContext(ctx context.Context) UserRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleAssignmentOutput)
}

// UserRoleAssignmentArrayInput is an input type that accepts UserRoleAssignmentArray and UserRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `UserRoleAssignmentArrayInput` via:
//
//	UserRoleAssignmentArray{ UserRoleAssignmentArgs{...} }
type UserRoleAssignmentArrayInput interface {
	pulumi.Input

	ToUserRoleAssignmentArrayOutput() UserRoleAssignmentArrayOutput
	ToUserRoleAssignmentArrayOutputWithContext(context.Context) UserRoleAssignmentArrayOutput
}

type UserRoleAssignmentArray []UserRoleAssignmentInput

func (UserRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoleAssignment)(nil)).Elem()
}

func (i UserRoleAssignmentArray) ToUserRoleAssignmentArrayOutput() UserRoleAssignmentArrayOutput {
	return i.ToUserRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i UserRoleAssignmentArray) ToUserRoleAssignmentArrayOutputWithContext(ctx context.Context) UserRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleAssignmentArrayOutput)
}

// UserRoleAssignmentMapInput is an input type that accepts UserRoleAssignmentMap and UserRoleAssignmentMapOutput values.
// You can construct a concrete instance of `UserRoleAssignmentMapInput` via:
//
//	UserRoleAssignmentMap{ "key": UserRoleAssignmentArgs{...} }
type UserRoleAssignmentMapInput interface {
	pulumi.Input

	ToUserRoleAssignmentMapOutput() UserRoleAssignmentMapOutput
	ToUserRoleAssignmentMapOutputWithContext(context.Context) UserRoleAssignmentMapOutput
}

type UserRoleAssignmentMap map[string]UserRoleAssignmentInput

func (UserRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoleAssignment)(nil)).Elem()
}

func (i UserRoleAssignmentMap) ToUserRoleAssignmentMapOutput() UserRoleAssignmentMapOutput {
	return i.ToUserRoleAssignmentMapOutputWithContext(context.Background())
}

func (i UserRoleAssignmentMap) ToUserRoleAssignmentMapOutputWithContext(ctx context.Context) UserRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleAssignmentMapOutput)
}

type UserRoleAssignmentOutput struct{ *pulumi.OutputState }

func (UserRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoleAssignment)(nil)).Elem()
}

func (o UserRoleAssignmentOutput) ToUserRoleAssignmentOutput() UserRoleAssignmentOutput {
	return o
}

func (o UserRoleAssignmentOutput) ToUserRoleAssignmentOutputWithContext(ctx context.Context) UserRoleAssignmentOutput {
	return o
}

// Specifies the ID of the enterprise project
// to assign the role in. Changing this parameter will create a new resource.
func (o UserRoleAssignmentOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoleAssignment) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the role to assign.
// Changing this parameter will create a new resource.
func (o UserRoleAssignmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoleAssignment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// Specifies the the ID of user to assign the role to.
// Changing this parameter will create a new resource.
func (o UserRoleAssignmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoleAssignment) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (UserRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoleAssignment)(nil)).Elem()
}

func (o UserRoleAssignmentArrayOutput) ToUserRoleAssignmentArrayOutput() UserRoleAssignmentArrayOutput {
	return o
}

func (o UserRoleAssignmentArrayOutput) ToUserRoleAssignmentArrayOutputWithContext(ctx context.Context) UserRoleAssignmentArrayOutput {
	return o
}

func (o UserRoleAssignmentArrayOutput) Index(i pulumi.IntInput) UserRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserRoleAssignment {
		return vs[0].([]*UserRoleAssignment)[vs[1].(int)]
	}).(UserRoleAssignmentOutput)
}

type UserRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (UserRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoleAssignment)(nil)).Elem()
}

func (o UserRoleAssignmentMapOutput) ToUserRoleAssignmentMapOutput() UserRoleAssignmentMapOutput {
	return o
}

func (o UserRoleAssignmentMapOutput) ToUserRoleAssignmentMapOutputWithContext(ctx context.Context) UserRoleAssignmentMapOutput {
	return o
}

func (o UserRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) UserRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserRoleAssignment {
		return vs[0].(map[string]*UserRoleAssignment)[vs[1].(string)]
	}).(UserRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleAssignmentInput)(nil)).Elem(), &UserRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleAssignmentArrayInput)(nil)).Elem(), UserRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleAssignmentMapInput)(nil)).Elem(), UserRoleAssignmentMap{})
	pulumi.RegisterOutputType(UserRoleAssignmentOutput{})
	pulumi.RegisterOutputType(UserRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(UserRoleAssignmentMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IAM user token resource within HuaweiCloud.
//
// ->**Note** The token can not be destroyed. It will be invalid after expiration time. If password or AK/SK is changed,
// the token valid time will last less than 30 minutes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			accountName := cfg.RequireObject("accountName")
//			userName := cfg.RequireObject("userName")
//			password := cfg.RequireObject("password")
//			_, err := Iam.NewUserToken(ctx, "test", &Iam.UserTokenArgs{
//				AccountName: pulumi.Any(accountName),
//				UserName:    pulumi.Any(userName),
//				Password:    pulumi.Any(password),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserToken struct {
	pulumi.CustomResourceState

	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Specifies the IAM user password. Changing this will create a new token.
	Password pulumi.StringOutput `pulumi:"password"`
	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The token. Validity period is 24 hours.
	Token pulumi.StringOutput `pulumi:"token"`
	// Specifies the IAM user name. Changing this will create a new token.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUserToken registers a new resource with the given unique name, arguments, and options.
func NewUserToken(ctx *pulumi.Context,
	name string, args *UserTokenArgs, opts ...pulumi.ResourceOption) (*UserToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserToken
	err := ctx.RegisterResource("huaweicloud:Iam/userToken:UserToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserToken gets an existing UserToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTokenState, opts ...pulumi.ResourceOption) (*UserToken, error) {
	var resource UserToken
	err := ctx.ReadResource("huaweicloud:Iam/userToken:UserToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserToken resources.
type userTokenState struct {
	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName *string `pulumi:"accountName"`
	// The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Specifies the IAM user password. Changing this will create a new token.
	Password *string `pulumi:"password"`
	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName *string `pulumi:"projectName"`
	// The token. Validity period is 24 hours.
	Token *string `pulumi:"token"`
	// Specifies the IAM user name. Changing this will create a new token.
	UserName *string `pulumi:"userName"`
}

type UserTokenState struct {
	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName pulumi.StringPtrInput
	// The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
	ExpiresAt pulumi.StringPtrInput
	// Specifies the IAM user password. Changing this will create a new token.
	Password pulumi.StringPtrInput
	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName pulumi.StringPtrInput
	// The token. Validity period is 24 hours.
	Token pulumi.StringPtrInput
	// Specifies the IAM user name. Changing this will create a new token.
	UserName pulumi.StringPtrInput
}

func (UserTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTokenState)(nil)).Elem()
}

type userTokenArgs struct {
	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName string `pulumi:"accountName"`
	// Specifies the IAM user password. Changing this will create a new token.
	Password string `pulumi:"password"`
	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName *string `pulumi:"projectName"`
	// Specifies the IAM user name. Changing this will create a new token.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserToken resource.
type UserTokenArgs struct {
	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName pulumi.StringInput
	// Specifies the IAM user password. Changing this will create a new token.
	Password pulumi.StringInput
	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName pulumi.StringPtrInput
	// Specifies the IAM user name. Changing this will create a new token.
	UserName pulumi.StringInput
}

func (UserTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTokenArgs)(nil)).Elem()
}

type UserTokenInput interface {
	pulumi.Input

	ToUserTokenOutput() UserTokenOutput
	ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput
}

func (*UserToken) ElementType() reflect.Type {
	return reflect.TypeOf((**UserToken)(nil)).Elem()
}

func (i *UserToken) ToUserTokenOutput() UserTokenOutput {
	return i.ToUserTokenOutputWithContext(context.Background())
}

func (i *UserToken) ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenOutput)
}

// UserTokenArrayInput is an input type that accepts UserTokenArray and UserTokenArrayOutput values.
// You can construct a concrete instance of `UserTokenArrayInput` via:
//
//	UserTokenArray{ UserTokenArgs{...} }
type UserTokenArrayInput interface {
	pulumi.Input

	ToUserTokenArrayOutput() UserTokenArrayOutput
	ToUserTokenArrayOutputWithContext(context.Context) UserTokenArrayOutput
}

type UserTokenArray []UserTokenInput

func (UserTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserToken)(nil)).Elem()
}

func (i UserTokenArray) ToUserTokenArrayOutput() UserTokenArrayOutput {
	return i.ToUserTokenArrayOutputWithContext(context.Background())
}

func (i UserTokenArray) ToUserTokenArrayOutputWithContext(ctx context.Context) UserTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenArrayOutput)
}

// UserTokenMapInput is an input type that accepts UserTokenMap and UserTokenMapOutput values.
// You can construct a concrete instance of `UserTokenMapInput` via:
//
//	UserTokenMap{ "key": UserTokenArgs{...} }
type UserTokenMapInput interface {
	pulumi.Input

	ToUserTokenMapOutput() UserTokenMapOutput
	ToUserTokenMapOutputWithContext(context.Context) UserTokenMapOutput
}

type UserTokenMap map[string]UserTokenInput

func (UserTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserToken)(nil)).Elem()
}

func (i UserTokenMap) ToUserTokenMapOutput() UserTokenMapOutput {
	return i.ToUserTokenMapOutputWithContext(context.Background())
}

func (i UserTokenMap) ToUserTokenMapOutputWithContext(ctx context.Context) UserTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenMapOutput)
}

type UserTokenOutput struct{ *pulumi.OutputState }

func (UserTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserToken)(nil)).Elem()
}

func (o UserTokenOutput) ToUserTokenOutput() UserTokenOutput {
	return o
}

func (o UserTokenOutput) ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput {
	return o
}

// Specifies the account name to which the IAM user belongs.
// Changing this will create a new token.
func (o UserTokenOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
func (o UserTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Specifies the IAM user password. Changing this will create a new token.
func (o UserTokenOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Specifies the project name. If it is blank, the token applies to global
// services, otherwise the token applies to project-level services. Changing this will create a new token.
func (o UserTokenOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The token. Validity period is 24 hours.
func (o UserTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Specifies the IAM user name. Changing this will create a new token.
func (o UserTokenOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type UserTokenArrayOutput struct{ *pulumi.OutputState }

func (UserTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserToken)(nil)).Elem()
}

func (o UserTokenArrayOutput) ToUserTokenArrayOutput() UserTokenArrayOutput {
	return o
}

func (o UserTokenArrayOutput) ToUserTokenArrayOutputWithContext(ctx context.Context) UserTokenArrayOutput {
	return o
}

func (o UserTokenArrayOutput) Index(i pulumi.IntInput) UserTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserToken {
		return vs[0].([]*UserToken)[vs[1].(int)]
	}).(UserTokenOutput)
}

type UserTokenMapOutput struct{ *pulumi.OutputState }

func (UserTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserToken)(nil)).Elem()
}

func (o UserTokenMapOutput) ToUserTokenMapOutput() UserTokenMapOutput {
	return o
}

func (o UserTokenMapOutput) ToUserTokenMapOutputWithContext(ctx context.Context) UserTokenMapOutput {
	return o
}

func (o UserTokenMapOutput) MapIndex(k pulumi.StringInput) UserTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserToken {
		return vs[0].(map[string]*UserToken)[vs[1].(string)]
	}).(UserTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenInput)(nil)).Elem(), &UserToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenArrayInput)(nil)).Elem(), UserTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenMapInput)(nil)).Elem(), UserTokenMap{})
	pulumi.RegisterOutputType(UserTokenOutput{})
	pulumi.RegisterOutputType(UserTokenArrayOutput{})
	pulumi.RegisterOutputType(UserTokenMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of IAM virtual MFA devices within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iam.GetVirtualMfaDevices(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVirtualMfaDevices(ctx *pulumi.Context, args *GetVirtualMfaDevicesArgs, opts ...pulumi.InvokeOption) (*GetVirtualMfaDevicesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetVirtualMfaDevicesResult
	err := ctx.Invoke("huaweicloud:Iam/getVirtualMfaDevices:getVirtualMfaDevices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualMfaDevices.
type GetVirtualMfaDevicesArgs struct {
	// Specifies the user ID to which the virtual MFA device belongs.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getVirtualMfaDevices.
type GetVirtualMfaDevicesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The user ID to which the virtual MFA device belongs.
	UserId *string `pulumi:"userId"`
	// The list of virtual MFA devices.
	VirtualMfaDevices []GetVirtualMfaDevicesVirtualMfaDevice `pulumi:"virtualMfaDevices"`
}

func GetVirtualMfaDevicesOutput(ctx *pulumi.Context, args GetVirtualMfaDevicesOutputArgs, opts ...pulumi.InvokeOption) GetVirtualMfaDevicesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVirtualMfaDevicesResult, error) {
			args := v.(GetVirtualMfaDevicesArgs)
			r, err := GetVirtualMfaDevices(ctx, &args, opts...)
			var s GetVirtualMfaDevicesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVirtualMfaDevicesResultOutput)
}

// A collection of arguments for invoking getVirtualMfaDevices.
type GetVirtualMfaDevicesOutputArgs struct {
	// Specifies the user ID to which the virtual MFA device belongs.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetVirtualMfaDevicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMfaDevicesArgs)(nil)).Elem()
}

// A collection of values returned by getVirtualMfaDevices.
type GetVirtualMfaDevicesResultOutput struct{ *pulumi.OutputState }

func (GetVirtualMfaDevicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMfaDevicesResult)(nil)).Elem()
}

func (o GetVirtualMfaDevicesResultOutput) ToGetVirtualMfaDevicesResultOutput() GetVirtualMfaDevicesResultOutput {
	return o
}

func (o GetVirtualMfaDevicesResultOutput) ToGetVirtualMfaDevicesResultOutputWithContext(ctx context.Context) GetVirtualMfaDevicesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVirtualMfaDevicesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMfaDevicesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The user ID to which the virtual MFA device belongs.
func (o GetVirtualMfaDevicesResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVirtualMfaDevicesResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The list of virtual MFA devices.
func (o GetVirtualMfaDevicesResultOutput) VirtualMfaDevices() GetVirtualMfaDevicesVirtualMfaDeviceArrayOutput {
	return o.ApplyT(func(v GetVirtualMfaDevicesResult) []GetVirtualMfaDevicesVirtualMfaDevice { return v.VirtualMfaDevices }).(GetVirtualMfaDevicesVirtualMfaDeviceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVirtualMfaDevicesResultOutput{})
}

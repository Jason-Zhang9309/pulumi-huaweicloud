// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iam.NewPasswordPolicy(ctx, "enhanced", &Iam.PasswordPolicyArgs{
//				MinimumPasswordLength:             pulumi.Int(12),
//				NumberOfRecentPasswordsDisallowed: pulumi.Int(2),
//				PasswordCharCombination:           pulumi.Int(4),
//				PasswordValidityPeriod:            pulumi.Int(180),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Identity password policy can be imported using the account ID or domain ID, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Iam/passwordPolicy:PasswordPolicy example <your account ID>
//
// ```
type PasswordPolicy struct {
	pulumi.CustomResourceState

	// Specifies the maximum number of times that a character is allowed
	// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
	// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
	// identical characters are not allowed in a password.
	MaximumConsecutiveIdenticalChars pulumi.IntOutput `pulumi:"maximumConsecutiveIdenticalChars"`
	// The maximum number of characters that a password can contain.
	MaximumPasswordLength pulumi.IntOutput `pulumi:"maximumPasswordLength"`
	// Specifies the minimum period (minutes) after which users are allowed to make
	// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
	MinimumPasswordAge pulumi.IntOutput `pulumi:"minimumPasswordAge"`
	// Specifies the minimum number of characters that a password must contain.
	// The value ranges from `6` to `32` and defaults to `8`.
	MinimumPasswordLength pulumi.IntPtrOutput `pulumi:"minimumPasswordLength"`
	// Specifies the member of previously used passwords that are
	// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
	// set the last three passwords that the user has previously used when setting a new password.
	NumberOfRecentPasswordsDisallowed pulumi.IntPtrOutput `pulumi:"numberOfRecentPasswordsDisallowed"`
	// Specifies the minimum number of character types that a password must contain.
	// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
	// uppercase letters, lowercase letters, digits, and special characters.
	PasswordCharCombination pulumi.IntPtrOutput `pulumi:"passwordCharCombination"`
	// Specifies whether the password can be the username or the username
	// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
	// be used as a password.
	PasswordNotUsernameOrInvert pulumi.BoolPtrOutput `pulumi:"passwordNotUsernameOrInvert"`
	// Specifies the password validity period (days).
	// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
	PasswordValidityPeriod pulumi.IntOutput `pulumi:"passwordValidityPeriod"`
}

// NewPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicy(ctx *pulumi.Context,
	name string, args *PasswordPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	if args == nil {
		args = &PasswordPolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource PasswordPolicy
	err := ctx.RegisterResource("huaweicloud:Iam/passwordPolicy:PasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicy gets an existing PasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyState, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	var resource PasswordPolicy
	err := ctx.ReadResource("huaweicloud:Iam/passwordPolicy:PasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicy resources.
type passwordPolicyState struct {
	// Specifies the maximum number of times that a character is allowed
	// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
	// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
	// identical characters are not allowed in a password.
	MaximumConsecutiveIdenticalChars *int `pulumi:"maximumConsecutiveIdenticalChars"`
	// The maximum number of characters that a password can contain.
	MaximumPasswordLength *int `pulumi:"maximumPasswordLength"`
	// Specifies the minimum period (minutes) after which users are allowed to make
	// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
	MinimumPasswordAge *int `pulumi:"minimumPasswordAge"`
	// Specifies the minimum number of characters that a password must contain.
	// The value ranges from `6` to `32` and defaults to `8`.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// Specifies the member of previously used passwords that are
	// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
	// set the last three passwords that the user has previously used when setting a new password.
	NumberOfRecentPasswordsDisallowed *int `pulumi:"numberOfRecentPasswordsDisallowed"`
	// Specifies the minimum number of character types that a password must contain.
	// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
	// uppercase letters, lowercase letters, digits, and special characters.
	PasswordCharCombination *int `pulumi:"passwordCharCombination"`
	// Specifies whether the password can be the username or the username
	// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
	// be used as a password.
	PasswordNotUsernameOrInvert *bool `pulumi:"passwordNotUsernameOrInvert"`
	// Specifies the password validity period (days).
	// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
	PasswordValidityPeriod *int `pulumi:"passwordValidityPeriod"`
}

type PasswordPolicyState struct {
	// Specifies the maximum number of times that a character is allowed
	// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
	// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
	// identical characters are not allowed in a password.
	MaximumConsecutiveIdenticalChars pulumi.IntPtrInput
	// The maximum number of characters that a password can contain.
	MaximumPasswordLength pulumi.IntPtrInput
	// Specifies the minimum period (minutes) after which users are allowed to make
	// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
	MinimumPasswordAge pulumi.IntPtrInput
	// Specifies the minimum number of characters that a password must contain.
	// The value ranges from `6` to `32` and defaults to `8`.
	MinimumPasswordLength pulumi.IntPtrInput
	// Specifies the member of previously used passwords that are
	// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
	// set the last three passwords that the user has previously used when setting a new password.
	NumberOfRecentPasswordsDisallowed pulumi.IntPtrInput
	// Specifies the minimum number of character types that a password must contain.
	// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
	// uppercase letters, lowercase letters, digits, and special characters.
	PasswordCharCombination pulumi.IntPtrInput
	// Specifies whether the password can be the username or the username
	// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
	// be used as a password.
	PasswordNotUsernameOrInvert pulumi.BoolPtrInput
	// Specifies the password validity period (days).
	// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
	PasswordValidityPeriod pulumi.IntPtrInput
}

func (PasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyState)(nil)).Elem()
}

type passwordPolicyArgs struct {
	// Specifies the maximum number of times that a character is allowed
	// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
	// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
	// identical characters are not allowed in a password.
	MaximumConsecutiveIdenticalChars *int `pulumi:"maximumConsecutiveIdenticalChars"`
	// Specifies the minimum period (minutes) after which users are allowed to make
	// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
	MinimumPasswordAge *int `pulumi:"minimumPasswordAge"`
	// Specifies the minimum number of characters that a password must contain.
	// The value ranges from `6` to `32` and defaults to `8`.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// Specifies the member of previously used passwords that are
	// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
	// set the last three passwords that the user has previously used when setting a new password.
	NumberOfRecentPasswordsDisallowed *int `pulumi:"numberOfRecentPasswordsDisallowed"`
	// Specifies the minimum number of character types that a password must contain.
	// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
	// uppercase letters, lowercase letters, digits, and special characters.
	PasswordCharCombination *int `pulumi:"passwordCharCombination"`
	// Specifies whether the password can be the username or the username
	// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
	// be used as a password.
	PasswordNotUsernameOrInvert *bool `pulumi:"passwordNotUsernameOrInvert"`
	// Specifies the password validity period (days).
	// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
	PasswordValidityPeriod *int `pulumi:"passwordValidityPeriod"`
}

// The set of arguments for constructing a PasswordPolicy resource.
type PasswordPolicyArgs struct {
	// Specifies the maximum number of times that a character is allowed
	// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
	// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
	// identical characters are not allowed in a password.
	MaximumConsecutiveIdenticalChars pulumi.IntPtrInput
	// Specifies the minimum period (minutes) after which users are allowed to make
	// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
	MinimumPasswordAge pulumi.IntPtrInput
	// Specifies the minimum number of characters that a password must contain.
	// The value ranges from `6` to `32` and defaults to `8`.
	MinimumPasswordLength pulumi.IntPtrInput
	// Specifies the member of previously used passwords that are
	// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
	// set the last three passwords that the user has previously used when setting a new password.
	NumberOfRecentPasswordsDisallowed pulumi.IntPtrInput
	// Specifies the minimum number of character types that a password must contain.
	// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
	// uppercase letters, lowercase letters, digits, and special characters.
	PasswordCharCombination pulumi.IntPtrInput
	// Specifies whether the password can be the username or the username
	// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
	// be used as a password.
	PasswordNotUsernameOrInvert pulumi.BoolPtrInput
	// Specifies the password validity period (days).
	// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
	PasswordValidityPeriod pulumi.IntPtrInput
}

func (PasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyArgs)(nil)).Elem()
}

type PasswordPolicyInput interface {
	pulumi.Input

	ToPasswordPolicyOutput() PasswordPolicyOutput
	ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput
}

func (*PasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (i *PasswordPolicy) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return i.ToPasswordPolicyOutputWithContext(context.Background())
}

func (i *PasswordPolicy) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyOutput)
}

// PasswordPolicyArrayInput is an input type that accepts PasswordPolicyArray and PasswordPolicyArrayOutput values.
// You can construct a concrete instance of `PasswordPolicyArrayInput` via:
//
//	PasswordPolicyArray{ PasswordPolicyArgs{...} }
type PasswordPolicyArrayInput interface {
	pulumi.Input

	ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput
	ToPasswordPolicyArrayOutputWithContext(context.Context) PasswordPolicyArrayOutput
}

type PasswordPolicyArray []PasswordPolicyInput

func (PasswordPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return i.ToPasswordPolicyArrayOutputWithContext(context.Background())
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyArrayOutput)
}

// PasswordPolicyMapInput is an input type that accepts PasswordPolicyMap and PasswordPolicyMapOutput values.
// You can construct a concrete instance of `PasswordPolicyMapInput` via:
//
//	PasswordPolicyMap{ "key": PasswordPolicyArgs{...} }
type PasswordPolicyMapInput interface {
	pulumi.Input

	ToPasswordPolicyMapOutput() PasswordPolicyMapOutput
	ToPasswordPolicyMapOutputWithContext(context.Context) PasswordPolicyMapOutput
}

type PasswordPolicyMap map[string]PasswordPolicyInput

func (PasswordPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return i.ToPasswordPolicyMapOutputWithContext(context.Background())
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyMapOutput)
}

type PasswordPolicyOutput struct{ *pulumi.OutputState }

func (PasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return o
}

// Specifies the maximum number of times that a character is allowed
// to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
// consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
// identical characters are not allowed in a password.
func (o PasswordPolicyOutput) MaximumConsecutiveIdenticalChars() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntOutput { return v.MaximumConsecutiveIdenticalChars }).(pulumi.IntOutput)
}

// The maximum number of characters that a password can contain.
func (o PasswordPolicyOutput) MaximumPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntOutput { return v.MaximumPasswordLength }).(pulumi.IntOutput)
}

// Specifies the minimum period (minutes) after which users are allowed to make
// a password change. The value ranges from `0` to `1,440` and defaults to `0`.
func (o PasswordPolicyOutput) MinimumPasswordAge() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntOutput { return v.MinimumPasswordAge }).(pulumi.IntOutput)
}

// Specifies the minimum number of characters that a password must contain.
// The value ranges from `6` to `32` and defaults to `8`.
func (o PasswordPolicyOutput) MinimumPasswordLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MinimumPasswordLength }).(pulumi.IntPtrOutput)
}

// Specifies the member of previously used passwords that are
// not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
// set the last three passwords that the user has previously used when setting a new password.
func (o PasswordPolicyOutput) NumberOfRecentPasswordsDisallowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.NumberOfRecentPasswordsDisallowed }).(pulumi.IntPtrOutput)
}

// Specifies the minimum number of character types that a password must contain.
// The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
// uppercase letters, lowercase letters, digits, and special characters.
func (o PasswordPolicyOutput) PasswordCharCombination() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.PasswordCharCombination }).(pulumi.IntPtrOutput)
}

// Specifies whether the password can be the username or the username
// spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
// be used as a password.
func (o PasswordPolicyOutput) PasswordNotUsernameOrInvert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.PasswordNotUsernameOrInvert }).(pulumi.BoolPtrOutput)
}

// Specifies the password validity period (days).
// The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
func (o PasswordPolicyOutput) PasswordValidityPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntOutput { return v.PasswordValidityPeriod }).(pulumi.IntOutput)
}

type PasswordPolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) Index(i pulumi.IntInput) PasswordPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].([]*PasswordPolicy)[vs[1].(int)]
	}).(PasswordPolicyOutput)
}

type PasswordPolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].(map[string]*PasswordPolicy)[vs[1].(string)]
	}).(PasswordPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyInput)(nil)).Elem(), &PasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyArrayInput)(nil)).Elem(), PasswordPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyMapInput)(nil)).Elem(), PasswordPolicyMap{})
	pulumi.RegisterOutputType(PasswordPolicyOutput{})
	pulumi.RegisterOutputType(PasswordPolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordPolicyMapOutput{})
}

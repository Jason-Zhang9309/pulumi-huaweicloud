// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a DNS PTR record in the HuaweiCloud DNS Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dns"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			eip1, err := Vpc.NewEip(ctx, "eip1", &Vpc.EipArgs{
//				Publicip: &vpc.EipPublicipArgs{
//					Type: pulumi.String("5_bgp"),
//				},
//				Bandwidth: &vpc.EipBandwidthArgs{
//					Name:       pulumi.String("test"),
//					Size:       pulumi.Int(5),
//					ShareType:  pulumi.String("PER"),
//					ChargeMode: pulumi.String("traffic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Dns.NewPtrrecord(ctx, "ptr1", &Dns.PtrrecordArgs{
//				Description:  pulumi.String("An example PTR record"),
//				FloatingipId: eip1.ID(),
//				Ttl:          pulumi.Int(3000),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PTR records can be imported using region and floatingip/eip ID, separated by a colon(:), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dns/ptrrecord:Ptrrecord ptr_1 cn-north-1:d90ce693-5ccf-4136-a0ed-152ce412b6b9
//
// ```
type Ptrrecord struct {
	pulumi.CustomResourceState

	// The address of the FloatingIP/EIP.
	Address pulumi.StringOutput `pulumi:"address"`
	// Specifies the description of the PTR record.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The enterprise project id of the PTR record. Changing this
	// creates a new PTR record.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	FloatingipId pulumi.StringOutput `pulumi:"floatingipId"`
	// Specifies the domain name of the PTR record. A domain name is case-insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the PTR record. If omitted,
	// the `region` argument of the provider will be used. Changing this creates a new PTR record.
	Region pulumi.StringOutput `pulumi:"region"`
	// Tags key/value pairs to associate with the PTR record.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the time to live (TTL) of the record set (in seconds).
	// The value range is 300–2147483647. The default value is 300.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
}

// NewPtrrecord registers a new resource with the given unique name, arguments, and options.
func NewPtrrecord(ctx *pulumi.Context,
	name string, args *PtrrecordArgs, opts ...pulumi.ResourceOption) (*Ptrrecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FloatingipId == nil {
		return nil, errors.New("invalid value for required argument 'FloatingipId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Ptrrecord
	err := ctx.RegisterResource("huaweicloud:Dns/ptrrecord:Ptrrecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPtrrecord gets an existing Ptrrecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPtrrecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PtrrecordState, opts ...pulumi.ResourceOption) (*Ptrrecord, error) {
	var resource Ptrrecord
	err := ctx.ReadResource("huaweicloud:Dns/ptrrecord:Ptrrecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ptrrecord resources.
type ptrrecordState struct {
	// The address of the FloatingIP/EIP.
	Address *string `pulumi:"address"`
	// Specifies the description of the PTR record.
	Description *string `pulumi:"description"`
	// The enterprise project id of the PTR record. Changing this
	// creates a new PTR record.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	FloatingipId *string `pulumi:"floatingipId"`
	// Specifies the domain name of the PTR record. A domain name is case-insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the PTR record. If omitted,
	// the `region` argument of the provider will be used. Changing this creates a new PTR record.
	Region *string `pulumi:"region"`
	// Tags key/value pairs to associate with the PTR record.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the time to live (TTL) of the record set (in seconds).
	// The value range is 300–2147483647. The default value is 300.
	Ttl *int `pulumi:"ttl"`
}

type PtrrecordState struct {
	// The address of the FloatingIP/EIP.
	Address pulumi.StringPtrInput
	// Specifies the description of the PTR record.
	Description pulumi.StringPtrInput
	// The enterprise project id of the PTR record. Changing this
	// creates a new PTR record.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	FloatingipId pulumi.StringPtrInput
	// Specifies the domain name of the PTR record. A domain name is case-insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the PTR record. If omitted,
	// the `region` argument of the provider will be used. Changing this creates a new PTR record.
	Region pulumi.StringPtrInput
	// Tags key/value pairs to associate with the PTR record.
	Tags pulumi.StringMapInput
	// Specifies the time to live (TTL) of the record set (in seconds).
	// The value range is 300–2147483647. The default value is 300.
	Ttl pulumi.IntPtrInput
}

func (PtrrecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*ptrrecordState)(nil)).Elem()
}

type ptrrecordArgs struct {
	// Specifies the description of the PTR record.
	Description *string `pulumi:"description"`
	// The enterprise project id of the PTR record. Changing this
	// creates a new PTR record.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	FloatingipId string `pulumi:"floatingipId"`
	// Specifies the domain name of the PTR record. A domain name is case-insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the PTR record. If omitted,
	// the `region` argument of the provider will be used. Changing this creates a new PTR record.
	Region *string `pulumi:"region"`
	// Tags key/value pairs to associate with the PTR record.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the time to live (TTL) of the record set (in seconds).
	// The value range is 300–2147483647. The default value is 300.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a Ptrrecord resource.
type PtrrecordArgs struct {
	// Specifies the description of the PTR record.
	Description pulumi.StringPtrInput
	// The enterprise project id of the PTR record. Changing this
	// creates a new PTR record.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	FloatingipId pulumi.StringInput
	// Specifies the domain name of the PTR record. A domain name is case-insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the PTR record. If omitted,
	// the `region` argument of the provider will be used. Changing this creates a new PTR record.
	Region pulumi.StringPtrInput
	// Tags key/value pairs to associate with the PTR record.
	Tags pulumi.StringMapInput
	// Specifies the time to live (TTL) of the record set (in seconds).
	// The value range is 300–2147483647. The default value is 300.
	Ttl pulumi.IntPtrInput
}

func (PtrrecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ptrrecordArgs)(nil)).Elem()
}

type PtrrecordInput interface {
	pulumi.Input

	ToPtrrecordOutput() PtrrecordOutput
	ToPtrrecordOutputWithContext(ctx context.Context) PtrrecordOutput
}

func (*Ptrrecord) ElementType() reflect.Type {
	return reflect.TypeOf((**Ptrrecord)(nil)).Elem()
}

func (i *Ptrrecord) ToPtrrecordOutput() PtrrecordOutput {
	return i.ToPtrrecordOutputWithContext(context.Background())
}

func (i *Ptrrecord) ToPtrrecordOutputWithContext(ctx context.Context) PtrrecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrrecordOutput)
}

// PtrrecordArrayInput is an input type that accepts PtrrecordArray and PtrrecordArrayOutput values.
// You can construct a concrete instance of `PtrrecordArrayInput` via:
//
//	PtrrecordArray{ PtrrecordArgs{...} }
type PtrrecordArrayInput interface {
	pulumi.Input

	ToPtrrecordArrayOutput() PtrrecordArrayOutput
	ToPtrrecordArrayOutputWithContext(context.Context) PtrrecordArrayOutput
}

type PtrrecordArray []PtrrecordInput

func (PtrrecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ptrrecord)(nil)).Elem()
}

func (i PtrrecordArray) ToPtrrecordArrayOutput() PtrrecordArrayOutput {
	return i.ToPtrrecordArrayOutputWithContext(context.Background())
}

func (i PtrrecordArray) ToPtrrecordArrayOutputWithContext(ctx context.Context) PtrrecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrrecordArrayOutput)
}

// PtrrecordMapInput is an input type that accepts PtrrecordMap and PtrrecordMapOutput values.
// You can construct a concrete instance of `PtrrecordMapInput` via:
//
//	PtrrecordMap{ "key": PtrrecordArgs{...} }
type PtrrecordMapInput interface {
	pulumi.Input

	ToPtrrecordMapOutput() PtrrecordMapOutput
	ToPtrrecordMapOutputWithContext(context.Context) PtrrecordMapOutput
}

type PtrrecordMap map[string]PtrrecordInput

func (PtrrecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ptrrecord)(nil)).Elem()
}

func (i PtrrecordMap) ToPtrrecordMapOutput() PtrrecordMapOutput {
	return i.ToPtrrecordMapOutputWithContext(context.Background())
}

func (i PtrrecordMap) ToPtrrecordMapOutputWithContext(ctx context.Context) PtrrecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrrecordMapOutput)
}

type PtrrecordOutput struct{ *pulumi.OutputState }

func (PtrrecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ptrrecord)(nil)).Elem()
}

func (o PtrrecordOutput) ToPtrrecordOutput() PtrrecordOutput {
	return o
}

func (o PtrrecordOutput) ToPtrrecordOutputWithContext(ctx context.Context) PtrrecordOutput {
	return o
}

// The address of the FloatingIP/EIP.
func (o PtrrecordOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Specifies the description of the PTR record.
func (o PtrrecordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The enterprise project id of the PTR record. Changing this
// creates a new PTR record.
func (o PtrrecordOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the ID of the FloatingIP/EIP.
// Changing this creates a new PTR record.
func (o PtrrecordOutput) FloatingipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringOutput { return v.FloatingipId }).(pulumi.StringOutput)
}

// Specifies the domain name of the PTR record. A domain name is case-insensitive.
// Uppercase letters will also be converted into lowercase letters.
func (o PtrrecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the PTR record. If omitted,
// the `region` argument of the provider will be used. Changing this creates a new PTR record.
func (o PtrrecordOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Tags key/value pairs to associate with the PTR record.
func (o PtrrecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the time to live (TTL) of the record set (in seconds).
// The value range is 300–2147483647. The default value is 300.
func (o PtrrecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ptrrecord) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

type PtrrecordArrayOutput struct{ *pulumi.OutputState }

func (PtrrecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ptrrecord)(nil)).Elem()
}

func (o PtrrecordArrayOutput) ToPtrrecordArrayOutput() PtrrecordArrayOutput {
	return o
}

func (o PtrrecordArrayOutput) ToPtrrecordArrayOutputWithContext(ctx context.Context) PtrrecordArrayOutput {
	return o
}

func (o PtrrecordArrayOutput) Index(i pulumi.IntInput) PtrrecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ptrrecord {
		return vs[0].([]*Ptrrecord)[vs[1].(int)]
	}).(PtrrecordOutput)
}

type PtrrecordMapOutput struct{ *pulumi.OutputState }

func (PtrrecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ptrrecord)(nil)).Elem()
}

func (o PtrrecordMapOutput) ToPtrrecordMapOutput() PtrrecordMapOutput {
	return o
}

func (o PtrrecordMapOutput) ToPtrrecordMapOutputWithContext(ctx context.Context) PtrrecordMapOutput {
	return o
}

func (o PtrrecordMapOutput) MapIndex(k pulumi.StringInput) PtrrecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ptrrecord {
		return vs[0].(map[string]*Ptrrecord)[vs[1].(string)]
	}).(PtrrecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PtrrecordInput)(nil)).Elem(), &Ptrrecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*PtrrecordArrayInput)(nil)).Elem(), PtrrecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PtrrecordMapInput)(nil)).Elem(), PtrrecordMap{})
	pulumi.RegisterOutputType(PtrrecordOutput{})
	pulumi.RegisterOutputType(PtrrecordArrayOutput{})
	pulumi.RegisterOutputType(PtrrecordMapOutput{})
}

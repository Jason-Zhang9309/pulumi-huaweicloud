// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages CDM job resource within HuaweiCloud.
//
// ## Example Usage
//
// ## Import
//
// Jobs can be imported by `id`. It is composed of the ID of CDM cluster which this job run in and the name of job,
//
// separated by a slash. For example,
//
// ```sh
//
//	$ pulumi import huaweicloud:Cdm/job:Job test b11b407c-e604-4e8d-8bc4-92398320b847/jobName
//
// ```
type Job struct {
	pulumi.CustomResourceState

	// Specifies the ID of CDM cluster which this job run in.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the job configuration. Structure is documented below.
	Config JobConfigPtrOutput `pulumi:"config"`
	// Specifies the connector name of destination link.
	// Changing this parameter will create a new resource.
	DestinationConnector pulumi.StringOutput `pulumi:"destinationConnector"`
	// Specifies the destination job configuration parameters. Each type of the
	// data source to be connected has different configuration parameters, please refer to the document link below.
	DestinationJobConfig pulumi.StringMapOutput `pulumi:"destinationJobConfig"`
	// Specifies the destination link name.
	// Changing this parameter will create a new resource.
	DestinationLinkName pulumi.StringOutput `pulumi:"destinationLinkName"`
	// Specifies type of job. Changing this parameter will create a new resource.
	// The options are as follows:
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// Specifies job name, which can contains of 1 to 240 characters, starting with a
	// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the connector name of source link.
	// Changing this parameter will create a new resource.
	SourceConnector pulumi.StringOutput `pulumi:"sourceConnector"`
	// Specifies the source job configuration parameters. Each type of the data source
	// to be connected has different configuration parameters, please refer to the document link below.
	SourceJobConfig pulumi.StringMapOutput `pulumi:"sourceJobConfig"`
	// Specifies the source link name.
	// Changing this parameter will create a new resource.
	SourceLinkName pulumi.StringOutput `pulumi:"sourceLinkName"`
	// Job status. The options are as follows:
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.DestinationConnector == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConnector'")
	}
	if args.DestinationJobConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationJobConfig'")
	}
	if args.DestinationLinkName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationLinkName'")
	}
	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.SourceConnector == nil {
		return nil, errors.New("invalid value for required argument 'SourceConnector'")
	}
	if args.SourceJobConfig == nil {
		return nil, errors.New("invalid value for required argument 'SourceJobConfig'")
	}
	if args.SourceLinkName == nil {
		return nil, errors.New("invalid value for required argument 'SourceLinkName'")
	}
	var resource Job
	err := ctx.RegisterResource("huaweicloud:Cdm/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("huaweicloud:Cdm/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Specifies the ID of CDM cluster which this job run in.
	// Changing this parameter will create a new resource.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the job configuration. Structure is documented below.
	Config *JobConfig `pulumi:"config"`
	// Specifies the connector name of destination link.
	// Changing this parameter will create a new resource.
	DestinationConnector *string `pulumi:"destinationConnector"`
	// Specifies the destination job configuration parameters. Each type of the
	// data source to be connected has different configuration parameters, please refer to the document link below.
	DestinationJobConfig map[string]string `pulumi:"destinationJobConfig"`
	// Specifies the destination link name.
	// Changing this parameter will create a new resource.
	DestinationLinkName *string `pulumi:"destinationLinkName"`
	// Specifies type of job. Changing this parameter will create a new resource.
	// The options are as follows:
	JobType *string `pulumi:"jobType"`
	// Specifies job name, which can contains of 1 to 240 characters, starting with a
	// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// The region in which to create the job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the connector name of source link.
	// Changing this parameter will create a new resource.
	SourceConnector *string `pulumi:"sourceConnector"`
	// Specifies the source job configuration parameters. Each type of the data source
	// to be connected has different configuration parameters, please refer to the document link below.
	SourceJobConfig map[string]string `pulumi:"sourceJobConfig"`
	// Specifies the source link name.
	// Changing this parameter will create a new resource.
	SourceLinkName *string `pulumi:"sourceLinkName"`
	// Job status. The options are as follows:
	Status *string `pulumi:"status"`
}

type JobState struct {
	// Specifies the ID of CDM cluster which this job run in.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringPtrInput
	// Specifies the job configuration. Structure is documented below.
	Config JobConfigPtrInput
	// Specifies the connector name of destination link.
	// Changing this parameter will create a new resource.
	DestinationConnector pulumi.StringPtrInput
	// Specifies the destination job configuration parameters. Each type of the
	// data source to be connected has different configuration parameters, please refer to the document link below.
	DestinationJobConfig pulumi.StringMapInput
	// Specifies the destination link name.
	// Changing this parameter will create a new resource.
	DestinationLinkName pulumi.StringPtrInput
	// Specifies type of job. Changing this parameter will create a new resource.
	// The options are as follows:
	JobType pulumi.StringPtrInput
	// Specifies job name, which can contains of 1 to 240 characters, starting with a
	// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// The region in which to create the job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the connector name of source link.
	// Changing this parameter will create a new resource.
	SourceConnector pulumi.StringPtrInput
	// Specifies the source job configuration parameters. Each type of the data source
	// to be connected has different configuration parameters, please refer to the document link below.
	SourceJobConfig pulumi.StringMapInput
	// Specifies the source link name.
	// Changing this parameter will create a new resource.
	SourceLinkName pulumi.StringPtrInput
	// Job status. The options are as follows:
	Status pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Specifies the ID of CDM cluster which this job run in.
	// Changing this parameter will create a new resource.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the job configuration. Structure is documented below.
	Config *JobConfig `pulumi:"config"`
	// Specifies the connector name of destination link.
	// Changing this parameter will create a new resource.
	DestinationConnector string `pulumi:"destinationConnector"`
	// Specifies the destination job configuration parameters. Each type of the
	// data source to be connected has different configuration parameters, please refer to the document link below.
	DestinationJobConfig map[string]string `pulumi:"destinationJobConfig"`
	// Specifies the destination link name.
	// Changing this parameter will create a new resource.
	DestinationLinkName string `pulumi:"destinationLinkName"`
	// Specifies type of job. Changing this parameter will create a new resource.
	// The options are as follows:
	JobType string `pulumi:"jobType"`
	// Specifies job name, which can contains of 1 to 240 characters, starting with a
	// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// The region in which to create the job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the connector name of source link.
	// Changing this parameter will create a new resource.
	SourceConnector string `pulumi:"sourceConnector"`
	// Specifies the source job configuration parameters. Each type of the data source
	// to be connected has different configuration parameters, please refer to the document link below.
	SourceJobConfig map[string]string `pulumi:"sourceJobConfig"`
	// Specifies the source link name.
	// Changing this parameter will create a new resource.
	SourceLinkName string `pulumi:"sourceLinkName"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Specifies the ID of CDM cluster which this job run in.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringInput
	// Specifies the job configuration. Structure is documented below.
	Config JobConfigPtrInput
	// Specifies the connector name of destination link.
	// Changing this parameter will create a new resource.
	DestinationConnector pulumi.StringInput
	// Specifies the destination job configuration parameters. Each type of the
	// data source to be connected has different configuration parameters, please refer to the document link below.
	DestinationJobConfig pulumi.StringMapInput
	// Specifies the destination link name.
	// Changing this parameter will create a new resource.
	DestinationLinkName pulumi.StringInput
	// Specifies type of job. Changing this parameter will create a new resource.
	// The options are as follows:
	JobType pulumi.StringInput
	// Specifies job name, which can contains of 1 to 240 characters, starting with a
	// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// The region in which to create the job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the connector name of source link.
	// Changing this parameter will create a new resource.
	SourceConnector pulumi.StringInput
	// Specifies the source job configuration parameters. Each type of the data source
	// to be connected has different configuration parameters, please refer to the document link below.
	SourceJobConfig pulumi.StringMapInput
	// Specifies the source link name.
	// Changing this parameter will create a new resource.
	SourceLinkName pulumi.StringInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Specifies the ID of CDM cluster which this job run in.
// Changing this parameter will create a new resource.
func (o JobOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specifies the job configuration. Structure is documented below.
func (o JobOutput) Config() JobConfigPtrOutput {
	return o.ApplyT(func(v *Job) JobConfigPtrOutput { return v.Config }).(JobConfigPtrOutput)
}

// Specifies the connector name of destination link.
// Changing this parameter will create a new resource.
func (o JobOutput) DestinationConnector() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.DestinationConnector }).(pulumi.StringOutput)
}

// Specifies the destination job configuration parameters. Each type of the
// data source to be connected has different configuration parameters, please refer to the document link below.
func (o JobOutput) DestinationJobConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.DestinationJobConfig }).(pulumi.StringMapOutput)
}

// Specifies the destination link name.
// Changing this parameter will create a new resource.
func (o JobOutput) DestinationLinkName() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.DestinationLinkName }).(pulumi.StringOutput)
}

// Specifies type of job. Changing this parameter will create a new resource.
// The options are as follows:
func (o JobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// Specifies job name, which can contains of 1 to 240 characters, starting with a
// letter. Only letters, digits, hyphens (-), and underscores (_) are allowed.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the job resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o JobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the connector name of source link.
// Changing this parameter will create a new resource.
func (o JobOutput) SourceConnector() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SourceConnector }).(pulumi.StringOutput)
}

// Specifies the source job configuration parameters. Each type of the data source
// to be connected has different configuration parameters, please refer to the document link below.
func (o JobOutput) SourceJobConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.SourceJobConfig }).(pulumi.StringMapOutput)
}

// Specifies the source link name.
// Changing this parameter will create a new resource.
func (o JobOutput) SourceLinkName() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SourceLinkName }).(pulumi.StringOutput)
}

// Job status. The options are as follows:
func (o JobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}

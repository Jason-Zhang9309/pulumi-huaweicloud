// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a IEC security group rule resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iec.NewSecurityGroupRule(ctx, "secgroupRuleTest", &Iec.SecurityGroupRuleArgs{
//				Direction:       pulumi.String("ingress"),
//				PortRangeMin:    pulumi.Int(22),
//				PortRangeMax:    pulumi.Int(22),
//				Ethertype:       pulumi.String("IPv4"),
//				Protocol:        pulumi.String("tcp"),
//				SecurityGroupId: pulumi.Any(_var.Iec_security_group_id),
//				RemoteIpPrefix:  pulumi.String("0.0.0.0/0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// Specifies a description of the security group rule. Changing this
	// parameter creates a new security group rule resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the direction of the rule, valid values are **ingress** or
	// **egress**. Changing this parameter creates a new security group rule resource.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
	// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
	Ethertype pulumi.StringPtrOutput `pulumi:"ethertype"`
	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMax pulumi.IntPtrOutput `pulumi:"portRangeMax"`
	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMin pulumi.IntPtrOutput `pulumi:"portRangeMin"`
	// Specifies the layer 4 protocol type, valid values are following. The valid
	// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
	// resource.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies the remote group id, the value needs to be an ID of a
	// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteGroupId pulumi.StringPtrOutput `pulumi:"remoteGroupId"`
	// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
	// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteIpPrefix pulumi.StringPtrOutput `pulumi:"remoteIpPrefix"`
	// Specifies the security group id the rule should belong to. Changing
	// this parameter creates a new security group rule resource.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	var resource SecurityGroupRule
	err := ctx.RegisterResource("huaweicloud:Iec/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("huaweicloud:Iec/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// Specifies a description of the security group rule. Changing this
	// parameter creates a new security group rule resource.
	Description *string `pulumi:"description"`
	// Specifies the direction of the rule, valid values are **ingress** or
	// **egress**. Changing this parameter creates a new security group rule resource.
	Direction *string `pulumi:"direction"`
	// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
	// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
	Ethertype *string `pulumi:"ethertype"`
	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMax *int `pulumi:"portRangeMax"`
	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMin *int `pulumi:"portRangeMin"`
	// Specifies the layer 4 protocol type, valid values are following. The valid
	// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
	// resource.
	Protocol *string `pulumi:"protocol"`
	// Specifies the remote group id, the value needs to be an ID of a
	// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteGroupId *string `pulumi:"remoteGroupId"`
	// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
	// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteIpPrefix *string `pulumi:"remoteIpPrefix"`
	// Specifies the security group id the rule should belong to. Changing
	// this parameter creates a new security group rule resource.
	SecurityGroupId *string `pulumi:"securityGroupId"`
}

type SecurityGroupRuleState struct {
	// Specifies a description of the security group rule. Changing this
	// parameter creates a new security group rule resource.
	Description pulumi.StringPtrInput
	// Specifies the direction of the rule, valid values are **ingress** or
	// **egress**. Changing this parameter creates a new security group rule resource.
	Direction pulumi.StringPtrInput
	// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
	// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
	Ethertype pulumi.StringPtrInput
	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMax pulumi.IntPtrInput
	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMin pulumi.IntPtrInput
	// Specifies the layer 4 protocol type, valid values are following. The valid
	// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
	// resource.
	Protocol pulumi.StringPtrInput
	// Specifies the remote group id, the value needs to be an ID of a
	// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteGroupId pulumi.StringPtrInput
	// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
	// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteIpPrefix pulumi.StringPtrInput
	// Specifies the security group id the rule should belong to. Changing
	// this parameter creates a new security group rule resource.
	SecurityGroupId pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// Specifies a description of the security group rule. Changing this
	// parameter creates a new security group rule resource.
	Description *string `pulumi:"description"`
	// Specifies the direction of the rule, valid values are **ingress** or
	// **egress**. Changing this parameter creates a new security group rule resource.
	Direction string `pulumi:"direction"`
	// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
	// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
	Ethertype *string `pulumi:"ethertype"`
	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMax *int `pulumi:"portRangeMax"`
	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMin *int `pulumi:"portRangeMin"`
	// Specifies the layer 4 protocol type, valid values are following. The valid
	// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
	// resource.
	Protocol string `pulumi:"protocol"`
	// Specifies the remote group id, the value needs to be an ID of a
	// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteGroupId *string `pulumi:"remoteGroupId"`
	// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
	// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteIpPrefix *string `pulumi:"remoteIpPrefix"`
	// Specifies the security group id the rule should belong to. Changing
	// this parameter creates a new security group rule resource.
	SecurityGroupId string `pulumi:"securityGroupId"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// Specifies a description of the security group rule. Changing this
	// parameter creates a new security group rule resource.
	Description pulumi.StringPtrInput
	// Specifies the direction of the rule, valid values are **ingress** or
	// **egress**. Changing this parameter creates a new security group rule resource.
	Direction pulumi.StringInput
	// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
	// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
	Ethertype pulumi.StringPtrInput
	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMax pulumi.IntPtrInput
	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
	PortRangeMin pulumi.IntPtrInput
	// Specifies the layer 4 protocol type, valid values are following. The valid
	// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
	// resource.
	Protocol pulumi.StringInput
	// Specifies the remote group id, the value needs to be an ID of a
	// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteGroupId pulumi.StringPtrInput
	// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
	// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
	// group rule resource.
	RemoteIpPrefix pulumi.StringPtrInput
	// Specifies the security group id the rule should belong to. Changing
	// this parameter creates a new security group rule resource.
	SecurityGroupId pulumi.StringInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}

type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput
}

func (*SecurityGroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

// SecurityGroupRuleArrayInput is an input type that accepts SecurityGroupRuleArray and SecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRuleArrayInput` via:
//
//	SecurityGroupRuleArray{ SecurityGroupRuleArgs{...} }
type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

// SecurityGroupRuleMapInput is an input type that accepts SecurityGroupRuleMap and SecurityGroupRuleMapOutput values.
// You can construct a concrete instance of `SecurityGroupRuleMapInput` via:
//
//	SecurityGroupRuleMap{ "key": SecurityGroupRuleArgs{...} }
type SecurityGroupRuleMapInput interface {
	pulumi.Input

	ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput
	ToSecurityGroupRuleMapOutputWithContext(context.Context) SecurityGroupRuleMapOutput
}

type SecurityGroupRuleMap map[string]SecurityGroupRuleInput

func (SecurityGroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return i.ToSecurityGroupRuleMapOutputWithContext(context.Background())
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleMapOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

// Specifies a description of the security group rule. Changing this
// parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the direction of the rule, valid values are **ingress** or
// **egress**. Changing this parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Specifies the layer 3 protocol type, valid values are **IPv4**(IPv4 is
// default) or **IPv6**. Changing this parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) Ethertype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Ethertype }).(pulumi.StringPtrOutput)
}

// Specifies the higher part of the allowed port range, valid integer value
// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) PortRangeMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.PortRangeMax }).(pulumi.IntPtrOutput)
}

// Specifies the lower part of the allowed port range, valid integer value
// needs to be between 1 and 65535. Changing this parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) PortRangeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.PortRangeMin }).(pulumi.IntPtrOutput)
}

// Specifies the layer 4 protocol type, valid values are following. The valid
// values are: **tcp**, **udp**, **icmp** and **gre**. Changing this parameter creates a new security group rule
// resource.
func (o SecurityGroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies the remote group id, the value needs to be an ID of a
// security group. This parameter and remoteIpPrefix are alternative. Changing this parameter creates a new security
// group rule resource.
func (o SecurityGroupRuleOutput) RemoteGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.RemoteGroupId }).(pulumi.StringPtrOutput)
}

// Specifies the remote CIDR, the value to be a valid CIDR (i.e.
// 192.168.0.0/16). This parameter and remoteGroupId are alternative. Changing this parameter creates a new security
// group rule resource.
func (o SecurityGroupRuleOutput) RemoteIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.RemoteIpPrefix }).(pulumi.StringPtrOutput)
}

// Specifies the security group id the rule should belong to. Changing
// this parameter creates a new security group rule resource.
func (o SecurityGroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].([]*SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type SecurityGroupRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].(map[string]*SecurityGroupRule)[vs[1].(string)]
	}).(SecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleInput)(nil)).Elem(), &SecurityGroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleMapInput)(nil)).Elem(), SecurityGroupRuleMap{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleMapOutput{})
}

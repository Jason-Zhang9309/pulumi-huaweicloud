// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a IEC server resource within HuaweiCloud.
//
// ## Example Usage
// ### Basic Server Instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			iecServerName := cfg.RequireObject("iecServerName")
//			iecIamgeId := cfg.RequireObject("iecIamgeId")
//			iecFlavorId := cfg.RequireObject("iecFlavorId")
//			iecSiteId := cfg.RequireObject("iecSiteId")
//			iecSiteOperator := cfg.RequireObject("iecSiteOperator")
//			iecVpcId := cfg.RequireObject("iecVpcId")
//			iecSubnetId := cfg.RequireObject("iecSubnetId")
//			iecSecgroupId := cfg.RequireObject("iecSecgroupId")
//			iecServerPassword := cfg.RequireObject("iecServerPassword")
//			_, err := Iec.NewServer(ctx, "serverTest", &Iec.ServerArgs{
//				ImageId:  pulumi.Any(iecIamgeId),
//				FlavorId: pulumi.Any(iecFlavorId),
//				VpcId:    pulumi.Any(iecVpcId),
//				SubnetIds: pulumi.StringArray{
//					pulumi.Any(iecSubnetId),
//				},
//				SecurityGroups: pulumi.StringArray{
//					pulumi.Any(iecSecgroupId),
//				},
//				AdminPass:      pulumi.Any(iecServerPassword),
//				BindEip:        pulumi.Bool(true),
//				SystemDiskType: pulumi.String("SAS"),
//				SystemDiskSize: pulumi.Int(40),
//				CoverageSites: iec.ServerCoverageSiteArray{
//					&iec.ServerCoverageSiteArgs{
//						SiteId:   pulumi.Any(iecSiteId),
//						Operator: pulumi.Any(iecSiteOperator),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Server Instance With Multiple Data Disks
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			iecServerName := cfg.RequireObject("iecServerName")
//			iecIamgeId := cfg.RequireObject("iecIamgeId")
//			iecFlavorId := cfg.RequireObject("iecFlavorId")
//			iecSiteId := cfg.RequireObject("iecSiteId")
//			iecSiteOperator := cfg.RequireObject("iecSiteOperator")
//			iecVpcId := cfg.RequireObject("iecVpcId")
//			iecSubnetId := cfg.RequireObject("iecSubnetId")
//			iecSecgroupId := cfg.RequireObject("iecSecgroupId")
//			iecServerPassword := cfg.RequireObject("iecServerPassword")
//			_, err := Iec.NewServer(ctx, "serverTest", &Iec.ServerArgs{
//				ImageId:  pulumi.Any(iecIamgeId),
//				FlavorId: pulumi.Any(iecFlavorId),
//				VpcId:    pulumi.Any(iecVpcId),
//				SubnetIds: pulumi.StringArray{
//					pulumi.Any(iecSubnetId),
//				},
//				SecurityGroups: pulumi.StringArray{
//					pulumi.Any(iecSecgroupId),
//				},
//				AdminPass:      pulumi.Any(iecServerPassword),
//				BindEip:        pulumi.Bool(true),
//				SystemDiskType: pulumi.String("SAS"),
//				SystemDiskSize: pulumi.Int(40),
//				DataDisks: iec.ServerDataDiskArray{
//					&iec.ServerDataDiskArgs{
//						Type: pulumi.String("SAS"),
//						Size: pulumi.Int(20),
//					},
//					&iec.ServerDataDiskArgs{
//						Type: pulumi.String("SAS"),
//						Size: pulumi.Int(40),
//					},
//				},
//				CoverageSites: iec.ServerCoverageSiteArray{
//					&iec.ServerCoverageSiteArgs{
//						SiteId:   pulumi.Any(iecSiteId),
//						Operator: pulumi.Any(iecSiteOperator),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Server struct {
	pulumi.CustomResourceState

	// Specifies the administrative password to assign to the IEC server. This
	// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
	// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
	// password on the existing server.
	AdminPass pulumi.StringPtrOutput `pulumi:"adminPass"`
	// Specifies whether the IEC server is bound to EIP. Changing this parameter
	// creates a new IEC server resource.
	BindEip pulumi.BoolPtrOutput `pulumi:"bindEip"`
	// Specifies the coverage level of IEC sites. Valid value is *SITE*.
	// Changing this parameter creates a new IEC server resource.
	CoverageLevel pulumi.StringPtrOutput `pulumi:"coverageLevel"`
	// Specifies the policy of IEC sites. Valid values are *centralize*
	// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
	CoveragePolicy pulumi.StringPtrOutput `pulumi:"coveragePolicy"`
	// Specifies an array of site ID and operator for the IEC server. The
	// object structure is documented below. Changing this parameter creates a new IEC server resource.
	CoverageSites ServerCoverageSiteArrayOutput `pulumi:"coverageSites"`
	// Specifies the array of data disks to attach to the IEC server. Up to two
	// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
	// server resource.
	DataDisks ServerDataDiskArrayOutput `pulumi:"dataDisks"`
	// The ID of the edgecloud service.
	EdgecloudId pulumi.StringOutput `pulumi:"edgecloudId"`
	// The Name of the edgecloud service.
	EdgecloudName pulumi.StringOutput `pulumi:"edgecloudName"`
	// Specifies the flavor ID of the desired flavor for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// The flavor name of the IEC server.
	FlavorName pulumi.StringOutput `pulumi:"flavorName"`
	// Specifies the image ID of the desired image for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The image name of the IEC server.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// Specifies the name of a key pair to put on the IEC server. The key pair must
	// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
	// this parameter creates a new IEC server resource.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Specifies the IEC server name. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
	// creates a new IEC server resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of one or more networks to attach to the IEC server. The object structure is documented below.
	Nics ServerNicArrayOutput `pulumi:"nics"`
	// The ID of origin server.
	OriginServerId pulumi.StringOutput `pulumi:"originServerId"`
	// The EIP address that is associted to the IEC server.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// Specifies an array of one or more security group IDs to associate with
	// the IEC server. Changing this parameter creates a new IEC server resource.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The status of IEC server.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies an array of one or more subnet ID of Network for the IEC server
	// binding. Changing this parameter creates a new IEC server resource.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// The system disk voume ID.
	SystemDiskId pulumi.StringOutput `pulumi:"systemDiskId"`
	// Specifies the size of system disk for the IEC server binding. The
	// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
	SystemDiskSize pulumi.IntOutput `pulumi:"systemDiskSize"`
	// Specifies the type of system disk for the IEC server binding. Valid
	// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	SystemDiskType pulumi.StringOutput `pulumi:"systemDiskType"`
	// Specifies the user data (information after encoding) configured during IEC
	// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
	// parameter creates a new IEC server resource.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// An array of one or more disks to attach to the IEC server. The object structure is documented
	// below.
	VolumeAttacheds ServerVolumeAttachedArrayOutput `pulumi:"volumeAttacheds"`
	// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
	// used to create IEC server. Changing this parameter creates a new IEC server resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoverageSites == nil {
		return nil, errors.New("invalid value for required argument 'CoverageSites'")
	}
	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.SystemDiskSize == nil {
		return nil, errors.New("invalid value for required argument 'SystemDiskSize'")
	}
	if args.SystemDiskType == nil {
		return nil, errors.New("invalid value for required argument 'SystemDiskType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Server
	err := ctx.RegisterResource("huaweicloud:Iec/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("huaweicloud:Iec/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Specifies the administrative password to assign to the IEC server. This
	// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
	// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
	// password on the existing server.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies whether the IEC server is bound to EIP. Changing this parameter
	// creates a new IEC server resource.
	BindEip *bool `pulumi:"bindEip"`
	// Specifies the coverage level of IEC sites. Valid value is *SITE*.
	// Changing this parameter creates a new IEC server resource.
	CoverageLevel *string `pulumi:"coverageLevel"`
	// Specifies the policy of IEC sites. Valid values are *centralize*
	// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
	CoveragePolicy *string `pulumi:"coveragePolicy"`
	// Specifies an array of site ID and operator for the IEC server. The
	// object structure is documented below. Changing this parameter creates a new IEC server resource.
	CoverageSites []ServerCoverageSite `pulumi:"coverageSites"`
	// Specifies the array of data disks to attach to the IEC server. Up to two
	// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
	// server resource.
	DataDisks []ServerDataDisk `pulumi:"dataDisks"`
	// The ID of the edgecloud service.
	EdgecloudId *string `pulumi:"edgecloudId"`
	// The Name of the edgecloud service.
	EdgecloudName *string `pulumi:"edgecloudName"`
	// Specifies the flavor ID of the desired flavor for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	FlavorId *string `pulumi:"flavorId"`
	// The flavor name of the IEC server.
	FlavorName *string `pulumi:"flavorName"`
	// Specifies the image ID of the desired image for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	ImageId *string `pulumi:"imageId"`
	// The image name of the IEC server.
	ImageName *string `pulumi:"imageName"`
	// Specifies the name of a key pair to put on the IEC server. The key pair must
	// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
	// this parameter creates a new IEC server resource.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the IEC server name. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
	// creates a new IEC server resource.
	Name *string `pulumi:"name"`
	// An array of one or more networks to attach to the IEC server. The object structure is documented below.
	Nics []ServerNic `pulumi:"nics"`
	// The ID of origin server.
	OriginServerId *string `pulumi:"originServerId"`
	// The EIP address that is associted to the IEC server.
	PublicIp *string `pulumi:"publicIp"`
	// Specifies an array of one or more security group IDs to associate with
	// the IEC server. Changing this parameter creates a new IEC server resource.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The status of IEC server.
	Status *string `pulumi:"status"`
	// Specifies an array of one or more subnet ID of Network for the IEC server
	// binding. Changing this parameter creates a new IEC server resource.
	SubnetIds []string `pulumi:"subnetIds"`
	// The system disk voume ID.
	SystemDiskId *string `pulumi:"systemDiskId"`
	// Specifies the size of system disk for the IEC server binding. The
	// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
	SystemDiskSize *int `pulumi:"systemDiskSize"`
	// Specifies the type of system disk for the IEC server binding. Valid
	// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	SystemDiskType *string `pulumi:"systemDiskType"`
	// Specifies the user data (information after encoding) configured during IEC
	// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
	// parameter creates a new IEC server resource.
	UserData *string `pulumi:"userData"`
	// An array of one or more disks to attach to the IEC server. The object structure is documented
	// below.
	VolumeAttacheds []ServerVolumeAttached `pulumi:"volumeAttacheds"`
	// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
	// used to create IEC server. Changing this parameter creates a new IEC server resource.
	VpcId *string `pulumi:"vpcId"`
}

type ServerState struct {
	// Specifies the administrative password to assign to the IEC server. This
	// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
	// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
	// password on the existing server.
	AdminPass pulumi.StringPtrInput
	// Specifies whether the IEC server is bound to EIP. Changing this parameter
	// creates a new IEC server resource.
	BindEip pulumi.BoolPtrInput
	// Specifies the coverage level of IEC sites. Valid value is *SITE*.
	// Changing this parameter creates a new IEC server resource.
	CoverageLevel pulumi.StringPtrInput
	// Specifies the policy of IEC sites. Valid values are *centralize*
	// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
	CoveragePolicy pulumi.StringPtrInput
	// Specifies an array of site ID and operator for the IEC server. The
	// object structure is documented below. Changing this parameter creates a new IEC server resource.
	CoverageSites ServerCoverageSiteArrayInput
	// Specifies the array of data disks to attach to the IEC server. Up to two
	// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
	// server resource.
	DataDisks ServerDataDiskArrayInput
	// The ID of the edgecloud service.
	EdgecloudId pulumi.StringPtrInput
	// The Name of the edgecloud service.
	EdgecloudName pulumi.StringPtrInput
	// Specifies the flavor ID of the desired flavor for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	FlavorId pulumi.StringPtrInput
	// The flavor name of the IEC server.
	FlavorName pulumi.StringPtrInput
	// Specifies the image ID of the desired image for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	ImageId pulumi.StringPtrInput
	// The image name of the IEC server.
	ImageName pulumi.StringPtrInput
	// Specifies the name of a key pair to put on the IEC server. The key pair must
	// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
	// this parameter creates a new IEC server resource.
	KeyPair pulumi.StringPtrInput
	// Specifies the IEC server name. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
	// creates a new IEC server resource.
	Name pulumi.StringPtrInput
	// An array of one or more networks to attach to the IEC server. The object structure is documented below.
	Nics ServerNicArrayInput
	// The ID of origin server.
	OriginServerId pulumi.StringPtrInput
	// The EIP address that is associted to the IEC server.
	PublicIp pulumi.StringPtrInput
	// Specifies an array of one or more security group IDs to associate with
	// the IEC server. Changing this parameter creates a new IEC server resource.
	SecurityGroups pulumi.StringArrayInput
	// The status of IEC server.
	Status pulumi.StringPtrInput
	// Specifies an array of one or more subnet ID of Network for the IEC server
	// binding. Changing this parameter creates a new IEC server resource.
	SubnetIds pulumi.StringArrayInput
	// The system disk voume ID.
	SystemDiskId pulumi.StringPtrInput
	// Specifies the size of system disk for the IEC server binding. The
	// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
	SystemDiskSize pulumi.IntPtrInput
	// Specifies the type of system disk for the IEC server binding. Valid
	// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	SystemDiskType pulumi.StringPtrInput
	// Specifies the user data (information after encoding) configured during IEC
	// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
	// parameter creates a new IEC server resource.
	UserData pulumi.StringPtrInput
	// An array of one or more disks to attach to the IEC server. The object structure is documented
	// below.
	VolumeAttacheds ServerVolumeAttachedArrayInput
	// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
	// used to create IEC server. Changing this parameter creates a new IEC server resource.
	VpcId pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// Specifies the administrative password to assign to the IEC server. This
	// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
	// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
	// password on the existing server.
	AdminPass *string `pulumi:"adminPass"`
	// Specifies whether the IEC server is bound to EIP. Changing this parameter
	// creates a new IEC server resource.
	BindEip *bool `pulumi:"bindEip"`
	// Specifies the coverage level of IEC sites. Valid value is *SITE*.
	// Changing this parameter creates a new IEC server resource.
	CoverageLevel *string `pulumi:"coverageLevel"`
	// Specifies the policy of IEC sites. Valid values are *centralize*
	// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
	CoveragePolicy *string `pulumi:"coveragePolicy"`
	// Specifies an array of site ID and operator for the IEC server. The
	// object structure is documented below. Changing this parameter creates a new IEC server resource.
	CoverageSites []ServerCoverageSite `pulumi:"coverageSites"`
	// Specifies the array of data disks to attach to the IEC server. Up to two
	// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
	// server resource.
	DataDisks []ServerDataDisk `pulumi:"dataDisks"`
	// Specifies the flavor ID of the desired flavor for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	FlavorId string `pulumi:"flavorId"`
	// Specifies the image ID of the desired image for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	ImageId string `pulumi:"imageId"`
	// Specifies the name of a key pair to put on the IEC server. The key pair must
	// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
	// this parameter creates a new IEC server resource.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the IEC server name. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
	// creates a new IEC server resource.
	Name *string `pulumi:"name"`
	// Specifies an array of one or more security group IDs to associate with
	// the IEC server. Changing this parameter creates a new IEC server resource.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies an array of one or more subnet ID of Network for the IEC server
	// binding. Changing this parameter creates a new IEC server resource.
	SubnetIds []string `pulumi:"subnetIds"`
	// Specifies the size of system disk for the IEC server binding. The
	// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
	SystemDiskSize int `pulumi:"systemDiskSize"`
	// Specifies the type of system disk for the IEC server binding. Valid
	// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	SystemDiskType string `pulumi:"systemDiskType"`
	// Specifies the user data (information after encoding) configured during IEC
	// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
	// parameter creates a new IEC server resource.
	UserData *string `pulumi:"userData"`
	// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
	// used to create IEC server. Changing this parameter creates a new IEC server resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// Specifies the administrative password to assign to the IEC server. This
	// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
	// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
	// password on the existing server.
	AdminPass pulumi.StringPtrInput
	// Specifies whether the IEC server is bound to EIP. Changing this parameter
	// creates a new IEC server resource.
	BindEip pulumi.BoolPtrInput
	// Specifies the coverage level of IEC sites. Valid value is *SITE*.
	// Changing this parameter creates a new IEC server resource.
	CoverageLevel pulumi.StringPtrInput
	// Specifies the policy of IEC sites. Valid values are *centralize*
	// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
	CoveragePolicy pulumi.StringPtrInput
	// Specifies an array of site ID and operator for the IEC server. The
	// object structure is documented below. Changing this parameter creates a new IEC server resource.
	CoverageSites ServerCoverageSiteArrayInput
	// Specifies the array of data disks to attach to the IEC server. Up to two
	// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
	// server resource.
	DataDisks ServerDataDiskArrayInput
	// Specifies the flavor ID of the desired flavor for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	FlavorId pulumi.StringInput
	// Specifies the image ID of the desired image for the IEC server. Changing
	// this parameter creates a new IEC server resource.
	ImageId pulumi.StringInput
	// Specifies the name of a key pair to put on the IEC server. The key pair must
	// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
	// this parameter creates a new IEC server resource.
	KeyPair pulumi.StringPtrInput
	// Specifies the IEC server name. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
	// creates a new IEC server resource.
	Name pulumi.StringPtrInput
	// Specifies an array of one or more security group IDs to associate with
	// the IEC server. Changing this parameter creates a new IEC server resource.
	SecurityGroups pulumi.StringArrayInput
	// Specifies an array of one or more subnet ID of Network for the IEC server
	// binding. Changing this parameter creates a new IEC server resource.
	SubnetIds pulumi.StringArrayInput
	// Specifies the size of system disk for the IEC server binding. The
	// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
	SystemDiskSize pulumi.IntInput
	// Specifies the type of system disk for the IEC server binding. Valid
	// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	SystemDiskType pulumi.StringInput
	// Specifies the user data (information after encoding) configured during IEC
	// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
	// parameter creates a new IEC server resource.
	UserData pulumi.StringPtrInput
	// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
	// used to create IEC server. Changing this parameter creates a new IEC server resource.
	VpcId pulumi.StringInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// Specifies the administrative password to assign to the IEC server. This
// parameter can contain a maximum of 26 characters, which may consist of letters, digits and Special characters(~!?,.:
// ;-_'"(){}[]/<>@#$%^&*+|\\=) and space. This parameter and `keyPair` are alternative. Changing this changes the root
// password on the existing server.
func (o ServerOutput) AdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.AdminPass }).(pulumi.StringPtrOutput)
}

// Specifies whether the IEC server is bound to EIP. Changing this parameter
// creates a new IEC server resource.
func (o ServerOutput) BindEip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.BindEip }).(pulumi.BoolPtrOutput)
}

// Specifies the coverage level of IEC sites. Valid value is *SITE*.
// Changing this parameter creates a new IEC server resource.
func (o ServerOutput) CoverageLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.CoverageLevel }).(pulumi.StringPtrOutput)
}

// Specifies the policy of IEC sites. Valid values are *centralize*
// and *discrete*, *centralize* is default. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) CoveragePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.CoveragePolicy }).(pulumi.StringPtrOutput)
}

// Specifies an array of site ID and operator for the IEC server. The
// object structure is documented below. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) CoverageSites() ServerCoverageSiteArrayOutput {
	return o.ApplyT(func(v *Server) ServerCoverageSiteArrayOutput { return v.CoverageSites }).(ServerCoverageSiteArrayOutput)
}

// Specifies the array of data disks to attach to the IEC server. Up to two
// data disks can be specified. The object structure is documented below. Changing this parameter creates a new IEC
// server resource.
func (o ServerOutput) DataDisks() ServerDataDiskArrayOutput {
	return o.ApplyT(func(v *Server) ServerDataDiskArrayOutput { return v.DataDisks }).(ServerDataDiskArrayOutput)
}

// The ID of the edgecloud service.
func (o ServerOutput) EdgecloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.EdgecloudId }).(pulumi.StringOutput)
}

// The Name of the edgecloud service.
func (o ServerOutput) EdgecloudName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.EdgecloudName }).(pulumi.StringOutput)
}

// Specifies the flavor ID of the desired flavor for the IEC server. Changing
// this parameter creates a new IEC server resource.
func (o ServerOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// The flavor name of the IEC server.
func (o ServerOutput) FlavorName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.FlavorName }).(pulumi.StringOutput)
}

// Specifies the image ID of the desired image for the IEC server. Changing
// this parameter creates a new IEC server resource.
func (o ServerOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// The image name of the IEC server.
func (o ServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// Specifies the name of a key pair to put on the IEC server. The key pair must
// already be created and associated with the tenant's account. This parameter and `adminPass` are alternative. Changing
// this parameter creates a new IEC server resource.
func (o ServerOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the IEC server name. This parameter can contain a maximum of 64
// characters, which may consist of letters, digits, dot(.), underscores (_), and hyphens (-). Changing this parameter
// creates a new IEC server resource.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of one or more networks to attach to the IEC server. The object structure is documented below.
func (o ServerOutput) Nics() ServerNicArrayOutput {
	return o.ApplyT(func(v *Server) ServerNicArrayOutput { return v.Nics }).(ServerNicArrayOutput)
}

// The ID of origin server.
func (o ServerOutput) OriginServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OriginServerId }).(pulumi.StringOutput)
}

// The EIP address that is associted to the IEC server.
func (o ServerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// Specifies an array of one or more security group IDs to associate with
// the IEC server. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The status of IEC server.
func (o ServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies an array of one or more subnet ID of Network for the IEC server
// binding. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The system disk voume ID.
func (o ServerOutput) SystemDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SystemDiskId }).(pulumi.StringOutput)
}

// Specifies the size of system disk for the IEC server binding. The
// value range is 40 to 100 in GB. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) SystemDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.SystemDiskSize }).(pulumi.IntOutput)
}

// Specifies the type of system disk for the IEC server binding. Valid
// value is *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
func (o ServerOutput) SystemDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SystemDiskType }).(pulumi.StringOutput)
}

// Specifies the user data (information after encoding) configured during IEC
// server creation. The value can come from a variety of sources: inline, read in from the *file* function. Changing this
// parameter creates a new IEC server resource.
func (o ServerOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// An array of one or more disks to attach to the IEC server. The object structure is documented
// below.
func (o ServerOutput) VolumeAttacheds() ServerVolumeAttachedArrayOutput {
	return o.ApplyT(func(v *Server) ServerVolumeAttachedArrayOutput { return v.VolumeAttacheds }).(ServerVolumeAttachedArrayOutput)
}

// Specifies the ID of vpc for the IEC server. VPC mode only *CUSTOMER* can be
// used to create IEC server. Changing this parameter creates a new IEC server resource.
func (o ServerOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}

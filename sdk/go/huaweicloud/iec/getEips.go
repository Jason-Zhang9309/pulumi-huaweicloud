// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of EIPs belong to a specific IEC site.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sitesTest, err := Iec.GetSites(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Iec.GetEips(ctx, &iec.GetEipsArgs{
//				SiteId: sitesTest.Sites[0].Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetEips(ctx *pulumi.Context, args *GetEipsArgs, opts ...pulumi.InvokeOption) (*GetEipsResult, error) {
	var rv GetEipsResult
	err := ctx.Invoke("huaweicloud:Iec/getEips:getEips", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEips.
type GetEipsArgs struct {
	// Specifies the ID of the port.
	PortId *string `pulumi:"portId"`
	// Specifies the ID of the IEC site.
	SiteId string `pulumi:"siteId"`
}

// A collection of values returned by getEips.
type GetEipsResult struct {
	// A list of all the EIPs found. The object is documented below.
	Eips []GetEipsEip `pulumi:"eips"`
	// The provider-assigned unique ID for this managed resource.
	Id     string  `pulumi:"id"`
	PortId *string `pulumi:"portId"`
	SiteId string  `pulumi:"siteId"`
	// The located information of the iec site. It contains area, province and city.
	SiteInfo string `pulumi:"siteInfo"`
}

func GetEipsOutput(ctx *pulumi.Context, args GetEipsOutputArgs, opts ...pulumi.InvokeOption) GetEipsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEipsResult, error) {
			args := v.(GetEipsArgs)
			r, err := GetEips(ctx, &args, opts...)
			var s GetEipsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEipsResultOutput)
}

// A collection of arguments for invoking getEips.
type GetEipsOutputArgs struct {
	// Specifies the ID of the port.
	PortId pulumi.StringPtrInput `pulumi:"portId"`
	// Specifies the ID of the IEC site.
	SiteId pulumi.StringInput `pulumi:"siteId"`
}

func (GetEipsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsArgs)(nil)).Elem()
}

// A collection of values returned by getEips.
type GetEipsResultOutput struct{ *pulumi.OutputState }

func (GetEipsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsResult)(nil)).Elem()
}

func (o GetEipsResultOutput) ToGetEipsResultOutput() GetEipsResultOutput {
	return o
}

func (o GetEipsResultOutput) ToGetEipsResultOutputWithContext(ctx context.Context) GetEipsResultOutput {
	return o
}

// A list of all the EIPs found. The object is documented below.
func (o GetEipsResultOutput) Eips() GetEipsEipArrayOutput {
	return o.ApplyT(func(v GetEipsResult) []GetEipsEip { return v.Eips }).(GetEipsEipArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEipsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEipsResultOutput) PortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEipsResult) *string { return v.PortId }).(pulumi.StringPtrOutput)
}

func (o GetEipsResultOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsResult) string { return v.SiteId }).(pulumi.StringOutput)
}

// The located information of the iec site. It contains area, province and city.
func (o GetEipsResultOutput) SiteInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsResult) string { return v.SiteInfo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEipsResultOutput{})
}

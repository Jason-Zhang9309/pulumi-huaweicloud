// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of bandwidths belong to a specific IEC site.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sitesTest, err := Iec.GetSites(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Iec.GetBandwidths(ctx, &iec.GetBandwidthsArgs{
//				SiteId: sitesTest.Sites[0].Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBandwidths(ctx *pulumi.Context, args *GetBandwidthsArgs, opts ...pulumi.InvokeOption) (*GetBandwidthsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBandwidthsResult
	err := ctx.Invoke("huaweicloud:Iec/getBandwidths:getBandwidths", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBandwidths.
type GetBandwidthsArgs struct {
	// Specifies the ID of the IEC site.
	SiteId string `pulumi:"siteId"`
}

// A collection of values returned by getBandwidths.
type GetBandwidthsResult struct {
	// A list of all the bandwidths found. The object is documented below.
	Bandwidths []GetBandwidthsBandwidth `pulumi:"bandwidths"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	SiteId string `pulumi:"siteId"`
	// The located information of the iec site. It contains area, province and city.
	SiteInfo string `pulumi:"siteInfo"`
}

func GetBandwidthsOutput(ctx *pulumi.Context, args GetBandwidthsOutputArgs, opts ...pulumi.InvokeOption) GetBandwidthsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBandwidthsResult, error) {
			args := v.(GetBandwidthsArgs)
			r, err := GetBandwidths(ctx, &args, opts...)
			var s GetBandwidthsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBandwidthsResultOutput)
}

// A collection of arguments for invoking getBandwidths.
type GetBandwidthsOutputArgs struct {
	// Specifies the ID of the IEC site.
	SiteId pulumi.StringInput `pulumi:"siteId"`
}

func (GetBandwidthsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthsArgs)(nil)).Elem()
}

// A collection of values returned by getBandwidths.
type GetBandwidthsResultOutput struct{ *pulumi.OutputState }

func (GetBandwidthsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthsResult)(nil)).Elem()
}

func (o GetBandwidthsResultOutput) ToGetBandwidthsResultOutput() GetBandwidthsResultOutput {
	return o
}

func (o GetBandwidthsResultOutput) ToGetBandwidthsResultOutputWithContext(ctx context.Context) GetBandwidthsResultOutput {
	return o
}

// A list of all the bandwidths found. The object is documented below.
func (o GetBandwidthsResultOutput) Bandwidths() GetBandwidthsBandwidthArrayOutput {
	return o.ApplyT(func(v GetBandwidthsResult) []GetBandwidthsBandwidth { return v.Bandwidths }).(GetBandwidthsBandwidthArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBandwidthsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBandwidthsResultOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsResult) string { return v.SiteId }).(pulumi.StringOutput)
}

// The located information of the iec site. It contains area, province and city.
func (o GetBandwidthsResultOutput) SiteInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsResult) string { return v.SiteInfo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBandwidthsResultOutput{})
}

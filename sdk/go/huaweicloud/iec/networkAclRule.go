// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a network ACL rule resource within HuaweiCloud IEC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			aclTest, err := Iec.NewNetworkAcl(ctx, "aclTest", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Iec.NewNetworkAclRule(ctx, "ruleTest", &Iec.NetworkAclRuleArgs{
//				NetworkAclId:         aclTest.ID(),
//				Direction:            pulumi.String("ingress"),
//				Protocol:             pulumi.String("tcp"),
//				Action:               pulumi.String("allow"),
//				SourceIpAddress:      pulumi.String("152.16.30.0/24"),
//				DestinationIpAddress: pulumi.String("192.168.128.0/18"),
//				DestinationPort:      pulumi.String("445"),
//				Enabled:              pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NetworkAclRule struct {
	pulumi.CustomResourceState

	// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
	// or **deny**.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Specifies the description for the iec network ACL rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	DestinationIpAddress pulumi.StringPtrOutput `pulumi:"destinationIpAddress"`
	// Specifies the destination port number or port number range. The value ranges
	// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	DestinationPort pulumi.StringPtrOutput `pulumi:"destinationPort"`
	// Specifies the direction of the rule, valid values are **ingress** or **egress**.
	// Changing this parameter creates a new iec network ACL rule resource.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Specifies the Enabled status for the iec network ACL rule. The default value is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The version of elastic IP address. IEC services only support IPv4(4) now.
	IpVersion pulumi.IntPtrOutput `pulumi:"ipVersion"`
	// Specifies a unique id for the iec network ACL.
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// The ID of the firewall policy for the iec network ACL.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
	// **udp**, **icmp** and **any**.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Specifies the source IP address that the traffic is allowed from. The default
	// value is **0.0.0.0/0**. For example:
	// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	SourceIpAddress pulumi.StringPtrOutput `pulumi:"sourceIpAddress"`
	// Specifies the source port number or port number range. The value ranges from 1 to
	// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	SourcePort pulumi.StringPtrOutput `pulumi:"sourcePort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NetworkAclRule
	err := ctx.RegisterResource("huaweicloud:Iec/networkAclRule:NetworkAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	var resource NetworkAclRule
	err := ctx.ReadResource("huaweicloud:Iec/networkAclRule:NetworkAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type networkAclRuleState struct {
	// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
	// or **deny**.
	Action *string `pulumi:"action"`
	// Specifies the description for the iec network ACL rule.
	Description *string `pulumi:"description"`
	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	// Specifies the destination port number or port number range. The value ranges
	// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	DestinationPort *string `pulumi:"destinationPort"`
	// Specifies the direction of the rule, valid values are **ingress** or **egress**.
	// Changing this parameter creates a new iec network ACL rule resource.
	Direction *string `pulumi:"direction"`
	// Specifies the Enabled status for the iec network ACL rule. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The version of elastic IP address. IEC services only support IPv4(4) now.
	IpVersion *int `pulumi:"ipVersion"`
	// Specifies a unique id for the iec network ACL.
	NetworkAclId *string `pulumi:"networkAclId"`
	// The ID of the firewall policy for the iec network ACL.
	PolicyId *string `pulumi:"policyId"`
	// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
	// **udp**, **icmp** and **any**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the source IP address that the traffic is allowed from. The default
	// value is **0.0.0.0/0**. For example:
	// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Specifies the source port number or port number range. The value ranges from 1 to
	// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	SourcePort *string `pulumi:"sourcePort"`
}

type NetworkAclRuleState struct {
	// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
	// or **deny**.
	Action pulumi.StringPtrInput
	// Specifies the description for the iec network ACL rule.
	Description pulumi.StringPtrInput
	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	DestinationIpAddress pulumi.StringPtrInput
	// Specifies the destination port number or port number range. The value ranges
	// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	DestinationPort pulumi.StringPtrInput
	// Specifies the direction of the rule, valid values are **ingress** or **egress**.
	// Changing this parameter creates a new iec network ACL rule resource.
	Direction pulumi.StringPtrInput
	// Specifies the Enabled status for the iec network ACL rule. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The version of elastic IP address. IEC services only support IPv4(4) now.
	IpVersion pulumi.IntPtrInput
	// Specifies a unique id for the iec network ACL.
	NetworkAclId pulumi.StringPtrInput
	// The ID of the firewall policy for the iec network ACL.
	PolicyId pulumi.StringPtrInput
	// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
	// **udp**, **icmp** and **any**.
	Protocol pulumi.StringPtrInput
	// Specifies the source IP address that the traffic is allowed from. The default
	// value is **0.0.0.0/0**. For example:
	// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	SourceIpAddress pulumi.StringPtrInput
	// Specifies the source port number or port number range. The value ranges from 1 to
	// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	SourcePort pulumi.StringPtrInput
}

func (NetworkAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleState)(nil)).Elem()
}

type networkAclRuleArgs struct {
	// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
	// or **deny**.
	Action *string `pulumi:"action"`
	// Specifies the description for the iec network ACL rule.
	Description *string `pulumi:"description"`
	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	// Specifies the destination port number or port number range. The value ranges
	// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	DestinationPort *string `pulumi:"destinationPort"`
	// Specifies the direction of the rule, valid values are **ingress** or **egress**.
	// Changing this parameter creates a new iec network ACL rule resource.
	Direction string `pulumi:"direction"`
	// Specifies the Enabled status for the iec network ACL rule. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The version of elastic IP address. IEC services only support IPv4(4) now.
	IpVersion *int `pulumi:"ipVersion"`
	// Specifies a unique id for the iec network ACL.
	NetworkAclId string `pulumi:"networkAclId"`
	// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
	// **udp**, **icmp** and **any**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the source IP address that the traffic is allowed from. The default
	// value is **0.0.0.0/0**. For example:
	// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Specifies the source port number or port number range. The value ranges from 1 to
	// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	SourcePort *string `pulumi:"sourcePort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
	// or **deny**.
	Action pulumi.StringPtrInput
	// Specifies the description for the iec network ACL rule.
	Description pulumi.StringPtrInput
	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	DestinationIpAddress pulumi.StringPtrInput
	// Specifies the destination port number or port number range. The value ranges
	// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	DestinationPort pulumi.StringPtrInput
	// Specifies the direction of the rule, valid values are **ingress** or **egress**.
	// Changing this parameter creates a new iec network ACL rule resource.
	Direction pulumi.StringInput
	// Specifies the Enabled status for the iec network ACL rule. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The version of elastic IP address. IEC services only support IPv4(4) now.
	IpVersion pulumi.IntPtrInput
	// Specifies a unique id for the iec network ACL.
	NetworkAclId pulumi.StringInput
	// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
	// **udp**, **icmp** and **any**.
	Protocol pulumi.StringPtrInput
	// Specifies the source IP address that the traffic is allowed from. The default
	// value is **0.0.0.0/0**. For example:
	// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	SourceIpAddress pulumi.StringPtrInput
	// Specifies the source port number or port number range. The value ranges from 1 to
	// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	SourcePort pulumi.StringPtrInput
}

func (NetworkAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleArgs)(nil)).Elem()
}

type NetworkAclRuleInput interface {
	pulumi.Input

	ToNetworkAclRuleOutput() NetworkAclRuleOutput
	ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput
}

func (*NetworkAclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (i *NetworkAclRule) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return i.ToNetworkAclRuleOutputWithContext(context.Background())
}

func (i *NetworkAclRule) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleOutput)
}

// NetworkAclRuleArrayInput is an input type that accepts NetworkAclRuleArray and NetworkAclRuleArrayOutput values.
// You can construct a concrete instance of `NetworkAclRuleArrayInput` via:
//
//	NetworkAclRuleArray{ NetworkAclRuleArgs{...} }
type NetworkAclRuleArrayInput interface {
	pulumi.Input

	ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput
	ToNetworkAclRuleArrayOutputWithContext(context.Context) NetworkAclRuleArrayOutput
}

type NetworkAclRuleArray []NetworkAclRuleInput

func (NetworkAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return i.ToNetworkAclRuleArrayOutputWithContext(context.Background())
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleArrayOutput)
}

// NetworkAclRuleMapInput is an input type that accepts NetworkAclRuleMap and NetworkAclRuleMapOutput values.
// You can construct a concrete instance of `NetworkAclRuleMapInput` via:
//
//	NetworkAclRuleMap{ "key": NetworkAclRuleArgs{...} }
type NetworkAclRuleMapInput interface {
	pulumi.Input

	ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput
	ToNetworkAclRuleMapOutputWithContext(context.Context) NetworkAclRuleMapOutput
}

type NetworkAclRuleMap map[string]NetworkAclRuleInput

func (NetworkAclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return i.ToNetworkAclRuleMapOutputWithContext(context.Background())
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleMapOutput)
}

type NetworkAclRuleOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return o
}

// Specifies the action in the iec network ACL rule. Currently, the value can be **allow**
// or **deny**.
func (o NetworkAclRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the description for the iec network ACL rule.
func (o NetworkAclRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the destination IP address to which the traffic is allowed.
// The default value is **0.0.0.0/0**. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
func (o NetworkAclRuleOutput) DestinationIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.DestinationIpAddress }).(pulumi.StringPtrOutput)
}

// Specifies the destination port number or port number range. The value ranges
// from `1` to `65,535`. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
func (o NetworkAclRuleOutput) DestinationPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.DestinationPort }).(pulumi.StringPtrOutput)
}

// Specifies the direction of the rule, valid values are **ingress** or **egress**.
// Changing this parameter creates a new iec network ACL rule resource.
func (o NetworkAclRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Specifies the Enabled status for the iec network ACL rule. The default value is true.
func (o NetworkAclRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The version of elastic IP address. IEC services only support IPv4(4) now.
func (o NetworkAclRuleOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.IpVersion }).(pulumi.IntPtrOutput)
}

// Specifies a unique id for the iec network ACL.
func (o NetworkAclRuleOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// The ID of the firewall policy for the iec network ACL.
func (o NetworkAclRuleOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Specifies the protocol supported by the iec network ACL rule.Valid values are: **tcp**,
// **udp**, **icmp** and **any**.
func (o NetworkAclRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies the source IP address that the traffic is allowed from. The default
// value is **0.0.0.0/0**. For example:
// xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
func (o NetworkAclRuleOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// Specifies the source port number or port number range. The value ranges from 1 to
// 65535. For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
func (o NetworkAclRuleOutput) SourcePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.SourcePort }).(pulumi.StringPtrOutput)
}

type NetworkAclRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) Index(i pulumi.IntInput) NetworkAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].([]*NetworkAclRule)[vs[1].(int)]
	}).(NetworkAclRuleOutput)
}

type NetworkAclRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkAclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].(map[string]*NetworkAclRule)[vs[1].(string)]
	}).(NetworkAclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleInput)(nil)).Elem(), &NetworkAclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleArrayInput)(nil)).Elem(), NetworkAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleMapInput)(nil)).Elem(), NetworkAclRuleMap{})
	pulumi.RegisterOutputType(NetworkAclRuleOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of subnets belong to a specific IEC VPC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			_, err := Iec.GetVpcSubnets(ctx, &iec.GetVpcSubnetsArgs{
//				VpcId: vpcId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVpcSubnets(ctx *pulumi.Context, args *GetVpcSubnetsArgs, opts ...pulumi.InvokeOption) (*GetVpcSubnetsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetVpcSubnetsResult
	err := ctx.Invoke("huaweicloud:Iec/getVpcSubnets:getVpcSubnets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcSubnets.
type GetVpcSubnetsArgs struct {
	// The region in which to obtain the subnets. If omitted, the provider-level region will be
	// used.
	Region *string `pulumi:"region"`
	// Specifies the ID of the IEC site.
	SiteId *string `pulumi:"siteId"`
	// Specifies the ID of the IEC VPC.
	VpcId string `pulumi:"vpcId"`
}

// A collection of values returned by getVpcSubnets.
type GetVpcSubnetsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Region string `pulumi:"region"`
	// Indicates the ID of the IEC site.
	SiteId *string `pulumi:"siteId"`
	// A list of all the subnets found. The object is documented below.
	Subnets []GetVpcSubnetsSubnet `pulumi:"subnets"`
	VpcId   string                `pulumi:"vpcId"`
}

func GetVpcSubnetsOutput(ctx *pulumi.Context, args GetVpcSubnetsOutputArgs, opts ...pulumi.InvokeOption) GetVpcSubnetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpcSubnetsResult, error) {
			args := v.(GetVpcSubnetsArgs)
			r, err := GetVpcSubnets(ctx, &args, opts...)
			var s GetVpcSubnetsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVpcSubnetsResultOutput)
}

// A collection of arguments for invoking getVpcSubnets.
type GetVpcSubnetsOutputArgs struct {
	// The region in which to obtain the subnets. If omitted, the provider-level region will be
	// used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the ID of the IEC site.
	SiteId pulumi.StringPtrInput `pulumi:"siteId"`
	// Specifies the ID of the IEC VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetVpcSubnetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcSubnets.
type GetVpcSubnetsResultOutput struct{ *pulumi.OutputState }

func (GetVpcSubnetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsResult)(nil)).Elem()
}

func (o GetVpcSubnetsResultOutput) ToGetVpcSubnetsResultOutput() GetVpcSubnetsResultOutput {
	return o
}

func (o GetVpcSubnetsResultOutput) ToGetVpcSubnetsResultOutputWithContext(ctx context.Context) GetVpcSubnetsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpcSubnetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcSubnetsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the ID of the IEC site.
func (o GetVpcSubnetsResultOutput) SiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) *string { return v.SiteId }).(pulumi.StringPtrOutput)
}

// A list of all the subnets found. The object is documented below.
func (o GetVpcSubnetsResultOutput) Subnets() GetVpcSubnetsSubnetArrayOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) []GetVpcSubnetsSubnet { return v.Subnets }).(GetVpcSubnetsSubnetArrayOutput)
}

func (o GetVpcSubnetsResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcSubnetsResultOutput{})
}

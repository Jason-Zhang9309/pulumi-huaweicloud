// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the details of a specific IEC VPC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcName := cfg.RequireObject("vpcName")
//			_, err := Iec.GetVpc(ctx, &iec.GetVpcArgs{
//				Name: pulumi.StringRef(vpcName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVpc(ctx *pulumi.Context, args *LookupVpcArgs, opts ...pulumi.InvokeOption) (*LookupVpcResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupVpcResult
	err := ctx.Invoke("huaweicloud:Iec/getVpc:getVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpc.
type LookupVpcArgs struct {
	// Specifies the ID of the IEC VPC to retrieve.
	Id *string `pulumi:"id"`
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain the vpc. If omitted, the provider-level region
	// will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getVpc.
type LookupVpcResult struct {
	// Indicates the IP address range for the VPC.
	Cidr string `pulumi:"cidr"`
	Id   string `pulumi:"id"`
	// Indicates the mode of the IEC VPC. Possible values are *SYSTEM* and *CUSTOMER*.
	Mode      string `pulumi:"mode"`
	Name      string `pulumi:"name"`
	Region    string `pulumi:"region"`
	SubnetNum int    `pulumi:"subnetNum"`
}

func LookupVpcOutput(ctx *pulumi.Context, args LookupVpcOutputArgs, opts ...pulumi.InvokeOption) LookupVpcResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVpcResult, error) {
			args := v.(LookupVpcArgs)
			r, err := LookupVpc(ctx, &args, opts...)
			var s LookupVpcResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVpcResultOutput)
}

// A collection of arguments for invoking getVpc.
type LookupVpcOutputArgs struct {
	// Specifies the ID of the IEC VPC to retrieve.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain the vpc. If omitted, the provider-level region
	// will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupVpcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcArgs)(nil)).Elem()
}

// A collection of values returned by getVpc.
type LookupVpcResultOutput struct{ *pulumi.OutputState }

func (LookupVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcResult)(nil)).Elem()
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutput() LookupVpcResultOutput {
	return o
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutputWithContext(ctx context.Context) LookupVpcResultOutput {
	return o
}

// Indicates the IP address range for the VPC.
func (o LookupVpcResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Cidr }).(pulumi.StringOutput)
}

func (o LookupVpcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the mode of the IEC VPC. Possible values are *SYSTEM* and *CUSTOMER*.
func (o LookupVpcResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupVpcResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVpcResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupVpcResultOutput) SubnetNum() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVpcResult) int { return v.SubnetNum }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcResultOutput{})
}

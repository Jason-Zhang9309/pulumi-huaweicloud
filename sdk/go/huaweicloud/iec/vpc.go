// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IEC VPC resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcName := cfg.RequireObject("vpcName")
//			vpcCidr := cfg.RequireObject("vpcCidr")
//			_, err := Iec.NewVpc(ctx, "vpc", &Iec.VpcArgs{
//				Cidr: pulumi.Any(vpcCidr),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Iec.NewVpc(ctx, "vpcByCustomer", &Iec.VpcArgs{
//				Cidr: pulumi.Any(vpcCidr),
//				Mode: pulumi.String("CUSTOMER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPCs can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Iec/vpc:Vpc myvpc 7117d38e-4c8f-4624-a505-bd96b97d024c
//
// ```
type Vpc struct {
	pulumi.CustomResourceState

	// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
	// within the IP address range of the VPC. The following CIDR blocks are supported:
	// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
	// defaults to "SYSTEM". Changing this creates a new IEC VPC.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the IEC VPC. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region    pulumi.StringPtrOutput `pulumi:"region"`
	SubnetNum pulumi.IntOutput       `pulumi:"subnetNum"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	var resource Vpc
	err := ctx.RegisterResource("huaweicloud:Iec/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("huaweicloud:Iec/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
	// within the IP address range of the VPC. The following CIDR blocks are supported:
	// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
	Cidr *string `pulumi:"cidr"`
	// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
	// defaults to "SYSTEM". Changing this creates a new IEC VPC.
	Mode *string `pulumi:"mode"`
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name *string `pulumi:"name"`
	// The region in which to create the IEC VPC. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region    *string `pulumi:"region"`
	SubnetNum *int    `pulumi:"subnetNum"`
}

type VpcState struct {
	// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
	// within the IP address range of the VPC. The following CIDR blocks are supported:
	// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
	Cidr pulumi.StringPtrInput
	// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
	// defaults to "SYSTEM". Changing this creates a new IEC VPC.
	Mode pulumi.StringPtrInput
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name pulumi.StringPtrInput
	// The region in which to create the IEC VPC. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region    pulumi.StringPtrInput
	SubnetNum pulumi.IntPtrInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
	// within the IP address range of the VPC. The following CIDR blocks are supported:
	// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
	Cidr string `pulumi:"cidr"`
	// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
	// defaults to "SYSTEM". Changing this creates a new IEC VPC.
	Mode *string `pulumi:"mode"`
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name *string `pulumi:"name"`
	// The region in which to create the IEC VPC. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
	// within the IP address range of the VPC. The following CIDR blocks are supported:
	// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
	Cidr pulumi.StringInput
	// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
	// defaults to "SYSTEM". Changing this creates a new IEC VPC.
	Mode pulumi.StringPtrInput
	// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
	// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
	Name pulumi.StringPtrInput
	// The region in which to create the IEC VPC. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

// Specifies the IP address range for the VPC. The subnet IP address in the VPC must be
// within the IP address range of the VPC. The following CIDR blocks are supported:
// *10.0.0.0/8-16*, *172.16.0.0/12-16*, *192.168.0.0/16*.
func (o VpcOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// Specifies the mode of the IEC VPC. Possible values are "SYSTEM" and "CUSTOMER",
// defaults to "SYSTEM". Changing this creates a new IEC VPC.
func (o VpcOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// Specifies the name of the IEC VPC. The name can contain a maximum of 64 characters. Only
// letters, digits, underscores (_), hyphens (-), and periods (.) are allowed.
func (o VpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the IEC VPC. If omitted, the provider-level
// region will be used. Changing this creates a new resource.
func (o VpcOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o VpcOutput) SubnetNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Vpc) pulumi.IntOutput { return v.SubnetNum }).(pulumi.IntOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkAclNetwork struct {
	// Specifies the id of the iec subnet.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the id of the iec vpc.
	VpcId string `pulumi:"vpcId"`
}

// NetworkAclNetworkInput is an input type that accepts NetworkAclNetworkArgs and NetworkAclNetworkOutput values.
// You can construct a concrete instance of `NetworkAclNetworkInput` via:
//
//	NetworkAclNetworkArgs{...}
type NetworkAclNetworkInput interface {
	pulumi.Input

	ToNetworkAclNetworkOutput() NetworkAclNetworkOutput
	ToNetworkAclNetworkOutputWithContext(context.Context) NetworkAclNetworkOutput
}

type NetworkAclNetworkArgs struct {
	// Specifies the id of the iec subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Specifies the id of the iec vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (NetworkAclNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclNetwork)(nil)).Elem()
}

func (i NetworkAclNetworkArgs) ToNetworkAclNetworkOutput() NetworkAclNetworkOutput {
	return i.ToNetworkAclNetworkOutputWithContext(context.Background())
}

func (i NetworkAclNetworkArgs) ToNetworkAclNetworkOutputWithContext(ctx context.Context) NetworkAclNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclNetworkOutput)
}

// NetworkAclNetworkArrayInput is an input type that accepts NetworkAclNetworkArray and NetworkAclNetworkArrayOutput values.
// You can construct a concrete instance of `NetworkAclNetworkArrayInput` via:
//
//	NetworkAclNetworkArray{ NetworkAclNetworkArgs{...} }
type NetworkAclNetworkArrayInput interface {
	pulumi.Input

	ToNetworkAclNetworkArrayOutput() NetworkAclNetworkArrayOutput
	ToNetworkAclNetworkArrayOutputWithContext(context.Context) NetworkAclNetworkArrayOutput
}

type NetworkAclNetworkArray []NetworkAclNetworkInput

func (NetworkAclNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclNetwork)(nil)).Elem()
}

func (i NetworkAclNetworkArray) ToNetworkAclNetworkArrayOutput() NetworkAclNetworkArrayOutput {
	return i.ToNetworkAclNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkAclNetworkArray) ToNetworkAclNetworkArrayOutputWithContext(ctx context.Context) NetworkAclNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclNetworkArrayOutput)
}

type NetworkAclNetworkOutput struct{ *pulumi.OutputState }

func (NetworkAclNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclNetwork)(nil)).Elem()
}

func (o NetworkAclNetworkOutput) ToNetworkAclNetworkOutput() NetworkAclNetworkOutput {
	return o
}

func (o NetworkAclNetworkOutput) ToNetworkAclNetworkOutputWithContext(ctx context.Context) NetworkAclNetworkOutput {
	return o
}

// Specifies the id of the iec subnet.
func (o NetworkAclNetworkOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAclNetwork) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the id of the iec vpc.
func (o NetworkAclNetworkOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAclNetwork) string { return v.VpcId }).(pulumi.StringOutput)
}

type NetworkAclNetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclNetwork)(nil)).Elem()
}

func (o NetworkAclNetworkArrayOutput) ToNetworkAclNetworkArrayOutput() NetworkAclNetworkArrayOutput {
	return o
}

func (o NetworkAclNetworkArrayOutput) ToNetworkAclNetworkArrayOutputWithContext(ctx context.Context) NetworkAclNetworkArrayOutput {
	return o
}

func (o NetworkAclNetworkArrayOutput) Index(i pulumi.IntInput) NetworkAclNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclNetwork {
		return vs[0].([]NetworkAclNetwork)[vs[1].(int)]
	}).(NetworkAclNetworkOutput)
}

type SecurityGroupSecurityGroupRule struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description *string `pulumi:"description"`
	// The direction of the iec security group rules.
	Direction *string `pulumi:"direction"`
	// The layer 3 protocol type.
	Ethertype *string `pulumi:"ethertype"`
	// The id of the iec security group rules.
	Id *string `pulumi:"id"`
	// The higher part of the allowed port range.
	PortRangeMax *int `pulumi:"portRangeMax"`
	// The lower part of the allowed port range.
	PortRangeMin *int `pulumi:"portRangeMin"`
	// The layer 4 protocol type.
	Protocol *string `pulumi:"protocol"`
	// The remote group id of the iec security group rules.
	RemoteGroupId *string `pulumi:"remoteGroupId"`
	// The remote CIDR of the iec security group rules.
	RemoteIpPrefix *string `pulumi:"remoteIpPrefix"`
	// The id of the iec security group rules.
	SecurityGroupId *string `pulumi:"securityGroupId"`
}

// SecurityGroupSecurityGroupRuleInput is an input type that accepts SecurityGroupSecurityGroupRuleArgs and SecurityGroupSecurityGroupRuleOutput values.
// You can construct a concrete instance of `SecurityGroupSecurityGroupRuleInput` via:
//
//	SecurityGroupSecurityGroupRuleArgs{...}
type SecurityGroupSecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupSecurityGroupRuleOutput() SecurityGroupSecurityGroupRuleOutput
	ToSecurityGroupSecurityGroupRuleOutputWithContext(context.Context) SecurityGroupSecurityGroupRuleOutput
}

type SecurityGroupSecurityGroupRuleArgs struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The direction of the iec security group rules.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The layer 3 protocol type.
	Ethertype pulumi.StringPtrInput `pulumi:"ethertype"`
	// The id of the iec security group rules.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The higher part of the allowed port range.
	PortRangeMax pulumi.IntPtrInput `pulumi:"portRangeMax"`
	// The lower part of the allowed port range.
	PortRangeMin pulumi.IntPtrInput `pulumi:"portRangeMin"`
	// The layer 4 protocol type.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The remote group id of the iec security group rules.
	RemoteGroupId pulumi.StringPtrInput `pulumi:"remoteGroupId"`
	// The remote CIDR of the iec security group rules.
	RemoteIpPrefix pulumi.StringPtrInput `pulumi:"remoteIpPrefix"`
	// The id of the iec security group rules.
	SecurityGroupId pulumi.StringPtrInput `pulumi:"securityGroupId"`
}

func (SecurityGroupSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupSecurityGroupRuleArgs) ToSecurityGroupSecurityGroupRuleOutput() SecurityGroupSecurityGroupRuleOutput {
	return i.ToSecurityGroupSecurityGroupRuleOutputWithContext(context.Background())
}

func (i SecurityGroupSecurityGroupRuleArgs) ToSecurityGroupSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupSecurityGroupRuleOutput)
}

// SecurityGroupSecurityGroupRuleArrayInput is an input type that accepts SecurityGroupSecurityGroupRuleArray and SecurityGroupSecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupSecurityGroupRuleArrayInput` via:
//
//	SecurityGroupSecurityGroupRuleArray{ SecurityGroupSecurityGroupRuleArgs{...} }
type SecurityGroupSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupSecurityGroupRuleArrayOutput() SecurityGroupSecurityGroupRuleArrayOutput
	ToSecurityGroupSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupSecurityGroupRuleArrayOutput
}

type SecurityGroupSecurityGroupRuleArray []SecurityGroupSecurityGroupRuleInput

func (SecurityGroupSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupSecurityGroupRuleArray) ToSecurityGroupSecurityGroupRuleArrayOutput() SecurityGroupSecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupSecurityGroupRuleArray) ToSecurityGroupSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupSecurityGroupRuleArrayOutput)
}

type SecurityGroupSecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupSecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupSecurityGroupRuleOutput) ToSecurityGroupSecurityGroupRuleOutput() SecurityGroupSecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupSecurityGroupRuleOutput) ToSecurityGroupSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupSecurityGroupRuleOutput {
	return o
}

// Specifies the description of the iec security group. description must be
// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
// new iec security group resource.
func (o SecurityGroupSecurityGroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction of the iec security group rules.
func (o SecurityGroupSecurityGroupRuleOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The layer 3 protocol type.
func (o SecurityGroupSecurityGroupRuleOutput) Ethertype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.Ethertype }).(pulumi.StringPtrOutput)
}

// The id of the iec security group rules.
func (o SecurityGroupSecurityGroupRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The higher part of the allowed port range.
func (o SecurityGroupSecurityGroupRuleOutput) PortRangeMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *int { return v.PortRangeMax }).(pulumi.IntPtrOutput)
}

// The lower part of the allowed port range.
func (o SecurityGroupSecurityGroupRuleOutput) PortRangeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *int { return v.PortRangeMin }).(pulumi.IntPtrOutput)
}

// The layer 4 protocol type.
func (o SecurityGroupSecurityGroupRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The remote group id of the iec security group rules.
func (o SecurityGroupSecurityGroupRuleOutput) RemoteGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.RemoteGroupId }).(pulumi.StringPtrOutput)
}

// The remote CIDR of the iec security group rules.
func (o SecurityGroupSecurityGroupRuleOutput) RemoteIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.RemoteIpPrefix }).(pulumi.StringPtrOutput)
}

// The id of the iec security group rules.
func (o SecurityGroupSecurityGroupRuleOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupSecurityGroupRule) *string { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

type SecurityGroupSecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupSecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupSecurityGroupRuleArrayOutput) ToSecurityGroupSecurityGroupRuleArrayOutput() SecurityGroupSecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupSecurityGroupRuleArrayOutput) ToSecurityGroupSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupSecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupSecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupSecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupSecurityGroupRule {
		return vs[0].([]SecurityGroupSecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupSecurityGroupRuleOutput)
}

type ServerCoverageSite struct {
	// Specifies the operator of the IEC site.
	Operator string `pulumi:"operator"`
	// Specifies the ID of IEC site.
	SiteId string `pulumi:"siteId"`
}

// ServerCoverageSiteInput is an input type that accepts ServerCoverageSiteArgs and ServerCoverageSiteOutput values.
// You can construct a concrete instance of `ServerCoverageSiteInput` via:
//
//	ServerCoverageSiteArgs{...}
type ServerCoverageSiteInput interface {
	pulumi.Input

	ToServerCoverageSiteOutput() ServerCoverageSiteOutput
	ToServerCoverageSiteOutputWithContext(context.Context) ServerCoverageSiteOutput
}

type ServerCoverageSiteArgs struct {
	// Specifies the operator of the IEC site.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies the ID of IEC site.
	SiteId pulumi.StringInput `pulumi:"siteId"`
}

func (ServerCoverageSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCoverageSite)(nil)).Elem()
}

func (i ServerCoverageSiteArgs) ToServerCoverageSiteOutput() ServerCoverageSiteOutput {
	return i.ToServerCoverageSiteOutputWithContext(context.Background())
}

func (i ServerCoverageSiteArgs) ToServerCoverageSiteOutputWithContext(ctx context.Context) ServerCoverageSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCoverageSiteOutput)
}

// ServerCoverageSiteArrayInput is an input type that accepts ServerCoverageSiteArray and ServerCoverageSiteArrayOutput values.
// You can construct a concrete instance of `ServerCoverageSiteArrayInput` via:
//
//	ServerCoverageSiteArray{ ServerCoverageSiteArgs{...} }
type ServerCoverageSiteArrayInput interface {
	pulumi.Input

	ToServerCoverageSiteArrayOutput() ServerCoverageSiteArrayOutput
	ToServerCoverageSiteArrayOutputWithContext(context.Context) ServerCoverageSiteArrayOutput
}

type ServerCoverageSiteArray []ServerCoverageSiteInput

func (ServerCoverageSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCoverageSite)(nil)).Elem()
}

func (i ServerCoverageSiteArray) ToServerCoverageSiteArrayOutput() ServerCoverageSiteArrayOutput {
	return i.ToServerCoverageSiteArrayOutputWithContext(context.Background())
}

func (i ServerCoverageSiteArray) ToServerCoverageSiteArrayOutputWithContext(ctx context.Context) ServerCoverageSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCoverageSiteArrayOutput)
}

type ServerCoverageSiteOutput struct{ *pulumi.OutputState }

func (ServerCoverageSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCoverageSite)(nil)).Elem()
}

func (o ServerCoverageSiteOutput) ToServerCoverageSiteOutput() ServerCoverageSiteOutput {
	return o
}

func (o ServerCoverageSiteOutput) ToServerCoverageSiteOutputWithContext(ctx context.Context) ServerCoverageSiteOutput {
	return o
}

// Specifies the operator of the IEC site.
func (o ServerCoverageSiteOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCoverageSite) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies the ID of IEC site.
func (o ServerCoverageSiteOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCoverageSite) string { return v.SiteId }).(pulumi.StringOutput)
}

type ServerCoverageSiteArrayOutput struct{ *pulumi.OutputState }

func (ServerCoverageSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCoverageSite)(nil)).Elem()
}

func (o ServerCoverageSiteArrayOutput) ToServerCoverageSiteArrayOutput() ServerCoverageSiteArrayOutput {
	return o
}

func (o ServerCoverageSiteArrayOutput) ToServerCoverageSiteArrayOutputWithContext(ctx context.Context) ServerCoverageSiteArrayOutput {
	return o
}

func (o ServerCoverageSiteArrayOutput) Index(i pulumi.IntInput) ServerCoverageSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCoverageSite {
		return vs[0].([]ServerCoverageSite)[vs[1].(int)]
	}).(ServerCoverageSiteOutput)
}

type ServerDataDisk struct {
	// Specifies the size of data disk for the IEC server binding. The value range is
	// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
	Size int `pulumi:"size"`
	// Specifies the type of data disk for the IEC server binding. Valid value is
	// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	Type string `pulumi:"type"`
}

// ServerDataDiskInput is an input type that accepts ServerDataDiskArgs and ServerDataDiskOutput values.
// You can construct a concrete instance of `ServerDataDiskInput` via:
//
//	ServerDataDiskArgs{...}
type ServerDataDiskInput interface {
	pulumi.Input

	ToServerDataDiskOutput() ServerDataDiskOutput
	ToServerDataDiskOutputWithContext(context.Context) ServerDataDiskOutput
}

type ServerDataDiskArgs struct {
	// Specifies the size of data disk for the IEC server binding. The value range is
	// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the type of data disk for the IEC server binding. Valid value is
	// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServerDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerDataDisk)(nil)).Elem()
}

func (i ServerDataDiskArgs) ToServerDataDiskOutput() ServerDataDiskOutput {
	return i.ToServerDataDiskOutputWithContext(context.Background())
}

func (i ServerDataDiskArgs) ToServerDataDiskOutputWithContext(ctx context.Context) ServerDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerDataDiskOutput)
}

// ServerDataDiskArrayInput is an input type that accepts ServerDataDiskArray and ServerDataDiskArrayOutput values.
// You can construct a concrete instance of `ServerDataDiskArrayInput` via:
//
//	ServerDataDiskArray{ ServerDataDiskArgs{...} }
type ServerDataDiskArrayInput interface {
	pulumi.Input

	ToServerDataDiskArrayOutput() ServerDataDiskArrayOutput
	ToServerDataDiskArrayOutputWithContext(context.Context) ServerDataDiskArrayOutput
}

type ServerDataDiskArray []ServerDataDiskInput

func (ServerDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerDataDisk)(nil)).Elem()
}

func (i ServerDataDiskArray) ToServerDataDiskArrayOutput() ServerDataDiskArrayOutput {
	return i.ToServerDataDiskArrayOutputWithContext(context.Background())
}

func (i ServerDataDiskArray) ToServerDataDiskArrayOutputWithContext(ctx context.Context) ServerDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerDataDiskArrayOutput)
}

type ServerDataDiskOutput struct{ *pulumi.OutputState }

func (ServerDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerDataDisk)(nil)).Elem()
}

func (o ServerDataDiskOutput) ToServerDataDiskOutput() ServerDataDiskOutput {
	return o
}

func (o ServerDataDiskOutput) ToServerDataDiskOutputWithContext(ctx context.Context) ServerDataDiskOutput {
	return o
}

// Specifies the size of data disk for the IEC server binding. The value range is
// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
func (o ServerDataDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ServerDataDisk) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the type of data disk for the IEC server binding. Valid value is
// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
func (o ServerDataDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerDataDisk) string { return v.Type }).(pulumi.StringOutput)
}

type ServerDataDiskArrayOutput struct{ *pulumi.OutputState }

func (ServerDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerDataDisk)(nil)).Elem()
}

func (o ServerDataDiskArrayOutput) ToServerDataDiskArrayOutput() ServerDataDiskArrayOutput {
	return o
}

func (o ServerDataDiskArrayOutput) ToServerDataDiskArrayOutputWithContext(ctx context.Context) ServerDataDiskArrayOutput {
	return o
}

func (o ServerDataDiskArrayOutput) Index(i pulumi.IntInput) ServerDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerDataDisk {
		return vs[0].([]ServerDataDisk)[vs[1].(int)]
	}).(ServerDataDiskOutput)
}

type ServerNic struct {
	// The IPv4 address of the server on that network.
	Address *string `pulumi:"address"`
	// The MAC address of the NIC on that network.
	Mac *string `pulumi:"mac"`
	// The port ID corresponding to the IP address on that network.
	Port *string `pulumi:"port"`
}

// ServerNicInput is an input type that accepts ServerNicArgs and ServerNicOutput values.
// You can construct a concrete instance of `ServerNicInput` via:
//
//	ServerNicArgs{...}
type ServerNicInput interface {
	pulumi.Input

	ToServerNicOutput() ServerNicOutput
	ToServerNicOutputWithContext(context.Context) ServerNicOutput
}

type ServerNicArgs struct {
	// The IPv4 address of the server on that network.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The MAC address of the NIC on that network.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// The port ID corresponding to the IP address on that network.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ServerNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNic)(nil)).Elem()
}

func (i ServerNicArgs) ToServerNicOutput() ServerNicOutput {
	return i.ToServerNicOutputWithContext(context.Background())
}

func (i ServerNicArgs) ToServerNicOutputWithContext(ctx context.Context) ServerNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicOutput)
}

// ServerNicArrayInput is an input type that accepts ServerNicArray and ServerNicArrayOutput values.
// You can construct a concrete instance of `ServerNicArrayInput` via:
//
//	ServerNicArray{ ServerNicArgs{...} }
type ServerNicArrayInput interface {
	pulumi.Input

	ToServerNicArrayOutput() ServerNicArrayOutput
	ToServerNicArrayOutputWithContext(context.Context) ServerNicArrayOutput
}

type ServerNicArray []ServerNicInput

func (ServerNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNic)(nil)).Elem()
}

func (i ServerNicArray) ToServerNicArrayOutput() ServerNicArrayOutput {
	return i.ToServerNicArrayOutputWithContext(context.Background())
}

func (i ServerNicArray) ToServerNicArrayOutputWithContext(ctx context.Context) ServerNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicArrayOutput)
}

type ServerNicOutput struct{ *pulumi.OutputState }

func (ServerNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNic)(nil)).Elem()
}

func (o ServerNicOutput) ToServerNicOutput() ServerNicOutput {
	return o
}

func (o ServerNicOutput) ToServerNicOutputWithContext(ctx context.Context) ServerNicOutput {
	return o
}

// The IPv4 address of the server on that network.
func (o ServerNicOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The MAC address of the NIC on that network.
func (o ServerNicOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// The port ID corresponding to the IP address on that network.
func (o ServerNicOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ServerNicArrayOutput struct{ *pulumi.OutputState }

func (ServerNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNic)(nil)).Elem()
}

func (o ServerNicArrayOutput) ToServerNicArrayOutput() ServerNicArrayOutput {
	return o
}

func (o ServerNicArrayOutput) ToServerNicArrayOutputWithContext(ctx context.Context) ServerNicArrayOutput {
	return o
}

func (o ServerNicArrayOutput) Index(i pulumi.IntInput) ServerNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerNic {
		return vs[0].([]ServerNic)[vs[1].(int)]
	}).(ServerNicOutput)
}

type ServerVolumeAttached struct {
	// The volume boot index on that attachment.
	BootIndex *string `pulumi:"bootIndex"`
	// The device name in the IEC server.
	Device *string `pulumi:"device"`
	// Specifies the size of data disk for the IEC server binding. The value range is
	// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
	Size *int `pulumi:"size"`
	// Specifies the type of data disk for the IEC server binding. Valid value is
	// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	Type *string `pulumi:"type"`
	// The volume ID on that attachment.
	VolumeId *string `pulumi:"volumeId"`
}

// ServerVolumeAttachedInput is an input type that accepts ServerVolumeAttachedArgs and ServerVolumeAttachedOutput values.
// You can construct a concrete instance of `ServerVolumeAttachedInput` via:
//
//	ServerVolumeAttachedArgs{...}
type ServerVolumeAttachedInput interface {
	pulumi.Input

	ToServerVolumeAttachedOutput() ServerVolumeAttachedOutput
	ToServerVolumeAttachedOutputWithContext(context.Context) ServerVolumeAttachedOutput
}

type ServerVolumeAttachedArgs struct {
	// The volume boot index on that attachment.
	BootIndex pulumi.StringPtrInput `pulumi:"bootIndex"`
	// The device name in the IEC server.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Specifies the size of data disk for the IEC server binding. The value range is
	// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Specifies the type of data disk for the IEC server binding. Valid value is
	// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The volume ID on that attachment.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (ServerVolumeAttachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVolumeAttached)(nil)).Elem()
}

func (i ServerVolumeAttachedArgs) ToServerVolumeAttachedOutput() ServerVolumeAttachedOutput {
	return i.ToServerVolumeAttachedOutputWithContext(context.Background())
}

func (i ServerVolumeAttachedArgs) ToServerVolumeAttachedOutputWithContext(ctx context.Context) ServerVolumeAttachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeAttachedOutput)
}

// ServerVolumeAttachedArrayInput is an input type that accepts ServerVolumeAttachedArray and ServerVolumeAttachedArrayOutput values.
// You can construct a concrete instance of `ServerVolumeAttachedArrayInput` via:
//
//	ServerVolumeAttachedArray{ ServerVolumeAttachedArgs{...} }
type ServerVolumeAttachedArrayInput interface {
	pulumi.Input

	ToServerVolumeAttachedArrayOutput() ServerVolumeAttachedArrayOutput
	ToServerVolumeAttachedArrayOutputWithContext(context.Context) ServerVolumeAttachedArrayOutput
}

type ServerVolumeAttachedArray []ServerVolumeAttachedInput

func (ServerVolumeAttachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerVolumeAttached)(nil)).Elem()
}

func (i ServerVolumeAttachedArray) ToServerVolumeAttachedArrayOutput() ServerVolumeAttachedArrayOutput {
	return i.ToServerVolumeAttachedArrayOutputWithContext(context.Background())
}

func (i ServerVolumeAttachedArray) ToServerVolumeAttachedArrayOutputWithContext(ctx context.Context) ServerVolumeAttachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeAttachedArrayOutput)
}

type ServerVolumeAttachedOutput struct{ *pulumi.OutputState }

func (ServerVolumeAttachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVolumeAttached)(nil)).Elem()
}

func (o ServerVolumeAttachedOutput) ToServerVolumeAttachedOutput() ServerVolumeAttachedOutput {
	return o
}

func (o ServerVolumeAttachedOutput) ToServerVolumeAttachedOutputWithContext(ctx context.Context) ServerVolumeAttachedOutput {
	return o
}

// The volume boot index on that attachment.
func (o ServerVolumeAttachedOutput) BootIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolumeAttached) *string { return v.BootIndex }).(pulumi.StringPtrOutput)
}

// The device name in the IEC server.
func (o ServerVolumeAttachedOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolumeAttached) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Specifies the size of data disk for the IEC server binding. The value range is
// 10 to 500 in GB. Changing this parameter creates a new IEC server resource.
func (o ServerVolumeAttachedOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerVolumeAttached) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Specifies the type of data disk for the IEC server binding. Valid value is
// *SAS*(high I/O disk type). Changing this parameter creates a new IEC server resource.
func (o ServerVolumeAttachedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolumeAttached) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The volume ID on that attachment.
func (o ServerVolumeAttachedOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolumeAttached) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

type ServerVolumeAttachedArrayOutput struct{ *pulumi.OutputState }

func (ServerVolumeAttachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerVolumeAttached)(nil)).Elem()
}

func (o ServerVolumeAttachedArrayOutput) ToServerVolumeAttachedArrayOutput() ServerVolumeAttachedArrayOutput {
	return o
}

func (o ServerVolumeAttachedArrayOutput) ToServerVolumeAttachedArrayOutputWithContext(ctx context.Context) ServerVolumeAttachedArrayOutput {
	return o
}

func (o ServerVolumeAttachedArrayOutput) Index(i pulumi.IntInput) ServerVolumeAttachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerVolumeAttached {
		return vs[0].([]ServerVolumeAttached)[vs[1].(int)]
	}).(ServerVolumeAttachedOutput)
}

type GetBandwidthsBandwidth struct {
	// The charging mode of the bandwidth.
	ChargeMode string `pulumi:"chargeMode"`
	// The ID of the bandwidth.
	Id string `pulumi:"id"`
	// The line name of the bandwidth.
	Line string `pulumi:"line"`
	// The name of the bandwidth.
	Name string `pulumi:"name"`
	// Whether the bandwidth is shared or exclusive.
	ShareType string `pulumi:"shareType"`
	// The size of the bandwidth.
	Size int `pulumi:"size"`
	// The status of the bandwidth.
	Status string `pulumi:"status"`
}

// GetBandwidthsBandwidthInput is an input type that accepts GetBandwidthsBandwidthArgs and GetBandwidthsBandwidthOutput values.
// You can construct a concrete instance of `GetBandwidthsBandwidthInput` via:
//
//	GetBandwidthsBandwidthArgs{...}
type GetBandwidthsBandwidthInput interface {
	pulumi.Input

	ToGetBandwidthsBandwidthOutput() GetBandwidthsBandwidthOutput
	ToGetBandwidthsBandwidthOutputWithContext(context.Context) GetBandwidthsBandwidthOutput
}

type GetBandwidthsBandwidthArgs struct {
	// The charging mode of the bandwidth.
	ChargeMode pulumi.StringInput `pulumi:"chargeMode"`
	// The ID of the bandwidth.
	Id pulumi.StringInput `pulumi:"id"`
	// The line name of the bandwidth.
	Line pulumi.StringInput `pulumi:"line"`
	// The name of the bandwidth.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the bandwidth is shared or exclusive.
	ShareType pulumi.StringInput `pulumi:"shareType"`
	// The size of the bandwidth.
	Size pulumi.IntInput `pulumi:"size"`
	// The status of the bandwidth.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetBandwidthsBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthsBandwidth)(nil)).Elem()
}

func (i GetBandwidthsBandwidthArgs) ToGetBandwidthsBandwidthOutput() GetBandwidthsBandwidthOutput {
	return i.ToGetBandwidthsBandwidthOutputWithContext(context.Background())
}

func (i GetBandwidthsBandwidthArgs) ToGetBandwidthsBandwidthOutputWithContext(ctx context.Context) GetBandwidthsBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthsBandwidthOutput)
}

// GetBandwidthsBandwidthArrayInput is an input type that accepts GetBandwidthsBandwidthArray and GetBandwidthsBandwidthArrayOutput values.
// You can construct a concrete instance of `GetBandwidthsBandwidthArrayInput` via:
//
//	GetBandwidthsBandwidthArray{ GetBandwidthsBandwidthArgs{...} }
type GetBandwidthsBandwidthArrayInput interface {
	pulumi.Input

	ToGetBandwidthsBandwidthArrayOutput() GetBandwidthsBandwidthArrayOutput
	ToGetBandwidthsBandwidthArrayOutputWithContext(context.Context) GetBandwidthsBandwidthArrayOutput
}

type GetBandwidthsBandwidthArray []GetBandwidthsBandwidthInput

func (GetBandwidthsBandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthsBandwidth)(nil)).Elem()
}

func (i GetBandwidthsBandwidthArray) ToGetBandwidthsBandwidthArrayOutput() GetBandwidthsBandwidthArrayOutput {
	return i.ToGetBandwidthsBandwidthArrayOutputWithContext(context.Background())
}

func (i GetBandwidthsBandwidthArray) ToGetBandwidthsBandwidthArrayOutputWithContext(ctx context.Context) GetBandwidthsBandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthsBandwidthArrayOutput)
}

type GetBandwidthsBandwidthOutput struct{ *pulumi.OutputState }

func (GetBandwidthsBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthsBandwidth)(nil)).Elem()
}

func (o GetBandwidthsBandwidthOutput) ToGetBandwidthsBandwidthOutput() GetBandwidthsBandwidthOutput {
	return o
}

func (o GetBandwidthsBandwidthOutput) ToGetBandwidthsBandwidthOutputWithContext(ctx context.Context) GetBandwidthsBandwidthOutput {
	return o
}

// The charging mode of the bandwidth.
func (o GetBandwidthsBandwidthOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.ChargeMode }).(pulumi.StringOutput)
}

// The ID of the bandwidth.
func (o GetBandwidthsBandwidthOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.Id }).(pulumi.StringOutput)
}

// The line name of the bandwidth.
func (o GetBandwidthsBandwidthOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.Line }).(pulumi.StringOutput)
}

// The name of the bandwidth.
func (o GetBandwidthsBandwidthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the bandwidth is shared or exclusive.
func (o GetBandwidthsBandwidthOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.ShareType }).(pulumi.StringOutput)
}

// The size of the bandwidth.
func (o GetBandwidthsBandwidthOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) int { return v.Size }).(pulumi.IntOutput)
}

// The status of the bandwidth.
func (o GetBandwidthsBandwidthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthsBandwidth) string { return v.Status }).(pulumi.StringOutput)
}

type GetBandwidthsBandwidthArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthsBandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthsBandwidth)(nil)).Elem()
}

func (o GetBandwidthsBandwidthArrayOutput) ToGetBandwidthsBandwidthArrayOutput() GetBandwidthsBandwidthArrayOutput {
	return o
}

func (o GetBandwidthsBandwidthArrayOutput) ToGetBandwidthsBandwidthArrayOutputWithContext(ctx context.Context) GetBandwidthsBandwidthArrayOutput {
	return o
}

func (o GetBandwidthsBandwidthArrayOutput) Index(i pulumi.IntInput) GetBandwidthsBandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthsBandwidth {
		return vs[0].([]GetBandwidthsBandwidth)[vs[1].(int)]
	}).(GetBandwidthsBandwidthOutput)
}

type GetEipsEip struct {
	// The ID of bandwidth.
	BandwidthId string `pulumi:"bandwidthId"`
	// The name of bandwidth.
	BandwidthName string `pulumi:"bandwidthName"`
	// Whether the bandwidth is shared or exclusive.
	BandwidthShareType string `pulumi:"bandwidthShareType"`
	// The size of bandwidth.
	BandwidthSize int `pulumi:"bandwidthSize"`
	// The ID of elastic IP.
	Id string `pulumi:"id"`
	// The version of elastic IP address.
	IpVersion int `pulumi:"ipVersion"`
	// Specifies the ID of the port.
	PortId string `pulumi:"portId"`
	// The address of private IP.
	PrivateIp string `pulumi:"privateIp"`
	// The address of elastic IP.
	PublicIp string `pulumi:"publicIp"`
	// The status elastic IP.
	Status string `pulumi:"status"`
}

// GetEipsEipInput is an input type that accepts GetEipsEipArgs and GetEipsEipOutput values.
// You can construct a concrete instance of `GetEipsEipInput` via:
//
//	GetEipsEipArgs{...}
type GetEipsEipInput interface {
	pulumi.Input

	ToGetEipsEipOutput() GetEipsEipOutput
	ToGetEipsEipOutputWithContext(context.Context) GetEipsEipOutput
}

type GetEipsEipArgs struct {
	// The ID of bandwidth.
	BandwidthId pulumi.StringInput `pulumi:"bandwidthId"`
	// The name of bandwidth.
	BandwidthName pulumi.StringInput `pulumi:"bandwidthName"`
	// Whether the bandwidth is shared or exclusive.
	BandwidthShareType pulumi.StringInput `pulumi:"bandwidthShareType"`
	// The size of bandwidth.
	BandwidthSize pulumi.IntInput `pulumi:"bandwidthSize"`
	// The ID of elastic IP.
	Id pulumi.StringInput `pulumi:"id"`
	// The version of elastic IP address.
	IpVersion pulumi.IntInput `pulumi:"ipVersion"`
	// Specifies the ID of the port.
	PortId pulumi.StringInput `pulumi:"portId"`
	// The address of private IP.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The address of elastic IP.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The status elastic IP.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetEipsEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArgs) ToGetEipsEipOutput() GetEipsEipOutput {
	return i.ToGetEipsEipOutputWithContext(context.Background())
}

func (i GetEipsEipArgs) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipOutput)
}

// GetEipsEipArrayInput is an input type that accepts GetEipsEipArray and GetEipsEipArrayOutput values.
// You can construct a concrete instance of `GetEipsEipArrayInput` via:
//
//	GetEipsEipArray{ GetEipsEipArgs{...} }
type GetEipsEipArrayInput interface {
	pulumi.Input

	ToGetEipsEipArrayOutput() GetEipsEipArrayOutput
	ToGetEipsEipArrayOutputWithContext(context.Context) GetEipsEipArrayOutput
}

type GetEipsEipArray []GetEipsEipInput

func (GetEipsEipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return i.ToGetEipsEipArrayOutputWithContext(context.Background())
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipArrayOutput)
}

type GetEipsEipOutput struct{ *pulumi.OutputState }

func (GetEipsEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipOutput) ToGetEipsEipOutput() GetEipsEipOutput {
	return o
}

func (o GetEipsEipOutput) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return o
}

// The ID of bandwidth.
func (o GetEipsEipOutput) BandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthId }).(pulumi.StringOutput)
}

// The name of bandwidth.
func (o GetEipsEipOutput) BandwidthName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthName }).(pulumi.StringOutput)
}

// Whether the bandwidth is shared or exclusive.
func (o GetEipsEipOutput) BandwidthShareType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthShareType }).(pulumi.StringOutput)
}

// The size of bandwidth.
func (o GetEipsEipOutput) BandwidthSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.BandwidthSize }).(pulumi.IntOutput)
}

// The ID of elastic IP.
func (o GetEipsEipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Id }).(pulumi.StringOutput)
}

// The version of elastic IP address.
func (o GetEipsEipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.IpVersion }).(pulumi.IntOutput)
}

// Specifies the ID of the port.
func (o GetEipsEipOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PortId }).(pulumi.StringOutput)
}

// The address of private IP.
func (o GetEipsEipOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The address of elastic IP.
func (o GetEipsEipOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The status elastic IP.
func (o GetEipsEipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Status }).(pulumi.StringOutput)
}

type GetEipsEipArrayOutput struct{ *pulumi.OutputState }

func (GetEipsEipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) Index(i pulumi.IntInput) GetEipsEipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEipsEip {
		return vs[0].([]GetEipsEip)[vs[1].(int)]
	}).(GetEipsEipOutput)
}

type GetFlavorsFlavor struct {
	// The id of the iec flavor.
	Id string `pulumi:"id"`
	// The memory of the iec flavor.
	Memory int `pulumi:"memory"`
	// Specifies the flavor name, which can be queried with a regular expression.
	Name string `pulumi:"name"`
	// The vcpus of the iec flavor.
	Vcpus int `pulumi:"vcpus"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	// The id of the iec flavor.
	Id pulumi.StringInput `pulumi:"id"`
	// The memory of the iec flavor.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Specifies the flavor name, which can be queried with a regular expression.
	Name pulumi.StringInput `pulumi:"name"`
	// The vcpus of the iec flavor.
	Vcpus pulumi.IntInput `pulumi:"vcpus"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

// The id of the iec flavor.
func (o GetFlavorsFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Id }).(pulumi.StringOutput)
}

// The memory of the iec flavor.
func (o GetFlavorsFlavorOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.Memory }).(pulumi.IntOutput)
}

// Specifies the flavor name, which can be queried with a regular expression.
func (o GetFlavorsFlavorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Name }).(pulumi.StringOutput)
}

// The vcpus of the iec flavor.
func (o GetFlavorsFlavorOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.Vcpus }).(pulumi.IntOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

type GetImagesImage struct {
	// The id of the iec images.
	Id string `pulumi:"id"`
	// Specifies the image Name, which can be queried with a regular expression.
	Name string `pulumi:"name"`
	// Specifies the os type of the iec image.
	// "Linux", "Windows" and "Other" are supported.
	OsType string `pulumi:"osType"`
	// The status of the iec images.
	Status string `pulumi:"status"`
}

// GetImagesImageInput is an input type that accepts GetImagesImageArgs and GetImagesImageOutput values.
// You can construct a concrete instance of `GetImagesImageInput` via:
//
//	GetImagesImageArgs{...}
type GetImagesImageInput interface {
	pulumi.Input

	ToGetImagesImageOutput() GetImagesImageOutput
	ToGetImagesImageOutputWithContext(context.Context) GetImagesImageOutput
}

type GetImagesImageArgs struct {
	// The id of the iec images.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the image Name, which can be queried with a regular expression.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the os type of the iec image.
	// "Linux", "Windows" and "Other" are supported.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The status of the iec images.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArgs) ToGetImagesImageOutput() GetImagesImageOutput {
	return i.ToGetImagesImageOutputWithContext(context.Background())
}

func (i GetImagesImageArgs) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageOutput)
}

// GetImagesImageArrayInput is an input type that accepts GetImagesImageArray and GetImagesImageArrayOutput values.
// You can construct a concrete instance of `GetImagesImageArrayInput` via:
//
//	GetImagesImageArray{ GetImagesImageArgs{...} }
type GetImagesImageArrayInput interface {
	pulumi.Input

	ToGetImagesImageArrayOutput() GetImagesImageArrayOutput
	ToGetImagesImageArrayOutputWithContext(context.Context) GetImagesImageArrayOutput
}

type GetImagesImageArray []GetImagesImageInput

func (GetImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return i.ToGetImagesImageArrayOutputWithContext(context.Background())
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageArrayOutput)
}

type GetImagesImageOutput struct{ *pulumi.OutputState }

func (GetImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageOutput) ToGetImagesImageOutput() GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return o
}

// The id of the iec images.
func (o GetImagesImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the image Name, which can be queried with a regular expression.
func (o GetImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the os type of the iec image.
// "Linux", "Windows" and "Other" are supported.
func (o GetImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The status of the iec images.
func (o GetImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

type GetImagesImageArrayOutput struct{ *pulumi.OutputState }

func (GetImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) Index(i pulumi.IntInput) GetImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesImage {
		return vs[0].([]GetImagesImage)[vs[1].(int)]
	}).(GetImagesImageOutput)
}

type GetNetwork_aclNetwork struct {
	SubnetId string `pulumi:"subnetId"`
	VpcId    string `pulumi:"vpcId"`
}

// GetNetwork_aclNetworkInput is an input type that accepts GetNetwork_aclNetworkArgs and GetNetwork_aclNetworkOutput values.
// You can construct a concrete instance of `GetNetwork_aclNetworkInput` via:
//
//	GetNetwork_aclNetworkArgs{...}
type GetNetwork_aclNetworkInput interface {
	pulumi.Input

	ToGetNetwork_aclNetworkOutput() GetNetwork_aclNetworkOutput
	ToGetNetwork_aclNetworkOutputWithContext(context.Context) GetNetwork_aclNetworkOutput
}

type GetNetwork_aclNetworkArgs struct {
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	VpcId    pulumi.StringInput `pulumi:"vpcId"`
}

func (GetNetwork_aclNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetwork_aclNetwork)(nil)).Elem()
}

func (i GetNetwork_aclNetworkArgs) ToGetNetwork_aclNetworkOutput() GetNetwork_aclNetworkOutput {
	return i.ToGetNetwork_aclNetworkOutputWithContext(context.Background())
}

func (i GetNetwork_aclNetworkArgs) ToGetNetwork_aclNetworkOutputWithContext(ctx context.Context) GetNetwork_aclNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetwork_aclNetworkOutput)
}

// GetNetwork_aclNetworkArrayInput is an input type that accepts GetNetwork_aclNetworkArray and GetNetwork_aclNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetwork_aclNetworkArrayInput` via:
//
//	GetNetwork_aclNetworkArray{ GetNetwork_aclNetworkArgs{...} }
type GetNetwork_aclNetworkArrayInput interface {
	pulumi.Input

	ToGetNetwork_aclNetworkArrayOutput() GetNetwork_aclNetworkArrayOutput
	ToGetNetwork_aclNetworkArrayOutputWithContext(context.Context) GetNetwork_aclNetworkArrayOutput
}

type GetNetwork_aclNetworkArray []GetNetwork_aclNetworkInput

func (GetNetwork_aclNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetwork_aclNetwork)(nil)).Elem()
}

func (i GetNetwork_aclNetworkArray) ToGetNetwork_aclNetworkArrayOutput() GetNetwork_aclNetworkArrayOutput {
	return i.ToGetNetwork_aclNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetwork_aclNetworkArray) ToGetNetwork_aclNetworkArrayOutputWithContext(ctx context.Context) GetNetwork_aclNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetwork_aclNetworkArrayOutput)
}

type GetNetwork_aclNetworkOutput struct{ *pulumi.OutputState }

func (GetNetwork_aclNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetwork_aclNetwork)(nil)).Elem()
}

func (o GetNetwork_aclNetworkOutput) ToGetNetwork_aclNetworkOutput() GetNetwork_aclNetworkOutput {
	return o
}

func (o GetNetwork_aclNetworkOutput) ToGetNetwork_aclNetworkOutputWithContext(ctx context.Context) GetNetwork_aclNetworkOutput {
	return o
}

func (o GetNetwork_aclNetworkOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetwork_aclNetwork) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o GetNetwork_aclNetworkOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetwork_aclNetwork) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetNetwork_aclNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetwork_aclNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetwork_aclNetwork)(nil)).Elem()
}

func (o GetNetwork_aclNetworkArrayOutput) ToGetNetwork_aclNetworkArrayOutput() GetNetwork_aclNetworkArrayOutput {
	return o
}

func (o GetNetwork_aclNetworkArrayOutput) ToGetNetwork_aclNetworkArrayOutputWithContext(ctx context.Context) GetNetwork_aclNetworkArrayOutput {
	return o
}

func (o GetNetwork_aclNetworkArrayOutput) Index(i pulumi.IntInput) GetNetwork_aclNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetwork_aclNetwork {
		return vs[0].([]GetNetwork_aclNetwork)[vs[1].(int)]
	}).(GetNetwork_aclNetworkOutput)
}

type GetSecurityGroupSecurityGroupRule struct {
	// The description for the IEC security group rules.
	Description string `pulumi:"description"`
	// The direction of the IEC security group rules.
	Direction string `pulumi:"direction"`
	// The layer 3 protocol type.
	Ethertype string `pulumi:"ethertype"`
	// The ID of the IEC security group rules.
	Id string `pulumi:"id"`
	// The higher part of the allowed port range.
	PortRangeMax int `pulumi:"portRangeMax"`
	// The lower part of the allowed port range.
	PortRangeMin int `pulumi:"portRangeMin"`
	// The layer 4 protocol type.
	Protocol string `pulumi:"protocol"`
	// The remote group id of the IEC security group rules.
	RemoteGroupId string `pulumi:"remoteGroupId"`
	// The remote CIDR of the IEC security group rules.
	RemoteIpPrefix string `pulumi:"remoteIpPrefix"`
	// The id of the IEC security group rules.
	SecurityGroupId string `pulumi:"securityGroupId"`
}

// GetSecurityGroupSecurityGroupRuleInput is an input type that accepts GetSecurityGroupSecurityGroupRuleArgs and GetSecurityGroupSecurityGroupRuleOutput values.
// You can construct a concrete instance of `GetSecurityGroupSecurityGroupRuleInput` via:
//
//	GetSecurityGroupSecurityGroupRuleArgs{...}
type GetSecurityGroupSecurityGroupRuleInput interface {
	pulumi.Input

	ToGetSecurityGroupSecurityGroupRuleOutput() GetSecurityGroupSecurityGroupRuleOutput
	ToGetSecurityGroupSecurityGroupRuleOutputWithContext(context.Context) GetSecurityGroupSecurityGroupRuleOutput
}

type GetSecurityGroupSecurityGroupRuleArgs struct {
	// The description for the IEC security group rules.
	Description pulumi.StringInput `pulumi:"description"`
	// The direction of the IEC security group rules.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The layer 3 protocol type.
	Ethertype pulumi.StringInput `pulumi:"ethertype"`
	// The ID of the IEC security group rules.
	Id pulumi.StringInput `pulumi:"id"`
	// The higher part of the allowed port range.
	PortRangeMax pulumi.IntInput `pulumi:"portRangeMax"`
	// The lower part of the allowed port range.
	PortRangeMin pulumi.IntInput `pulumi:"portRangeMin"`
	// The layer 4 protocol type.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The remote group id of the IEC security group rules.
	RemoteGroupId pulumi.StringInput `pulumi:"remoteGroupId"`
	// The remote CIDR of the IEC security group rules.
	RemoteIpPrefix pulumi.StringInput `pulumi:"remoteIpPrefix"`
	// The id of the IEC security group rules.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
}

func (GetSecurityGroupSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (i GetSecurityGroupSecurityGroupRuleArgs) ToGetSecurityGroupSecurityGroupRuleOutput() GetSecurityGroupSecurityGroupRuleOutput {
	return i.ToGetSecurityGroupSecurityGroupRuleOutputWithContext(context.Background())
}

func (i GetSecurityGroupSecurityGroupRuleArgs) ToGetSecurityGroupSecurityGroupRuleOutputWithContext(ctx context.Context) GetSecurityGroupSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupSecurityGroupRuleOutput)
}

// GetSecurityGroupSecurityGroupRuleArrayInput is an input type that accepts GetSecurityGroupSecurityGroupRuleArray and GetSecurityGroupSecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupSecurityGroupRuleArrayInput` via:
//
//	GetSecurityGroupSecurityGroupRuleArray{ GetSecurityGroupSecurityGroupRuleArgs{...} }
type GetSecurityGroupSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupSecurityGroupRuleArrayOutput() GetSecurityGroupSecurityGroupRuleArrayOutput
	ToGetSecurityGroupSecurityGroupRuleArrayOutputWithContext(context.Context) GetSecurityGroupSecurityGroupRuleArrayOutput
}

type GetSecurityGroupSecurityGroupRuleArray []GetSecurityGroupSecurityGroupRuleInput

func (GetSecurityGroupSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (i GetSecurityGroupSecurityGroupRuleArray) ToGetSecurityGroupSecurityGroupRuleArrayOutput() GetSecurityGroupSecurityGroupRuleArrayOutput {
	return i.ToGetSecurityGroupSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupSecurityGroupRuleArray) ToGetSecurityGroupSecurityGroupRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupSecurityGroupRuleArrayOutput)
}

type GetSecurityGroupSecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupSecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (o GetSecurityGroupSecurityGroupRuleOutput) ToGetSecurityGroupSecurityGroupRuleOutput() GetSecurityGroupSecurityGroupRuleOutput {
	return o
}

func (o GetSecurityGroupSecurityGroupRuleOutput) ToGetSecurityGroupSecurityGroupRuleOutputWithContext(ctx context.Context) GetSecurityGroupSecurityGroupRuleOutput {
	return o
}

// The description for the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.Description }).(pulumi.StringOutput)
}

// The direction of the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.Direction }).(pulumi.StringOutput)
}

// The layer 3 protocol type.
func (o GetSecurityGroupSecurityGroupRuleOutput) Ethertype() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.Ethertype }).(pulumi.StringOutput)
}

// The ID of the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.Id }).(pulumi.StringOutput)
}

// The higher part of the allowed port range.
func (o GetSecurityGroupSecurityGroupRuleOutput) PortRangeMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) int { return v.PortRangeMax }).(pulumi.IntOutput)
}

// The lower part of the allowed port range.
func (o GetSecurityGroupSecurityGroupRuleOutput) PortRangeMin() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) int { return v.PortRangeMin }).(pulumi.IntOutput)
}

// The layer 4 protocol type.
func (o GetSecurityGroupSecurityGroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.Protocol }).(pulumi.StringOutput)
}

// The remote group id of the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) RemoteGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.RemoteGroupId }).(pulumi.StringOutput)
}

// The remote CIDR of the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) RemoteIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.RemoteIpPrefix }).(pulumi.StringOutput)
}

// The id of the IEC security group rules.
func (o GetSecurityGroupSecurityGroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupSecurityGroupRule) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

type GetSecurityGroupSecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupSecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupSecurityGroupRule)(nil)).Elem()
}

func (o GetSecurityGroupSecurityGroupRuleArrayOutput) ToGetSecurityGroupSecurityGroupRuleArrayOutput() GetSecurityGroupSecurityGroupRuleArrayOutput {
	return o
}

func (o GetSecurityGroupSecurityGroupRuleArrayOutput) ToGetSecurityGroupSecurityGroupRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupSecurityGroupRuleArrayOutput {
	return o
}

func (o GetSecurityGroupSecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupSecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupSecurityGroupRule {
		return vs[0].([]GetSecurityGroupSecurityGroupRule)[vs[1].(int)]
	}).(GetSecurityGroupSecurityGroupRuleOutput)
}

type GetServerCoverageSite struct {
	// The operator of the IEC site.
	Operator string `pulumi:"operator"`
	// The ID of IEC site.
	SiteId string `pulumi:"siteId"`
	// The located information of the IEC site. It contains area, province and city.
	SiteInfo string `pulumi:"siteInfo"`
}

// GetServerCoverageSiteInput is an input type that accepts GetServerCoverageSiteArgs and GetServerCoverageSiteOutput values.
// You can construct a concrete instance of `GetServerCoverageSiteInput` via:
//
//	GetServerCoverageSiteArgs{...}
type GetServerCoverageSiteInput interface {
	pulumi.Input

	ToGetServerCoverageSiteOutput() GetServerCoverageSiteOutput
	ToGetServerCoverageSiteOutputWithContext(context.Context) GetServerCoverageSiteOutput
}

type GetServerCoverageSiteArgs struct {
	// The operator of the IEC site.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The ID of IEC site.
	SiteId pulumi.StringInput `pulumi:"siteId"`
	// The located information of the IEC site. It contains area, province and city.
	SiteInfo pulumi.StringInput `pulumi:"siteInfo"`
}

func (GetServerCoverageSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerCoverageSite)(nil)).Elem()
}

func (i GetServerCoverageSiteArgs) ToGetServerCoverageSiteOutput() GetServerCoverageSiteOutput {
	return i.ToGetServerCoverageSiteOutputWithContext(context.Background())
}

func (i GetServerCoverageSiteArgs) ToGetServerCoverageSiteOutputWithContext(ctx context.Context) GetServerCoverageSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerCoverageSiteOutput)
}

// GetServerCoverageSiteArrayInput is an input type that accepts GetServerCoverageSiteArray and GetServerCoverageSiteArrayOutput values.
// You can construct a concrete instance of `GetServerCoverageSiteArrayInput` via:
//
//	GetServerCoverageSiteArray{ GetServerCoverageSiteArgs{...} }
type GetServerCoverageSiteArrayInput interface {
	pulumi.Input

	ToGetServerCoverageSiteArrayOutput() GetServerCoverageSiteArrayOutput
	ToGetServerCoverageSiteArrayOutputWithContext(context.Context) GetServerCoverageSiteArrayOutput
}

type GetServerCoverageSiteArray []GetServerCoverageSiteInput

func (GetServerCoverageSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerCoverageSite)(nil)).Elem()
}

func (i GetServerCoverageSiteArray) ToGetServerCoverageSiteArrayOutput() GetServerCoverageSiteArrayOutput {
	return i.ToGetServerCoverageSiteArrayOutputWithContext(context.Background())
}

func (i GetServerCoverageSiteArray) ToGetServerCoverageSiteArrayOutputWithContext(ctx context.Context) GetServerCoverageSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerCoverageSiteArrayOutput)
}

type GetServerCoverageSiteOutput struct{ *pulumi.OutputState }

func (GetServerCoverageSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerCoverageSite)(nil)).Elem()
}

func (o GetServerCoverageSiteOutput) ToGetServerCoverageSiteOutput() GetServerCoverageSiteOutput {
	return o
}

func (o GetServerCoverageSiteOutput) ToGetServerCoverageSiteOutputWithContext(ctx context.Context) GetServerCoverageSiteOutput {
	return o
}

// The operator of the IEC site.
func (o GetServerCoverageSiteOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerCoverageSite) string { return v.Operator }).(pulumi.StringOutput)
}

// The ID of IEC site.
func (o GetServerCoverageSiteOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerCoverageSite) string { return v.SiteId }).(pulumi.StringOutput)
}

// The located information of the IEC site. It contains area, province and city.
func (o GetServerCoverageSiteOutput) SiteInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerCoverageSite) string { return v.SiteInfo }).(pulumi.StringOutput)
}

type GetServerCoverageSiteArrayOutput struct{ *pulumi.OutputState }

func (GetServerCoverageSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerCoverageSite)(nil)).Elem()
}

func (o GetServerCoverageSiteArrayOutput) ToGetServerCoverageSiteArrayOutput() GetServerCoverageSiteArrayOutput {
	return o
}

func (o GetServerCoverageSiteArrayOutput) ToGetServerCoverageSiteArrayOutputWithContext(ctx context.Context) GetServerCoverageSiteArrayOutput {
	return o
}

func (o GetServerCoverageSiteArrayOutput) Index(i pulumi.IntInput) GetServerCoverageSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerCoverageSite {
		return vs[0].([]GetServerCoverageSite)[vs[1].(int)]
	}).(GetServerCoverageSiteOutput)
}

type GetServerNic struct {
	// The IPv4 address of the server on that network.
	Address string `pulumi:"address"`
	// The MAC address of the NIC on that network.
	Mac string `pulumi:"mac"`
	// The port ID corresponding to the IP address on that network.
	Port string `pulumi:"port"`
}

// GetServerNicInput is an input type that accepts GetServerNicArgs and GetServerNicOutput values.
// You can construct a concrete instance of `GetServerNicInput` via:
//
//	GetServerNicArgs{...}
type GetServerNicInput interface {
	pulumi.Input

	ToGetServerNicOutput() GetServerNicOutput
	ToGetServerNicOutputWithContext(context.Context) GetServerNicOutput
}

type GetServerNicArgs struct {
	// The IPv4 address of the server on that network.
	Address pulumi.StringInput `pulumi:"address"`
	// The MAC address of the NIC on that network.
	Mac pulumi.StringInput `pulumi:"mac"`
	// The port ID corresponding to the IP address on that network.
	Port pulumi.StringInput `pulumi:"port"`
}

func (GetServerNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerNic)(nil)).Elem()
}

func (i GetServerNicArgs) ToGetServerNicOutput() GetServerNicOutput {
	return i.ToGetServerNicOutputWithContext(context.Background())
}

func (i GetServerNicArgs) ToGetServerNicOutputWithContext(ctx context.Context) GetServerNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerNicOutput)
}

// GetServerNicArrayInput is an input type that accepts GetServerNicArray and GetServerNicArrayOutput values.
// You can construct a concrete instance of `GetServerNicArrayInput` via:
//
//	GetServerNicArray{ GetServerNicArgs{...} }
type GetServerNicArrayInput interface {
	pulumi.Input

	ToGetServerNicArrayOutput() GetServerNicArrayOutput
	ToGetServerNicArrayOutputWithContext(context.Context) GetServerNicArrayOutput
}

type GetServerNicArray []GetServerNicInput

func (GetServerNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerNic)(nil)).Elem()
}

func (i GetServerNicArray) ToGetServerNicArrayOutput() GetServerNicArrayOutput {
	return i.ToGetServerNicArrayOutputWithContext(context.Background())
}

func (i GetServerNicArray) ToGetServerNicArrayOutputWithContext(ctx context.Context) GetServerNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerNicArrayOutput)
}

type GetServerNicOutput struct{ *pulumi.OutputState }

func (GetServerNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerNic)(nil)).Elem()
}

func (o GetServerNicOutput) ToGetServerNicOutput() GetServerNicOutput {
	return o
}

func (o GetServerNicOutput) ToGetServerNicOutputWithContext(ctx context.Context) GetServerNicOutput {
	return o
}

// The IPv4 address of the server on that network.
func (o GetServerNicOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerNic) string { return v.Address }).(pulumi.StringOutput)
}

// The MAC address of the NIC on that network.
func (o GetServerNicOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerNic) string { return v.Mac }).(pulumi.StringOutput)
}

// The port ID corresponding to the IP address on that network.
func (o GetServerNicOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerNic) string { return v.Port }).(pulumi.StringOutput)
}

type GetServerNicArrayOutput struct{ *pulumi.OutputState }

func (GetServerNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerNic)(nil)).Elem()
}

func (o GetServerNicArrayOutput) ToGetServerNicArrayOutput() GetServerNicArrayOutput {
	return o
}

func (o GetServerNicArrayOutput) ToGetServerNicArrayOutputWithContext(ctx context.Context) GetServerNicArrayOutput {
	return o
}

func (o GetServerNicArrayOutput) Index(i pulumi.IntInput) GetServerNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerNic {
		return vs[0].([]GetServerNic)[vs[1].(int)]
	}).(GetServerNicOutput)
}

type GetServerVolumeAttached struct {
	// The volume boot index on that attachment.
	BootIndex string `pulumi:"bootIndex"`
	// The device name in the IEC server.
	Device string `pulumi:"device"`
	// The volume size on that attachment.
	Size int `pulumi:"size"`
	// The volume type on that attachment.
	Type string `pulumi:"type"`
	// The volume ID on that attachment.
	VolumeId string `pulumi:"volumeId"`
}

// GetServerVolumeAttachedInput is an input type that accepts GetServerVolumeAttachedArgs and GetServerVolumeAttachedOutput values.
// You can construct a concrete instance of `GetServerVolumeAttachedInput` via:
//
//	GetServerVolumeAttachedArgs{...}
type GetServerVolumeAttachedInput interface {
	pulumi.Input

	ToGetServerVolumeAttachedOutput() GetServerVolumeAttachedOutput
	ToGetServerVolumeAttachedOutputWithContext(context.Context) GetServerVolumeAttachedOutput
}

type GetServerVolumeAttachedArgs struct {
	// The volume boot index on that attachment.
	BootIndex pulumi.StringInput `pulumi:"bootIndex"`
	// The device name in the IEC server.
	Device pulumi.StringInput `pulumi:"device"`
	// The volume size on that attachment.
	Size pulumi.IntInput `pulumi:"size"`
	// The volume type on that attachment.
	Type pulumi.StringInput `pulumi:"type"`
	// The volume ID on that attachment.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (GetServerVolumeAttachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVolumeAttached)(nil)).Elem()
}

func (i GetServerVolumeAttachedArgs) ToGetServerVolumeAttachedOutput() GetServerVolumeAttachedOutput {
	return i.ToGetServerVolumeAttachedOutputWithContext(context.Background())
}

func (i GetServerVolumeAttachedArgs) ToGetServerVolumeAttachedOutputWithContext(ctx context.Context) GetServerVolumeAttachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVolumeAttachedOutput)
}

// GetServerVolumeAttachedArrayInput is an input type that accepts GetServerVolumeAttachedArray and GetServerVolumeAttachedArrayOutput values.
// You can construct a concrete instance of `GetServerVolumeAttachedArrayInput` via:
//
//	GetServerVolumeAttachedArray{ GetServerVolumeAttachedArgs{...} }
type GetServerVolumeAttachedArrayInput interface {
	pulumi.Input

	ToGetServerVolumeAttachedArrayOutput() GetServerVolumeAttachedArrayOutput
	ToGetServerVolumeAttachedArrayOutputWithContext(context.Context) GetServerVolumeAttachedArrayOutput
}

type GetServerVolumeAttachedArray []GetServerVolumeAttachedInput

func (GetServerVolumeAttachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVolumeAttached)(nil)).Elem()
}

func (i GetServerVolumeAttachedArray) ToGetServerVolumeAttachedArrayOutput() GetServerVolumeAttachedArrayOutput {
	return i.ToGetServerVolumeAttachedArrayOutputWithContext(context.Background())
}

func (i GetServerVolumeAttachedArray) ToGetServerVolumeAttachedArrayOutputWithContext(ctx context.Context) GetServerVolumeAttachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVolumeAttachedArrayOutput)
}

type GetServerVolumeAttachedOutput struct{ *pulumi.OutputState }

func (GetServerVolumeAttachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVolumeAttached)(nil)).Elem()
}

func (o GetServerVolumeAttachedOutput) ToGetServerVolumeAttachedOutput() GetServerVolumeAttachedOutput {
	return o
}

func (o GetServerVolumeAttachedOutput) ToGetServerVolumeAttachedOutputWithContext(ctx context.Context) GetServerVolumeAttachedOutput {
	return o
}

// The volume boot index on that attachment.
func (o GetServerVolumeAttachedOutput) BootIndex() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVolumeAttached) string { return v.BootIndex }).(pulumi.StringOutput)
}

// The device name in the IEC server.
func (o GetServerVolumeAttachedOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVolumeAttached) string { return v.Device }).(pulumi.StringOutput)
}

// The volume size on that attachment.
func (o GetServerVolumeAttachedOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerVolumeAttached) int { return v.Size }).(pulumi.IntOutput)
}

// The volume type on that attachment.
func (o GetServerVolumeAttachedOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVolumeAttached) string { return v.Type }).(pulumi.StringOutput)
}

// The volume ID on that attachment.
func (o GetServerVolumeAttachedOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVolumeAttached) string { return v.VolumeId }).(pulumi.StringOutput)
}

type GetServerVolumeAttachedArrayOutput struct{ *pulumi.OutputState }

func (GetServerVolumeAttachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVolumeAttached)(nil)).Elem()
}

func (o GetServerVolumeAttachedArrayOutput) ToGetServerVolumeAttachedArrayOutput() GetServerVolumeAttachedArrayOutput {
	return o
}

func (o GetServerVolumeAttachedArrayOutput) ToGetServerVolumeAttachedArrayOutputWithContext(ctx context.Context) GetServerVolumeAttachedArrayOutput {
	return o
}

func (o GetServerVolumeAttachedArrayOutput) Index(i pulumi.IntInput) GetServerVolumeAttachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerVolumeAttached {
		return vs[0].([]GetServerVolumeAttached)[vs[1].(int)]
	}).(GetServerVolumeAttachedOutput)
}

type GetSitesSite struct {
	// Specifies the area of the IEC sites located.
	Area string `pulumi:"area"`
	// Specifies the city of the IEC sites located.
	City string `pulumi:"city"`
	// The ID of the EIP line.
	Id string `pulumi:"id"`
	// An array of one or more EIP lines. The object structure is documented below.
	Lines []GetSitesSiteLine `pulumi:"lines"`
	// The name of the EIP line.
	Name string `pulumi:"name"`
	// Specifies the province of the IEC sites located.
	Province string `pulumi:"province"`
	// The status of the IEC service site.
	Status string `pulumi:"status"`
}

// GetSitesSiteInput is an input type that accepts GetSitesSiteArgs and GetSitesSiteOutput values.
// You can construct a concrete instance of `GetSitesSiteInput` via:
//
//	GetSitesSiteArgs{...}
type GetSitesSiteInput interface {
	pulumi.Input

	ToGetSitesSiteOutput() GetSitesSiteOutput
	ToGetSitesSiteOutputWithContext(context.Context) GetSitesSiteOutput
}

type GetSitesSiteArgs struct {
	// Specifies the area of the IEC sites located.
	Area pulumi.StringInput `pulumi:"area"`
	// Specifies the city of the IEC sites located.
	City pulumi.StringInput `pulumi:"city"`
	// The ID of the EIP line.
	Id pulumi.StringInput `pulumi:"id"`
	// An array of one or more EIP lines. The object structure is documented below.
	Lines GetSitesSiteLineArrayInput `pulumi:"lines"`
	// The name of the EIP line.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the province of the IEC sites located.
	Province pulumi.StringInput `pulumi:"province"`
	// The status of the IEC service site.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetSitesSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSite)(nil)).Elem()
}

func (i GetSitesSiteArgs) ToGetSitesSiteOutput() GetSitesSiteOutput {
	return i.ToGetSitesSiteOutputWithContext(context.Background())
}

func (i GetSitesSiteArgs) ToGetSitesSiteOutputWithContext(ctx context.Context) GetSitesSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteOutput)
}

// GetSitesSiteArrayInput is an input type that accepts GetSitesSiteArray and GetSitesSiteArrayOutput values.
// You can construct a concrete instance of `GetSitesSiteArrayInput` via:
//
//	GetSitesSiteArray{ GetSitesSiteArgs{...} }
type GetSitesSiteArrayInput interface {
	pulumi.Input

	ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput
	ToGetSitesSiteArrayOutputWithContext(context.Context) GetSitesSiteArrayOutput
}

type GetSitesSiteArray []GetSitesSiteInput

func (GetSitesSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSite)(nil)).Elem()
}

func (i GetSitesSiteArray) ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput {
	return i.ToGetSitesSiteArrayOutputWithContext(context.Background())
}

func (i GetSitesSiteArray) ToGetSitesSiteArrayOutputWithContext(ctx context.Context) GetSitesSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteArrayOutput)
}

type GetSitesSiteOutput struct{ *pulumi.OutputState }

func (GetSitesSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSite)(nil)).Elem()
}

func (o GetSitesSiteOutput) ToGetSitesSiteOutput() GetSitesSiteOutput {
	return o
}

func (o GetSitesSiteOutput) ToGetSitesSiteOutputWithContext(ctx context.Context) GetSitesSiteOutput {
	return o
}

// Specifies the area of the IEC sites located.
func (o GetSitesSiteOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Area }).(pulumi.StringOutput)
}

// Specifies the city of the IEC sites located.
func (o GetSitesSiteOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.City }).(pulumi.StringOutput)
}

// The ID of the EIP line.
func (o GetSitesSiteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Id }).(pulumi.StringOutput)
}

// An array of one or more EIP lines. The object structure is documented below.
func (o GetSitesSiteOutput) Lines() GetSitesSiteLineArrayOutput {
	return o.ApplyT(func(v GetSitesSite) []GetSitesSiteLine { return v.Lines }).(GetSitesSiteLineArrayOutput)
}

// The name of the EIP line.
func (o GetSitesSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the province of the IEC sites located.
func (o GetSitesSiteOutput) Province() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Province }).(pulumi.StringOutput)
}

// The status of the IEC service site.
func (o GetSitesSiteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Status }).(pulumi.StringOutput)
}

type GetSitesSiteArrayOutput struct{ *pulumi.OutputState }

func (GetSitesSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSite)(nil)).Elem()
}

func (o GetSitesSiteArrayOutput) ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput {
	return o
}

func (o GetSitesSiteArrayOutput) ToGetSitesSiteArrayOutputWithContext(ctx context.Context) GetSitesSiteArrayOutput {
	return o
}

func (o GetSitesSiteArrayOutput) Index(i pulumi.IntInput) GetSitesSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSitesSite {
		return vs[0].([]GetSitesSite)[vs[1].(int)]
	}).(GetSitesSiteOutput)
}

type GetSitesSiteLine struct {
	// The ID of the EIP line.
	Id string `pulumi:"id"`
	// The supported IP version.
	IpVersion string `pulumi:"ipVersion"`
	// The name of the EIP line.
	Name string `pulumi:"name"`
	// The operator information of the EIP line.
	Operator string `pulumi:"operator"`
}

// GetSitesSiteLineInput is an input type that accepts GetSitesSiteLineArgs and GetSitesSiteLineOutput values.
// You can construct a concrete instance of `GetSitesSiteLineInput` via:
//
//	GetSitesSiteLineArgs{...}
type GetSitesSiteLineInput interface {
	pulumi.Input

	ToGetSitesSiteLineOutput() GetSitesSiteLineOutput
	ToGetSitesSiteLineOutputWithContext(context.Context) GetSitesSiteLineOutput
}

type GetSitesSiteLineArgs struct {
	// The ID of the EIP line.
	Id pulumi.StringInput `pulumi:"id"`
	// The supported IP version.
	IpVersion pulumi.StringInput `pulumi:"ipVersion"`
	// The name of the EIP line.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator information of the EIP line.
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (GetSitesSiteLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSiteLine)(nil)).Elem()
}

func (i GetSitesSiteLineArgs) ToGetSitesSiteLineOutput() GetSitesSiteLineOutput {
	return i.ToGetSitesSiteLineOutputWithContext(context.Background())
}

func (i GetSitesSiteLineArgs) ToGetSitesSiteLineOutputWithContext(ctx context.Context) GetSitesSiteLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteLineOutput)
}

// GetSitesSiteLineArrayInput is an input type that accepts GetSitesSiteLineArray and GetSitesSiteLineArrayOutput values.
// You can construct a concrete instance of `GetSitesSiteLineArrayInput` via:
//
//	GetSitesSiteLineArray{ GetSitesSiteLineArgs{...} }
type GetSitesSiteLineArrayInput interface {
	pulumi.Input

	ToGetSitesSiteLineArrayOutput() GetSitesSiteLineArrayOutput
	ToGetSitesSiteLineArrayOutputWithContext(context.Context) GetSitesSiteLineArrayOutput
}

type GetSitesSiteLineArray []GetSitesSiteLineInput

func (GetSitesSiteLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSiteLine)(nil)).Elem()
}

func (i GetSitesSiteLineArray) ToGetSitesSiteLineArrayOutput() GetSitesSiteLineArrayOutput {
	return i.ToGetSitesSiteLineArrayOutputWithContext(context.Background())
}

func (i GetSitesSiteLineArray) ToGetSitesSiteLineArrayOutputWithContext(ctx context.Context) GetSitesSiteLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteLineArrayOutput)
}

type GetSitesSiteLineOutput struct{ *pulumi.OutputState }

func (GetSitesSiteLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSiteLine)(nil)).Elem()
}

func (o GetSitesSiteLineOutput) ToGetSitesSiteLineOutput() GetSitesSiteLineOutput {
	return o
}

func (o GetSitesSiteLineOutput) ToGetSitesSiteLineOutputWithContext(ctx context.Context) GetSitesSiteLineOutput {
	return o
}

// The ID of the EIP line.
func (o GetSitesSiteLineOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSiteLine) string { return v.Id }).(pulumi.StringOutput)
}

// The supported IP version.
func (o GetSitesSiteLineOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSiteLine) string { return v.IpVersion }).(pulumi.StringOutput)
}

// The name of the EIP line.
func (o GetSitesSiteLineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSiteLine) string { return v.Name }).(pulumi.StringOutput)
}

// The operator information of the EIP line.
func (o GetSitesSiteLineOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSiteLine) string { return v.Operator }).(pulumi.StringOutput)
}

type GetSitesSiteLineArrayOutput struct{ *pulumi.OutputState }

func (GetSitesSiteLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSiteLine)(nil)).Elem()
}

func (o GetSitesSiteLineArrayOutput) ToGetSitesSiteLineArrayOutput() GetSitesSiteLineArrayOutput {
	return o
}

func (o GetSitesSiteLineArrayOutput) ToGetSitesSiteLineArrayOutputWithContext(ctx context.Context) GetSitesSiteLineArrayOutput {
	return o
}

func (o GetSitesSiteLineArrayOutput) Index(i pulumi.IntInput) GetSitesSiteLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSitesSiteLine {
		return vs[0].([]GetSitesSiteLine)[vs[1].(int)]
	}).(GetSitesSiteLineOutput)
}

type GetVpcSubnetsSubnet struct {
	// Indicates the cidr block of the subnet.
	Cidr string `pulumi:"cidr"`
	// Indicates the DNS server address list of the subnet.
	DnsLists []string `pulumi:"dnsLists"`
	// Indicates the gateway of the subnet.
	GatewayIp string `pulumi:"gatewayIp"`
	// Indicates the ID of the subnet.
	Id string `pulumi:"id"`
	// Indicates the name of the subnet.
	Name string `pulumi:"name"`
	// Specifies the ID of the IEC site.
	SiteId string `pulumi:"siteId"`
	// Indicates the located information of the iec site. It contains area, province and city.
	SiteInfo string `pulumi:"siteInfo"`
	// Indicates the status of the subnet.
	Status string `pulumi:"status"`
}

// GetVpcSubnetsSubnetInput is an input type that accepts GetVpcSubnetsSubnetArgs and GetVpcSubnetsSubnetOutput values.
// You can construct a concrete instance of `GetVpcSubnetsSubnetInput` via:
//
//	GetVpcSubnetsSubnetArgs{...}
type GetVpcSubnetsSubnetInput interface {
	pulumi.Input

	ToGetVpcSubnetsSubnetOutput() GetVpcSubnetsSubnetOutput
	ToGetVpcSubnetsSubnetOutputWithContext(context.Context) GetVpcSubnetsSubnetOutput
}

type GetVpcSubnetsSubnetArgs struct {
	// Indicates the cidr block of the subnet.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Indicates the DNS server address list of the subnet.
	DnsLists pulumi.StringArrayInput `pulumi:"dnsLists"`
	// Indicates the gateway of the subnet.
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// Indicates the ID of the subnet.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates the name of the subnet.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the ID of the IEC site.
	SiteId pulumi.StringInput `pulumi:"siteId"`
	// Indicates the located information of the iec site. It contains area, province and city.
	SiteInfo pulumi.StringInput `pulumi:"siteInfo"`
	// Indicates the status of the subnet.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetVpcSubnetsSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsSubnet)(nil)).Elem()
}

func (i GetVpcSubnetsSubnetArgs) ToGetVpcSubnetsSubnetOutput() GetVpcSubnetsSubnetOutput {
	return i.ToGetVpcSubnetsSubnetOutputWithContext(context.Background())
}

func (i GetVpcSubnetsSubnetArgs) ToGetVpcSubnetsSubnetOutputWithContext(ctx context.Context) GetVpcSubnetsSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcSubnetsSubnetOutput)
}

// GetVpcSubnetsSubnetArrayInput is an input type that accepts GetVpcSubnetsSubnetArray and GetVpcSubnetsSubnetArrayOutput values.
// You can construct a concrete instance of `GetVpcSubnetsSubnetArrayInput` via:
//
//	GetVpcSubnetsSubnetArray{ GetVpcSubnetsSubnetArgs{...} }
type GetVpcSubnetsSubnetArrayInput interface {
	pulumi.Input

	ToGetVpcSubnetsSubnetArrayOutput() GetVpcSubnetsSubnetArrayOutput
	ToGetVpcSubnetsSubnetArrayOutputWithContext(context.Context) GetVpcSubnetsSubnetArrayOutput
}

type GetVpcSubnetsSubnetArray []GetVpcSubnetsSubnetInput

func (GetVpcSubnetsSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcSubnetsSubnet)(nil)).Elem()
}

func (i GetVpcSubnetsSubnetArray) ToGetVpcSubnetsSubnetArrayOutput() GetVpcSubnetsSubnetArrayOutput {
	return i.ToGetVpcSubnetsSubnetArrayOutputWithContext(context.Background())
}

func (i GetVpcSubnetsSubnetArray) ToGetVpcSubnetsSubnetArrayOutputWithContext(ctx context.Context) GetVpcSubnetsSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcSubnetsSubnetArrayOutput)
}

type GetVpcSubnetsSubnetOutput struct{ *pulumi.OutputState }

func (GetVpcSubnetsSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsSubnet)(nil)).Elem()
}

func (o GetVpcSubnetsSubnetOutput) ToGetVpcSubnetsSubnetOutput() GetVpcSubnetsSubnetOutput {
	return o
}

func (o GetVpcSubnetsSubnetOutput) ToGetVpcSubnetsSubnetOutputWithContext(ctx context.Context) GetVpcSubnetsSubnetOutput {
	return o
}

// Indicates the cidr block of the subnet.
func (o GetVpcSubnetsSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

// Indicates the DNS server address list of the subnet.
func (o GetVpcSubnetsSubnetOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) []string { return v.DnsLists }).(pulumi.StringArrayOutput)
}

// Indicates the gateway of the subnet.
func (o GetVpcSubnetsSubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// Indicates the ID of the subnet.
func (o GetVpcSubnetsSubnetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the name of the subnet.
func (o GetVpcSubnetsSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of the IEC site.
func (o GetVpcSubnetsSubnetOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.SiteId }).(pulumi.StringOutput)
}

// Indicates the located information of the iec site. It contains area, province and city.
func (o GetVpcSubnetsSubnetOutput) SiteInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.SiteInfo }).(pulumi.StringOutput)
}

// Indicates the status of the subnet.
func (o GetVpcSubnetsSubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsSubnet) string { return v.Status }).(pulumi.StringOutput)
}

type GetVpcSubnetsSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetVpcSubnetsSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcSubnetsSubnet)(nil)).Elem()
}

func (o GetVpcSubnetsSubnetArrayOutput) ToGetVpcSubnetsSubnetArrayOutput() GetVpcSubnetsSubnetArrayOutput {
	return o
}

func (o GetVpcSubnetsSubnetArrayOutput) ToGetVpcSubnetsSubnetArrayOutputWithContext(ctx context.Context) GetVpcSubnetsSubnetArrayOutput {
	return o
}

func (o GetVpcSubnetsSubnetArrayOutput) Index(i pulumi.IntInput) GetVpcSubnetsSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcSubnetsSubnet {
		return vs[0].([]GetVpcSubnetsSubnet)[vs[1].(int)]
	}).(GetVpcSubnetsSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclNetworkInput)(nil)).Elem(), NetworkAclNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclNetworkArrayInput)(nil)).Elem(), NetworkAclNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupSecurityGroupRuleInput)(nil)).Elem(), SecurityGroupSecurityGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupSecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupSecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCoverageSiteInput)(nil)).Elem(), ServerCoverageSiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCoverageSiteArrayInput)(nil)).Elem(), ServerCoverageSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerDataDiskInput)(nil)).Elem(), ServerDataDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerDataDiskArrayInput)(nil)).Elem(), ServerDataDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicInput)(nil)).Elem(), ServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicArrayInput)(nil)).Elem(), ServerNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeAttachedInput)(nil)).Elem(), ServerVolumeAttachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeAttachedArrayInput)(nil)).Elem(), ServerVolumeAttachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthsBandwidthInput)(nil)).Elem(), GetBandwidthsBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthsBandwidthArrayInput)(nil)).Elem(), GetBandwidthsBandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipInput)(nil)).Elem(), GetEipsEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipArrayInput)(nil)).Elem(), GetEipsEipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageInput)(nil)).Elem(), GetImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageArrayInput)(nil)).Elem(), GetImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetwork_aclNetworkInput)(nil)).Elem(), GetNetwork_aclNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetwork_aclNetworkArrayInput)(nil)).Elem(), GetNetwork_aclNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupSecurityGroupRuleInput)(nil)).Elem(), GetSecurityGroupSecurityGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupSecurityGroupRuleArrayInput)(nil)).Elem(), GetSecurityGroupSecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerCoverageSiteInput)(nil)).Elem(), GetServerCoverageSiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerCoverageSiteArrayInput)(nil)).Elem(), GetServerCoverageSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerNicInput)(nil)).Elem(), GetServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerNicArrayInput)(nil)).Elem(), GetServerNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVolumeAttachedInput)(nil)).Elem(), GetServerVolumeAttachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVolumeAttachedArrayInput)(nil)).Elem(), GetServerVolumeAttachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteInput)(nil)).Elem(), GetSitesSiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteArrayInput)(nil)).Elem(), GetSitesSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteLineInput)(nil)).Elem(), GetSitesSiteLineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteLineArrayInput)(nil)).Elem(), GetSitesSiteLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcSubnetsSubnetInput)(nil)).Elem(), GetVpcSubnetsSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcSubnetsSubnetArrayInput)(nil)).Elem(), GetVpcSubnetsSubnetArray{})
	pulumi.RegisterOutputType(NetworkAclNetworkOutput{})
	pulumi.RegisterOutputType(NetworkAclNetworkArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupSecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(ServerCoverageSiteOutput{})
	pulumi.RegisterOutputType(ServerCoverageSiteArrayOutput{})
	pulumi.RegisterOutputType(ServerDataDiskOutput{})
	pulumi.RegisterOutputType(ServerDataDiskArrayOutput{})
	pulumi.RegisterOutputType(ServerNicOutput{})
	pulumi.RegisterOutputType(ServerNicArrayOutput{})
	pulumi.RegisterOutputType(ServerVolumeAttachedOutput{})
	pulumi.RegisterOutputType(ServerVolumeAttachedArrayOutput{})
	pulumi.RegisterOutputType(GetBandwidthsBandwidthOutput{})
	pulumi.RegisterOutputType(GetBandwidthsBandwidthArrayOutput{})
	pulumi.RegisterOutputType(GetEipsEipOutput{})
	pulumi.RegisterOutputType(GetEipsEipArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
	pulumi.RegisterOutputType(GetImagesImageOutput{})
	pulumi.RegisterOutputType(GetImagesImageArrayOutput{})
	pulumi.RegisterOutputType(GetNetwork_aclNetworkOutput{})
	pulumi.RegisterOutputType(GetNetwork_aclNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupSecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(GetServerCoverageSiteOutput{})
	pulumi.RegisterOutputType(GetServerCoverageSiteArrayOutput{})
	pulumi.RegisterOutputType(GetServerNicOutput{})
	pulumi.RegisterOutputType(GetServerNicArrayOutput{})
	pulumi.RegisterOutputType(GetServerVolumeAttachedOutput{})
	pulumi.RegisterOutputType(GetServerVolumeAttachedArrayOutput{})
	pulumi.RegisterOutputType(GetSitesSiteOutput{})
	pulumi.RegisterOutputType(GetSitesSiteArrayOutput{})
	pulumi.RegisterOutputType(GetSitesSiteLineOutput{})
	pulumi.RegisterOutputType(GetSitesSiteLineArrayOutput{})
	pulumi.RegisterOutputType(GetVpcSubnetsSubnetOutput{})
	pulumi.RegisterOutputType(GetVpcSubnetsSubnetArrayOutput{})
}

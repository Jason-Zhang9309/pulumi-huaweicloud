// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a IEC security group resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			iecSecgroupName := cfg.RequireObject("iecSecgroupName")
//			_, err := Iec.NewSecurityGroup(ctx, "secgroupTest", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IEC Security Groups can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Iec/securityGroup:SecurityGroup secgroup_test 2a02d1d3-437c-11eb-b721-fa163e8ac569
//
// ```
type SecurityGroup struct {
	pulumi.CustomResourceState

	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name for the security group. This parameter can contain a maximum
	// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
	// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// An Array of one or more security group rules. The securityGroupRules object structure is
	// documented below.
	SecurityGroupRules SecurityGroupSecurityGroupRuleArrayOutput `pulumi:"securityGroupRules"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil {
		args = &SecurityGroupArgs{}
	}

	var resource SecurityGroup
	err := ctx.RegisterResource("huaweicloud:Iec/securityGroup:SecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	var resource SecurityGroup
	err := ctx.ReadResource("huaweicloud:Iec/securityGroup:SecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type securityGroupState struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description *string `pulumi:"description"`
	// Specifies the name for the security group. This parameter can contain a maximum
	// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
	// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
	Name *string `pulumi:"name"`
	// An Array of one or more security group rules. The securityGroupRules object structure is
	// documented below.
	SecurityGroupRules []SecurityGroupSecurityGroupRule `pulumi:"securityGroupRules"`
}

type SecurityGroupState struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description pulumi.StringPtrInput
	// Specifies the name for the security group. This parameter can contain a maximum
	// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
	// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
	Name pulumi.StringPtrInput
	// An Array of one or more security group rules. The securityGroupRules object structure is
	// documented below.
	SecurityGroupRules SecurityGroupSecurityGroupRuleArrayInput
}

func (SecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupState)(nil)).Elem()
}

type securityGroupArgs struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description *string `pulumi:"description"`
	// Specifies the name for the security group. This parameter can contain a maximum
	// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
	// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	// Specifies the description of the iec security group. description must be
	// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
	// new iec security group resource.
	Description pulumi.StringPtrInput
	// Specifies the name for the security group. This parameter can contain a maximum
	// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
	// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
	Name pulumi.StringPtrInput
}

func (SecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupArgs)(nil)).Elem()
}

type SecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupOutput() SecurityGroupOutput
	ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput
}

func (*SecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (i *SecurityGroup) ToSecurityGroupOutput() SecurityGroupOutput {
	return i.ToSecurityGroupOutputWithContext(context.Background())
}

func (i *SecurityGroup) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutput)
}

// SecurityGroupArrayInput is an input type that accepts SecurityGroupArray and SecurityGroupArrayOutput values.
// You can construct a concrete instance of `SecurityGroupArrayInput` via:
//
//	SecurityGroupArray{ SecurityGroupArgs{...} }
type SecurityGroupArrayInput interface {
	pulumi.Input

	ToSecurityGroupArrayOutput() SecurityGroupArrayOutput
	ToSecurityGroupArrayOutputWithContext(context.Context) SecurityGroupArrayOutput
}

type SecurityGroupArray []SecurityGroupInput

func (SecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return i.ToSecurityGroupArrayOutputWithContext(context.Background())
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupArrayOutput)
}

// SecurityGroupMapInput is an input type that accepts SecurityGroupMap and SecurityGroupMapOutput values.
// You can construct a concrete instance of `SecurityGroupMapInput` via:
//
//	SecurityGroupMap{ "key": SecurityGroupArgs{...} }
type SecurityGroupMapInput interface {
	pulumi.Input

	ToSecurityGroupMapOutput() SecurityGroupMapOutput
	ToSecurityGroupMapOutputWithContext(context.Context) SecurityGroupMapOutput
}

type SecurityGroupMap map[string]SecurityGroupInput

func (SecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupMap) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return i.ToSecurityGroupMapOutputWithContext(context.Background())
}

func (i SecurityGroupMap) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupMapOutput)
}

type SecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupOutput) ToSecurityGroupOutput() SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return o
}

// Specifies the description of the iec security group. description must be
// 0 to 64 characters in length, and does not contain angle brackets (<) and (>). Changing this parameter will creates a
// new iec security group resource.
func (o SecurityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name for the security group. This parameter can contain a maximum
// of 64 characters, which may consist of letters, digits, dot (.), underscores (_), and hyphens (-). The iec security
// group allowed to have the same name. Changing this parameter will creates a new iec security group resource.
func (o SecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An Array of one or more security group rules. The securityGroupRules object structure is
// documented below.
func (o SecurityGroupOutput) SecurityGroupRules() SecurityGroupSecurityGroupRuleArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupSecurityGroupRuleArrayOutput { return v.SecurityGroupRules }).(SecurityGroupSecurityGroupRuleArrayOutput)
}

type SecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) Index(i pulumi.IntInput) SecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].([]*SecurityGroup)[vs[1].(int)]
	}).(SecurityGroupOutput)
}

type SecurityGroupMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].(map[string]*SecurityGroup)[vs[1].(string)]
	}).(SecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInput)(nil)).Elem(), &SecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupArrayInput)(nil)).Elem(), SecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupMapInput)(nil)).Elem(), SecurityGroupMap{})
	pulumi.RegisterOutputType(SecurityGroupOutput{})
	pulumi.RegisterOutputType(SecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupMapOutput{})
}

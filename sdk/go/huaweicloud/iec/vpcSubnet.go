// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VPC subnet resource within HuaweiCloud IEC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sitesTest, err := Iec.GetSites(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			vpcTest, err := Iec.NewVpc(ctx, "vpcTest", &Iec.VpcArgs{
//				Cidr: pulumi.String("192.168.0.0/16"),
//				Mode: pulumi.String("CUSTOMER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Iec.NewVpcSubnet(ctx, "subnetTest", &Iec.VpcSubnetArgs{
//				Cidr:      pulumi.String("192.168.128.0/18"),
//				VpcId:     vpcTest.ID(),
//				SiteId:    pulumi.String(sitesTest.Sites[0].Id),
//				GatewayIp: pulumi.String("192.168.128.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IEC vpc subnet can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Iec/vpcSubnet:VpcSubnet subnet_demo 51be9f2b-5a3b-406a-9271-36f0c929fbcc
//
// ```
type VpcSubnet struct {
	pulumi.CustomResourceState

	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The status of subnet DHCP is enabled or not.
	DhcpEnable pulumi.BoolPtrOutput `pulumi:"dhcpEnable"`
	// Specifies the DNS server address list of a subnet. These DNS server address must be
	// valid IP addresses.
	DnsLists pulumi.StringArrayOutput `pulumi:"dnsLists"`
	// Specifies the gateway of the subnet. The value must be a valid IP address
	// and in the subnet segment. Changing this parameter creates a new subnet resource.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores(_), and hyphens(-).
	Name   pulumi.StringOutput    `pulumi:"name"`
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Specifies the ID of the iec site. Changing this parameter creates a new
	// subnet resource.
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// The located information of the iec site. It contains area, province and city.
	SiteInfo pulumi.StringOutput `pulumi:"siteInfo"`
	// The status of the subnet.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the iec **CUSTOMER**
	// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcSubnet registers a new resource with the given unique name, arguments, and options.
func NewVpcSubnet(ctx *pulumi.Context,
	name string, args *VpcSubnetArgs, opts ...pulumi.ResourceOption) (*VpcSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpcSubnet
	err := ctx.RegisterResource("huaweicloud:Iec/vpcSubnet:VpcSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcSubnet gets an existing VpcSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcSubnetState, opts ...pulumi.ResourceOption) (*VpcSubnet, error) {
	var resource VpcSubnet
	err := ctx.ReadResource("huaweicloud:Iec/vpcSubnet:VpcSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcSubnet resources.
type vpcSubnetState struct {
	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
	Cidr *string `pulumi:"cidr"`
	// The status of subnet DHCP is enabled or not.
	DhcpEnable *bool `pulumi:"dhcpEnable"`
	// Specifies the DNS server address list of a subnet. These DNS server address must be
	// valid IP addresses.
	DnsLists []string `pulumi:"dnsLists"`
	// Specifies the gateway of the subnet. The value must be a valid IP address
	// and in the subnet segment. Changing this parameter creates a new subnet resource.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores(_), and hyphens(-).
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Specifies the ID of the iec site. Changing this parameter creates a new
	// subnet resource.
	SiteId *string `pulumi:"siteId"`
	// The located information of the iec site. It contains area, province and city.
	SiteInfo *string `pulumi:"siteInfo"`
	// The status of the subnet.
	Status *string `pulumi:"status"`
	// Specifies the ID of the iec **CUSTOMER**
	// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
	VpcId *string `pulumi:"vpcId"`
}

type VpcSubnetState struct {
	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
	Cidr pulumi.StringPtrInput
	// The status of subnet DHCP is enabled or not.
	DhcpEnable pulumi.BoolPtrInput
	// Specifies the DNS server address list of a subnet. These DNS server address must be
	// valid IP addresses.
	DnsLists pulumi.StringArrayInput
	// Specifies the gateway of the subnet. The value must be a valid IP address
	// and in the subnet segment. Changing this parameter creates a new subnet resource.
	GatewayIp pulumi.StringPtrInput
	// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores(_), and hyphens(-).
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the ID of the iec site. Changing this parameter creates a new
	// subnet resource.
	SiteId pulumi.StringPtrInput
	// The located information of the iec site. It contains area, province and city.
	SiteInfo pulumi.StringPtrInput
	// The status of the subnet.
	Status pulumi.StringPtrInput
	// Specifies the ID of the iec **CUSTOMER**
	// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
	VpcId pulumi.StringPtrInput
}

func (VpcSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcSubnetState)(nil)).Elem()
}

type vpcSubnetArgs struct {
	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
	Cidr string `pulumi:"cidr"`
	// The status of subnet DHCP is enabled or not.
	DhcpEnable *bool `pulumi:"dhcpEnable"`
	// Specifies the DNS server address list of a subnet. These DNS server address must be
	// valid IP addresses.
	DnsLists []string `pulumi:"dnsLists"`
	// Specifies the gateway of the subnet. The value must be a valid IP address
	// and in the subnet segment. Changing this parameter creates a new subnet resource.
	GatewayIp string `pulumi:"gatewayIp"`
	// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores(_), and hyphens(-).
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Specifies the ID of the iec site. Changing this parameter creates a new
	// subnet resource.
	SiteId string `pulumi:"siteId"`
	// Specifies the ID of the iec **CUSTOMER**
	// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcSubnet resource.
type VpcSubnetArgs struct {
	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
	Cidr pulumi.StringInput
	// The status of subnet DHCP is enabled or not.
	DhcpEnable pulumi.BoolPtrInput
	// Specifies the DNS server address list of a subnet. These DNS server address must be
	// valid IP addresses.
	DnsLists pulumi.StringArrayInput
	// Specifies the gateway of the subnet. The value must be a valid IP address
	// and in the subnet segment. Changing this parameter creates a new subnet resource.
	GatewayIp pulumi.StringInput
	// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores(_), and hyphens(-).
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the ID of the iec site. Changing this parameter creates a new
	// subnet resource.
	SiteId pulumi.StringInput
	// Specifies the ID of the iec **CUSTOMER**
	// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
	VpcId pulumi.StringInput
}

func (VpcSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcSubnetArgs)(nil)).Elem()
}

type VpcSubnetInput interface {
	pulumi.Input

	ToVpcSubnetOutput() VpcSubnetOutput
	ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput
}

func (*VpcSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcSubnet)(nil)).Elem()
}

func (i *VpcSubnet) ToVpcSubnetOutput() VpcSubnetOutput {
	return i.ToVpcSubnetOutputWithContext(context.Background())
}

func (i *VpcSubnet) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetOutput)
}

// VpcSubnetArrayInput is an input type that accepts VpcSubnetArray and VpcSubnetArrayOutput values.
// You can construct a concrete instance of `VpcSubnetArrayInput` via:
//
//	VpcSubnetArray{ VpcSubnetArgs{...} }
type VpcSubnetArrayInput interface {
	pulumi.Input

	ToVpcSubnetArrayOutput() VpcSubnetArrayOutput
	ToVpcSubnetArrayOutputWithContext(context.Context) VpcSubnetArrayOutput
}

type VpcSubnetArray []VpcSubnetInput

func (VpcSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return i.ToVpcSubnetArrayOutputWithContext(context.Background())
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetArrayOutput)
}

// VpcSubnetMapInput is an input type that accepts VpcSubnetMap and VpcSubnetMapOutput values.
// You can construct a concrete instance of `VpcSubnetMapInput` via:
//
//	VpcSubnetMap{ "key": VpcSubnetArgs{...} }
type VpcSubnetMapInput interface {
	pulumi.Input

	ToVpcSubnetMapOutput() VpcSubnetMapOutput
	ToVpcSubnetMapOutputWithContext(context.Context) VpcSubnetMapOutput
}

type VpcSubnetMap map[string]VpcSubnetInput

func (VpcSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetMap) ToVpcSubnetMapOutput() VpcSubnetMapOutput {
	return i.ToVpcSubnetMapOutputWithContext(context.Background())
}

func (i VpcSubnetMap) ToVpcSubnetMapOutputWithContext(ctx context.Context) VpcSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetMapOutput)
}

type VpcSubnetOutput struct{ *pulumi.OutputState }

func (VpcSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetOutput) ToVpcSubnetOutput() VpcSubnetOutput {
	return o
}

func (o VpcSubnetOutput) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return o
}

// Specifies the network segment on which the subnet resides. The value must be in
// CIDR format and within the CIDR block of the iec vpc. Changing this parameter creates a new subnet resource.
func (o VpcSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// The status of subnet DHCP is enabled or not.
func (o VpcSubnetOutput) DhcpEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.BoolPtrOutput { return v.DhcpEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the DNS server address list of a subnet. These DNS server address must be
// valid IP addresses.
func (o VpcSubnetOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringArrayOutput { return v.DnsLists }).(pulumi.StringArrayOutput)
}

// Specifies the gateway of the subnet. The value must be a valid IP address
// and in the subnet segment. Changing this parameter creates a new subnet resource.
func (o VpcSubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// Specifies the name of the iec vpc subnet. The value is a string of 1 to 64 characters that
// can contain letters, digits, underscores(_), and hyphens(-).
func (o VpcSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcSubnetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the iec site. Changing this parameter creates a new
// subnet resource.
func (o VpcSubnetOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// The located information of the iec site. It contains area, province and city.
func (o VpcSubnetOutput) SiteInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.SiteInfo }).(pulumi.StringOutput)
}

// The status of the subnet.
func (o VpcSubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the iec **CUSTOMER**
// vpc to which the subnet belongs. Changing this parameter creates a new subnet resource.
func (o VpcSubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcSubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) Index(i pulumi.IntInput) VpcSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcSubnet {
		return vs[0].([]*VpcSubnet)[vs[1].(int)]
	}).(VpcSubnetOutput)
}

type VpcSubnetMapOutput struct{ *pulumi.OutputState }

func (VpcSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetMapOutput) ToVpcSubnetMapOutput() VpcSubnetMapOutput {
	return o
}

func (o VpcSubnetMapOutput) ToVpcSubnetMapOutputWithContext(ctx context.Context) VpcSubnetMapOutput {
	return o
}

func (o VpcSubnetMapOutput) MapIndex(k pulumi.StringInput) VpcSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcSubnet {
		return vs[0].(map[string]*VpcSubnet)[vs[1].(string)]
	}).(VpcSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetInput)(nil)).Elem(), &VpcSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetArrayInput)(nil)).Elem(), VpcSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetMapInput)(nil)).Elem(), VpcSubnetMap{})
	pulumi.RegisterOutputType(VpcSubnetOutput{})
	pulumi.RegisterOutputType(VpcSubnetArrayOutput{})
	pulumi.RegisterOutputType(VpcSubnetMapOutput{})
}

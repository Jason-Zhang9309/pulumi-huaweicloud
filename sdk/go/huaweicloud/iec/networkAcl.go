// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a network ACL resource within HuaweiCloud IEC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Iec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			iecVpcId := cfg.RequireObject("iecVpcId")
//			iecSubnetId := cfg.RequireObject("iecSubnetId")
//			_, err := Iec.NewNetworkAcl(ctx, "aclTest", &Iec.NetworkAclArgs{
//				Description: pulumi.String("This is a network ACL of IEC with networks."),
//				Networks: iec.NetworkAclNetworkArray{
//					&iec.NetworkAclNetworkArgs{
//						VpcId:    pulumi.Any(iecVpcId),
//						SubnetId: pulumi.Any(iecSubnetId),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network ACL can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Iec/networkAcl:NetworkAcl acl_test <id>
//
// ```
type NetworkAcl struct {
	pulumi.CustomResourceState

	// Specifies the supplementary information about the iec network ACL. This parameter
	// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of the IDs of ingress rules associated with the iec network ACL.
	InboundRules pulumi.StringArrayOutput `pulumi:"inboundRules"`
	// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies an list of one or more networks. The networks object structure is documented
	// below.
	Networks NetworkAclNetworkArrayOutput `pulumi:"networks"`
	// A list of the IDs of egress rules associated with the iec network ACL.
	OutboundRules pulumi.StringArrayOutput `pulumi:"outboundRules"`
	// The status of the iec network ACL.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewNetworkAcl(ctx *pulumi.Context,
	name string, args *NetworkAclArgs, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	if args == nil {
		args = &NetworkAclArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource NetworkAcl
	err := ctx.RegisterResource("huaweicloud:Iec/networkAcl:NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAcl gets an existing NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclState, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	var resource NetworkAcl
	err := ctx.ReadResource("huaweicloud:Iec/networkAcl:NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAcl resources.
type networkAclState struct {
	// Specifies the supplementary information about the iec network ACL. This parameter
	// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// A list of the IDs of ingress rules associated with the iec network ACL.
	InboundRules []string `pulumi:"inboundRules"`
	// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies an list of one or more networks. The networks object structure is documented
	// below.
	Networks []NetworkAclNetwork `pulumi:"networks"`
	// A list of the IDs of egress rules associated with the iec network ACL.
	OutboundRules []string `pulumi:"outboundRules"`
	// The status of the iec network ACL.
	Status *string `pulumi:"status"`
}

type NetworkAclState struct {
	// Specifies the supplementary information about the iec network ACL. This parameter
	// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// A list of the IDs of ingress rules associated with the iec network ACL.
	InboundRules pulumi.StringArrayInput
	// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies an list of one or more networks. The networks object structure is documented
	// below.
	Networks NetworkAclNetworkArrayInput
	// A list of the IDs of egress rules associated with the iec network ACL.
	OutboundRules pulumi.StringArrayInput
	// The status of the iec network ACL.
	Status pulumi.StringPtrInput
}

func (NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclState)(nil)).Elem()
}

type networkAclArgs struct {
	// Specifies the supplementary information about the iec network ACL. This parameter
	// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies an list of one or more networks. The networks object structure is documented
	// below.
	Networks []NetworkAclNetwork `pulumi:"networks"`
}

// The set of arguments for constructing a NetworkAcl resource.
type NetworkAclArgs struct {
	// Specifies the supplementary information about the iec network ACL. This parameter
	// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies an list of one or more networks. The networks object structure is documented
	// below.
	Networks NetworkAclNetworkArrayInput
}

func (NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclArgs)(nil)).Elem()
}

type NetworkAclInput interface {
	pulumi.Input

	ToNetworkAclOutput() NetworkAclOutput
	ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput
}

func (*NetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (i *NetworkAcl) ToNetworkAclOutput() NetworkAclOutput {
	return i.ToNetworkAclOutputWithContext(context.Background())
}

func (i *NetworkAcl) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclOutput)
}

// NetworkAclArrayInput is an input type that accepts NetworkAclArray and NetworkAclArrayOutput values.
// You can construct a concrete instance of `NetworkAclArrayInput` via:
//
//	NetworkAclArray{ NetworkAclArgs{...} }
type NetworkAclArrayInput interface {
	pulumi.Input

	ToNetworkAclArrayOutput() NetworkAclArrayOutput
	ToNetworkAclArrayOutputWithContext(context.Context) NetworkAclArrayOutput
}

type NetworkAclArray []NetworkAclInput

func (NetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclArray) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return i.ToNetworkAclArrayOutputWithContext(context.Background())
}

func (i NetworkAclArray) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclArrayOutput)
}

// NetworkAclMapInput is an input type that accepts NetworkAclMap and NetworkAclMapOutput values.
// You can construct a concrete instance of `NetworkAclMapInput` via:
//
//	NetworkAclMap{ "key": NetworkAclArgs{...} }
type NetworkAclMapInput interface {
	pulumi.Input

	ToNetworkAclMapOutput() NetworkAclMapOutput
	ToNetworkAclMapOutputWithContext(context.Context) NetworkAclMapOutput
}

type NetworkAclMap map[string]NetworkAclInput

func (NetworkAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclMap) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return i.ToNetworkAclMapOutputWithContext(context.Background())
}

func (i NetworkAclMap) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclMapOutput)
}

type NetworkAclOutput struct{ *pulumi.OutputState }

func (NetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (o NetworkAclOutput) ToNetworkAclOutput() NetworkAclOutput {
	return o
}

func (o NetworkAclOutput) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return o
}

// Specifies the supplementary information about the iec network ACL. This parameter
// can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
func (o NetworkAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of the IDs of ingress rules associated with the iec network ACL.
func (o NetworkAclOutput) InboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringArrayOutput { return v.InboundRules }).(pulumi.StringArrayOutput)
}

// Specifies the iec network ACL name. This parameter can contain a maximum of 64 characters,
// which may consist of letters, digits, dot (.), underscores (_), and hyphens (-).
func (o NetworkAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies an list of one or more networks. The networks object structure is documented
// below.
func (o NetworkAclOutput) Networks() NetworkAclNetworkArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclNetworkArrayOutput { return v.Networks }).(NetworkAclNetworkArrayOutput)
}

// A list of the IDs of egress rules associated with the iec network ACL.
func (o NetworkAclOutput) OutboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringArrayOutput { return v.OutboundRules }).(pulumi.StringArrayOutput)
}

// The status of the iec network ACL.
func (o NetworkAclOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type NetworkAclArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) Index(i pulumi.IntInput) NetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].([]*NetworkAcl)[vs[1].(int)]
	}).(NetworkAclOutput)
}

type NetworkAclMapOutput struct{ *pulumi.OutputState }

func (NetworkAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) MapIndex(k pulumi.StringInput) NetworkAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].(map[string]*NetworkAcl)[vs[1].(string)]
	}).(NetworkAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclInput)(nil)).Elem(), &NetworkAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclArrayInput)(nil)).Elem(), NetworkAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclMapInput)(nil)).Elem(), NetworkAclMap{})
	pulumi.RegisterOutputType(NetworkAclOutput{})
	pulumi.RegisterOutputType(NetworkAclArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclMapOutput{})
}

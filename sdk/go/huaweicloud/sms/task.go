// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an SMS migration task resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Sms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sourceServer := cfg.RequireObject("sourceServer")
//			templateId := cfg.RequireObject("templateId")
//			_, err := Sms.NewTask(ctx, "migration", &Sms.TaskArgs{
//				Type:           pulumi.String("MIGRATE_FILE"),
//				OsType:         pulumi.String("LINUX"),
//				SourceServerId: pulumi.Any(sourceServer),
//				VmTemplateId:   pulumi.Any(templateId),
//				Action:         pulumi.String("start"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SMS migration tasks can be imported by `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Sms/task:Task demo 6402c49b-7d9a-413e-8b5f-a7307f7d5679
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response. The missing attributes include`use_public_ip`, `syncing` and `action`. It is generally recommended running `terraform plan` after importing a migration task. You can then decide if changes should be applied to the task, or the resource definition should be updated to align with the task. Also you can ignore changes as below. resource "huaweicloud_sms_task" "demo" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	use_public_ip, syncing, action,
//
//	]
//
//	} }
type Task struct {
	pulumi.CustomResourceState

	// Specifies the operation after the task is created.
	// The value can be **start**, **stop** and **restart**.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// The enterprise project id of the target server.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The migration rate, in MB/s.
	MigrateSpeed pulumi.Float64Output `pulumi:"migrateSpeed"`
	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	MigrationIp pulumi.StringPtrOutput `pulumi:"migrationIp"`
	// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	// Changing this parameter will create a new resource.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	SourceServerId pulumi.StringOutput `pulumi:"sourceServerId"`
	// Specifies whether to start the target server after the migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	StartTargetServer pulumi.BoolPtrOutput `pulumi:"startTargetServer"`
	// The status of the migration task.
	State pulumi.StringOutput `pulumi:"state"`
	// - Specifies whether to perform a continuous synchronization after the first replication.
	//   The default value is `false`. Changing this parameter will create a new resource.
	Syncing pulumi.BoolPtrOutput `pulumi:"syncing"`
	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	TargetServerDisks TaskTargetServerDiskArrayOutput `pulumi:"targetServerDisks"`
	// Specifies the existing server ID as the target server.
	// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
	TargetServerId pulumi.StringOutput `pulumi:"targetServerId"`
	// The name of the target server.
	TargetServerName pulumi.StringOutput `pulumi:"targetServerName"`
	// Specifies the type of the migration task. Available values are
	// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
	// Changing this parameter will create a new resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies whether to use a public IP address for migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	UsePublicIp pulumi.BoolPtrOutput `pulumi:"usePublicIp"`
	// Specifies the template used to create the target server automatically.
	// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
	VmTemplateId pulumi.StringPtrOutput `pulumi:"vmTemplateId"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OsType == nil {
		return nil, errors.New("invalid value for required argument 'OsType'")
	}
	if args.SourceServerId == nil {
		return nil, errors.New("invalid value for required argument 'SourceServerId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Task
	err := ctx.RegisterResource("huaweicloud:Sms/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("huaweicloud:Sms/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	// Specifies the operation after the task is created.
	// The value can be **start**, **stop** and **restart**.
	Action *string `pulumi:"action"`
	// The enterprise project id of the target server.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The migration rate, in MB/s.
	MigrateSpeed *float64 `pulumi:"migrateSpeed"`
	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	MigrationIp *string `pulumi:"migrationIp"`
	// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	// Changing this parameter will create a new resource.
	OsType *string `pulumi:"osType"`
	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	ProjectId *string `pulumi:"projectId"`
	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	SourceServerId *string `pulumi:"sourceServerId"`
	// Specifies whether to start the target server after the migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	StartTargetServer *bool `pulumi:"startTargetServer"`
	// The status of the migration task.
	State *string `pulumi:"state"`
	// - Specifies whether to perform a continuous synchronization after the first replication.
	//   The default value is `false`. Changing this parameter will create a new resource.
	Syncing *bool `pulumi:"syncing"`
	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	TargetServerDisks []TaskTargetServerDisk `pulumi:"targetServerDisks"`
	// Specifies the existing server ID as the target server.
	// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
	TargetServerId *string `pulumi:"targetServerId"`
	// The name of the target server.
	TargetServerName *string `pulumi:"targetServerName"`
	// Specifies the type of the migration task. Available values are
	// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
	// Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
	// Specifies whether to use a public IP address for migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	UsePublicIp *bool `pulumi:"usePublicIp"`
	// Specifies the template used to create the target server automatically.
	// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
	VmTemplateId *string `pulumi:"vmTemplateId"`
}

type TaskState struct {
	// Specifies the operation after the task is created.
	// The value can be **start**, **stop** and **restart**.
	Action pulumi.StringPtrInput
	// The enterprise project id of the target server.
	EnterpriseProjectId pulumi.StringPtrInput
	// The migration rate, in MB/s.
	MigrateSpeed pulumi.Float64PtrInput
	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	MigrationIp pulumi.StringPtrInput
	// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	// Changing this parameter will create a new resource.
	OsType pulumi.StringPtrInput
	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	ProjectId pulumi.StringPtrInput
	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	SourceServerId pulumi.StringPtrInput
	// Specifies whether to start the target server after the migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	StartTargetServer pulumi.BoolPtrInput
	// The status of the migration task.
	State pulumi.StringPtrInput
	// - Specifies whether to perform a continuous synchronization after the first replication.
	//   The default value is `false`. Changing this parameter will create a new resource.
	Syncing pulumi.BoolPtrInput
	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	TargetServerDisks TaskTargetServerDiskArrayInput
	// Specifies the existing server ID as the target server.
	// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
	TargetServerId pulumi.StringPtrInput
	// The name of the target server.
	TargetServerName pulumi.StringPtrInput
	// Specifies the type of the migration task. Available values are
	// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
	// Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
	// Specifies whether to use a public IP address for migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	UsePublicIp pulumi.BoolPtrInput
	// Specifies the template used to create the target server automatically.
	// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
	VmTemplateId pulumi.StringPtrInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// Specifies the operation after the task is created.
	// The value can be **start**, **stop** and **restart**.
	Action *string `pulumi:"action"`
	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	MigrationIp *string `pulumi:"migrationIp"`
	// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	// Changing this parameter will create a new resource.
	OsType string `pulumi:"osType"`
	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	ProjectId *string `pulumi:"projectId"`
	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	SourceServerId string `pulumi:"sourceServerId"`
	// Specifies whether to start the target server after the migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	StartTargetServer *bool `pulumi:"startTargetServer"`
	// - Specifies whether to perform a continuous synchronization after the first replication.
	//   The default value is `false`. Changing this parameter will create a new resource.
	Syncing *bool `pulumi:"syncing"`
	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	TargetServerDisks []TaskTargetServerDisk `pulumi:"targetServerDisks"`
	// Specifies the existing server ID as the target server.
	// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
	TargetServerId *string `pulumi:"targetServerId"`
	// Specifies the type of the migration task. Available values are
	// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
	// Changing this parameter will create a new resource.
	Type string `pulumi:"type"`
	// Specifies whether to use a public IP address for migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	UsePublicIp *bool `pulumi:"usePublicIp"`
	// Specifies the template used to create the target server automatically.
	// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
	VmTemplateId *string `pulumi:"vmTemplateId"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// Specifies the operation after the task is created.
	// The value can be **start**, **stop** and **restart**.
	Action pulumi.StringPtrInput
	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	MigrationIp pulumi.StringPtrInput
	// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	// Changing this parameter will create a new resource.
	OsType pulumi.StringInput
	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	ProjectId pulumi.StringPtrInput
	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	SourceServerId pulumi.StringInput
	// Specifies whether to start the target server after the migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	StartTargetServer pulumi.BoolPtrInput
	// - Specifies whether to perform a continuous synchronization after the first replication.
	//   The default value is `false`. Changing this parameter will create a new resource.
	Syncing pulumi.BoolPtrInput
	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	TargetServerDisks TaskTargetServerDiskArrayInput
	// Specifies the existing server ID as the target server.
	// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
	TargetServerId pulumi.StringPtrInput
	// Specifies the type of the migration task. Available values are
	// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
	// Changing this parameter will create a new resource.
	Type pulumi.StringInput
	// Specifies whether to use a public IP address for migration.
	// The default value is `true`. Changing this parameter will create a new resource.
	UsePublicIp pulumi.BoolPtrInput
	// Specifies the template used to create the target server automatically.
	// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
	VmTemplateId pulumi.StringPtrInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// Specifies the operation after the task is created.
// The value can be **start**, **stop** and **restart**.
func (o TaskOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// The enterprise project id of the target server.
func (o TaskOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The migration rate, in MB/s.
func (o TaskOutput) MigrateSpeed() pulumi.Float64Output {
	return o.ApplyT(func(v *Task) pulumi.Float64Output { return v.MigrateSpeed }).(pulumi.Float64Output)
}

// Specifies the IP address of the target server.
// Use the EIP of the target server if the migration network type is Internet.
// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
// Changing this parameter will create a new resource.
func (o TaskOutput) MigrationIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.MigrationIp }).(pulumi.StringPtrOutput)
}

// Specifies the OS type of the source server. The value can be **WINDOWS** and **LINUX**.
// Changing this parameter will create a new resource.
func (o TaskOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Specifies the project ID where the target server is located.
// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
func (o TaskOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Specifies the region where the target server is located.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o TaskOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the source server.
// Changing this parameter will create a new resource.
func (o TaskOutput) SourceServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SourceServerId }).(pulumi.StringOutput)
}

// Specifies whether to start the target server after the migration.
// The default value is `true`. Changing this parameter will create a new resource.
func (o TaskOutput) StartTargetServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolPtrOutput { return v.StartTargetServer }).(pulumi.BoolPtrOutput)
}

// The status of the migration task.
func (o TaskOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

//   - Specifies whether to perform a continuous synchronization after the first replication.
//     The default value is `false`. Changing this parameter will create a new resource.
func (o TaskOutput) Syncing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolPtrOutput { return v.Syncing }).(pulumi.BoolPtrOutput)
}

// Specifies the disk configurations of the target server.
// If omitted, it will be obtained from the source server. The object
// is documented below. Changing this parameter will create a new resource.
func (o TaskOutput) TargetServerDisks() TaskTargetServerDiskArrayOutput {
	return o.ApplyT(func(v *Task) TaskTargetServerDiskArrayOutput { return v.TargetServerDisks }).(TaskTargetServerDiskArrayOutput)
}

// Specifies the existing server ID as the target server.
// This parameter and `vmTemplateId` are alternative. Changing this parameter will create a new resource.
func (o TaskOutput) TargetServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TargetServerId }).(pulumi.StringOutput)
}

// The name of the target server.
func (o TaskOutput) TargetServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TargetServerName }).(pulumi.StringOutput)
}

// Specifies the type of the migration task. Available values are
// **MIGRATE_FILE**(file-level migration) and **MIGRATE_BLOCK**(block-level migration).
// Changing this parameter will create a new resource.
func (o TaskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a public IP address for migration.
// The default value is `true`. Changing this parameter will create a new resource.
func (o TaskOutput) UsePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolPtrOutput { return v.UsePublicIp }).(pulumi.BoolPtrOutput)
}

// Specifies the template used to create the target server automatically.
// This parameter and `targetServerId` are alternative. Changing this parameter will create a new resource.
func (o TaskOutput) VmTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.VmTemplateId }).(pulumi.StringPtrOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}

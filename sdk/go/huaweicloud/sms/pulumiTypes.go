// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TaskTargetServerDisk struct {
	// Specifies the partition type. The value can be **NORMAL** and **OS**.
	// Changing this parameter will create a new resource.
	DeviceType string `pulumi:"deviceType"`
	// Specifies the disk index, e.g. "0".
	// Changing this parameter will create a new resource.
	DiskId *string `pulumi:"diskId"`
	// Specifies the volume name. In Windows, it indicates the drive letter,
	// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
	// Changing this parameter will create a new resource.
	Name string `pulumi:"name"`
	// Specifies an array of physical volume informations.
	// The object is documented below. Changing this parameter will create a new resource.
	PhysicalVolumes []TaskTargetServerDiskPhysicalVolume `pulumi:"physicalVolumes"`
	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the used space in MB.
	// Changing this parameter will create a new resource.
	UsedSize *int `pulumi:"usedSize"`
}

// TaskTargetServerDiskInput is an input type that accepts TaskTargetServerDiskArgs and TaskTargetServerDiskOutput values.
// You can construct a concrete instance of `TaskTargetServerDiskInput` via:
//
//	TaskTargetServerDiskArgs{...}
type TaskTargetServerDiskInput interface {
	pulumi.Input

	ToTaskTargetServerDiskOutput() TaskTargetServerDiskOutput
	ToTaskTargetServerDiskOutputWithContext(context.Context) TaskTargetServerDiskOutput
}

type TaskTargetServerDiskArgs struct {
	// Specifies the partition type. The value can be **NORMAL** and **OS**.
	// Changing this parameter will create a new resource.
	DeviceType pulumi.StringInput `pulumi:"deviceType"`
	// Specifies the disk index, e.g. "0".
	// Changing this parameter will create a new resource.
	DiskId pulumi.StringPtrInput `pulumi:"diskId"`
	// Specifies the volume name. In Windows, it indicates the drive letter,
	// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
	// Changing this parameter will create a new resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies an array of physical volume informations.
	// The object is documented below. Changing this parameter will create a new resource.
	PhysicalVolumes TaskTargetServerDiskPhysicalVolumeArrayInput `pulumi:"physicalVolumes"`
	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the used space in MB.
	// Changing this parameter will create a new resource.
	UsedSize pulumi.IntPtrInput `pulumi:"usedSize"`
}

func (TaskTargetServerDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTargetServerDisk)(nil)).Elem()
}

func (i TaskTargetServerDiskArgs) ToTaskTargetServerDiskOutput() TaskTargetServerDiskOutput {
	return i.ToTaskTargetServerDiskOutputWithContext(context.Background())
}

func (i TaskTargetServerDiskArgs) ToTaskTargetServerDiskOutputWithContext(ctx context.Context) TaskTargetServerDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTargetServerDiskOutput)
}

// TaskTargetServerDiskArrayInput is an input type that accepts TaskTargetServerDiskArray and TaskTargetServerDiskArrayOutput values.
// You can construct a concrete instance of `TaskTargetServerDiskArrayInput` via:
//
//	TaskTargetServerDiskArray{ TaskTargetServerDiskArgs{...} }
type TaskTargetServerDiskArrayInput interface {
	pulumi.Input

	ToTaskTargetServerDiskArrayOutput() TaskTargetServerDiskArrayOutput
	ToTaskTargetServerDiskArrayOutputWithContext(context.Context) TaskTargetServerDiskArrayOutput
}

type TaskTargetServerDiskArray []TaskTargetServerDiskInput

func (TaskTargetServerDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTargetServerDisk)(nil)).Elem()
}

func (i TaskTargetServerDiskArray) ToTaskTargetServerDiskArrayOutput() TaskTargetServerDiskArrayOutput {
	return i.ToTaskTargetServerDiskArrayOutputWithContext(context.Background())
}

func (i TaskTargetServerDiskArray) ToTaskTargetServerDiskArrayOutputWithContext(ctx context.Context) TaskTargetServerDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTargetServerDiskArrayOutput)
}

type TaskTargetServerDiskOutput struct{ *pulumi.OutputState }

func (TaskTargetServerDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTargetServerDisk)(nil)).Elem()
}

func (o TaskTargetServerDiskOutput) ToTaskTargetServerDiskOutput() TaskTargetServerDiskOutput {
	return o
}

func (o TaskTargetServerDiskOutput) ToTaskTargetServerDiskOutputWithContext(ctx context.Context) TaskTargetServerDiskOutput {
	return o
}

// Specifies the partition type. The value can be **NORMAL** and **OS**.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) string { return v.DeviceType }).(pulumi.StringOutput)
}

// Specifies the disk index, e.g. "0".
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) DiskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) *string { return v.DiskId }).(pulumi.StringPtrOutput)
}

// Specifies the volume name. In Windows, it indicates the drive letter,
// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies an array of physical volume informations.
// The object is documented below. Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) PhysicalVolumes() TaskTargetServerDiskPhysicalVolumeArrayOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) []TaskTargetServerDiskPhysicalVolume { return v.PhysicalVolumes }).(TaskTargetServerDiskPhysicalVolumeArrayOutput)
}

// Specifies the volume size in MB. Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the used space in MB.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskOutput) UsedSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskTargetServerDisk) *int { return v.UsedSize }).(pulumi.IntPtrOutput)
}

type TaskTargetServerDiskArrayOutput struct{ *pulumi.OutputState }

func (TaskTargetServerDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTargetServerDisk)(nil)).Elem()
}

func (o TaskTargetServerDiskArrayOutput) ToTaskTargetServerDiskArrayOutput() TaskTargetServerDiskArrayOutput {
	return o
}

func (o TaskTargetServerDiskArrayOutput) ToTaskTargetServerDiskArrayOutputWithContext(ctx context.Context) TaskTargetServerDiskArrayOutput {
	return o
}

func (o TaskTargetServerDiskArrayOutput) Index(i pulumi.IntInput) TaskTargetServerDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskTargetServerDisk {
		return vs[0].([]TaskTargetServerDisk)[vs[1].(int)]
	}).(TaskTargetServerDiskOutput)
}

type TaskTargetServerDiskPhysicalVolume struct {
	// Specifies the partition type. The value can be **NORMAL** and **OS**.
	// Changing this parameter will create a new resource.
	DeviceType string `pulumi:"deviceType"`
	// Specifies the file system type, e.g. "ext4".
	// Changing this parameter will create a new resource.
	FileSystem string `pulumi:"fileSystem"`
	// Specifies the serial number of the volume.
	// Changing this parameter will create a new resource.
	Index int `pulumi:"index"`
	// Specifies the mount point, e.g. "/".
	// Changing this parameter will create a new resource.
	MountPoint string `pulumi:"mountPoint"`
	// Specifies the volume name. In Windows, it indicates the drive letter,
	// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
	// Changing this parameter will create a new resource.
	Name string `pulumi:"name"`
	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	Size int `pulumi:"size"`
	// Specifies the used space in MB.
	// Changing this parameter will create a new resource.
	UsedSize *int `pulumi:"usedSize"`
	// Specifies the GUID of the volume.
	// Changing this parameter will create a new resource.
	Uuid *string `pulumi:"uuid"`
}

// TaskTargetServerDiskPhysicalVolumeInput is an input type that accepts TaskTargetServerDiskPhysicalVolumeArgs and TaskTargetServerDiskPhysicalVolumeOutput values.
// You can construct a concrete instance of `TaskTargetServerDiskPhysicalVolumeInput` via:
//
//	TaskTargetServerDiskPhysicalVolumeArgs{...}
type TaskTargetServerDiskPhysicalVolumeInput interface {
	pulumi.Input

	ToTaskTargetServerDiskPhysicalVolumeOutput() TaskTargetServerDiskPhysicalVolumeOutput
	ToTaskTargetServerDiskPhysicalVolumeOutputWithContext(context.Context) TaskTargetServerDiskPhysicalVolumeOutput
}

type TaskTargetServerDiskPhysicalVolumeArgs struct {
	// Specifies the partition type. The value can be **NORMAL** and **OS**.
	// Changing this parameter will create a new resource.
	DeviceType pulumi.StringInput `pulumi:"deviceType"`
	// Specifies the file system type, e.g. "ext4".
	// Changing this parameter will create a new resource.
	FileSystem pulumi.StringInput `pulumi:"fileSystem"`
	// Specifies the serial number of the volume.
	// Changing this parameter will create a new resource.
	Index pulumi.IntInput `pulumi:"index"`
	// Specifies the mount point, e.g. "/".
	// Changing this parameter will create a new resource.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// Specifies the volume name. In Windows, it indicates the drive letter,
	// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
	// Changing this parameter will create a new resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the used space in MB.
	// Changing this parameter will create a new resource.
	UsedSize pulumi.IntPtrInput `pulumi:"usedSize"`
	// Specifies the GUID of the volume.
	// Changing this parameter will create a new resource.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
}

func (TaskTargetServerDiskPhysicalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTargetServerDiskPhysicalVolume)(nil)).Elem()
}

func (i TaskTargetServerDiskPhysicalVolumeArgs) ToTaskTargetServerDiskPhysicalVolumeOutput() TaskTargetServerDiskPhysicalVolumeOutput {
	return i.ToTaskTargetServerDiskPhysicalVolumeOutputWithContext(context.Background())
}

func (i TaskTargetServerDiskPhysicalVolumeArgs) ToTaskTargetServerDiskPhysicalVolumeOutputWithContext(ctx context.Context) TaskTargetServerDiskPhysicalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTargetServerDiskPhysicalVolumeOutput)
}

// TaskTargetServerDiskPhysicalVolumeArrayInput is an input type that accepts TaskTargetServerDiskPhysicalVolumeArray and TaskTargetServerDiskPhysicalVolumeArrayOutput values.
// You can construct a concrete instance of `TaskTargetServerDiskPhysicalVolumeArrayInput` via:
//
//	TaskTargetServerDiskPhysicalVolumeArray{ TaskTargetServerDiskPhysicalVolumeArgs{...} }
type TaskTargetServerDiskPhysicalVolumeArrayInput interface {
	pulumi.Input

	ToTaskTargetServerDiskPhysicalVolumeArrayOutput() TaskTargetServerDiskPhysicalVolumeArrayOutput
	ToTaskTargetServerDiskPhysicalVolumeArrayOutputWithContext(context.Context) TaskTargetServerDiskPhysicalVolumeArrayOutput
}

type TaskTargetServerDiskPhysicalVolumeArray []TaskTargetServerDiskPhysicalVolumeInput

func (TaskTargetServerDiskPhysicalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTargetServerDiskPhysicalVolume)(nil)).Elem()
}

func (i TaskTargetServerDiskPhysicalVolumeArray) ToTaskTargetServerDiskPhysicalVolumeArrayOutput() TaskTargetServerDiskPhysicalVolumeArrayOutput {
	return i.ToTaskTargetServerDiskPhysicalVolumeArrayOutputWithContext(context.Background())
}

func (i TaskTargetServerDiskPhysicalVolumeArray) ToTaskTargetServerDiskPhysicalVolumeArrayOutputWithContext(ctx context.Context) TaskTargetServerDiskPhysicalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTargetServerDiskPhysicalVolumeArrayOutput)
}

type TaskTargetServerDiskPhysicalVolumeOutput struct{ *pulumi.OutputState }

func (TaskTargetServerDiskPhysicalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTargetServerDiskPhysicalVolume)(nil)).Elem()
}

func (o TaskTargetServerDiskPhysicalVolumeOutput) ToTaskTargetServerDiskPhysicalVolumeOutput() TaskTargetServerDiskPhysicalVolumeOutput {
	return o
}

func (o TaskTargetServerDiskPhysicalVolumeOutput) ToTaskTargetServerDiskPhysicalVolumeOutputWithContext(ctx context.Context) TaskTargetServerDiskPhysicalVolumeOutput {
	return o
}

// Specifies the partition type. The value can be **NORMAL** and **OS**.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) string { return v.DeviceType }).(pulumi.StringOutput)
}

// Specifies the file system type, e.g. "ext4".
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) FileSystem() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) string { return v.FileSystem }).(pulumi.StringOutput)
}

// Specifies the serial number of the volume.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) int { return v.Index }).(pulumi.IntOutput)
}

// Specifies the mount point, e.g. "/".
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// Specifies the volume name. In Windows, it indicates the drive letter,
// and in Linux, it indicates the device ID, e.g. "/dev/sda1".
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the volume size in MB. Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the used space in MB.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) UsedSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) *int { return v.UsedSize }).(pulumi.IntPtrOutput)
}

// Specifies the GUID of the volume.
// Changing this parameter will create a new resource.
func (o TaskTargetServerDiskPhysicalVolumeOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskTargetServerDiskPhysicalVolume) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type TaskTargetServerDiskPhysicalVolumeArrayOutput struct{ *pulumi.OutputState }

func (TaskTargetServerDiskPhysicalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTargetServerDiskPhysicalVolume)(nil)).Elem()
}

func (o TaskTargetServerDiskPhysicalVolumeArrayOutput) ToTaskTargetServerDiskPhysicalVolumeArrayOutput() TaskTargetServerDiskPhysicalVolumeArrayOutput {
	return o
}

func (o TaskTargetServerDiskPhysicalVolumeArrayOutput) ToTaskTargetServerDiskPhysicalVolumeArrayOutputWithContext(ctx context.Context) TaskTargetServerDiskPhysicalVolumeArrayOutput {
	return o
}

func (o TaskTargetServerDiskPhysicalVolumeArrayOutput) Index(i pulumi.IntInput) TaskTargetServerDiskPhysicalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskTargetServerDiskPhysicalVolume {
		return vs[0].([]TaskTargetServerDiskPhysicalVolume)[vs[1].(int)]
	}).(TaskTargetServerDiskPhysicalVolumeOutput)
}

type GetSourceServersServer struct {
	// The version of Agent installed on the source server.
	AgentVersion string `pulumi:"agentVersion"`
	// Whether the source server is properly connected to SMS.
	Connected bool `pulumi:"connected"`
	// The disk information of the source server. Structure is documented below.
	Disks []GetSourceServersServerDisk `pulumi:"disks"`
	// Specifies the ID of the source server.
	Id string `pulumi:"id"`
	// Specifies the IP address of the source server.
	Ip string `pulumi:"ip"`
	// The memory size in MB.
	Memory int `pulumi:"memory"`
	// Specifies the name of the source server.
	Name string `pulumi:"name"`
	// The OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	OsType string `pulumi:"osType"`
	// The OS version of the source server, for example, UBUNTU_20_4_64BIT.
	OsVersion string `pulumi:"osVersion"`
	// The UTC time when the source server is registered.
	RegisteredTime string `pulumi:"registeredTime"`
	State          string `pulumi:"state"`
	// The vcpus count of the source server.
	Vcpus int `pulumi:"vcpus"`
}

// GetSourceServersServerInput is an input type that accepts GetSourceServersServerArgs and GetSourceServersServerOutput values.
// You can construct a concrete instance of `GetSourceServersServerInput` via:
//
//	GetSourceServersServerArgs{...}
type GetSourceServersServerInput interface {
	pulumi.Input

	ToGetSourceServersServerOutput() GetSourceServersServerOutput
	ToGetSourceServersServerOutputWithContext(context.Context) GetSourceServersServerOutput
}

type GetSourceServersServerArgs struct {
	// The version of Agent installed on the source server.
	AgentVersion pulumi.StringInput `pulumi:"agentVersion"`
	// Whether the source server is properly connected to SMS.
	Connected pulumi.BoolInput `pulumi:"connected"`
	// The disk information of the source server. Structure is documented below.
	Disks GetSourceServersServerDiskArrayInput `pulumi:"disks"`
	// Specifies the ID of the source server.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the IP address of the source server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The memory size in MB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Specifies the name of the source server.
	Name pulumi.StringInput `pulumi:"name"`
	// The OS type of the source server. The value can be **WINDOWS** and **LINUX**.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The OS version of the source server, for example, UBUNTU_20_4_64BIT.
	OsVersion pulumi.StringInput `pulumi:"osVersion"`
	// The UTC time when the source server is registered.
	RegisteredTime pulumi.StringInput `pulumi:"registeredTime"`
	State          pulumi.StringInput `pulumi:"state"`
	// The vcpus count of the source server.
	Vcpus pulumi.IntInput `pulumi:"vcpus"`
}

func (GetSourceServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourceServersServer)(nil)).Elem()
}

func (i GetSourceServersServerArgs) ToGetSourceServersServerOutput() GetSourceServersServerOutput {
	return i.ToGetSourceServersServerOutputWithContext(context.Background())
}

func (i GetSourceServersServerArgs) ToGetSourceServersServerOutputWithContext(ctx context.Context) GetSourceServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourceServersServerOutput)
}

// GetSourceServersServerArrayInput is an input type that accepts GetSourceServersServerArray and GetSourceServersServerArrayOutput values.
// You can construct a concrete instance of `GetSourceServersServerArrayInput` via:
//
//	GetSourceServersServerArray{ GetSourceServersServerArgs{...} }
type GetSourceServersServerArrayInput interface {
	pulumi.Input

	ToGetSourceServersServerArrayOutput() GetSourceServersServerArrayOutput
	ToGetSourceServersServerArrayOutputWithContext(context.Context) GetSourceServersServerArrayOutput
}

type GetSourceServersServerArray []GetSourceServersServerInput

func (GetSourceServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourceServersServer)(nil)).Elem()
}

func (i GetSourceServersServerArray) ToGetSourceServersServerArrayOutput() GetSourceServersServerArrayOutput {
	return i.ToGetSourceServersServerArrayOutputWithContext(context.Background())
}

func (i GetSourceServersServerArray) ToGetSourceServersServerArrayOutputWithContext(ctx context.Context) GetSourceServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourceServersServerArrayOutput)
}

type GetSourceServersServerOutput struct{ *pulumi.OutputState }

func (GetSourceServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourceServersServer)(nil)).Elem()
}

func (o GetSourceServersServerOutput) ToGetSourceServersServerOutput() GetSourceServersServerOutput {
	return o
}

func (o GetSourceServersServerOutput) ToGetSourceServersServerOutputWithContext(ctx context.Context) GetSourceServersServerOutput {
	return o
}

// The version of Agent installed on the source server.
func (o GetSourceServersServerOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.AgentVersion }).(pulumi.StringOutput)
}

// Whether the source server is properly connected to SMS.
func (o GetSourceServersServerOutput) Connected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSourceServersServer) bool { return v.Connected }).(pulumi.BoolOutput)
}

// The disk information of the source server. Structure is documented below.
func (o GetSourceServersServerOutput) Disks() GetSourceServersServerDiskArrayOutput {
	return o.ApplyT(func(v GetSourceServersServer) []GetSourceServersServerDisk { return v.Disks }).(GetSourceServersServerDiskArrayOutput)
}

// Specifies the ID of the source server.
func (o GetSourceServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the IP address of the source server.
func (o GetSourceServersServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.Ip }).(pulumi.StringOutput)
}

// The memory size in MB.
func (o GetSourceServersServerOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetSourceServersServer) int { return v.Memory }).(pulumi.IntOutput)
}

// Specifies the name of the source server.
func (o GetSourceServersServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.Name }).(pulumi.StringOutput)
}

// The OS type of the source server. The value can be **WINDOWS** and **LINUX**.
func (o GetSourceServersServerOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.OsType }).(pulumi.StringOutput)
}

// The OS version of the source server, for example, UBUNTU_20_4_64BIT.
func (o GetSourceServersServerOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.OsVersion }).(pulumi.StringOutput)
}

// The UTC time when the source server is registered.
func (o GetSourceServersServerOutput) RegisteredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.RegisteredTime }).(pulumi.StringOutput)
}

func (o GetSourceServersServerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServer) string { return v.State }).(pulumi.StringOutput)
}

// The vcpus count of the source server.
func (o GetSourceServersServerOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetSourceServersServer) int { return v.Vcpus }).(pulumi.IntOutput)
}

type GetSourceServersServerArrayOutput struct{ *pulumi.OutputState }

func (GetSourceServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourceServersServer)(nil)).Elem()
}

func (o GetSourceServersServerArrayOutput) ToGetSourceServersServerArrayOutput() GetSourceServersServerArrayOutput {
	return o
}

func (o GetSourceServersServerArrayOutput) ToGetSourceServersServerArrayOutputWithContext(ctx context.Context) GetSourceServersServerArrayOutput {
	return o
}

func (o GetSourceServersServerArrayOutput) Index(i pulumi.IntInput) GetSourceServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSourceServersServer {
		return vs[0].([]GetSourceServersServer)[vs[1].(int)]
	}).(GetSourceServersServerOutput)
}

type GetSourceServersServerDisk struct {
	// The disk type. The value can be **BOOT**, **OS** and **NORMAL**.
	DeviceType string `pulumi:"deviceType"`
	// Specifies the name of the source server.
	Name string `pulumi:"name"`
	// The disk size in MB.
	Size int `pulumi:"size"`
}

// GetSourceServersServerDiskInput is an input type that accepts GetSourceServersServerDiskArgs and GetSourceServersServerDiskOutput values.
// You can construct a concrete instance of `GetSourceServersServerDiskInput` via:
//
//	GetSourceServersServerDiskArgs{...}
type GetSourceServersServerDiskInput interface {
	pulumi.Input

	ToGetSourceServersServerDiskOutput() GetSourceServersServerDiskOutput
	ToGetSourceServersServerDiskOutputWithContext(context.Context) GetSourceServersServerDiskOutput
}

type GetSourceServersServerDiskArgs struct {
	// The disk type. The value can be **BOOT**, **OS** and **NORMAL**.
	DeviceType pulumi.StringInput `pulumi:"deviceType"`
	// Specifies the name of the source server.
	Name pulumi.StringInput `pulumi:"name"`
	// The disk size in MB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (GetSourceServersServerDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourceServersServerDisk)(nil)).Elem()
}

func (i GetSourceServersServerDiskArgs) ToGetSourceServersServerDiskOutput() GetSourceServersServerDiskOutput {
	return i.ToGetSourceServersServerDiskOutputWithContext(context.Background())
}

func (i GetSourceServersServerDiskArgs) ToGetSourceServersServerDiskOutputWithContext(ctx context.Context) GetSourceServersServerDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourceServersServerDiskOutput)
}

// GetSourceServersServerDiskArrayInput is an input type that accepts GetSourceServersServerDiskArray and GetSourceServersServerDiskArrayOutput values.
// You can construct a concrete instance of `GetSourceServersServerDiskArrayInput` via:
//
//	GetSourceServersServerDiskArray{ GetSourceServersServerDiskArgs{...} }
type GetSourceServersServerDiskArrayInput interface {
	pulumi.Input

	ToGetSourceServersServerDiskArrayOutput() GetSourceServersServerDiskArrayOutput
	ToGetSourceServersServerDiskArrayOutputWithContext(context.Context) GetSourceServersServerDiskArrayOutput
}

type GetSourceServersServerDiskArray []GetSourceServersServerDiskInput

func (GetSourceServersServerDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourceServersServerDisk)(nil)).Elem()
}

func (i GetSourceServersServerDiskArray) ToGetSourceServersServerDiskArrayOutput() GetSourceServersServerDiskArrayOutput {
	return i.ToGetSourceServersServerDiskArrayOutputWithContext(context.Background())
}

func (i GetSourceServersServerDiskArray) ToGetSourceServersServerDiskArrayOutputWithContext(ctx context.Context) GetSourceServersServerDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourceServersServerDiskArrayOutput)
}

type GetSourceServersServerDiskOutput struct{ *pulumi.OutputState }

func (GetSourceServersServerDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourceServersServerDisk)(nil)).Elem()
}

func (o GetSourceServersServerDiskOutput) ToGetSourceServersServerDiskOutput() GetSourceServersServerDiskOutput {
	return o
}

func (o GetSourceServersServerDiskOutput) ToGetSourceServersServerDiskOutputWithContext(ctx context.Context) GetSourceServersServerDiskOutput {
	return o
}

// The disk type. The value can be **BOOT**, **OS** and **NORMAL**.
func (o GetSourceServersServerDiskOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServerDisk) string { return v.DeviceType }).(pulumi.StringOutput)
}

// Specifies the name of the source server.
func (o GetSourceServersServerDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourceServersServerDisk) string { return v.Name }).(pulumi.StringOutput)
}

// The disk size in MB.
func (o GetSourceServersServerDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetSourceServersServerDisk) int { return v.Size }).(pulumi.IntOutput)
}

type GetSourceServersServerDiskArrayOutput struct{ *pulumi.OutputState }

func (GetSourceServersServerDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourceServersServerDisk)(nil)).Elem()
}

func (o GetSourceServersServerDiskArrayOutput) ToGetSourceServersServerDiskArrayOutput() GetSourceServersServerDiskArrayOutput {
	return o
}

func (o GetSourceServersServerDiskArrayOutput) ToGetSourceServersServerDiskArrayOutputWithContext(ctx context.Context) GetSourceServersServerDiskArrayOutput {
	return o
}

func (o GetSourceServersServerDiskArrayOutput) Index(i pulumi.IntInput) GetSourceServersServerDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSourceServersServerDisk {
		return vs[0].([]GetSourceServersServerDisk)[vs[1].(int)]
	}).(GetSourceServersServerDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTargetServerDiskInput)(nil)).Elem(), TaskTargetServerDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTargetServerDiskArrayInput)(nil)).Elem(), TaskTargetServerDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTargetServerDiskPhysicalVolumeInput)(nil)).Elem(), TaskTargetServerDiskPhysicalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTargetServerDiskPhysicalVolumeArrayInput)(nil)).Elem(), TaskTargetServerDiskPhysicalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourceServersServerInput)(nil)).Elem(), GetSourceServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourceServersServerArrayInput)(nil)).Elem(), GetSourceServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourceServersServerDiskInput)(nil)).Elem(), GetSourceServersServerDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourceServersServerDiskArrayInput)(nil)).Elem(), GetSourceServersServerDiskArray{})
	pulumi.RegisterOutputType(TaskTargetServerDiskOutput{})
	pulumi.RegisterOutputType(TaskTargetServerDiskArrayOutput{})
	pulumi.RegisterOutputType(TaskTargetServerDiskPhysicalVolumeOutput{})
	pulumi.RegisterOutputType(TaskTargetServerDiskPhysicalVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetSourceServersServerOutput{})
	pulumi.RegisterOutputType(GetSourceServersServerArrayOutput{})
	pulumi.RegisterOutputType(GetSourceServersServerDiskOutput{})
	pulumi.RegisterOutputType(GetSourceServersServerDiskArrayOutput{})
}

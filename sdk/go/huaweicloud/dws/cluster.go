// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Cluster in the Data Warehouse Service.
//
// ## Example Usage
// ### Dws Cluster Example
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dws"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			networkId := cfg.RequireObject("networkId")
//			vpcId := cfg.RequireObject("vpcId")
//			userName := cfg.RequireObject("userName")
//			userPwd := cfg.RequireObject("userPwd")
//			dwsClusterName := cfg.RequireObject("dwsClusterName")
//			secgroup, err := Vpc.NewSecgroup(ctx, "secgroup", &Vpc.SecgroupArgs{
//				Description: pulumi.String("terraform security group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Dws.NewCluster(ctx, "cluster", &Dws.ClusterArgs{
//				NodeType:         pulumi.String("dws.m3.xlarge"),
//				NumberOfNode:     pulumi.Int(3),
//				NetworkId:        pulumi.Any(networkId),
//				VpcId:            pulumi.Any(vpcId),
//				SecurityGroupId:  secgroup.ID(),
//				AvailabilityZone: pulumi.Any(availabilityZone),
//				UserName:         pulumi.Any(userName),
//				UserPwd:          pulumi.Any(userPwd),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Cluster can be imported using the following format
//
// ```sh
//
//	$ pulumi import huaweicloud:Dws/cluster:Cluster test 47ad727e-9dcc-4833-bde0-bb298607c719
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`user_pwd`, `number_of_cn`. It is generally recommended running `terraform plan` after importing a cluster. You can then decide if changes should be applied to the cluster, or the resource definition should be updated to align with the cluster. Also you can ignore changes as below. resource "huaweicloud_dws_cluster" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	user_pwd, number_of_cn,
//
//	]
//
//	} }
type Cluster struct {
	pulumi.CustomResourceState

	// AZ in a cluster.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Cluster creation time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Created pulumi.StringOutput `pulumi:"created"`
	// View the private network connection information about the cluster. Structure is documented below.
	Endpoints ClusterEndpointArrayOutput `pulumi:"endpoints"`
	// Specifies the enterprise project id of the dws cluster,
	// Value 0 indicates the default enterprise project.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network ID, which is used for configuring cluster network.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Node type.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn pulumi.IntPtrOutput `pulumi:"numberOfCn"`
	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode pulumi.IntOutput `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntOutput `pulumi:"port"`
	// List of private network IP address.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`
	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	PublicEndpoints ClusterPublicEndpointArrayOutput `pulumi:"publicEndpoints"`
	// A nested object resource Structure is documented below.
	PublicIp ClusterPublicIpOutput `pulumi:"publicIp"`
	// The recent event number.
	RecentEvent pulumi.IntOutput `pulumi:"recentEvent"`
	// The region in which to create the cluster resource. If omitted, the
	// provider-level region will be used. Changing this creates a new cluster resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Cluster status, which can be one of the following:  CREATING AVAILABLE UNAVAILABLE CREATION FAILED.
	Status pulumi.StringOutput `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state. The value can be one of the following:  NORMAL READONLY
	// REDISTRIBUTING REDISTRIBUTION-FAILURE UNBALANCED UNBALANCED | READONLY DEGRADED DEGRADED | READONLY DEGRADED |
	// UNBALANCED UNBALANCED | REDISTRIBUTING UNBALANCED | REDISTRIBUTION-FAILURE READONLY | REDISTRIBUTION-FAILURE
	// UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED |
	// REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY
	SubStatus pulumi.StringOutput `pulumi:"subStatus"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Cluster management task. The value can be one of the following:
	// RESTORING SNAPSHOTTING GROWING REBOOTING SETTING_CONFIGURATION CONFIGURING_EXT_DATASOURCE DELETING_EXT_DATASOURCE
	// REBOOT_FAILURE RESIZE_FAILURE
	TaskStatus pulumi.StringOutput `pulumi:"taskStatus"`
	// Last modification time of a cluster. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwd pulumi.StringOutput `pulumi:"userPwd"`
	// Data warehouse version.
	Version pulumi.StringOutput `pulumi:"version"`
	// VPC ID, which is used for configuring cluster network.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.NumberOfNode == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfNode'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPwd == nil {
		return nil, errors.New("invalid value for required argument 'UserPwd'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("huaweicloud:Dws/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("huaweicloud:Dws/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// AZ in a cluster.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Cluster creation time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Created *string `pulumi:"created"`
	// View the private network connection information about the cluster. Structure is documented below.
	Endpoints []ClusterEndpoint `pulumi:"endpoints"`
	// Specifies the enterprise project id of the dws cluster,
	// Value 0 indicates the default enterprise project.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name *string `pulumi:"name"`
	// Network ID, which is used for configuring cluster network.
	NetworkId *string `pulumi:"networkId"`
	// Node type.
	NodeType *string `pulumi:"nodeType"`
	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode *int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *int `pulumi:"port"`
	// List of private network IP address.
	PrivateIps []string `pulumi:"privateIps"`
	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	PublicEndpoints []ClusterPublicEndpoint `pulumi:"publicEndpoints"`
	// A nested object resource Structure is documented below.
	PublicIp *ClusterPublicIp `pulumi:"publicIp"`
	// The recent event number.
	RecentEvent *int `pulumi:"recentEvent"`
	// The region in which to create the cluster resource. If omitted, the
	// provider-level region will be used. Changing this creates a new cluster resource.
	Region *string `pulumi:"region"`
	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Cluster status, which can be one of the following:  CREATING AVAILABLE UNAVAILABLE CREATION FAILED.
	Status *string `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state. The value can be one of the following:  NORMAL READONLY
	// REDISTRIBUTING REDISTRIBUTION-FAILURE UNBALANCED UNBALANCED | READONLY DEGRADED DEGRADED | READONLY DEGRADED |
	// UNBALANCED UNBALANCED | REDISTRIBUTING UNBALANCED | REDISTRIBUTION-FAILURE READONLY | REDISTRIBUTION-FAILURE
	// UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED |
	// REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY
	SubStatus *string `pulumi:"subStatus"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Cluster management task. The value can be one of the following:
	// RESTORING SNAPSHOTTING GROWING REBOOTING SETTING_CONFIGURATION CONFIGURING_EXT_DATASOURCE DELETING_EXT_DATASOURCE
	// REBOOT_FAILURE RESIZE_FAILURE
	TaskStatus *string `pulumi:"taskStatus"`
	// Last modification time of a cluster. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Updated *string `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName *string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwd *string `pulumi:"userPwd"`
	// Data warehouse version.
	Version *string `pulumi:"version"`
	// VPC ID, which is used for configuring cluster network.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// AZ in a cluster.
	AvailabilityZone pulumi.StringPtrInput
	// Cluster creation time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Created pulumi.StringPtrInput
	// View the private network connection information about the cluster. Structure is documented below.
	Endpoints ClusterEndpointArrayInput
	// Specifies the enterprise project id of the dws cluster,
	// Value 0 indicates the default enterprise project.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name pulumi.StringPtrInput
	// Network ID, which is used for configuring cluster network.
	NetworkId pulumi.StringPtrInput
	// Node type.
	NodeType pulumi.StringPtrInput
	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode pulumi.IntPtrInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrInput
	// List of private network IP address.
	PrivateIps pulumi.StringArrayInput
	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	PublicEndpoints ClusterPublicEndpointArrayInput
	// A nested object resource Structure is documented below.
	PublicIp ClusterPublicIpPtrInput
	// The recent event number.
	RecentEvent pulumi.IntPtrInput
	// The region in which to create the cluster resource. If omitted, the
	// provider-level region will be used. Changing this creates a new cluster resource.
	Region pulumi.StringPtrInput
	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupId pulumi.StringPtrInput
	// Cluster status, which can be one of the following:  CREATING AVAILABLE UNAVAILABLE CREATION FAILED.
	Status pulumi.StringPtrInput
	// Sub-status of clusters in the AVAILABLE state. The value can be one of the following:  NORMAL READONLY
	// REDISTRIBUTING REDISTRIBUTION-FAILURE UNBALANCED UNBALANCED | READONLY DEGRADED DEGRADED | READONLY DEGRADED |
	// UNBALANCED UNBALANCED | REDISTRIBUTING UNBALANCED | REDISTRIBUTION-FAILURE READONLY | REDISTRIBUTION-FAILURE
	// UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED |
	// REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY
	SubStatus pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Cluster management task. The value can be one of the following:
	// RESTORING SNAPSHOTTING GROWING REBOOTING SETTING_CONFIGURATION CONFIGURING_EXT_DATASOURCE DELETING_EXT_DATASOURCE
	// REBOOT_FAILURE RESIZE_FAILURE
	TaskStatus pulumi.StringPtrInput
	// Last modification time of a cluster. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Updated pulumi.StringPtrInput
	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName pulumi.StringPtrInput
	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwd pulumi.StringPtrInput
	// Data warehouse version.
	Version pulumi.StringPtrInput
	// VPC ID, which is used for configuring cluster network.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// AZ in a cluster.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the enterprise project id of the dws cluster,
	// Value 0 indicates the default enterprise project.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name *string `pulumi:"name"`
	// Network ID, which is used for configuring cluster network.
	NetworkId string `pulumi:"networkId"`
	// Node type.
	NodeType string `pulumi:"nodeType"`
	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *int `pulumi:"port"`
	// A nested object resource Structure is documented below.
	PublicIp *ClusterPublicIp `pulumi:"publicIp"`
	// The region in which to create the cluster resource. If omitted, the
	// provider-level region will be used. Changing this creates a new cluster resource.
	Region *string `pulumi:"region"`
	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwd string `pulumi:"userPwd"`
	// VPC ID, which is used for configuring cluster network.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// AZ in a cluster.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the enterprise project id of the dws cluster,
	// Value 0 indicates the default enterprise project.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name pulumi.StringPtrInput
	// Network ID, which is used for configuring cluster network.
	NetworkId pulumi.StringInput
	// Node type.
	NodeType pulumi.StringInput
	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode pulumi.IntInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrInput
	// A nested object resource Structure is documented below.
	PublicIp ClusterPublicIpPtrInput
	// The region in which to create the cluster resource. If omitted, the
	// provider-level region will be used. Changing this creates a new cluster resource.
	Region pulumi.StringPtrInput
	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupId pulumi.StringInput
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName pulumi.StringInput
	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwd pulumi.StringInput
	// VPC ID, which is used for configuring cluster network.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// AZ in a cluster.
func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Cluster creation time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
func (o ClusterOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// View the private network connection information about the cluster. Structure is documented below.
func (o ClusterOutput) Endpoints() ClusterEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterEndpointArrayOutput { return v.Endpoints }).(ClusterEndpointArrayOutput)
}

// Specifies the enterprise project id of the dws cluster,
// Value 0 indicates the default enterprise project.
// Changing this parameter will create a new resource.
func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Cluster name, which must be unique and contains 4 to 64 characters, which
// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network ID, which is used for configuring cluster network.
func (o ClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Node type.
func (o ClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Specifies the number of CN. If you use a large-scale cluster, deploy
// multiple CNs.
func (o ClusterOutput) NumberOfCn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.NumberOfCn }).(pulumi.IntPtrOutput)
}

// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
// add at least 3 nodes.
func (o ClusterOutput) NumberOfNode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NumberOfNode }).(pulumi.IntOutput)
}

// Service port of a cluster (8000 to 10000). The default value is 8000.
func (o ClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// List of private network IP address.
func (o ClusterOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// Public network connection information about the cluster. If the value is not specified, the
// public network connection information is not used by default Structure is documented below.
func (o ClusterOutput) PublicEndpoints() ClusterPublicEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicEndpointArrayOutput { return v.PublicEndpoints }).(ClusterPublicEndpointArrayOutput)
}

// A nested object resource Structure is documented below.
func (o ClusterOutput) PublicIp() ClusterPublicIpOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicIpOutput { return v.PublicIp }).(ClusterPublicIpOutput)
}

// The recent event number.
func (o ClusterOutput) RecentEvent() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RecentEvent }).(pulumi.IntOutput)
}

// The region in which to create the cluster resource. If omitted, the
// provider-level region will be used. Changing this creates a new cluster resource.
func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of a security group. The ID is used for configuring cluster
// network.
func (o ClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Cluster status, which can be one of the following:  CREATING AVAILABLE UNAVAILABLE CREATION FAILED.
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Sub-status of clusters in the AVAILABLE state. The value can be one of the following:  NORMAL READONLY
// REDISTRIBUTING REDISTRIBUTION-FAILURE UNBALANCED UNBALANCED | READONLY DEGRADED DEGRADED | READONLY DEGRADED |
// UNBALANCED UNBALANCED | REDISTRIBUTING UNBALANCED | REDISTRIBUTION-FAILURE READONLY | REDISTRIBUTION-FAILURE
// UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED |
// REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY
func (o ClusterOutput) SubStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubStatus }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the cluster.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Cluster management task. The value can be one of the following:
// RESTORING SNAPSHOTTING GROWING REBOOTING SETTING_CONFIGURATION CONFIGURING_EXT_DATASOURCE DELETING_EXT_DATASOURCE
// REBOOT_FAILURE RESIZE_FAILURE
func (o ClusterOutput) TaskStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TaskStatus }).(pulumi.StringOutput)
}

// Last modification time of a cluster. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
func (o ClusterOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Administrator username for logging in to a data warehouse cluster The
// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
func (o ClusterOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Administrator password for logging in to a data warehouse cluster A password
// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
// written in reverse order. Contains three types of the following:
// Lowercase letters Uppercase letters Digits Special characters
// ~!@#%^&*()-_=+|[{}];:,<.>/?
func (o ClusterOutput) UserPwd() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UserPwd }).(pulumi.StringOutput)
}

// Data warehouse version.
func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// VPC ID, which is used for configuring cluster network.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpcep

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage the VPC endpoint connections.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpcep"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpcep"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			serviceVpcId := cfg.RequireObject("serviceVpcId")
//			vmPort := cfg.RequireObject("vmPort")
//			vpcId := cfg.RequireObject("vpcId")
//			networkId := cfg.RequireObject("networkId")
//			demoService, err := Vpcep.NewService(ctx, "demoService", &Vpcep.ServiceArgs{
//				ServerType: pulumi.String("VM"),
//				VpcId:      pulumi.Any(serviceVpcId),
//				PortId:     pulumi.Any(vmPort),
//				Approval:   pulumi.Bool(true),
//				PortMappings: vpcep.ServicePortMappingArray{
//					&vpcep.ServicePortMappingArgs{
//						ServicePort:  pulumi.Int(8080),
//						TerminalPort: pulumi.Int(80),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			demoEndpoint, err := Vpcep.NewEndpoint(ctx, "demoEndpoint", &Vpcep.EndpointArgs{
//				ServiceId: demoService.ID(),
//				VpcId:     pulumi.Any(vpcId),
//				NetworkId: pulumi.Any(networkId),
//				EnableDns: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Vpcep.NewApproval(ctx, "approval", &Vpcep.ApprovalArgs{
//				ServiceId: demoService.ID(),
//				Endpoints: pulumi.StringArray{
//					demoEndpoint.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPC endpoint approval can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpcep/approval:Approval test <id>
//
// ```
type Approval struct {
	pulumi.CustomResourceState

	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections ApprovalConnectionArrayOutput `pulumi:"connections"`
	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	Endpoints pulumi.StringArrayOutput `pulumi:"endpoints"`
	// The region in which to obtain the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewApproval registers a new resource with the given unique name, arguments, and options.
func NewApproval(ctx *pulumi.Context,
	name string, args *ApprovalArgs, opts ...pulumi.ResourceOption) (*Approval, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoints == nil {
		return nil, errors.New("invalid value for required argument 'Endpoints'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Approval
	err := ctx.RegisterResource("huaweicloud:Vpcep/approval:Approval", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApproval gets an existing Approval resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApproval(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApprovalState, opts ...pulumi.ResourceOption) (*Approval, error) {
	var resource Approval
	err := ctx.ReadResource("huaweicloud:Vpcep/approval:Approval", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Approval resources.
type approvalState struct {
	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections []ApprovalConnection `pulumi:"connections"`
	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	Endpoints []string `pulumi:"endpoints"`
	// The region in which to obtain the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceId *string `pulumi:"serviceId"`
}

type ApprovalState struct {
	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections ApprovalConnectionArrayInput
	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	Endpoints pulumi.StringArrayInput
	// The region in which to obtain the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceId pulumi.StringPtrInput
}

func (ApprovalState) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalState)(nil)).Elem()
}

type approvalArgs struct {
	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	Endpoints []string `pulumi:"endpoints"`
	// The region in which to obtain the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Approval resource.
type ApprovalArgs struct {
	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	Endpoints pulumi.StringArrayInput
	// The region in which to obtain the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceId pulumi.StringInput
}

func (ApprovalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalArgs)(nil)).Elem()
}

type ApprovalInput interface {
	pulumi.Input

	ToApprovalOutput() ApprovalOutput
	ToApprovalOutputWithContext(ctx context.Context) ApprovalOutput
}

func (*Approval) ElementType() reflect.Type {
	return reflect.TypeOf((**Approval)(nil)).Elem()
}

func (i *Approval) ToApprovalOutput() ApprovalOutput {
	return i.ToApprovalOutputWithContext(context.Background())
}

func (i *Approval) ToApprovalOutputWithContext(ctx context.Context) ApprovalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalOutput)
}

// ApprovalArrayInput is an input type that accepts ApprovalArray and ApprovalArrayOutput values.
// You can construct a concrete instance of `ApprovalArrayInput` via:
//
//	ApprovalArray{ ApprovalArgs{...} }
type ApprovalArrayInput interface {
	pulumi.Input

	ToApprovalArrayOutput() ApprovalArrayOutput
	ToApprovalArrayOutputWithContext(context.Context) ApprovalArrayOutput
}

type ApprovalArray []ApprovalInput

func (ApprovalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Approval)(nil)).Elem()
}

func (i ApprovalArray) ToApprovalArrayOutput() ApprovalArrayOutput {
	return i.ToApprovalArrayOutputWithContext(context.Background())
}

func (i ApprovalArray) ToApprovalArrayOutputWithContext(ctx context.Context) ApprovalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalArrayOutput)
}

// ApprovalMapInput is an input type that accepts ApprovalMap and ApprovalMapOutput values.
// You can construct a concrete instance of `ApprovalMapInput` via:
//
//	ApprovalMap{ "key": ApprovalArgs{...} }
type ApprovalMapInput interface {
	pulumi.Input

	ToApprovalMapOutput() ApprovalMapOutput
	ToApprovalMapOutputWithContext(context.Context) ApprovalMapOutput
}

type ApprovalMap map[string]ApprovalInput

func (ApprovalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Approval)(nil)).Elem()
}

func (i ApprovalMap) ToApprovalMapOutput() ApprovalMapOutput {
	return i.ToApprovalMapOutputWithContext(context.Background())
}

func (i ApprovalMap) ToApprovalMapOutputWithContext(ctx context.Context) ApprovalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalMapOutput)
}

type ApprovalOutput struct{ *pulumi.OutputState }

func (ApprovalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Approval)(nil)).Elem()
}

func (o ApprovalOutput) ToApprovalOutput() ApprovalOutput {
	return o
}

func (o ApprovalOutput) ToApprovalOutputWithContext(ctx context.Context) ApprovalOutput {
	return o
}

// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
func (o ApprovalOutput) Connections() ApprovalConnectionArrayOutput {
	return o.ApplyT(func(v *Approval) ApprovalConnectionArrayOutput { return v.Connections }).(ApprovalConnectionArrayOutput)
}

// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
// service. The VPC endpoints will be rejected when the resource was destroyed.
func (o ApprovalOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Approval) pulumi.StringArrayOutput { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// The region in which to obtain the VPC endpoint service. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o ApprovalOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Approval) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the VPC endpoint service. Changing this creates a new
// resource.
func (o ApprovalOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Approval) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type ApprovalArrayOutput struct{ *pulumi.OutputState }

func (ApprovalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Approval)(nil)).Elem()
}

func (o ApprovalArrayOutput) ToApprovalArrayOutput() ApprovalArrayOutput {
	return o
}

func (o ApprovalArrayOutput) ToApprovalArrayOutputWithContext(ctx context.Context) ApprovalArrayOutput {
	return o
}

func (o ApprovalArrayOutput) Index(i pulumi.IntInput) ApprovalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Approval {
		return vs[0].([]*Approval)[vs[1].(int)]
	}).(ApprovalOutput)
}

type ApprovalMapOutput struct{ *pulumi.OutputState }

func (ApprovalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Approval)(nil)).Elem()
}

func (o ApprovalMapOutput) ToApprovalMapOutput() ApprovalMapOutput {
	return o
}

func (o ApprovalMapOutput) ToApprovalMapOutputWithContext(ctx context.Context) ApprovalMapOutput {
	return o
}

func (o ApprovalMapOutput) MapIndex(k pulumi.StringInput) ApprovalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Approval {
		return vs[0].(map[string]*Approval)[vs[1].(string)]
	}).(ApprovalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalInput)(nil)).Elem(), &Approval{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalArrayInput)(nil)).Elem(), ApprovalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalMapInput)(nil)).Elem(), ApprovalMap{})
	pulumi.RegisterOutputType(ApprovalOutput{})
	pulumi.RegisterOutputType(ApprovalArrayOutput{})
	pulumi.RegisterOutputType(ApprovalMapOutput{})
}

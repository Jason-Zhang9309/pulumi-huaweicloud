// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **WARNING:** It has been deprecated.
//
// Provides a Shared File System (SFS) resource within HuaweiCloud.
//
// ## Example Usage
// ### Basic example
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Sfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			shareName := cfg.RequireObject("shareName")
//			shareDescription := cfg.RequireObject("shareDescription")
//			vpcId := cfg.RequireObject("vpcId")
//			_, err := Sfs.NewFileSystem(ctx, "share-file", &Sfs.FileSystemArgs{
//				Size:        pulumi.Int(100),
//				ShareProto:  pulumi.String("NFS"),
//				AccessLevel: pulumi.String("rw"),
//				AccessTo:    pulumi.Any(vpcId),
//				Description: pulumi.Any(shareDescription),
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### SFS with data encryption
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Sfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			shareName := cfg.RequireObject("shareName")
//			shareDescription := cfg.RequireObject("shareDescription")
//			vpcId := cfg.RequireObject("vpcId")
//			_, err := Sfs.NewFileSystem(ctx, "share-file", &Sfs.FileSystemArgs{
//				Size:        pulumi.Int(100),
//				ShareProto:  pulumi.String("NFS"),
//				AccessLevel: pulumi.String("rw"),
//				AccessTo:    pulumi.Any(vpcId),
//				Description: pulumi.Any(shareDescription),
//				Metadata: pulumi.StringMap{
//					"#sfs_crypt_key_id":    pulumi.Any(huaweicloud_kms_key.Mykey.Id),
//					"#sfs_crypt_domain_id": pulumi.Any(huaweicloud_kms_key.Mykey.Domain_id),
//					"#sfs_crypt_alias":     pulumi.Any(huaweicloud_kms_key.Mykey.Key_alias),
//				},
//				Tags: pulumi.StringMap{
//					"function": pulumi.String("encryption"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### SFS with Auto Capacity Expansion
//
// > This feature is only supported in specific regions.
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Sfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			shareName := cfg.RequireObject("shareName")
//			_, err := Sfs.NewFileSystem(ctx, "share-file", &Sfs.FileSystemArgs{
//				Size:        pulumi.Int(100),
//				ShareProto:  pulumi.String("NFS"),
//				Description: pulumi.String("auto capacity expansion"),
//				Metadata: pulumi.StringMap{
//					"#sfs_quota_type": pulumi.String("soft"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SFS can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Sfs/fileSystem:FileSystem huaweicloud_sfs_file_system 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
//
// ```
//
//	[huaweicloud_sfs_access_rule](https://registry.terraform.io/providers/huaweicloud/huaweicloud/latest/docs/resources/sfs_access_rule).
type FileSystem struct {
	pulumi.CustomResourceState

	// Specifies the access level of the shared file system. Possible values are *ro* (
	// read-only)
	// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
	AccessLevel pulumi.StringOutput `pulumi:"accessLevel"`
	// The status of the share access rule.
	AccessRuleStatus pulumi.StringOutput `pulumi:"accessRuleStatus"`
	// All access rules of the shared file system. The object includes the following:
	AccessRules FileSystemAccessRuleArrayOutput `pulumi:"accessRules"`
	// Specifies the value that defines the access rule. The value contains 1 to 255
	// characters. Changing this will create a new access rule. The value varies according to the scenario:
	// + Set the VPC ID in VPC authorization scenarios.
	// + Set this parameter in IP address authorization scenario:
	// - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
	// - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
	AccessTo pulumi.StringPtrOutput `pulumi:"accessTo"`
	// Specifies the type of the share access rule. The default value is *cert*. Changing
	// this will create a new access rule.
	AccessType pulumi.StringOutput `pulumi:"accessType"`
	// Specifies the availability zone name. Changing this parameter will
	// create a new resource.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies the description of the shared file system, which contains 0 to 255
	// characters and can contain only letters, digits, hyphens (-), and underscores (_).
	Description pulumi.StringOutput `pulumi:"description"`
	// The enterprise project id of the shared file system. Changing
	// this creates a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The address for accessing the shared file system.
	ExportLocation pulumi.StringOutput `pulumi:"exportLocation"`
	// Specifies whether a file system can be publicly seen.
	// The default value is false.
	IsPublic pulumi.BoolPtrOutput `pulumi:"isPublic"`
	// Specifies the metadata information used to create the shared file system. The
	// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
	// exist at the same time to enable the data encryption function. Changing this will create a new resource.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Specifies the name of the shared file system, which contains 0 to 255 characters and
	// can contain only letters, digits, hyphens (-), and underscores (_).
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the sfs resource. If omitted, the provider-level
	// region will be used. Changing this creates a new sfs resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The UUID of the share access rule.
	ShareAccessId pulumi.StringOutput `pulumi:"shareAccessId"`
	// Specifies the file system sharing protocol.
	// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
	ShareProto pulumi.StringPtrOutput `pulumi:"shareProto"`
	// Specifies the size (GB) of the shared file system.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the share access rule.
	Status pulumi.StringOutput `pulumi:"status"`
	// The key/value pairs to associate with the shared file system.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("huaweicloud:Sfs/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("huaweicloud:Sfs/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// Specifies the access level of the shared file system. Possible values are *ro* (
	// read-only)
	// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
	AccessLevel *string `pulumi:"accessLevel"`
	// The status of the share access rule.
	AccessRuleStatus *string `pulumi:"accessRuleStatus"`
	// All access rules of the shared file system. The object includes the following:
	AccessRules []FileSystemAccessRule `pulumi:"accessRules"`
	// Specifies the value that defines the access rule. The value contains 1 to 255
	// characters. Changing this will create a new access rule. The value varies according to the scenario:
	// + Set the VPC ID in VPC authorization scenarios.
	// + Set this parameter in IP address authorization scenario:
	// - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
	// - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
	AccessTo *string `pulumi:"accessTo"`
	// Specifies the type of the share access rule. The default value is *cert*. Changing
	// this will create a new access rule.
	AccessType *string `pulumi:"accessType"`
	// Specifies the availability zone name. Changing this parameter will
	// create a new resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the description of the shared file system, which contains 0 to 255
	// characters and can contain only letters, digits, hyphens (-), and underscores (_).
	Description *string `pulumi:"description"`
	// The enterprise project id of the shared file system. Changing
	// this creates a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The address for accessing the shared file system.
	ExportLocation *string `pulumi:"exportLocation"`
	// Specifies whether a file system can be publicly seen.
	// The default value is false.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the metadata information used to create the shared file system. The
	// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
	// exist at the same time to enable the data encryption function. Changing this will create a new resource.
	Metadata map[string]string `pulumi:"metadata"`
	// Specifies the name of the shared file system, which contains 0 to 255 characters and
	// can contain only letters, digits, hyphens (-), and underscores (_).
	Name *string `pulumi:"name"`
	// The region in which to create the sfs resource. If omitted, the provider-level
	// region will be used. Changing this creates a new sfs resource.
	Region *string `pulumi:"region"`
	// The UUID of the share access rule.
	ShareAccessId *string `pulumi:"shareAccessId"`
	// Specifies the file system sharing protocol.
	// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
	ShareProto *string `pulumi:"shareProto"`
	// Specifies the size (GB) of the shared file system.
	Size *int `pulumi:"size"`
	// The status of the share access rule.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the shared file system.
	Tags map[string]string `pulumi:"tags"`
}

type FileSystemState struct {
	// Specifies the access level of the shared file system. Possible values are *ro* (
	// read-only)
	// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
	AccessLevel pulumi.StringPtrInput
	// The status of the share access rule.
	AccessRuleStatus pulumi.StringPtrInput
	// All access rules of the shared file system. The object includes the following:
	AccessRules FileSystemAccessRuleArrayInput
	// Specifies the value that defines the access rule. The value contains 1 to 255
	// characters. Changing this will create a new access rule. The value varies according to the scenario:
	// + Set the VPC ID in VPC authorization scenarios.
	// + Set this parameter in IP address authorization scenario:
	// - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
	// - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
	AccessTo pulumi.StringPtrInput
	// Specifies the type of the share access rule. The default value is *cert*. Changing
	// this will create a new access rule.
	AccessType pulumi.StringPtrInput
	// Specifies the availability zone name. Changing this parameter will
	// create a new resource.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the description of the shared file system, which contains 0 to 255
	// characters and can contain only letters, digits, hyphens (-), and underscores (_).
	Description pulumi.StringPtrInput
	// The enterprise project id of the shared file system. Changing
	// this creates a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The address for accessing the shared file system.
	ExportLocation pulumi.StringPtrInput
	// Specifies whether a file system can be publicly seen.
	// The default value is false.
	IsPublic pulumi.BoolPtrInput
	// Specifies the metadata information used to create the shared file system. The
	// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
	// exist at the same time to enable the data encryption function. Changing this will create a new resource.
	Metadata pulumi.StringMapInput
	// Specifies the name of the shared file system, which contains 0 to 255 characters and
	// can contain only letters, digits, hyphens (-), and underscores (_).
	Name pulumi.StringPtrInput
	// The region in which to create the sfs resource. If omitted, the provider-level
	// region will be used. Changing this creates a new sfs resource.
	Region pulumi.StringPtrInput
	// The UUID of the share access rule.
	ShareAccessId pulumi.StringPtrInput
	// Specifies the file system sharing protocol.
	// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
	ShareProto pulumi.StringPtrInput
	// Specifies the size (GB) of the shared file system.
	Size pulumi.IntPtrInput
	// The status of the share access rule.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the shared file system.
	Tags pulumi.StringMapInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// Specifies the access level of the shared file system. Possible values are *ro* (
	// read-only)
	// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
	AccessLevel *string `pulumi:"accessLevel"`
	// Specifies the value that defines the access rule. The value contains 1 to 255
	// characters. Changing this will create a new access rule. The value varies according to the scenario:
	// + Set the VPC ID in VPC authorization scenarios.
	// + Set this parameter in IP address authorization scenario:
	// - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
	// - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
	AccessTo *string `pulumi:"accessTo"`
	// Specifies the type of the share access rule. The default value is *cert*. Changing
	// this will create a new access rule.
	AccessType *string `pulumi:"accessType"`
	// Specifies the availability zone name. Changing this parameter will
	// create a new resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the description of the shared file system, which contains 0 to 255
	// characters and can contain only letters, digits, hyphens (-), and underscores (_).
	Description *string `pulumi:"description"`
	// The enterprise project id of the shared file system. Changing
	// this creates a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether a file system can be publicly seen.
	// The default value is false.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the metadata information used to create the shared file system. The
	// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
	// exist at the same time to enable the data encryption function. Changing this will create a new resource.
	Metadata map[string]string `pulumi:"metadata"`
	// Specifies the name of the shared file system, which contains 0 to 255 characters and
	// can contain only letters, digits, hyphens (-), and underscores (_).
	Name *string `pulumi:"name"`
	// The region in which to create the sfs resource. If omitted, the provider-level
	// region will be used. Changing this creates a new sfs resource.
	Region *string `pulumi:"region"`
	// Specifies the file system sharing protocol.
	// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
	ShareProto *string `pulumi:"shareProto"`
	// Specifies the size (GB) of the shared file system.
	Size int `pulumi:"size"`
	// The key/value pairs to associate with the shared file system.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// Specifies the access level of the shared file system. Possible values are *ro* (
	// read-only)
	// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
	AccessLevel pulumi.StringPtrInput
	// Specifies the value that defines the access rule. The value contains 1 to 255
	// characters. Changing this will create a new access rule. The value varies according to the scenario:
	// + Set the VPC ID in VPC authorization scenarios.
	// + Set this parameter in IP address authorization scenario:
	// - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
	// - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
	//   For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
	AccessTo pulumi.StringPtrInput
	// Specifies the type of the share access rule. The default value is *cert*. Changing
	// this will create a new access rule.
	AccessType pulumi.StringPtrInput
	// Specifies the availability zone name. Changing this parameter will
	// create a new resource.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the description of the shared file system, which contains 0 to 255
	// characters and can contain only letters, digits, hyphens (-), and underscores (_).
	Description pulumi.StringPtrInput
	// The enterprise project id of the shared file system. Changing
	// this creates a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether a file system can be publicly seen.
	// The default value is false.
	IsPublic pulumi.BoolPtrInput
	// Specifies the metadata information used to create the shared file system. The
	// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
	// exist at the same time to enable the data encryption function. Changing this will create a new resource.
	Metadata pulumi.StringMapInput
	// Specifies the name of the shared file system, which contains 0 to 255 characters and
	// can contain only letters, digits, hyphens (-), and underscores (_).
	Name pulumi.StringPtrInput
	// The region in which to create the sfs resource. If omitted, the provider-level
	// region will be used. Changing this creates a new sfs resource.
	Region pulumi.StringPtrInput
	// Specifies the file system sharing protocol.
	// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
	ShareProto pulumi.StringPtrInput
	// Specifies the size (GB) of the shared file system.
	Size pulumi.IntInput
	// The key/value pairs to associate with the shared file system.
	Tags pulumi.StringMapInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// Specifies the access level of the shared file system. Possible values are *ro* (
// read-only)
// and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
func (o FileSystemOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessLevel }).(pulumi.StringOutput)
}

// The status of the share access rule.
func (o FileSystemOutput) AccessRuleStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessRuleStatus }).(pulumi.StringOutput)
}

// All access rules of the shared file system. The object includes the following:
func (o FileSystemOutput) AccessRules() FileSystemAccessRuleArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemAccessRuleArrayOutput { return v.AccessRules }).(FileSystemAccessRuleArrayOutput)
}

// Specifies the value that defines the access rule. The value contains 1 to 255
// characters. Changing this will create a new access rule. The value varies according to the scenario:
//   - Set the VPC ID in VPC authorization scenarios.
//   - Set this parameter in IP address authorization scenario:
//   - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
//     For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
//   - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
//     For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
func (o FileSystemOutput) AccessTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.AccessTo }).(pulumi.StringPtrOutput)
}

// Specifies the type of the share access rule. The default value is *cert*. Changing
// this will create a new access rule.
func (o FileSystemOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

// Specifies the availability zone name. Changing this parameter will
// create a new resource.
func (o FileSystemOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the description of the shared file system, which contains 0 to 255
// characters and can contain only letters, digits, hyphens (-), and underscores (_).
func (o FileSystemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The enterprise project id of the shared file system. Changing
// this creates a new resource.
func (o FileSystemOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The address for accessing the shared file system.
func (o FileSystemOutput) ExportLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ExportLocation }).(pulumi.StringOutput)
}

// Specifies whether a file system can be publicly seen.
// The default value is false.
func (o FileSystemOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

// Specifies the metadata information used to create the shared file system. The
// supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias", and the keys should be
// exist at the same time to enable the data encryption function. Changing this will create a new resource.
func (o FileSystemOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Specifies the name of the shared file system, which contains 0 to 255 characters and
// can contain only letters, digits, hyphens (-), and underscores (_).
func (o FileSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the sfs resource. If omitted, the provider-level
// region will be used. Changing this creates a new sfs resource.
func (o FileSystemOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The UUID of the share access rule.
func (o FileSystemOutput) ShareAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ShareAccessId }).(pulumi.StringOutput)
}

// Specifies the file system sharing protocol.
// The valid value can be **NFS** (for Linux OS) or **CIFS** (for Windows OS).
func (o FileSystemOutput) ShareProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.ShareProto }).(pulumi.StringPtrOutput)
}

// Specifies the size (GB) of the shared file system.
func (o FileSystemOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the share access rule.
func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the shared file system.
func (o FileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}

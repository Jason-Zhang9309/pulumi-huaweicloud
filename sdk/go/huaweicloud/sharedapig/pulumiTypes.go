// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sharedapig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApiBackendParameter struct {
	// Specifies the description of the parameter. The description cannot exceed 255
	// characters.
	Description *string `pulumi:"description"`
	// Specifies the parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	Location string `pulumi:"location"`
	// Specifies the parameter name. A parameter name consists of 1–32 characters, starting with
	// a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// Specifies the parameter type, which can be 'REQUEST', 'CONSTANT', or 'SYSTEM'.
	Type *string `pulumi:"type"`
	// Specifies the parameter value, which is a string of not more than 255 characters. The
	// value varies depending on the parameter type:
	// + 'REQUEST': parameter name in `requestParameter`
	// + 'CONSTANT': real value of the parameter
	// + 'SYSTEM': gateway parameter name
	Value string `pulumi:"value"`
}

// ApiBackendParameterInput is an input type that accepts ApiBackendParameterArgs and ApiBackendParameterOutput values.
// You can construct a concrete instance of `ApiBackendParameterInput` via:
//
//	ApiBackendParameterArgs{...}
type ApiBackendParameterInput interface {
	pulumi.Input

	ToApiBackendParameterOutput() ApiBackendParameterOutput
	ToApiBackendParameterOutputWithContext(context.Context) ApiBackendParameterOutput
}

type ApiBackendParameterArgs struct {
	// Specifies the description of the parameter. The description cannot exceed 255
	// characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the parameter name. A parameter name consists of 1–32 characters, starting with
	// a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the parameter type, which can be 'REQUEST', 'CONSTANT', or 'SYSTEM'.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the parameter value, which is a string of not more than 255 characters. The
	// value varies depending on the parameter type:
	// + 'REQUEST': parameter name in `requestParameter`
	// + 'CONSTANT': real value of the parameter
	// + 'SYSTEM': gateway parameter name
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiBackendParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBackendParameter)(nil)).Elem()
}

func (i ApiBackendParameterArgs) ToApiBackendParameterOutput() ApiBackendParameterOutput {
	return i.ToApiBackendParameterOutputWithContext(context.Background())
}

func (i ApiBackendParameterArgs) ToApiBackendParameterOutputWithContext(ctx context.Context) ApiBackendParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBackendParameterOutput)
}

// ApiBackendParameterArrayInput is an input type that accepts ApiBackendParameterArray and ApiBackendParameterArrayOutput values.
// You can construct a concrete instance of `ApiBackendParameterArrayInput` via:
//
//	ApiBackendParameterArray{ ApiBackendParameterArgs{...} }
type ApiBackendParameterArrayInput interface {
	pulumi.Input

	ToApiBackendParameterArrayOutput() ApiBackendParameterArrayOutput
	ToApiBackendParameterArrayOutputWithContext(context.Context) ApiBackendParameterArrayOutput
}

type ApiBackendParameterArray []ApiBackendParameterInput

func (ApiBackendParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiBackendParameter)(nil)).Elem()
}

func (i ApiBackendParameterArray) ToApiBackendParameterArrayOutput() ApiBackendParameterArrayOutput {
	return i.ToApiBackendParameterArrayOutputWithContext(context.Background())
}

func (i ApiBackendParameterArray) ToApiBackendParameterArrayOutputWithContext(ctx context.Context) ApiBackendParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBackendParameterArrayOutput)
}

type ApiBackendParameterOutput struct{ *pulumi.OutputState }

func (ApiBackendParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBackendParameter)(nil)).Elem()
}

func (o ApiBackendParameterOutput) ToApiBackendParameterOutput() ApiBackendParameterOutput {
	return o
}

func (o ApiBackendParameterOutput) ToApiBackendParameterOutputWithContext(ctx context.Context) ApiBackendParameterOutput {
	return o
}

// Specifies the description of the parameter. The description cannot exceed 255
// characters.
func (o ApiBackendParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBackendParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
func (o ApiBackendParameterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParameter) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the parameter name. A parameter name consists of 1–32 characters, starting with
// a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
func (o ApiBackendParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parameter type, which can be 'REQUEST', 'CONSTANT', or 'SYSTEM'.
func (o ApiBackendParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBackendParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the parameter value, which is a string of not more than 255 characters. The
// value varies depending on the parameter type:
// + 'REQUEST': parameter name in `requestParameter`
// + 'CONSTANT': real value of the parameter
// + 'SYSTEM': gateway parameter name
func (o ApiBackendParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ApiBackendParameterArrayOutput struct{ *pulumi.OutputState }

func (ApiBackendParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiBackendParameter)(nil)).Elem()
}

func (o ApiBackendParameterArrayOutput) ToApiBackendParameterArrayOutput() ApiBackendParameterArrayOutput {
	return o
}

func (o ApiBackendParameterArrayOutput) ToApiBackendParameterArrayOutputWithContext(ctx context.Context) ApiBackendParameterArrayOutput {
	return o
}

func (o ApiBackendParameterArrayOutput) Index(i pulumi.IntInput) ApiBackendParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiBackendParameter {
		return vs[0].([]ApiBackendParameter)[vs[1].(int)]
	}).(ApiBackendParameterOutput)
}

type ApiFunctionBackend struct {
	// Specifies the function URN.
	FunctionUrn string `pulumi:"functionUrn"`
	// Specifies the invocation mode, which can be 'async' or 'sync'.
	InvocationType string `pulumi:"invocationType"`
	// Timeout duration (in ms) for API Gateway to request for FunctionGraph. Defaults to 50000.
	Timeout *int `pulumi:"timeout"`
	// Specifies the function version.
	Version string `pulumi:"version"`
}

// ApiFunctionBackendInput is an input type that accepts ApiFunctionBackendArgs and ApiFunctionBackendOutput values.
// You can construct a concrete instance of `ApiFunctionBackendInput` via:
//
//	ApiFunctionBackendArgs{...}
type ApiFunctionBackendInput interface {
	pulumi.Input

	ToApiFunctionBackendOutput() ApiFunctionBackendOutput
	ToApiFunctionBackendOutputWithContext(context.Context) ApiFunctionBackendOutput
}

type ApiFunctionBackendArgs struct {
	// Specifies the function URN.
	FunctionUrn pulumi.StringInput `pulumi:"functionUrn"`
	// Specifies the invocation mode, which can be 'async' or 'sync'.
	InvocationType pulumi.StringInput `pulumi:"invocationType"`
	// Timeout duration (in ms) for API Gateway to request for FunctionGraph. Defaults to 50000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Specifies the function version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ApiFunctionBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFunctionBackend)(nil)).Elem()
}

func (i ApiFunctionBackendArgs) ToApiFunctionBackendOutput() ApiFunctionBackendOutput {
	return i.ToApiFunctionBackendOutputWithContext(context.Background())
}

func (i ApiFunctionBackendArgs) ToApiFunctionBackendOutputWithContext(ctx context.Context) ApiFunctionBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFunctionBackendOutput)
}

func (i ApiFunctionBackendArgs) ToApiFunctionBackendPtrOutput() ApiFunctionBackendPtrOutput {
	return i.ToApiFunctionBackendPtrOutputWithContext(context.Background())
}

func (i ApiFunctionBackendArgs) ToApiFunctionBackendPtrOutputWithContext(ctx context.Context) ApiFunctionBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFunctionBackendOutput).ToApiFunctionBackendPtrOutputWithContext(ctx)
}

// ApiFunctionBackendPtrInput is an input type that accepts ApiFunctionBackendArgs, ApiFunctionBackendPtr and ApiFunctionBackendPtrOutput values.
// You can construct a concrete instance of `ApiFunctionBackendPtrInput` via:
//
//	        ApiFunctionBackendArgs{...}
//
//	or:
//
//	        nil
type ApiFunctionBackendPtrInput interface {
	pulumi.Input

	ToApiFunctionBackendPtrOutput() ApiFunctionBackendPtrOutput
	ToApiFunctionBackendPtrOutputWithContext(context.Context) ApiFunctionBackendPtrOutput
}

type apiFunctionBackendPtrType ApiFunctionBackendArgs

func ApiFunctionBackendPtr(v *ApiFunctionBackendArgs) ApiFunctionBackendPtrInput {
	return (*apiFunctionBackendPtrType)(v)
}

func (*apiFunctionBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFunctionBackend)(nil)).Elem()
}

func (i *apiFunctionBackendPtrType) ToApiFunctionBackendPtrOutput() ApiFunctionBackendPtrOutput {
	return i.ToApiFunctionBackendPtrOutputWithContext(context.Background())
}

func (i *apiFunctionBackendPtrType) ToApiFunctionBackendPtrOutputWithContext(ctx context.Context) ApiFunctionBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFunctionBackendPtrOutput)
}

type ApiFunctionBackendOutput struct{ *pulumi.OutputState }

func (ApiFunctionBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFunctionBackend)(nil)).Elem()
}

func (o ApiFunctionBackendOutput) ToApiFunctionBackendOutput() ApiFunctionBackendOutput {
	return o
}

func (o ApiFunctionBackendOutput) ToApiFunctionBackendOutputWithContext(ctx context.Context) ApiFunctionBackendOutput {
	return o
}

func (o ApiFunctionBackendOutput) ToApiFunctionBackendPtrOutput() ApiFunctionBackendPtrOutput {
	return o.ToApiFunctionBackendPtrOutputWithContext(context.Background())
}

func (o ApiFunctionBackendOutput) ToApiFunctionBackendPtrOutputWithContext(ctx context.Context) ApiFunctionBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiFunctionBackend) *ApiFunctionBackend {
		return &v
	}).(ApiFunctionBackendPtrOutput)
}

// Specifies the function URN.
func (o ApiFunctionBackendOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFunctionBackend) string { return v.FunctionUrn }).(pulumi.StringOutput)
}

// Specifies the invocation mode, which can be 'async' or 'sync'.
func (o ApiFunctionBackendOutput) InvocationType() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFunctionBackend) string { return v.InvocationType }).(pulumi.StringOutput)
}

// Timeout duration (in ms) for API Gateway to request for FunctionGraph. Defaults to 50000.
func (o ApiFunctionBackendOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiFunctionBackend) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Specifies the function version.
func (o ApiFunctionBackendOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFunctionBackend) string { return v.Version }).(pulumi.StringOutput)
}

type ApiFunctionBackendPtrOutput struct{ *pulumi.OutputState }

func (ApiFunctionBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFunctionBackend)(nil)).Elem()
}

func (o ApiFunctionBackendPtrOutput) ToApiFunctionBackendPtrOutput() ApiFunctionBackendPtrOutput {
	return o
}

func (o ApiFunctionBackendPtrOutput) ToApiFunctionBackendPtrOutputWithContext(ctx context.Context) ApiFunctionBackendPtrOutput {
	return o
}

func (o ApiFunctionBackendPtrOutput) Elem() ApiFunctionBackendOutput {
	return o.ApplyT(func(v *ApiFunctionBackend) ApiFunctionBackend {
		if v != nil {
			return *v
		}
		var ret ApiFunctionBackend
		return ret
	}).(ApiFunctionBackendOutput)
}

// Specifies the function URN.
func (o ApiFunctionBackendPtrOutput) FunctionUrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFunctionBackend) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionUrn
	}).(pulumi.StringPtrOutput)
}

// Specifies the invocation mode, which can be 'async' or 'sync'.
func (o ApiFunctionBackendPtrOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFunctionBackend) *string {
		if v == nil {
			return nil
		}
		return &v.InvocationType
	}).(pulumi.StringPtrOutput)
}

// Timeout duration (in ms) for API Gateway to request for FunctionGraph. Defaults to 50000.
func (o ApiFunctionBackendPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiFunctionBackend) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Specifies the function version.
func (o ApiFunctionBackendPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFunctionBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type ApiHttpBackend struct {
	// Specifies the backend request method, including 'GET','POST','PUT' and etc..
	Method string `pulumi:"method"`
	// Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'.
	Protocol string `pulumi:"protocol"`
	// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
	// 50000.
	Timeout *int `pulumi:"timeout"`
	// Specifies the backend request path. The value must comply with URI specifications.
	Uri string `pulumi:"uri"`
	// Specifies the backend service address. An endpoint URL is in the format of
	// "domain name (or IP address):port number", with up to 255 characters. This parameter and `vpcChannel` are
	// alternative.
	UrlDomain *string `pulumi:"urlDomain"`
	// Specifies the VPC channel ID. This parameter and `urlDomain` are alternative.
	VpcChannel *string `pulumi:"vpcChannel"`
}

// ApiHttpBackendInput is an input type that accepts ApiHttpBackendArgs and ApiHttpBackendOutput values.
// You can construct a concrete instance of `ApiHttpBackendInput` via:
//
//	ApiHttpBackendArgs{...}
type ApiHttpBackendInput interface {
	pulumi.Input

	ToApiHttpBackendOutput() ApiHttpBackendOutput
	ToApiHttpBackendOutputWithContext(context.Context) ApiHttpBackendOutput
}

type ApiHttpBackendArgs struct {
	// Specifies the backend request method, including 'GET','POST','PUT' and etc..
	Method pulumi.StringInput `pulumi:"method"`
	// Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
	// 50000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Specifies the backend request path. The value must comply with URI specifications.
	Uri pulumi.StringInput `pulumi:"uri"`
	// Specifies the backend service address. An endpoint URL is in the format of
	// "domain name (or IP address):port number", with up to 255 characters. This parameter and `vpcChannel` are
	// alternative.
	UrlDomain pulumi.StringPtrInput `pulumi:"urlDomain"`
	// Specifies the VPC channel ID. This parameter and `urlDomain` are alternative.
	VpcChannel pulumi.StringPtrInput `pulumi:"vpcChannel"`
}

func (ApiHttpBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiHttpBackend)(nil)).Elem()
}

func (i ApiHttpBackendArgs) ToApiHttpBackendOutput() ApiHttpBackendOutput {
	return i.ToApiHttpBackendOutputWithContext(context.Background())
}

func (i ApiHttpBackendArgs) ToApiHttpBackendOutputWithContext(ctx context.Context) ApiHttpBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiHttpBackendOutput)
}

func (i ApiHttpBackendArgs) ToApiHttpBackendPtrOutput() ApiHttpBackendPtrOutput {
	return i.ToApiHttpBackendPtrOutputWithContext(context.Background())
}

func (i ApiHttpBackendArgs) ToApiHttpBackendPtrOutputWithContext(ctx context.Context) ApiHttpBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiHttpBackendOutput).ToApiHttpBackendPtrOutputWithContext(ctx)
}

// ApiHttpBackendPtrInput is an input type that accepts ApiHttpBackendArgs, ApiHttpBackendPtr and ApiHttpBackendPtrOutput values.
// You can construct a concrete instance of `ApiHttpBackendPtrInput` via:
//
//	        ApiHttpBackendArgs{...}
//
//	or:
//
//	        nil
type ApiHttpBackendPtrInput interface {
	pulumi.Input

	ToApiHttpBackendPtrOutput() ApiHttpBackendPtrOutput
	ToApiHttpBackendPtrOutputWithContext(context.Context) ApiHttpBackendPtrOutput
}

type apiHttpBackendPtrType ApiHttpBackendArgs

func ApiHttpBackendPtr(v *ApiHttpBackendArgs) ApiHttpBackendPtrInput {
	return (*apiHttpBackendPtrType)(v)
}

func (*apiHttpBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiHttpBackend)(nil)).Elem()
}

func (i *apiHttpBackendPtrType) ToApiHttpBackendPtrOutput() ApiHttpBackendPtrOutput {
	return i.ToApiHttpBackendPtrOutputWithContext(context.Background())
}

func (i *apiHttpBackendPtrType) ToApiHttpBackendPtrOutputWithContext(ctx context.Context) ApiHttpBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiHttpBackendPtrOutput)
}

type ApiHttpBackendOutput struct{ *pulumi.OutputState }

func (ApiHttpBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiHttpBackend)(nil)).Elem()
}

func (o ApiHttpBackendOutput) ToApiHttpBackendOutput() ApiHttpBackendOutput {
	return o
}

func (o ApiHttpBackendOutput) ToApiHttpBackendOutputWithContext(ctx context.Context) ApiHttpBackendOutput {
	return o
}

func (o ApiHttpBackendOutput) ToApiHttpBackendPtrOutput() ApiHttpBackendPtrOutput {
	return o.ToApiHttpBackendPtrOutputWithContext(context.Background())
}

func (o ApiHttpBackendOutput) ToApiHttpBackendPtrOutputWithContext(ctx context.Context) ApiHttpBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiHttpBackend) *ApiHttpBackend {
		return &v
	}).(ApiHttpBackendPtrOutput)
}

// Specifies the backend request method, including 'GET','POST','PUT' and etc..
func (o ApiHttpBackendOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v ApiHttpBackend) string { return v.Method }).(pulumi.StringOutput)
}

// Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'.
func (o ApiHttpBackendOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ApiHttpBackend) string { return v.Protocol }).(pulumi.StringOutput)
}

// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
// 50000.
func (o ApiHttpBackendOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiHttpBackend) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Specifies the backend request path. The value must comply with URI specifications.
func (o ApiHttpBackendOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ApiHttpBackend) string { return v.Uri }).(pulumi.StringOutput)
}

// Specifies the backend service address. An endpoint URL is in the format of
// "domain name (or IP address):port number", with up to 255 characters. This parameter and `vpcChannel` are
// alternative.
func (o ApiHttpBackendOutput) UrlDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiHttpBackend) *string { return v.UrlDomain }).(pulumi.StringPtrOutput)
}

// Specifies the VPC channel ID. This parameter and `urlDomain` are alternative.
func (o ApiHttpBackendOutput) VpcChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiHttpBackend) *string { return v.VpcChannel }).(pulumi.StringPtrOutput)
}

type ApiHttpBackendPtrOutput struct{ *pulumi.OutputState }

func (ApiHttpBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiHttpBackend)(nil)).Elem()
}

func (o ApiHttpBackendPtrOutput) ToApiHttpBackendPtrOutput() ApiHttpBackendPtrOutput {
	return o
}

func (o ApiHttpBackendPtrOutput) ToApiHttpBackendPtrOutputWithContext(ctx context.Context) ApiHttpBackendPtrOutput {
	return o
}

func (o ApiHttpBackendPtrOutput) Elem() ApiHttpBackendOutput {
	return o.ApplyT(func(v *ApiHttpBackend) ApiHttpBackend {
		if v != nil {
			return *v
		}
		var ret ApiHttpBackend
		return ret
	}).(ApiHttpBackendOutput)
}

// Specifies the backend request method, including 'GET','POST','PUT' and etc..
func (o ApiHttpBackendPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'.
func (o ApiHttpBackendPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
// 50000.
func (o ApiHttpBackendPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Specifies the backend request path. The value must comply with URI specifications.
func (o ApiHttpBackendPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Specifies the backend service address. An endpoint URL is in the format of
// "domain name (or IP address):port number", with up to 255 characters. This parameter and `vpcChannel` are
// alternative.
func (o ApiHttpBackendPtrOutput) UrlDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *string {
		if v == nil {
			return nil
		}
		return v.UrlDomain
	}).(pulumi.StringPtrOutput)
}

// Specifies the VPC channel ID. This parameter and `urlDomain` are alternative.
func (o ApiHttpBackendPtrOutput) VpcChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiHttpBackend) *string {
		if v == nil {
			return nil
		}
		return v.VpcChannel
	}).(pulumi.StringPtrOutput)
}

type ApiMockBackend struct {
	// Specifies the description of the Mock backend. The description cannot exceed 255
	// characters.
	Description *string `pulumi:"description"`
	// Specifies the return result.
	ResultContent *string `pulumi:"resultContent"`
	// Specifies the version of the Mock backend.
	Version *string `pulumi:"version"`
}

// ApiMockBackendInput is an input type that accepts ApiMockBackendArgs and ApiMockBackendOutput values.
// You can construct a concrete instance of `ApiMockBackendInput` via:
//
//	ApiMockBackendArgs{...}
type ApiMockBackendInput interface {
	pulumi.Input

	ToApiMockBackendOutput() ApiMockBackendOutput
	ToApiMockBackendOutputWithContext(context.Context) ApiMockBackendOutput
}

type ApiMockBackendArgs struct {
	// Specifies the description of the Mock backend. The description cannot exceed 255
	// characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the return result.
	ResultContent pulumi.StringPtrInput `pulumi:"resultContent"`
	// Specifies the version of the Mock backend.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApiMockBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockBackend)(nil)).Elem()
}

func (i ApiMockBackendArgs) ToApiMockBackendOutput() ApiMockBackendOutput {
	return i.ToApiMockBackendOutputWithContext(context.Background())
}

func (i ApiMockBackendArgs) ToApiMockBackendOutputWithContext(ctx context.Context) ApiMockBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockBackendOutput)
}

func (i ApiMockBackendArgs) ToApiMockBackendPtrOutput() ApiMockBackendPtrOutput {
	return i.ToApiMockBackendPtrOutputWithContext(context.Background())
}

func (i ApiMockBackendArgs) ToApiMockBackendPtrOutputWithContext(ctx context.Context) ApiMockBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockBackendOutput).ToApiMockBackendPtrOutputWithContext(ctx)
}

// ApiMockBackendPtrInput is an input type that accepts ApiMockBackendArgs, ApiMockBackendPtr and ApiMockBackendPtrOutput values.
// You can construct a concrete instance of `ApiMockBackendPtrInput` via:
//
//	        ApiMockBackendArgs{...}
//
//	or:
//
//	        nil
type ApiMockBackendPtrInput interface {
	pulumi.Input

	ToApiMockBackendPtrOutput() ApiMockBackendPtrOutput
	ToApiMockBackendPtrOutputWithContext(context.Context) ApiMockBackendPtrOutput
}

type apiMockBackendPtrType ApiMockBackendArgs

func ApiMockBackendPtr(v *ApiMockBackendArgs) ApiMockBackendPtrInput {
	return (*apiMockBackendPtrType)(v)
}

func (*apiMockBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiMockBackend)(nil)).Elem()
}

func (i *apiMockBackendPtrType) ToApiMockBackendPtrOutput() ApiMockBackendPtrOutput {
	return i.ToApiMockBackendPtrOutputWithContext(context.Background())
}

func (i *apiMockBackendPtrType) ToApiMockBackendPtrOutputWithContext(ctx context.Context) ApiMockBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockBackendPtrOutput)
}

type ApiMockBackendOutput struct{ *pulumi.OutputState }

func (ApiMockBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockBackend)(nil)).Elem()
}

func (o ApiMockBackendOutput) ToApiMockBackendOutput() ApiMockBackendOutput {
	return o
}

func (o ApiMockBackendOutput) ToApiMockBackendOutputWithContext(ctx context.Context) ApiMockBackendOutput {
	return o
}

func (o ApiMockBackendOutput) ToApiMockBackendPtrOutput() ApiMockBackendPtrOutput {
	return o.ToApiMockBackendPtrOutputWithContext(context.Background())
}

func (o ApiMockBackendOutput) ToApiMockBackendPtrOutputWithContext(ctx context.Context) ApiMockBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiMockBackend) *ApiMockBackend {
		return &v
	}).(ApiMockBackendPtrOutput)
}

// Specifies the description of the Mock backend. The description cannot exceed 255
// characters.
func (o ApiMockBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockBackend) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the return result.
func (o ApiMockBackendOutput) ResultContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockBackend) *string { return v.ResultContent }).(pulumi.StringPtrOutput)
}

// Specifies the version of the Mock backend.
func (o ApiMockBackendOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockBackend) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiMockBackendPtrOutput struct{ *pulumi.OutputState }

func (ApiMockBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiMockBackend)(nil)).Elem()
}

func (o ApiMockBackendPtrOutput) ToApiMockBackendPtrOutput() ApiMockBackendPtrOutput {
	return o
}

func (o ApiMockBackendPtrOutput) ToApiMockBackendPtrOutputWithContext(ctx context.Context) ApiMockBackendPtrOutput {
	return o
}

func (o ApiMockBackendPtrOutput) Elem() ApiMockBackendOutput {
	return o.ApplyT(func(v *ApiMockBackend) ApiMockBackend {
		if v != nil {
			return *v
		}
		var ret ApiMockBackend
		return ret
	}).(ApiMockBackendOutput)
}

// Specifies the description of the Mock backend. The description cannot exceed 255
// characters.
func (o ApiMockBackendPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiMockBackend) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Specifies the return result.
func (o ApiMockBackendPtrOutput) ResultContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiMockBackend) *string {
		if v == nil {
			return nil
		}
		return v.ResultContent
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the Mock backend.
func (o ApiMockBackendPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiMockBackend) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type ApiRequestParameter struct {
	// Specifies the default value when the parameter is optional.
	Default *string `pulumi:"default"`
	// Specifies the description of the parameter. The description cannot exceed 255
	// characters.
	Description *string `pulumi:"description"`
	// Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	Location string `pulumi:"location"`
	// Specifies the input parameter name. A parameter name consists of 1–32 characters, starting
	// with a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// Specifies whether the parameter is mandatory or not.
	Required bool `pulumi:"required"`
	// Specifies the input parameter type, which can be 'STRING' or 'NUMBER'.
	Type string `pulumi:"type"`
}

// ApiRequestParameterInput is an input type that accepts ApiRequestParameterArgs and ApiRequestParameterOutput values.
// You can construct a concrete instance of `ApiRequestParameterInput` via:
//
//	ApiRequestParameterArgs{...}
type ApiRequestParameterInput interface {
	pulumi.Input

	ToApiRequestParameterOutput() ApiRequestParameterOutput
	ToApiRequestParameterOutputWithContext(context.Context) ApiRequestParameterOutput
}

type ApiRequestParameterArgs struct {
	// Specifies the default value when the parameter is optional.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// Specifies the description of the parameter. The description cannot exceed 255
	// characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the input parameter name. A parameter name consists of 1–32 characters, starting
	// with a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the parameter is mandatory or not.
	Required pulumi.BoolInput `pulumi:"required"`
	// Specifies the input parameter type, which can be 'STRING' or 'NUMBER'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApiRequestParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiRequestParameter)(nil)).Elem()
}

func (i ApiRequestParameterArgs) ToApiRequestParameterOutput() ApiRequestParameterOutput {
	return i.ToApiRequestParameterOutputWithContext(context.Background())
}

func (i ApiRequestParameterArgs) ToApiRequestParameterOutputWithContext(ctx context.Context) ApiRequestParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiRequestParameterOutput)
}

// ApiRequestParameterArrayInput is an input type that accepts ApiRequestParameterArray and ApiRequestParameterArrayOutput values.
// You can construct a concrete instance of `ApiRequestParameterArrayInput` via:
//
//	ApiRequestParameterArray{ ApiRequestParameterArgs{...} }
type ApiRequestParameterArrayInput interface {
	pulumi.Input

	ToApiRequestParameterArrayOutput() ApiRequestParameterArrayOutput
	ToApiRequestParameterArrayOutputWithContext(context.Context) ApiRequestParameterArrayOutput
}

type ApiRequestParameterArray []ApiRequestParameterInput

func (ApiRequestParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiRequestParameter)(nil)).Elem()
}

func (i ApiRequestParameterArray) ToApiRequestParameterArrayOutput() ApiRequestParameterArrayOutput {
	return i.ToApiRequestParameterArrayOutputWithContext(context.Background())
}

func (i ApiRequestParameterArray) ToApiRequestParameterArrayOutputWithContext(ctx context.Context) ApiRequestParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiRequestParameterArrayOutput)
}

type ApiRequestParameterOutput struct{ *pulumi.OutputState }

func (ApiRequestParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiRequestParameter)(nil)).Elem()
}

func (o ApiRequestParameterOutput) ToApiRequestParameterOutput() ApiRequestParameterOutput {
	return o
}

func (o ApiRequestParameterOutput) ToApiRequestParameterOutputWithContext(ctx context.Context) ApiRequestParameterOutput {
	return o
}

// Specifies the default value when the parameter is optional.
func (o ApiRequestParameterOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParameter) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// Specifies the description of the parameter. The description cannot exceed 255
// characters.
func (o ApiRequestParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
func (o ApiRequestParameterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiRequestParameter) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the input parameter name. A parameter name consists of 1–32 characters, starting
// with a letter. Only letters, digits, periods (.), hyphens (-), and underscores (_) are allowed.
func (o ApiRequestParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiRequestParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the parameter is mandatory or not.
func (o ApiRequestParameterOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v ApiRequestParameter) bool { return v.Required }).(pulumi.BoolOutput)
}

// Specifies the input parameter type, which can be 'STRING' or 'NUMBER'.
func (o ApiRequestParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApiRequestParameter) string { return v.Type }).(pulumi.StringOutput)
}

type ApiRequestParameterArrayOutput struct{ *pulumi.OutputState }

func (ApiRequestParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiRequestParameter)(nil)).Elem()
}

func (o ApiRequestParameterArrayOutput) ToApiRequestParameterArrayOutput() ApiRequestParameterArrayOutput {
	return o
}

func (o ApiRequestParameterArrayOutput) ToApiRequestParameterArrayOutputWithContext(ctx context.Context) ApiRequestParameterArrayOutput {
	return o
}

func (o ApiRequestParameterArrayOutput) Index(i pulumi.IntInput) ApiRequestParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiRequestParameter {
		return vs[0].([]ApiRequestParameter)[vs[1].(int)]
	}).(ApiRequestParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBackendParameterInput)(nil)).Elem(), ApiBackendParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBackendParameterArrayInput)(nil)).Elem(), ApiBackendParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFunctionBackendInput)(nil)).Elem(), ApiFunctionBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFunctionBackendPtrInput)(nil)).Elem(), ApiFunctionBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiHttpBackendInput)(nil)).Elem(), ApiHttpBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiHttpBackendPtrInput)(nil)).Elem(), ApiHttpBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockBackendInput)(nil)).Elem(), ApiMockBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockBackendPtrInput)(nil)).Elem(), ApiMockBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiRequestParameterInput)(nil)).Elem(), ApiRequestParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiRequestParameterArrayInput)(nil)).Elem(), ApiRequestParameterArray{})
	pulumi.RegisterOutputType(ApiBackendParameterOutput{})
	pulumi.RegisterOutputType(ApiBackendParameterArrayOutput{})
	pulumi.RegisterOutputType(ApiFunctionBackendOutput{})
	pulumi.RegisterOutputType(ApiFunctionBackendPtrOutput{})
	pulumi.RegisterOutputType(ApiHttpBackendOutput{})
	pulumi.RegisterOutputType(ApiHttpBackendPtrOutput{})
	pulumi.RegisterOutputType(ApiMockBackendOutput{})
	pulumi.RegisterOutputType(ApiMockBackendPtrOutput{})
	pulumi.RegisterOutputType(ApiRequestParameterOutput{})
	pulumi.RegisterOutputType(ApiRequestParameterArrayOutput{})
}

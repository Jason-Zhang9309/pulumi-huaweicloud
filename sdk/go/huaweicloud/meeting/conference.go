// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meeting

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ## Appendix
//
// <a name="timeZoneMapping"></a>
// The time zone mapping relationship supports:
//
// | Timezone ID | Timezone |
// | ---- | ---- |
// | 1 | (GMT-12:00) Eniwetok, Kwajalein |
// | 2 | (GMT-11:00) Midway Island, Samoa |
// | 3 | (GMT-10:00) Hawaii |
// | 4 | (GMT-09:00) Alaska |
// | 5 | (GMT-08:00) Pacific Time(US&Canada);Tijuana |
// | 6 | (GMT-07:00) Arizona |
// | 7 | (GMT-07:00) Mountain Time(US&Canada) |
// | 8 | (GMT-06:00) Central America |
// | 9 | (GMT-06:00) Central Time(US&Canada) |
// | 10 | (GMT-06:00) Mexico City |
// | 11 | (GMT-06:00) Saskatchewan |
// | 12 | (GMT-05:00) Bogota, Lima, Quito |
// | 13 | (GMT-05:00) Eastern Time(US&Canada) |
// | 14 | (GMT-05:00) Indiana(East) |
// | 15 | (GMT-04:00) Atlantic time(Canada) |
// | 16 | (GMT-04:00) Caracas, La Paz |
// | 17 | (GMT-04:00) Santiago |
// | 18 | (GMT-03:30) Newfoundland |
// | 19 | (GMT-03:00) Brasilia |
// | 20 | (GMT-03:00) Buenos Aires, Georgetown |
// | 21 | (GMT-03:00) Greenland |
// | 22 | (GMT-02:00) Mid-Atlantic |
// | 23 | (GMT-01:00) Azores |
// | 24 | (GMT-01:00) Cape Verde Is. |
// | 25 | (GMT) Casablanca, Monrovia |
// | 26 | (GMT) Greenwich Mean Time:Dublin, Edinburgh, Lisbon, London |
// | 27 | (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna |
// | 28 | (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague |
// | 29 | (GMT+01:00) Brussels, Copenhagen, Madrid, Paris |
// | 30 | (GMT+01:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb |
// | 31 | (GMT+01:00) West Central Africa |
// | 32 | (GMT+02:00) Athens, Istanbul, Vilnius |
// | 33 | (GMT+02:00) Bucharest |
// | 34 | (GMT+02:00) Cairo |
// | 35 | (GMT+02:00) Harare, Pretoria |
// | 36 | (GMT+02:00) Helsinki, Riga, Tallinn |
// | 37 | (GMT+02:00) Jerusalem |
// | 38 | (GMT+03:00) Baghdad, Minsk |
// | 39 | (GMT+03:00) Kuwait, Riyadh |
// | 40 | (GMT+03:00) Moscow, St. Petersburg, Volgograd |
// | 41 | (GMT+03:00) Nairobi |
// | 42 | (GMT+03:30) Tehran |
// | 43 | (GMT+04:00) Abu Dhabi, Muscat |
// | 44 | (GMT+04:00) Baku, Tbilisi, Yerevan |
// | 45 | (GMT+04:30) Kabul |
// | 46 | (GMT+05:00) Ekaterinburg |
// | 47 | (GMT+05:00) Islamabad, Karachi, Tashkent |
// | 48 | (GMT+05:30) Calcutta, Chennai, Mumbai, New Delhi |
// | 49 | (GMT+05:45) Kathmandu |
// | 50 | (GMT+06:00) Almaty, Novosibirsk |
// | 51 | (GMT+06:00) Astana, Dhaka |
// | 52 | (GMT+06:00) Sri Jayawardenepura |
// | 53 | (GMT+06:30) Rangoon |
// | 54 | (GMT+07:00) Bangkok, Hanoi, Jakarta |
// | 55 | (GMT+07:00) Krasnoyarsk |
// | 56 | (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi, Taipei |
// | 57 | (GMT+08:00) Irkutsk, Ulaan Bataar |
// | 58 | (GMT+08:00) Kuala Lumpur, Singapore |
// | 59 | (GMT+08:00) Perth |
// | 60 | (GMT+09:00) Osaka, Sapporo, Tokyo |
// | 61 | (GMT+09:00) Seoul |
// | 62 | (GMT+09:00) Yakutsk |
// | 63 | (GMT+09:30) Adelaide |
// | 64 | (GMT+09:30) Darwin |
// | 65 | (GMT+10:00) Brisbane |
// | 66 | (GMT+10:00) Canberra, Melbourne, Sydney |
// | 67 | (GMT+10:00) Guam, Port Moresby |
// | 68 | (GMT+10:00) Hobart |
// | 69 | (GMT+10:00) Vladivostok |
// | 70 | (GMT+11:00) Magadan, Solomon Is., New Caledonia |
// | 71 | (GMT+12:00) Auckland, Welington |
// | 72 | (GMT+12:00) Fiji |
// | 73 | (GMT+13:00) Nuku'alofa |
// | 74 | (GMT+09:00) Irkutsk |
// | 75 | (GMT) Casablanca |
// | 76 | (GMT+04:00) Baku |
// | 77 | (GMT+12:00) Kamchatka, Marshall Is. |
//
// ## Import
//
// Conferences (only scheduled conference and progressing conference) can be imported using their `id` and authorization parameters, separated by slashes, e.g. Import a conference and authenticated by account.
//
// ```sh
//
//	$ pulumi import huaweicloud:Meeting/conference:Conference test &ltid&gt/&ltaccount_name&gt/&ltaccount_password&gt
//
// ```
//
//	Import a conference and authenticated by `APP ID`/`APP Key`.
//
// ```sh
//
//	$ pulumi import huaweicloud:Meeting/conference:Conference test &ltid&gt/&ltapp_id&gt/&ltapp_key&gt/&ltcorp_id&gt/&ltuser_id&gt
//
// ```
//
//	The slashes cannot be missing even corporation ID and user ID are empty. Note that importing is not supported for expired conferences and the start time of the meeting is not imported along with it. You can ignore this change as below. resource "huaweicloud_meeting_conference" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	start_time,
//
//	]
//
//	} }
type Conference struct {
	pulumi.CustomResourceState

	// The access number of the conference.
	AccessNumber pulumi.StringOutput `pulumi:"accessNumber"`
	// Specifies the (HUAWEI Cloud meeting) user account name to which the
	// meeting initiator belongs. Changing this parameter will create a new resource.
	AccountName pulumi.StringPtrOutput `pulumi:"accountName"`
	// Specifies the user password.
	// Required if `accountName` is set. Changing this parameter will create a new resource.
	AccountPassword pulumi.StringPtrOutput `pulumi:"accountPassword"`
	// Specifies the ID of the Third-party application.
	// Changing this parameter will create a new resource.
	AppId pulumi.StringPtrOutput `pulumi:"appId"`
	// Specifies the Key information of the Third-party APP.
	// Required if `appId` is set. Changing this parameter will create a new resource.
	AppKey pulumi.StringPtrOutput `pulumi:"appKey"`
	// The audience meeting link address.
	AudienceJoinUri pulumi.StringOutput `pulumi:"audienceJoinUri"`
	// Specifies the auxiliary streaming address, the maximum length is 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	AuxAddress pulumi.StringOutput `pulumi:"auxAddress"`
	// The host meeting link address.
	ChairJoinUri pulumi.StringOutput `pulumi:"chairJoinUri"`
	// The conference type, the valid values are as follows:
	// + **FUTURE**
	// + **IMMEDIATELY**
	// + **CYCLE**
	ConferenceType pulumi.StringOutput `pulumi:"conferenceType"`
	// The conference UUID.
	ConferenceUuid pulumi.StringOutput `pulumi:"conferenceUuid"`
	// Specifies the other conference configurations.
	// The object structure is documented below.
	Configuration ConferenceConfigurationPtrOutput `pulumi:"configuration"`
	// Specifies the corporation ID.
	// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
	// Changing this parameter will create a new resource.
	CorpId pulumi.StringOutput `pulumi:"corpId"`
	// Specifies the configurations of the cyclical conference.
	// The object structure is documented below.
	CycleParams ConferenceCycleParamsOutput `pulumi:"cycleParams"`
	// Specifies the duration of the conference, in minutes.
	// The valid value is range from `15` to `1440`, defaults to `30`.
	Duration pulumi.IntOutput `pulumi:"duration"`
	// Specifies the conference media encryption mode.
	// **0**: Adaptive encryption.
	// **1**: Force encryption.
	// **2**: Do not encrypt.
	EncryptMode pulumi.IntOutput `pulumi:"encryptMode"`
	// The common attendee meeting link address.
	GuestJoinUri pulumi.StringOutput `pulumi:"guestJoinUri"`
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord pulumi.IntOutput `pulumi:"isAutoRecord"`
	// Specifies whether to record auxiliary stream.
	// + **0**: Do not record.
	// + **1**: Record.
	IsRecordAuxStream pulumi.IntOutput                  `pulumi:"isRecordAuxStream"`
	JoinPasswords     ConferenceJoinPasswordArrayOutput `pulumi:"joinPasswords"`
	// Specifies the default language of the conference, the default value is defined by the
	// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
	// The valid values are as follows:
	// + **zh-CN**: Simplified Chinese.
	// + **en-US**: US English.
	Language pulumi.StringOutput `pulumi:"language"`
	// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	LiveAddress pulumi.StringOutput `pulumi:"liveAddress"`
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes pulumi.StringArrayOutput `pulumi:"mediaTypes"`
	// Specifies the cloud meeting room ID.
	MeetingRoomId pulumi.StringOutput `pulumi:"meetingRoomId"`
	// Specifies the number of parties in the conference, the maximum number of
	// participants in the conference. Defaults to **0** (Unlimited).
	ParticipantNumber pulumi.IntPtrOutput `pulumi:"participantNumber"`
	// Specifies the attendee list.
	// The object structure is documented below.
	Participants ConferenceParticipantArrayOutput `pulumi:"participants"`
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType pulumi.IntOutput `pulumi:"recordAuthType"`
	// Specifies the recording type.
	// + **0**: Disabled.
	// + **1**: Live broadcast.
	// + **2**: Record and broadcast.
	// + **3**: Live + Recording.
	RecordType pulumi.IntOutput `pulumi:"recordType"`
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// The conference status, the valid values are as follows:
	// + **Schedule**: the conference is in schedule.
	// + **Created**: The conference is in progress.
	Status pulumi.StringOutput `pulumi:"status"`
	// The list of periodic sub-conferences.
	// The object structure is documented below.
	Subconferences ConferenceSubconferenceArrayOutput `pulumi:"subconferences"`
	// Specifies the time zone information of the conference time in the conference
	// notification. For time zone information, refer to the time zone mapping relationship.
	TimezoneId pulumi.IntOutput `pulumi:"timezoneId"`
	// Specifies the conference topic. The topic can contain `1` to `128` characters.
	Topic pulumi.StringOutput `pulumi:"topic"`
	// Specifies the user ID of the participant.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewConference registers a new resource with the given unique name, arguments, and options.
func NewConference(ctx *pulumi.Context,
	name string, args *ConferenceArgs, opts ...pulumi.ResourceOption) (*Conference, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.MeetingRoomId == nil {
		return nil, errors.New("invalid value for required argument 'MeetingRoomId'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	var resource Conference
	err := ctx.RegisterResource("huaweicloud:Meeting/conference:Conference", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConference gets an existing Conference resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConference(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConferenceState, opts ...pulumi.ResourceOption) (*Conference, error) {
	var resource Conference
	err := ctx.ReadResource("huaweicloud:Meeting/conference:Conference", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Conference resources.
type conferenceState struct {
	// The access number of the conference.
	AccessNumber *string `pulumi:"accessNumber"`
	// Specifies the (HUAWEI Cloud meeting) user account name to which the
	// meeting initiator belongs. Changing this parameter will create a new resource.
	AccountName *string `pulumi:"accountName"`
	// Specifies the user password.
	// Required if `accountName` is set. Changing this parameter will create a new resource.
	AccountPassword *string `pulumi:"accountPassword"`
	// Specifies the ID of the Third-party application.
	// Changing this parameter will create a new resource.
	AppId *string `pulumi:"appId"`
	// Specifies the Key information of the Third-party APP.
	// Required if `appId` is set. Changing this parameter will create a new resource.
	AppKey *string `pulumi:"appKey"`
	// The audience meeting link address.
	AudienceJoinUri *string `pulumi:"audienceJoinUri"`
	// Specifies the auxiliary streaming address, the maximum length is 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	AuxAddress *string `pulumi:"auxAddress"`
	// The host meeting link address.
	ChairJoinUri *string `pulumi:"chairJoinUri"`
	// The conference type, the valid values are as follows:
	// + **FUTURE**
	// + **IMMEDIATELY**
	// + **CYCLE**
	ConferenceType *string `pulumi:"conferenceType"`
	// The conference UUID.
	ConferenceUuid *string `pulumi:"conferenceUuid"`
	// Specifies the other conference configurations.
	// The object structure is documented below.
	Configuration *ConferenceConfiguration `pulumi:"configuration"`
	// Specifies the corporation ID.
	// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
	// Changing this parameter will create a new resource.
	CorpId *string `pulumi:"corpId"`
	// Specifies the configurations of the cyclical conference.
	// The object structure is documented below.
	CycleParams *ConferenceCycleParams `pulumi:"cycleParams"`
	// Specifies the duration of the conference, in minutes.
	// The valid value is range from `15` to `1440`, defaults to `30`.
	Duration *int `pulumi:"duration"`
	// Specifies the conference media encryption mode.
	// **0**: Adaptive encryption.
	// **1**: Force encryption.
	// **2**: Do not encrypt.
	EncryptMode *int `pulumi:"encryptMode"`
	// The common attendee meeting link address.
	GuestJoinUri *string `pulumi:"guestJoinUri"`
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord *int `pulumi:"isAutoRecord"`
	// Specifies whether to record auxiliary stream.
	// + **0**: Do not record.
	// + **1**: Record.
	IsRecordAuxStream *int                     `pulumi:"isRecordAuxStream"`
	JoinPasswords     []ConferenceJoinPassword `pulumi:"joinPasswords"`
	// Specifies the default language of the conference, the default value is defined by the
	// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
	// The valid values are as follows:
	// + **zh-CN**: Simplified Chinese.
	// + **en-US**: US English.
	Language *string `pulumi:"language"`
	// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	LiveAddress *string `pulumi:"liveAddress"`
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes []string `pulumi:"mediaTypes"`
	// Specifies the cloud meeting room ID.
	MeetingRoomId *string `pulumi:"meetingRoomId"`
	// Specifies the number of parties in the conference, the maximum number of
	// participants in the conference. Defaults to **0** (Unlimited).
	ParticipantNumber *int `pulumi:"participantNumber"`
	// Specifies the attendee list.
	// The object structure is documented below.
	Participants []ConferenceParticipant `pulumi:"participants"`
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType *int `pulumi:"recordAuthType"`
	// Specifies the recording type.
	// + **0**: Disabled.
	// + **1**: Live broadcast.
	// + **2**: Record and broadcast.
	// + **3**: Live + Recording.
	RecordType *int `pulumi:"recordType"`
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime *string `pulumi:"startTime"`
	// The conference status, the valid values are as follows:
	// + **Schedule**: the conference is in schedule.
	// + **Created**: The conference is in progress.
	Status *string `pulumi:"status"`
	// The list of periodic sub-conferences.
	// The object structure is documented below.
	Subconferences []ConferenceSubconference `pulumi:"subconferences"`
	// Specifies the time zone information of the conference time in the conference
	// notification. For time zone information, refer to the time zone mapping relationship.
	TimezoneId *int `pulumi:"timezoneId"`
	// Specifies the conference topic. The topic can contain `1` to `128` characters.
	Topic *string `pulumi:"topic"`
	// Specifies the user ID of the participant.
	UserId *string `pulumi:"userId"`
}

type ConferenceState struct {
	// The access number of the conference.
	AccessNumber pulumi.StringPtrInput
	// Specifies the (HUAWEI Cloud meeting) user account name to which the
	// meeting initiator belongs. Changing this parameter will create a new resource.
	AccountName pulumi.StringPtrInput
	// Specifies the user password.
	// Required if `accountName` is set. Changing this parameter will create a new resource.
	AccountPassword pulumi.StringPtrInput
	// Specifies the ID of the Third-party application.
	// Changing this parameter will create a new resource.
	AppId pulumi.StringPtrInput
	// Specifies the Key information of the Third-party APP.
	// Required if `appId` is set. Changing this parameter will create a new resource.
	AppKey pulumi.StringPtrInput
	// The audience meeting link address.
	AudienceJoinUri pulumi.StringPtrInput
	// Specifies the auxiliary streaming address, the maximum length is 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	AuxAddress pulumi.StringPtrInput
	// The host meeting link address.
	ChairJoinUri pulumi.StringPtrInput
	// The conference type, the valid values are as follows:
	// + **FUTURE**
	// + **IMMEDIATELY**
	// + **CYCLE**
	ConferenceType pulumi.StringPtrInput
	// The conference UUID.
	ConferenceUuid pulumi.StringPtrInput
	// Specifies the other conference configurations.
	// The object structure is documented below.
	Configuration ConferenceConfigurationPtrInput
	// Specifies the corporation ID.
	// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
	// Changing this parameter will create a new resource.
	CorpId pulumi.StringPtrInput
	// Specifies the configurations of the cyclical conference.
	// The object structure is documented below.
	CycleParams ConferenceCycleParamsPtrInput
	// Specifies the duration of the conference, in minutes.
	// The valid value is range from `15` to `1440`, defaults to `30`.
	Duration pulumi.IntPtrInput
	// Specifies the conference media encryption mode.
	// **0**: Adaptive encryption.
	// **1**: Force encryption.
	// **2**: Do not encrypt.
	EncryptMode pulumi.IntPtrInput
	// The common attendee meeting link address.
	GuestJoinUri pulumi.StringPtrInput
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord pulumi.IntPtrInput
	// Specifies whether to record auxiliary stream.
	// + **0**: Do not record.
	// + **1**: Record.
	IsRecordAuxStream pulumi.IntPtrInput
	JoinPasswords     ConferenceJoinPasswordArrayInput
	// Specifies the default language of the conference, the default value is defined by the
	// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
	// The valid values are as follows:
	// + **zh-CN**: Simplified Chinese.
	// + **en-US**: US English.
	Language pulumi.StringPtrInput
	// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	LiveAddress pulumi.StringPtrInput
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes pulumi.StringArrayInput
	// Specifies the cloud meeting room ID.
	MeetingRoomId pulumi.StringPtrInput
	// Specifies the number of parties in the conference, the maximum number of
	// participants in the conference. Defaults to **0** (Unlimited).
	ParticipantNumber pulumi.IntPtrInput
	// Specifies the attendee list.
	// The object structure is documented below.
	Participants ConferenceParticipantArrayInput
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType pulumi.IntPtrInput
	// Specifies the recording type.
	// + **0**: Disabled.
	// + **1**: Live broadcast.
	// + **2**: Record and broadcast.
	// + **3**: Live + Recording.
	RecordType pulumi.IntPtrInput
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime pulumi.StringPtrInput
	// The conference status, the valid values are as follows:
	// + **Schedule**: the conference is in schedule.
	// + **Created**: The conference is in progress.
	Status pulumi.StringPtrInput
	// The list of periodic sub-conferences.
	// The object structure is documented below.
	Subconferences ConferenceSubconferenceArrayInput
	// Specifies the time zone information of the conference time in the conference
	// notification. For time zone information, refer to the time zone mapping relationship.
	TimezoneId pulumi.IntPtrInput
	// Specifies the conference topic. The topic can contain `1` to `128` characters.
	Topic pulumi.StringPtrInput
	// Specifies the user ID of the participant.
	UserId pulumi.StringPtrInput
}

func (ConferenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*conferenceState)(nil)).Elem()
}

type conferenceArgs struct {
	// Specifies the (HUAWEI Cloud meeting) user account name to which the
	// meeting initiator belongs. Changing this parameter will create a new resource.
	AccountName *string `pulumi:"accountName"`
	// Specifies the user password.
	// Required if `accountName` is set. Changing this parameter will create a new resource.
	AccountPassword *string `pulumi:"accountPassword"`
	// Specifies the ID of the Third-party application.
	// Changing this parameter will create a new resource.
	AppId *string `pulumi:"appId"`
	// Specifies the Key information of the Third-party APP.
	// Required if `appId` is set. Changing this parameter will create a new resource.
	AppKey *string `pulumi:"appKey"`
	// Specifies the auxiliary streaming address, the maximum length is 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	AuxAddress *string `pulumi:"auxAddress"`
	// Specifies the other conference configurations.
	// The object structure is documented below.
	Configuration *ConferenceConfiguration `pulumi:"configuration"`
	// Specifies the corporation ID.
	// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
	// Changing this parameter will create a new resource.
	CorpId *string `pulumi:"corpId"`
	// Specifies the configurations of the cyclical conference.
	// The object structure is documented below.
	CycleParams *ConferenceCycleParams `pulumi:"cycleParams"`
	// Specifies the duration of the conference, in minutes.
	// The valid value is range from `15` to `1440`, defaults to `30`.
	Duration int `pulumi:"duration"`
	// Specifies the conference media encryption mode.
	// **0**: Adaptive encryption.
	// **1**: Force encryption.
	// **2**: Do not encrypt.
	EncryptMode *int `pulumi:"encryptMode"`
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord *int `pulumi:"isAutoRecord"`
	// Specifies whether to record auxiliary stream.
	// + **0**: Do not record.
	// + **1**: Record.
	IsRecordAuxStream *int `pulumi:"isRecordAuxStream"`
	// Specifies the default language of the conference, the default value is defined by the
	// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
	// The valid values are as follows:
	// + **zh-CN**: Simplified Chinese.
	// + **en-US**: US English.
	Language *string `pulumi:"language"`
	// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	LiveAddress *string `pulumi:"liveAddress"`
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes []string `pulumi:"mediaTypes"`
	// Specifies the cloud meeting room ID.
	MeetingRoomId string `pulumi:"meetingRoomId"`
	// Specifies the number of parties in the conference, the maximum number of
	// participants in the conference. Defaults to **0** (Unlimited).
	ParticipantNumber *int `pulumi:"participantNumber"`
	// Specifies the attendee list.
	// The object structure is documented below.
	Participants []ConferenceParticipant `pulumi:"participants"`
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType *int `pulumi:"recordAuthType"`
	// Specifies the recording type.
	// + **0**: Disabled.
	// + **1**: Live broadcast.
	// + **2**: Record and broadcast.
	// + **3**: Live + Recording.
	RecordType *int `pulumi:"recordType"`
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime *string `pulumi:"startTime"`
	// Specifies the time zone information of the conference time in the conference
	// notification. For time zone information, refer to the time zone mapping relationship.
	TimezoneId *int `pulumi:"timezoneId"`
	// Specifies the conference topic. The topic can contain `1` to `128` characters.
	Topic string `pulumi:"topic"`
	// Specifies the user ID of the participant.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Conference resource.
type ConferenceArgs struct {
	// Specifies the (HUAWEI Cloud meeting) user account name to which the
	// meeting initiator belongs. Changing this parameter will create a new resource.
	AccountName pulumi.StringPtrInput
	// Specifies the user password.
	// Required if `accountName` is set. Changing this parameter will create a new resource.
	AccountPassword pulumi.StringPtrInput
	// Specifies the ID of the Third-party application.
	// Changing this parameter will create a new resource.
	AppId pulumi.StringPtrInput
	// Specifies the Key information of the Third-party APP.
	// Required if `appId` is set. Changing this parameter will create a new resource.
	AppKey pulumi.StringPtrInput
	// Specifies the auxiliary streaming address, the maximum length is 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	AuxAddress pulumi.StringPtrInput
	// Specifies the other conference configurations.
	// The object structure is documented below.
	Configuration ConferenceConfigurationPtrInput
	// Specifies the corporation ID.
	// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
	// Changing this parameter will create a new resource.
	CorpId pulumi.StringPtrInput
	// Specifies the configurations of the cyclical conference.
	// The object structure is documented below.
	CycleParams ConferenceCycleParamsPtrInput
	// Specifies the duration of the conference, in minutes.
	// The valid value is range from `15` to `1440`, defaults to `30`.
	Duration pulumi.IntInput
	// Specifies the conference media encryption mode.
	// **0**: Adaptive encryption.
	// **1**: Force encryption.
	// **2**: Do not encrypt.
	EncryptMode pulumi.IntPtrInput
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord pulumi.IntPtrInput
	// Specifies whether to record auxiliary stream.
	// + **0**: Do not record.
	// + **1**: Record.
	IsRecordAuxStream pulumi.IntPtrInput
	// Specifies the default language of the conference, the default value is defined by the
	// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
	// The valid values are as follows:
	// + **zh-CN**: Simplified Chinese.
	// + **en-US**: US English.
	Language pulumi.StringPtrInput
	// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
	// Only availabe if `recordType` is **2** or **3**.
	LiveAddress pulumi.StringPtrInput
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes pulumi.StringArrayInput
	// Specifies the cloud meeting room ID.
	MeetingRoomId pulumi.StringInput
	// Specifies the number of parties in the conference, the maximum number of
	// participants in the conference. Defaults to **0** (Unlimited).
	ParticipantNumber pulumi.IntPtrInput
	// Specifies the attendee list.
	// The object structure is documented below.
	Participants ConferenceParticipantArrayInput
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType pulumi.IntPtrInput
	// Specifies the recording type.
	// + **0**: Disabled.
	// + **1**: Live broadcast.
	// + **2**: Record and broadcast.
	// + **3**: Live + Recording.
	RecordType pulumi.IntPtrInput
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime pulumi.StringPtrInput
	// Specifies the time zone information of the conference time in the conference
	// notification. For time zone information, refer to the time zone mapping relationship.
	TimezoneId pulumi.IntPtrInput
	// Specifies the conference topic. The topic can contain `1` to `128` characters.
	Topic pulumi.StringInput
	// Specifies the user ID of the participant.
	UserId pulumi.StringPtrInput
}

func (ConferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conferenceArgs)(nil)).Elem()
}

type ConferenceInput interface {
	pulumi.Input

	ToConferenceOutput() ConferenceOutput
	ToConferenceOutputWithContext(ctx context.Context) ConferenceOutput
}

func (*Conference) ElementType() reflect.Type {
	return reflect.TypeOf((**Conference)(nil)).Elem()
}

func (i *Conference) ToConferenceOutput() ConferenceOutput {
	return i.ToConferenceOutputWithContext(context.Background())
}

func (i *Conference) ToConferenceOutputWithContext(ctx context.Context) ConferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceOutput)
}

// ConferenceArrayInput is an input type that accepts ConferenceArray and ConferenceArrayOutput values.
// You can construct a concrete instance of `ConferenceArrayInput` via:
//
//	ConferenceArray{ ConferenceArgs{...} }
type ConferenceArrayInput interface {
	pulumi.Input

	ToConferenceArrayOutput() ConferenceArrayOutput
	ToConferenceArrayOutputWithContext(context.Context) ConferenceArrayOutput
}

type ConferenceArray []ConferenceInput

func (ConferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Conference)(nil)).Elem()
}

func (i ConferenceArray) ToConferenceArrayOutput() ConferenceArrayOutput {
	return i.ToConferenceArrayOutputWithContext(context.Background())
}

func (i ConferenceArray) ToConferenceArrayOutputWithContext(ctx context.Context) ConferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceArrayOutput)
}

// ConferenceMapInput is an input type that accepts ConferenceMap and ConferenceMapOutput values.
// You can construct a concrete instance of `ConferenceMapInput` via:
//
//	ConferenceMap{ "key": ConferenceArgs{...} }
type ConferenceMapInput interface {
	pulumi.Input

	ToConferenceMapOutput() ConferenceMapOutput
	ToConferenceMapOutputWithContext(context.Context) ConferenceMapOutput
}

type ConferenceMap map[string]ConferenceInput

func (ConferenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Conference)(nil)).Elem()
}

func (i ConferenceMap) ToConferenceMapOutput() ConferenceMapOutput {
	return i.ToConferenceMapOutputWithContext(context.Background())
}

func (i ConferenceMap) ToConferenceMapOutputWithContext(ctx context.Context) ConferenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceMapOutput)
}

type ConferenceOutput struct{ *pulumi.OutputState }

func (ConferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Conference)(nil)).Elem()
}

func (o ConferenceOutput) ToConferenceOutput() ConferenceOutput {
	return o
}

func (o ConferenceOutput) ToConferenceOutputWithContext(ctx context.Context) ConferenceOutput {
	return o
}

// The access number of the conference.
func (o ConferenceOutput) AccessNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.AccessNumber }).(pulumi.StringOutput)
}

// Specifies the (HUAWEI Cloud meeting) user account name to which the
// meeting initiator belongs. Changing this parameter will create a new resource.
func (o ConferenceOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringPtrOutput { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Specifies the user password.
// Required if `accountName` is set. Changing this parameter will create a new resource.
func (o ConferenceOutput) AccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringPtrOutput { return v.AccountPassword }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Third-party application.
// Changing this parameter will create a new resource.
func (o ConferenceOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

// Specifies the Key information of the Third-party APP.
// Required if `appId` is set. Changing this parameter will create a new resource.
func (o ConferenceOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringPtrOutput { return v.AppKey }).(pulumi.StringPtrOutput)
}

// The audience meeting link address.
func (o ConferenceOutput) AudienceJoinUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.AudienceJoinUri }).(pulumi.StringOutput)
}

// Specifies the auxiliary streaming address, the maximum length is 255 characters.
// Only availabe if `recordType` is **2** or **3**.
func (o ConferenceOutput) AuxAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.AuxAddress }).(pulumi.StringOutput)
}

// The host meeting link address.
func (o ConferenceOutput) ChairJoinUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.ChairJoinUri }).(pulumi.StringOutput)
}

// The conference type, the valid values are as follows:
// + **FUTURE**
// + **IMMEDIATELY**
// + **CYCLE**
func (o ConferenceOutput) ConferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.ConferenceType }).(pulumi.StringOutput)
}

// The conference UUID.
func (o ConferenceOutput) ConferenceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.ConferenceUuid }).(pulumi.StringOutput)
}

// Specifies the other conference configurations.
// The object structure is documented below.
func (o ConferenceOutput) Configuration() ConferenceConfigurationPtrOutput {
	return o.ApplyT(func(v *Conference) ConferenceConfigurationPtrOutput { return v.Configuration }).(ConferenceConfigurationPtrOutput)
}

// Specifies the corporation ID.
// Required if the application is used in multiple enterprises. Only availabe if `appId` is set.
// Changing this parameter will create a new resource.
func (o ConferenceOutput) CorpId() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.CorpId }).(pulumi.StringOutput)
}

// Specifies the configurations of the cyclical conference.
// The object structure is documented below.
func (o ConferenceOutput) CycleParams() ConferenceCycleParamsOutput {
	return o.ApplyT(func(v *Conference) ConferenceCycleParamsOutput { return v.CycleParams }).(ConferenceCycleParamsOutput)
}

// Specifies the duration of the conference, in minutes.
// The valid value is range from `15` to `1440`, defaults to `30`.
func (o ConferenceOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

// Specifies the conference media encryption mode.
// **0**: Adaptive encryption.
// **1**: Force encryption.
// **2**: Do not encrypt.
func (o ConferenceOutput) EncryptMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.EncryptMode }).(pulumi.IntOutput)
}

// The common attendee meeting link address.
func (o ConferenceOutput) GuestJoinUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.GuestJoinUri }).(pulumi.StringOutput)
}

// Specifies whether the conference automatically starts recording, it only takes
// effect when the recording type is:
// + **1**: Automatically start recording.
// + **0**: Do not start recording automatically.
func (o ConferenceOutput) IsAutoRecord() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.IsAutoRecord }).(pulumi.IntOutput)
}

// Specifies whether to record auxiliary stream.
// + **0**: Do not record.
// + **1**: Record.
func (o ConferenceOutput) IsRecordAuxStream() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.IsRecordAuxStream }).(pulumi.IntOutput)
}

func (o ConferenceOutput) JoinPasswords() ConferenceJoinPasswordArrayOutput {
	return o.ApplyT(func(v *Conference) ConferenceJoinPasswordArrayOutput { return v.JoinPasswords }).(ConferenceJoinPasswordArrayOutput)
}

// Specifies the default language of the conference, the default value is defined by the
// conference cloud service. For languages supported by the system, it is passed according to the RFC3066 specification.
// The valid values are as follows:
// + **zh-CN**: Simplified Chinese.
// + **en-US**: US English.
func (o ConferenceOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

// Specifies the mainstream live broadcast address, with a maximum of 255 characters.
// Only availabe if `recordType` is **2** or **3**.
func (o ConferenceOutput) LiveAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.LiveAddress }).(pulumi.StringOutput)
}

// Specifies the conference media type list.
// It consists of one or more enumerations, and the valid values are as follows:
//   - **Voice**: Voice.
//   - **Video**: SD video.
//   - **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
//     time, the system will select Video by default).
//   - **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
func (o ConferenceOutput) MediaTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringArrayOutput { return v.MediaTypes }).(pulumi.StringArrayOutput)
}

// Specifies the cloud meeting room ID.
func (o ConferenceOutput) MeetingRoomId() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.MeetingRoomId }).(pulumi.StringOutput)
}

// Specifies the number of parties in the conference, the maximum number of
// participants in the conference. Defaults to **0** (Unlimited).
func (o ConferenceOutput) ParticipantNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntPtrOutput { return v.ParticipantNumber }).(pulumi.IntPtrOutput)
}

// Specifies the attendee list.
// The object structure is documented below.
func (o ConferenceOutput) Participants() ConferenceParticipantArrayOutput {
	return o.ApplyT(func(v *Conference) ConferenceParticipantArrayOutput { return v.Participants }).(ConferenceParticipantArrayOutput)
}

// Specifies the recording authentication method.
// **0**: Viewable/downloadable via link.
// **1**: Enterprise users can watch/download.
// **2**: Attendees can watch/download.
func (o ConferenceOutput) RecordAuthType() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.RecordAuthType }).(pulumi.IntOutput)
}

// Specifies the recording type.
// + **0**: Disabled.
// + **1**: Live broadcast.
// + **2**: Record and broadcast.
// + **3**: Live + Recording.
func (o ConferenceOutput) RecordType() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.RecordType }).(pulumi.IntOutput)
}

// Specifies the conference start time (UTC time).
// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
// There is no need to set if you book a cyclical conference.
func (o ConferenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The conference status, the valid values are as follows:
// + **Schedule**: the conference is in schedule.
// + **Created**: The conference is in progress.
func (o ConferenceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The list of periodic sub-conferences.
// The object structure is documented below.
func (o ConferenceOutput) Subconferences() ConferenceSubconferenceArrayOutput {
	return o.ApplyT(func(v *Conference) ConferenceSubconferenceArrayOutput { return v.Subconferences }).(ConferenceSubconferenceArrayOutput)
}

// Specifies the time zone information of the conference time in the conference
// notification. For time zone information, refer to the time zone mapping relationship.
func (o ConferenceOutput) TimezoneId() pulumi.IntOutput {
	return o.ApplyT(func(v *Conference) pulumi.IntOutput { return v.TimezoneId }).(pulumi.IntOutput)
}

// Specifies the conference topic. The topic can contain `1` to `128` characters.
func (o ConferenceOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

// Specifies the user ID of the participant.
func (o ConferenceOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Conference) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type ConferenceArrayOutput struct{ *pulumi.OutputState }

func (ConferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Conference)(nil)).Elem()
}

func (o ConferenceArrayOutput) ToConferenceArrayOutput() ConferenceArrayOutput {
	return o
}

func (o ConferenceArrayOutput) ToConferenceArrayOutputWithContext(ctx context.Context) ConferenceArrayOutput {
	return o
}

func (o ConferenceArrayOutput) Index(i pulumi.IntInput) ConferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Conference {
		return vs[0].([]*Conference)[vs[1].(int)]
	}).(ConferenceOutput)
}

type ConferenceMapOutput struct{ *pulumi.OutputState }

func (ConferenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Conference)(nil)).Elem()
}

func (o ConferenceMapOutput) ToConferenceMapOutput() ConferenceMapOutput {
	return o
}

func (o ConferenceMapOutput) ToConferenceMapOutputWithContext(ctx context.Context) ConferenceMapOutput {
	return o
}

func (o ConferenceMapOutput) MapIndex(k pulumi.StringInput) ConferenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Conference {
		return vs[0].(map[string]*Conference)[vs[1].(string)]
	}).(ConferenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceInput)(nil)).Elem(), &Conference{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceArrayInput)(nil)).Elem(), ConferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceMapInput)(nil)).Elem(), ConferenceMap{})
	pulumi.RegisterOutputType(ConferenceOutput{})
	pulumi.RegisterOutputType(ConferenceArrayOutput{})
	pulumi.RegisterOutputType(ConferenceMapOutput{})
}

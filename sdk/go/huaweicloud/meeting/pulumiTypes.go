// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meeting

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConferenceConfiguration struct {
	// Specifies whether to allow guests to start conferences (only valid for random
	// ID conferences).
	AllowGuestStart *bool `pulumi:"allowGuestStart"`
	// Specifies the range to allow incoming calls.
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	// + **3**: The invited user.
	CallinRestriction *int `pulumi:"callinRestriction"`
	// Specifies the guest password (pure number which is 4 to 16 digits long).
	GuestPassword *string `pulumi:"guestPassword"`
	// Specifies whether the soft terminal is automatically muted when the guest joins the
	// conference.
	IsAutoMute *bool `pulumi:"isAutoMute"`
	// Specifies whether the guest is password-free (only valid for random
	// conferences).
	IsGuestFreePassword *bool `pulumi:"isGuestFreePassword"`
	// Specifies whether the guest joins the conference, whether the hard
	// terminal is automatically muted.
	IsHardTerminalAutoMute *bool `pulumi:"isHardTerminalAutoMute"`
	// Specifies whether to send conference calendar notifications.
	IsSendCalendar *bool `pulumi:"isSendCalendar"`
	// Specifies whether to send conference email notification.
	IsSendNotify *bool `pulumi:"isSendNotify"`
	// Specifies whether to send conference SMS notification.
	IsSendSms *bool `pulumi:"isSendSms"`
	// Specifies the Automatically extend duration, the valid value is range from `0` to
	// `60`.
	ProlongTime *int `pulumi:"prolongTime"`
	// Specifies whether to open the waiting room (only valid for RTC enterprises).
	WaitingRoomEnabled *bool `pulumi:"waitingRoomEnabled"`
}

// ConferenceConfigurationInput is an input type that accepts ConferenceConfigurationArgs and ConferenceConfigurationOutput values.
// You can construct a concrete instance of `ConferenceConfigurationInput` via:
//
//	ConferenceConfigurationArgs{...}
type ConferenceConfigurationInput interface {
	pulumi.Input

	ToConferenceConfigurationOutput() ConferenceConfigurationOutput
	ToConferenceConfigurationOutputWithContext(context.Context) ConferenceConfigurationOutput
}

type ConferenceConfigurationArgs struct {
	// Specifies whether to allow guests to start conferences (only valid for random
	// ID conferences).
	AllowGuestStart pulumi.BoolPtrInput `pulumi:"allowGuestStart"`
	// Specifies the range to allow incoming calls.
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	// + **3**: The invited user.
	CallinRestriction pulumi.IntPtrInput `pulumi:"callinRestriction"`
	// Specifies the guest password (pure number which is 4 to 16 digits long).
	GuestPassword pulumi.StringPtrInput `pulumi:"guestPassword"`
	// Specifies whether the soft terminal is automatically muted when the guest joins the
	// conference.
	IsAutoMute pulumi.BoolPtrInput `pulumi:"isAutoMute"`
	// Specifies whether the guest is password-free (only valid for random
	// conferences).
	IsGuestFreePassword pulumi.BoolPtrInput `pulumi:"isGuestFreePassword"`
	// Specifies whether the guest joins the conference, whether the hard
	// terminal is automatically muted.
	IsHardTerminalAutoMute pulumi.BoolPtrInput `pulumi:"isHardTerminalAutoMute"`
	// Specifies whether to send conference calendar notifications.
	IsSendCalendar pulumi.BoolPtrInput `pulumi:"isSendCalendar"`
	// Specifies whether to send conference email notification.
	IsSendNotify pulumi.BoolPtrInput `pulumi:"isSendNotify"`
	// Specifies whether to send conference SMS notification.
	IsSendSms pulumi.BoolPtrInput `pulumi:"isSendSms"`
	// Specifies the Automatically extend duration, the valid value is range from `0` to
	// `60`.
	ProlongTime pulumi.IntPtrInput `pulumi:"prolongTime"`
	// Specifies whether to open the waiting room (only valid for RTC enterprises).
	WaitingRoomEnabled pulumi.BoolPtrInput `pulumi:"waitingRoomEnabled"`
}

func (ConferenceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceConfiguration)(nil)).Elem()
}

func (i ConferenceConfigurationArgs) ToConferenceConfigurationOutput() ConferenceConfigurationOutput {
	return i.ToConferenceConfigurationOutputWithContext(context.Background())
}

func (i ConferenceConfigurationArgs) ToConferenceConfigurationOutputWithContext(ctx context.Context) ConferenceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceConfigurationOutput)
}

func (i ConferenceConfigurationArgs) ToConferenceConfigurationPtrOutput() ConferenceConfigurationPtrOutput {
	return i.ToConferenceConfigurationPtrOutputWithContext(context.Background())
}

func (i ConferenceConfigurationArgs) ToConferenceConfigurationPtrOutputWithContext(ctx context.Context) ConferenceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceConfigurationOutput).ToConferenceConfigurationPtrOutputWithContext(ctx)
}

// ConferenceConfigurationPtrInput is an input type that accepts ConferenceConfigurationArgs, ConferenceConfigurationPtr and ConferenceConfigurationPtrOutput values.
// You can construct a concrete instance of `ConferenceConfigurationPtrInput` via:
//
//	        ConferenceConfigurationArgs{...}
//
//	or:
//
//	        nil
type ConferenceConfigurationPtrInput interface {
	pulumi.Input

	ToConferenceConfigurationPtrOutput() ConferenceConfigurationPtrOutput
	ToConferenceConfigurationPtrOutputWithContext(context.Context) ConferenceConfigurationPtrOutput
}

type conferenceConfigurationPtrType ConferenceConfigurationArgs

func ConferenceConfigurationPtr(v *ConferenceConfigurationArgs) ConferenceConfigurationPtrInput {
	return (*conferenceConfigurationPtrType)(v)
}

func (*conferenceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConferenceConfiguration)(nil)).Elem()
}

func (i *conferenceConfigurationPtrType) ToConferenceConfigurationPtrOutput() ConferenceConfigurationPtrOutput {
	return i.ToConferenceConfigurationPtrOutputWithContext(context.Background())
}

func (i *conferenceConfigurationPtrType) ToConferenceConfigurationPtrOutputWithContext(ctx context.Context) ConferenceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceConfigurationPtrOutput)
}

type ConferenceConfigurationOutput struct{ *pulumi.OutputState }

func (ConferenceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceConfiguration)(nil)).Elem()
}

func (o ConferenceConfigurationOutput) ToConferenceConfigurationOutput() ConferenceConfigurationOutput {
	return o
}

func (o ConferenceConfigurationOutput) ToConferenceConfigurationOutputWithContext(ctx context.Context) ConferenceConfigurationOutput {
	return o
}

func (o ConferenceConfigurationOutput) ToConferenceConfigurationPtrOutput() ConferenceConfigurationPtrOutput {
	return o.ToConferenceConfigurationPtrOutputWithContext(context.Background())
}

func (o ConferenceConfigurationOutput) ToConferenceConfigurationPtrOutputWithContext(ctx context.Context) ConferenceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConferenceConfiguration) *ConferenceConfiguration {
		return &v
	}).(ConferenceConfigurationPtrOutput)
}

// Specifies whether to allow guests to start conferences (only valid for random
// ID conferences).
func (o ConferenceConfigurationOutput) AllowGuestStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.AllowGuestStart }).(pulumi.BoolPtrOutput)
}

// Specifies the range to allow incoming calls.
// + **0**: All users.
// + **2**: Users within the enterprise.
// + **3**: The invited user.
func (o ConferenceConfigurationOutput) CallinRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *int { return v.CallinRestriction }).(pulumi.IntPtrOutput)
}

// Specifies the guest password (pure number which is 4 to 16 digits long).
func (o ConferenceConfigurationOutput) GuestPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *string { return v.GuestPassword }).(pulumi.StringPtrOutput)
}

// Specifies whether the soft terminal is automatically muted when the guest joins the
// conference.
func (o ConferenceConfigurationOutput) IsAutoMute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsAutoMute }).(pulumi.BoolPtrOutput)
}

// Specifies whether the guest is password-free (only valid for random
// conferences).
func (o ConferenceConfigurationOutput) IsGuestFreePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsGuestFreePassword }).(pulumi.BoolPtrOutput)
}

// Specifies whether the guest joins the conference, whether the hard
// terminal is automatically muted.
func (o ConferenceConfigurationOutput) IsHardTerminalAutoMute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsHardTerminalAutoMute }).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference calendar notifications.
func (o ConferenceConfigurationOutput) IsSendCalendar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsSendCalendar }).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference email notification.
func (o ConferenceConfigurationOutput) IsSendNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsSendNotify }).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference SMS notification.
func (o ConferenceConfigurationOutput) IsSendSms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.IsSendSms }).(pulumi.BoolPtrOutput)
}

// Specifies the Automatically extend duration, the valid value is range from `0` to
// `60`.
func (o ConferenceConfigurationOutput) ProlongTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *int { return v.ProlongTime }).(pulumi.IntPtrOutput)
}

// Specifies whether to open the waiting room (only valid for RTC enterprises).
func (o ConferenceConfigurationOutput) WaitingRoomEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceConfiguration) *bool { return v.WaitingRoomEnabled }).(pulumi.BoolPtrOutput)
}

type ConferenceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ConferenceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConferenceConfiguration)(nil)).Elem()
}

func (o ConferenceConfigurationPtrOutput) ToConferenceConfigurationPtrOutput() ConferenceConfigurationPtrOutput {
	return o
}

func (o ConferenceConfigurationPtrOutput) ToConferenceConfigurationPtrOutputWithContext(ctx context.Context) ConferenceConfigurationPtrOutput {
	return o
}

func (o ConferenceConfigurationPtrOutput) Elem() ConferenceConfigurationOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) ConferenceConfiguration {
		if v != nil {
			return *v
		}
		var ret ConferenceConfiguration
		return ret
	}).(ConferenceConfigurationOutput)
}

// Specifies whether to allow guests to start conferences (only valid for random
// ID conferences).
func (o ConferenceConfigurationPtrOutput) AllowGuestStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AllowGuestStart
	}).(pulumi.BoolPtrOutput)
}

// Specifies the range to allow incoming calls.
// + **0**: All users.
// + **2**: Users within the enterprise.
// + **3**: The invited user.
func (o ConferenceConfigurationPtrOutput) CallinRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.CallinRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the guest password (pure number which is 4 to 16 digits long).
func (o ConferenceConfigurationPtrOutput) GuestPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.GuestPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the soft terminal is automatically muted when the guest joins the
// conference.
func (o ConferenceConfigurationPtrOutput) IsAutoMute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoMute
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the guest is password-free (only valid for random
// conferences).
func (o ConferenceConfigurationPtrOutput) IsGuestFreePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsGuestFreePassword
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the guest joins the conference, whether the hard
// terminal is automatically muted.
func (o ConferenceConfigurationPtrOutput) IsHardTerminalAutoMute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsHardTerminalAutoMute
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference calendar notifications.
func (o ConferenceConfigurationPtrOutput) IsSendCalendar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsSendCalendar
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference email notification.
func (o ConferenceConfigurationPtrOutput) IsSendNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsSendNotify
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to send conference SMS notification.
func (o ConferenceConfigurationPtrOutput) IsSendSms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsSendSms
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Automatically extend duration, the valid value is range from `0` to
// `60`.
func (o ConferenceConfigurationPtrOutput) ProlongTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ProlongTime
	}).(pulumi.IntPtrOutput)
}

// Specifies whether to open the waiting room (only valid for RTC enterprises).
func (o ConferenceConfigurationPtrOutput) WaitingRoomEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConferenceConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.WaitingRoomEnabled
	}).(pulumi.BoolPtrOutput)
}

type ConferenceCycleParams struct {
	// Specifies the period type. The valid values are as follows:
	// + **Day**
	// + **Week**
	// + **Month**
	Cycle string `pulumi:"cycle"`
	// Specifies the end date of the recurring conference.
	// The format is `YYYY-MM-DD`.
	EndDate string `pulumi:"endDate"`
	// Specifies the cycle interval.
	// For different `cycle` types, the value range of interval are as follows:
	// + **Day**: Means that it will be held every few days, and the valid value is range from `1` to `15`.
	// + **Week**: Means that it is held every few weeks, and the valid value is range from `1` to `5`.
	// + **Month**: Means every few months, the value range is `1` to `3`.
	Interval *int `pulumi:"interval"`
	// Specifies the conference point in the cycle. Only valid by **Week** and **Month**.
	// For different `cycle` types, the value range of elements are as follows:
	// + **Week**: The valid value is range from `0` to `6`. The **0** means Sunday, **6** means Saturday.
	// + **Month**: The valid range for the elements is `1` to `31`. If the value does not exist in the current month, the
	//   value means the end of the month.
	Points []int `pulumi:"points"`
	// Specifies the number of days for advance conference notice.
	// The valid value is range from `0` to `30`, defaults to `1`.
	PreRemind int `pulumi:"preRemind"`
	// Specifies the start date of the recurring conference.
	// The format is `YYYY-MM-DD`.
	StartDate string `pulumi:"startDate"`
}

// ConferenceCycleParamsInput is an input type that accepts ConferenceCycleParamsArgs and ConferenceCycleParamsOutput values.
// You can construct a concrete instance of `ConferenceCycleParamsInput` via:
//
//	ConferenceCycleParamsArgs{...}
type ConferenceCycleParamsInput interface {
	pulumi.Input

	ToConferenceCycleParamsOutput() ConferenceCycleParamsOutput
	ToConferenceCycleParamsOutputWithContext(context.Context) ConferenceCycleParamsOutput
}

type ConferenceCycleParamsArgs struct {
	// Specifies the period type. The valid values are as follows:
	// + **Day**
	// + **Week**
	// + **Month**
	Cycle pulumi.StringInput `pulumi:"cycle"`
	// Specifies the end date of the recurring conference.
	// The format is `YYYY-MM-DD`.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Specifies the cycle interval.
	// For different `cycle` types, the value range of interval are as follows:
	// + **Day**: Means that it will be held every few days, and the valid value is range from `1` to `15`.
	// + **Week**: Means that it is held every few weeks, and the valid value is range from `1` to `5`.
	// + **Month**: Means every few months, the value range is `1` to `3`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// Specifies the conference point in the cycle. Only valid by **Week** and **Month**.
	// For different `cycle` types, the value range of elements are as follows:
	// + **Week**: The valid value is range from `0` to `6`. The **0** means Sunday, **6** means Saturday.
	// + **Month**: The valid range for the elements is `1` to `31`. If the value does not exist in the current month, the
	//   value means the end of the month.
	Points pulumi.IntArrayInput `pulumi:"points"`
	// Specifies the number of days for advance conference notice.
	// The valid value is range from `0` to `30`, defaults to `1`.
	PreRemind pulumi.IntInput `pulumi:"preRemind"`
	// Specifies the start date of the recurring conference.
	// The format is `YYYY-MM-DD`.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (ConferenceCycleParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceCycleParams)(nil)).Elem()
}

func (i ConferenceCycleParamsArgs) ToConferenceCycleParamsOutput() ConferenceCycleParamsOutput {
	return i.ToConferenceCycleParamsOutputWithContext(context.Background())
}

func (i ConferenceCycleParamsArgs) ToConferenceCycleParamsOutputWithContext(ctx context.Context) ConferenceCycleParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceCycleParamsOutput)
}

func (i ConferenceCycleParamsArgs) ToConferenceCycleParamsPtrOutput() ConferenceCycleParamsPtrOutput {
	return i.ToConferenceCycleParamsPtrOutputWithContext(context.Background())
}

func (i ConferenceCycleParamsArgs) ToConferenceCycleParamsPtrOutputWithContext(ctx context.Context) ConferenceCycleParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceCycleParamsOutput).ToConferenceCycleParamsPtrOutputWithContext(ctx)
}

// ConferenceCycleParamsPtrInput is an input type that accepts ConferenceCycleParamsArgs, ConferenceCycleParamsPtr and ConferenceCycleParamsPtrOutput values.
// You can construct a concrete instance of `ConferenceCycleParamsPtrInput` via:
//
//	        ConferenceCycleParamsArgs{...}
//
//	or:
//
//	        nil
type ConferenceCycleParamsPtrInput interface {
	pulumi.Input

	ToConferenceCycleParamsPtrOutput() ConferenceCycleParamsPtrOutput
	ToConferenceCycleParamsPtrOutputWithContext(context.Context) ConferenceCycleParamsPtrOutput
}

type conferenceCycleParamsPtrType ConferenceCycleParamsArgs

func ConferenceCycleParamsPtr(v *ConferenceCycleParamsArgs) ConferenceCycleParamsPtrInput {
	return (*conferenceCycleParamsPtrType)(v)
}

func (*conferenceCycleParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConferenceCycleParams)(nil)).Elem()
}

func (i *conferenceCycleParamsPtrType) ToConferenceCycleParamsPtrOutput() ConferenceCycleParamsPtrOutput {
	return i.ToConferenceCycleParamsPtrOutputWithContext(context.Background())
}

func (i *conferenceCycleParamsPtrType) ToConferenceCycleParamsPtrOutputWithContext(ctx context.Context) ConferenceCycleParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceCycleParamsPtrOutput)
}

type ConferenceCycleParamsOutput struct{ *pulumi.OutputState }

func (ConferenceCycleParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceCycleParams)(nil)).Elem()
}

func (o ConferenceCycleParamsOutput) ToConferenceCycleParamsOutput() ConferenceCycleParamsOutput {
	return o
}

func (o ConferenceCycleParamsOutput) ToConferenceCycleParamsOutputWithContext(ctx context.Context) ConferenceCycleParamsOutput {
	return o
}

func (o ConferenceCycleParamsOutput) ToConferenceCycleParamsPtrOutput() ConferenceCycleParamsPtrOutput {
	return o.ToConferenceCycleParamsPtrOutputWithContext(context.Background())
}

func (o ConferenceCycleParamsOutput) ToConferenceCycleParamsPtrOutputWithContext(ctx context.Context) ConferenceCycleParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConferenceCycleParams) *ConferenceCycleParams {
		return &v
	}).(ConferenceCycleParamsPtrOutput)
}

// Specifies the period type. The valid values are as follows:
// + **Day**
// + **Week**
// + **Month**
func (o ConferenceCycleParamsOutput) Cycle() pulumi.StringOutput {
	return o.ApplyT(func(v ConferenceCycleParams) string { return v.Cycle }).(pulumi.StringOutput)
}

// Specifies the end date of the recurring conference.
// The format is `YYYY-MM-DD`.
func (o ConferenceCycleParamsOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v ConferenceCycleParams) string { return v.EndDate }).(pulumi.StringOutput)
}

// Specifies the cycle interval.
// For different `cycle` types, the value range of interval are as follows:
// + **Day**: Means that it will be held every few days, and the valid value is range from `1` to `15`.
// + **Week**: Means that it is held every few weeks, and the valid value is range from `1` to `5`.
// + **Month**: Means every few months, the value range is `1` to `3`.
func (o ConferenceCycleParamsOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceCycleParams) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Specifies the conference point in the cycle. Only valid by **Week** and **Month**.
// For different `cycle` types, the value range of elements are as follows:
//   - **Week**: The valid value is range from `0` to `6`. The **0** means Sunday, **6** means Saturday.
//   - **Month**: The valid range for the elements is `1` to `31`. If the value does not exist in the current month, the
//     value means the end of the month.
func (o ConferenceCycleParamsOutput) Points() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ConferenceCycleParams) []int { return v.Points }).(pulumi.IntArrayOutput)
}

// Specifies the number of days for advance conference notice.
// The valid value is range from `0` to `30`, defaults to `1`.
func (o ConferenceCycleParamsOutput) PreRemind() pulumi.IntOutput {
	return o.ApplyT(func(v ConferenceCycleParams) int { return v.PreRemind }).(pulumi.IntOutput)
}

// Specifies the start date of the recurring conference.
// The format is `YYYY-MM-DD`.
func (o ConferenceCycleParamsOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v ConferenceCycleParams) string { return v.StartDate }).(pulumi.StringOutput)
}

type ConferenceCycleParamsPtrOutput struct{ *pulumi.OutputState }

func (ConferenceCycleParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConferenceCycleParams)(nil)).Elem()
}

func (o ConferenceCycleParamsPtrOutput) ToConferenceCycleParamsPtrOutput() ConferenceCycleParamsPtrOutput {
	return o
}

func (o ConferenceCycleParamsPtrOutput) ToConferenceCycleParamsPtrOutputWithContext(ctx context.Context) ConferenceCycleParamsPtrOutput {
	return o
}

func (o ConferenceCycleParamsPtrOutput) Elem() ConferenceCycleParamsOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) ConferenceCycleParams {
		if v != nil {
			return *v
		}
		var ret ConferenceCycleParams
		return ret
	}).(ConferenceCycleParamsOutput)
}

// Specifies the period type. The valid values are as follows:
// + **Day**
// + **Week**
// + **Month**
func (o ConferenceCycleParamsPtrOutput) Cycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) *string {
		if v == nil {
			return nil
		}
		return &v.Cycle
	}).(pulumi.StringPtrOutput)
}

// Specifies the end date of the recurring conference.
// The format is `YYYY-MM-DD`.
func (o ConferenceCycleParamsPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) *string {
		if v == nil {
			return nil
		}
		return &v.EndDate
	}).(pulumi.StringPtrOutput)
}

// Specifies the cycle interval.
// For different `cycle` types, the value range of interval are as follows:
// + **Day**: Means that it will be held every few days, and the valid value is range from `1` to `15`.
// + **Week**: Means that it is held every few weeks, and the valid value is range from `1` to `5`.
// + **Month**: Means every few months, the value range is `1` to `3`.
func (o ConferenceCycleParamsPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// Specifies the conference point in the cycle. Only valid by **Week** and **Month**.
// For different `cycle` types, the value range of elements are as follows:
//   - **Week**: The valid value is range from `0` to `6`. The **0** means Sunday, **6** means Saturday.
//   - **Month**: The valid range for the elements is `1` to `31`. If the value does not exist in the current month, the
//     value means the end of the month.
func (o ConferenceCycleParamsPtrOutput) Points() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) []int {
		if v == nil {
			return nil
		}
		return v.Points
	}).(pulumi.IntArrayOutput)
}

// Specifies the number of days for advance conference notice.
// The valid value is range from `0` to `30`, defaults to `1`.
func (o ConferenceCycleParamsPtrOutput) PreRemind() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) *int {
		if v == nil {
			return nil
		}
		return &v.PreRemind
	}).(pulumi.IntPtrOutput)
}

// Specifies the start date of the recurring conference.
// The format is `YYYY-MM-DD`.
func (o ConferenceCycleParamsPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConferenceCycleParams) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

type ConferenceJoinPassword struct {
	Guest *string `pulumi:"guest"`
	Host  *string `pulumi:"host"`
}

// ConferenceJoinPasswordInput is an input type that accepts ConferenceJoinPasswordArgs and ConferenceJoinPasswordOutput values.
// You can construct a concrete instance of `ConferenceJoinPasswordInput` via:
//
//	ConferenceJoinPasswordArgs{...}
type ConferenceJoinPasswordInput interface {
	pulumi.Input

	ToConferenceJoinPasswordOutput() ConferenceJoinPasswordOutput
	ToConferenceJoinPasswordOutputWithContext(context.Context) ConferenceJoinPasswordOutput
}

type ConferenceJoinPasswordArgs struct {
	Guest pulumi.StringPtrInput `pulumi:"guest"`
	Host  pulumi.StringPtrInput `pulumi:"host"`
}

func (ConferenceJoinPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceJoinPassword)(nil)).Elem()
}

func (i ConferenceJoinPasswordArgs) ToConferenceJoinPasswordOutput() ConferenceJoinPasswordOutput {
	return i.ToConferenceJoinPasswordOutputWithContext(context.Background())
}

func (i ConferenceJoinPasswordArgs) ToConferenceJoinPasswordOutputWithContext(ctx context.Context) ConferenceJoinPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceJoinPasswordOutput)
}

// ConferenceJoinPasswordArrayInput is an input type that accepts ConferenceJoinPasswordArray and ConferenceJoinPasswordArrayOutput values.
// You can construct a concrete instance of `ConferenceJoinPasswordArrayInput` via:
//
//	ConferenceJoinPasswordArray{ ConferenceJoinPasswordArgs{...} }
type ConferenceJoinPasswordArrayInput interface {
	pulumi.Input

	ToConferenceJoinPasswordArrayOutput() ConferenceJoinPasswordArrayOutput
	ToConferenceJoinPasswordArrayOutputWithContext(context.Context) ConferenceJoinPasswordArrayOutput
}

type ConferenceJoinPasswordArray []ConferenceJoinPasswordInput

func (ConferenceJoinPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceJoinPassword)(nil)).Elem()
}

func (i ConferenceJoinPasswordArray) ToConferenceJoinPasswordArrayOutput() ConferenceJoinPasswordArrayOutput {
	return i.ToConferenceJoinPasswordArrayOutputWithContext(context.Background())
}

func (i ConferenceJoinPasswordArray) ToConferenceJoinPasswordArrayOutputWithContext(ctx context.Context) ConferenceJoinPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceJoinPasswordArrayOutput)
}

type ConferenceJoinPasswordOutput struct{ *pulumi.OutputState }

func (ConferenceJoinPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceJoinPassword)(nil)).Elem()
}

func (o ConferenceJoinPasswordOutput) ToConferenceJoinPasswordOutput() ConferenceJoinPasswordOutput {
	return o
}

func (o ConferenceJoinPasswordOutput) ToConferenceJoinPasswordOutputWithContext(ctx context.Context) ConferenceJoinPasswordOutput {
	return o
}

func (o ConferenceJoinPasswordOutput) Guest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceJoinPassword) *string { return v.Guest }).(pulumi.StringPtrOutput)
}

func (o ConferenceJoinPasswordOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceJoinPassword) *string { return v.Host }).(pulumi.StringPtrOutput)
}

type ConferenceJoinPasswordArrayOutput struct{ *pulumi.OutputState }

func (ConferenceJoinPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceJoinPassword)(nil)).Elem()
}

func (o ConferenceJoinPasswordArrayOutput) ToConferenceJoinPasswordArrayOutput() ConferenceJoinPasswordArrayOutput {
	return o
}

func (o ConferenceJoinPasswordArrayOutput) ToConferenceJoinPasswordArrayOutputWithContext(ctx context.Context) ConferenceJoinPasswordArrayOutput {
	return o
}

func (o ConferenceJoinPasswordArrayOutput) Index(i pulumi.IntInput) ConferenceJoinPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConferenceJoinPassword {
		return vs[0].([]ConferenceJoinPassword)[vs[1].(int)]
	}).(ConferenceJoinPasswordOutput)
}

type ConferenceParticipant struct {
	// Specifies the account ID of the participant.
	AccountId *string `pulumi:"accountId"`
	// Specifies the email address.
	Email *string `pulumi:"email"`
	// Specifies whether to automatically invite this participant when the conference
	// starts. The valid values are as follows:
	// + **0**: Do not automatically invite.
	// + **1**: Automatic invitation.
	IsAutoInvite *int `pulumi:"isAutoInvite"`
	// Specifies whether the user needs to be automatically muted when joining the conference
	// (only effective when invited in the conference). The valid values are as follows:
	// + **0**: No mute.
	// + **1**: Mute.
	IsMute *int `pulumi:"isMute"`
	// Specifies the attendee name or nickname.
	Name *string `pulumi:"name"`
	// Specifies the SIP or TEL number, maximum of 127 characters.
	Phone *string `pulumi:"phone"`
	// Specifies the role in the conference. The valid values are as follows:
	// + **0**: Normal attendee.
	// + **1**: The conference chair.
	Role *int `pulumi:"role"`
	// Specifies the mobile number for SMS notification, maximum of 32 characters.
	Sms *string `pulumi:"sms"`
	// Specifies the call-in type. The valid values are as follows:
	// + **normal**: The soft terminal.
	// + **terminal**: The conference room or hard terminal.
	// + **outside**: The outside participant.
	// + **mobile**: The user's landline phone.
	// + **ideahub**: The ideahub.
	Type *string `pulumi:"type"`
	// Specifies the user ID of the participant.
	UserId *string `pulumi:"userId"`
}

// ConferenceParticipantInput is an input type that accepts ConferenceParticipantArgs and ConferenceParticipantOutput values.
// You can construct a concrete instance of `ConferenceParticipantInput` via:
//
//	ConferenceParticipantArgs{...}
type ConferenceParticipantInput interface {
	pulumi.Input

	ToConferenceParticipantOutput() ConferenceParticipantOutput
	ToConferenceParticipantOutputWithContext(context.Context) ConferenceParticipantOutput
}

type ConferenceParticipantArgs struct {
	// Specifies the account ID of the participant.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Specifies the email address.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Specifies whether to automatically invite this participant when the conference
	// starts. The valid values are as follows:
	// + **0**: Do not automatically invite.
	// + **1**: Automatic invitation.
	IsAutoInvite pulumi.IntPtrInput `pulumi:"isAutoInvite"`
	// Specifies whether the user needs to be automatically muted when joining the conference
	// (only effective when invited in the conference). The valid values are as follows:
	// + **0**: No mute.
	// + **1**: Mute.
	IsMute pulumi.IntPtrInput `pulumi:"isMute"`
	// Specifies the attendee name or nickname.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the SIP or TEL number, maximum of 127 characters.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// Specifies the role in the conference. The valid values are as follows:
	// + **0**: Normal attendee.
	// + **1**: The conference chair.
	Role pulumi.IntPtrInput `pulumi:"role"`
	// Specifies the mobile number for SMS notification, maximum of 32 characters.
	Sms pulumi.StringPtrInput `pulumi:"sms"`
	// Specifies the call-in type. The valid values are as follows:
	// + **normal**: The soft terminal.
	// + **terminal**: The conference room or hard terminal.
	// + **outside**: The outside participant.
	// + **mobile**: The user's landline phone.
	// + **ideahub**: The ideahub.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the user ID of the participant.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (ConferenceParticipantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceParticipant)(nil)).Elem()
}

func (i ConferenceParticipantArgs) ToConferenceParticipantOutput() ConferenceParticipantOutput {
	return i.ToConferenceParticipantOutputWithContext(context.Background())
}

func (i ConferenceParticipantArgs) ToConferenceParticipantOutputWithContext(ctx context.Context) ConferenceParticipantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceParticipantOutput)
}

// ConferenceParticipantArrayInput is an input type that accepts ConferenceParticipantArray and ConferenceParticipantArrayOutput values.
// You can construct a concrete instance of `ConferenceParticipantArrayInput` via:
//
//	ConferenceParticipantArray{ ConferenceParticipantArgs{...} }
type ConferenceParticipantArrayInput interface {
	pulumi.Input

	ToConferenceParticipantArrayOutput() ConferenceParticipantArrayOutput
	ToConferenceParticipantArrayOutputWithContext(context.Context) ConferenceParticipantArrayOutput
}

type ConferenceParticipantArray []ConferenceParticipantInput

func (ConferenceParticipantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceParticipant)(nil)).Elem()
}

func (i ConferenceParticipantArray) ToConferenceParticipantArrayOutput() ConferenceParticipantArrayOutput {
	return i.ToConferenceParticipantArrayOutputWithContext(context.Background())
}

func (i ConferenceParticipantArray) ToConferenceParticipantArrayOutputWithContext(ctx context.Context) ConferenceParticipantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceParticipantArrayOutput)
}

type ConferenceParticipantOutput struct{ *pulumi.OutputState }

func (ConferenceParticipantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceParticipant)(nil)).Elem()
}

func (o ConferenceParticipantOutput) ToConferenceParticipantOutput() ConferenceParticipantOutput {
	return o
}

func (o ConferenceParticipantOutput) ToConferenceParticipantOutputWithContext(ctx context.Context) ConferenceParticipantOutput {
	return o
}

// Specifies the account ID of the participant.
func (o ConferenceParticipantOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Specifies the email address.
func (o ConferenceParticipantOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Specifies whether to automatically invite this participant when the conference
// starts. The valid values are as follows:
// + **0**: Do not automatically invite.
// + **1**: Automatic invitation.
func (o ConferenceParticipantOutput) IsAutoInvite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *int { return v.IsAutoInvite }).(pulumi.IntPtrOutput)
}

// Specifies whether the user needs to be automatically muted when joining the conference
// (only effective when invited in the conference). The valid values are as follows:
// + **0**: No mute.
// + **1**: Mute.
func (o ConferenceParticipantOutput) IsMute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *int { return v.IsMute }).(pulumi.IntPtrOutput)
}

// Specifies the attendee name or nickname.
func (o ConferenceParticipantOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the SIP or TEL number, maximum of 127 characters.
func (o ConferenceParticipantOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// Specifies the role in the conference. The valid values are as follows:
// + **0**: Normal attendee.
// + **1**: The conference chair.
func (o ConferenceParticipantOutput) Role() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *int { return v.Role }).(pulumi.IntPtrOutput)
}

// Specifies the mobile number for SMS notification, maximum of 32 characters.
func (o ConferenceParticipantOutput) Sms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.Sms }).(pulumi.StringPtrOutput)
}

// Specifies the call-in type. The valid values are as follows:
// + **normal**: The soft terminal.
// + **terminal**: The conference room or hard terminal.
// + **outside**: The outside participant.
// + **mobile**: The user's landline phone.
// + **ideahub**: The ideahub.
func (o ConferenceParticipantOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the user ID of the participant.
func (o ConferenceParticipantOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceParticipant) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type ConferenceParticipantArrayOutput struct{ *pulumi.OutputState }

func (ConferenceParticipantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceParticipant)(nil)).Elem()
}

func (o ConferenceParticipantArrayOutput) ToConferenceParticipantArrayOutput() ConferenceParticipantArrayOutput {
	return o
}

func (o ConferenceParticipantArrayOutput) ToConferenceParticipantArrayOutputWithContext(ctx context.Context) ConferenceParticipantArrayOutput {
	return o
}

func (o ConferenceParticipantArrayOutput) Index(i pulumi.IntInput) ConferenceParticipantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConferenceParticipant {
		return vs[0].([]ConferenceParticipant)[vs[1].(int)]
	}).(ConferenceParticipantOutput)
}

type ConferenceSubconference struct {
	// The sub-conference end time.
	EndTime *string `pulumi:"endTime"`
	// The sub-conference ID.
	Id *string `pulumi:"id"`
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord *int `pulumi:"isAutoRecord"`
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes []string `pulumi:"mediaTypes"`
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType *int `pulumi:"recordAuthType"`
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime *string `pulumi:"startTime"`
	// The other configuration information of periodic subconferences.
	// The object structure is documented below.
	Subconfigurations []ConferenceSubconferenceSubconfiguration `pulumi:"subconfigurations"`
}

// ConferenceSubconferenceInput is an input type that accepts ConferenceSubconferenceArgs and ConferenceSubconferenceOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceInput` via:
//
//	ConferenceSubconferenceArgs{...}
type ConferenceSubconferenceInput interface {
	pulumi.Input

	ToConferenceSubconferenceOutput() ConferenceSubconferenceOutput
	ToConferenceSubconferenceOutputWithContext(context.Context) ConferenceSubconferenceOutput
}

type ConferenceSubconferenceArgs struct {
	// The sub-conference end time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The sub-conference ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies whether the conference automatically starts recording, it only takes
	// effect when the recording type is:
	// + **1**: Automatically start recording.
	// + **0**: Do not start recording automatically.
	IsAutoRecord pulumi.IntPtrInput `pulumi:"isAutoRecord"`
	// Specifies the conference media type list.
	// It consists of one or more enumerations, and the valid values are as follows:
	// + **Voice**: Voice.
	// + **Video**: SD video.
	// + **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
	//   time, the system will select Video by default).
	// + **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
	MediaTypes pulumi.StringArrayInput `pulumi:"mediaTypes"`
	// Specifies the recording authentication method.
	// **0**: Viewable/downloadable via link.
	// **1**: Enterprise users can watch/download.
	// **2**: Attendees can watch/download.
	RecordAuthType pulumi.IntPtrInput `pulumi:"recordAuthType"`
	// Specifies the conference start time (UTC time).
	// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
	// There is no need to set if you book a cyclical conference.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The other configuration information of periodic subconferences.
	// The object structure is documented below.
	Subconfigurations ConferenceSubconferenceSubconfigurationArrayInput `pulumi:"subconfigurations"`
}

func (ConferenceSubconferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconference)(nil)).Elem()
}

func (i ConferenceSubconferenceArgs) ToConferenceSubconferenceOutput() ConferenceSubconferenceOutput {
	return i.ToConferenceSubconferenceOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceArgs) ToConferenceSubconferenceOutputWithContext(ctx context.Context) ConferenceSubconferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceOutput)
}

// ConferenceSubconferenceArrayInput is an input type that accepts ConferenceSubconferenceArray and ConferenceSubconferenceArrayOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceArrayInput` via:
//
//	ConferenceSubconferenceArray{ ConferenceSubconferenceArgs{...} }
type ConferenceSubconferenceArrayInput interface {
	pulumi.Input

	ToConferenceSubconferenceArrayOutput() ConferenceSubconferenceArrayOutput
	ToConferenceSubconferenceArrayOutputWithContext(context.Context) ConferenceSubconferenceArrayOutput
}

type ConferenceSubconferenceArray []ConferenceSubconferenceInput

func (ConferenceSubconferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconference)(nil)).Elem()
}

func (i ConferenceSubconferenceArray) ToConferenceSubconferenceArrayOutput() ConferenceSubconferenceArrayOutput {
	return i.ToConferenceSubconferenceArrayOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceArray) ToConferenceSubconferenceArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceArrayOutput)
}

type ConferenceSubconferenceOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconference)(nil)).Elem()
}

func (o ConferenceSubconferenceOutput) ToConferenceSubconferenceOutput() ConferenceSubconferenceOutput {
	return o
}

func (o ConferenceSubconferenceOutput) ToConferenceSubconferenceOutputWithContext(ctx context.Context) ConferenceSubconferenceOutput {
	return o
}

// The sub-conference end time.
func (o ConferenceSubconferenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceSubconference) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The sub-conference ID.
func (o ConferenceSubconferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceSubconference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies whether the conference automatically starts recording, it only takes
// effect when the recording type is:
// + **1**: Automatically start recording.
// + **0**: Do not start recording automatically.
func (o ConferenceSubconferenceOutput) IsAutoRecord() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconference) *int { return v.IsAutoRecord }).(pulumi.IntPtrOutput)
}

// Specifies the conference media type list.
// It consists of one or more enumerations, and the valid values are as follows:
//   - **Voice**: Voice.
//   - **Video**: SD video.
//   - **HDVideo**: High-definition video (mutually exclusive with Video, if Video and HDVideo are selected at the same
//     time, the system will select Video by default).
//   - **Data**: Multimedia (If omitted, the system configuration will determines whether to automatically add **Data**).
func (o ConferenceSubconferenceOutput) MediaTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConferenceSubconference) []string { return v.MediaTypes }).(pulumi.StringArrayOutput)
}

// Specifies the recording authentication method.
// **0**: Viewable/downloadable via link.
// **1**: Enterprise users can watch/download.
// **2**: Attendees can watch/download.
func (o ConferenceSubconferenceOutput) RecordAuthType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconference) *int { return v.RecordAuthType }).(pulumi.IntPtrOutput)
}

// Specifies the conference start time (UTC time).
// The time format is `YYYY-MM-DD hh:mm`, e.g. `2006-01-02 15:04`.
// There is no need to set if you book a cyclical conference.
func (o ConferenceSubconferenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConferenceSubconference) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The other configuration information of periodic subconferences.
// The object structure is documented below.
func (o ConferenceSubconferenceOutput) Subconfigurations() ConferenceSubconferenceSubconfigurationArrayOutput {
	return o.ApplyT(func(v ConferenceSubconference) []ConferenceSubconferenceSubconfiguration { return v.Subconfigurations }).(ConferenceSubconferenceSubconfigurationArrayOutput)
}

type ConferenceSubconferenceArrayOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconference)(nil)).Elem()
}

func (o ConferenceSubconferenceArrayOutput) ToConferenceSubconferenceArrayOutput() ConferenceSubconferenceArrayOutput {
	return o
}

func (o ConferenceSubconferenceArrayOutput) ToConferenceSubconferenceArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceArrayOutput {
	return o
}

func (o ConferenceSubconferenceArrayOutput) Index(i pulumi.IntInput) ConferenceSubconferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConferenceSubconference {
		return vs[0].([]ConferenceSubconference)[vs[1].(int)]
	}).(ConferenceSubconferenceOutput)
}

type ConferenceSubconferenceSubconfiguration struct {
	// Specifies whether to allow guests to start conferences (only valid for random
	// ID conferences).
	AllowGuestStart *bool `pulumi:"allowGuestStart"`
	// The range that the webinar audience is allowed to call in.
	// The valid values are as follows:
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	AudienceCallinRestriction *int `pulumi:"audienceCallinRestriction"`
	// Specifies the range to allow incoming calls.
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	// + **3**: The invited user.
	CallinRestriction    *int                                                        `pulumi:"callinRestriction"`
	ShowAudiencePolicies []ConferenceSubconferenceSubconfigurationShowAudiencePolicy `pulumi:"showAudiencePolicies"`
	// Specifies whether to open the waiting room (only valid for RTC enterprises).
	WaitingRoomEnabled *bool `pulumi:"waitingRoomEnabled"`
}

// ConferenceSubconferenceSubconfigurationInput is an input type that accepts ConferenceSubconferenceSubconfigurationArgs and ConferenceSubconferenceSubconfigurationOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceSubconfigurationInput` via:
//
//	ConferenceSubconferenceSubconfigurationArgs{...}
type ConferenceSubconferenceSubconfigurationInput interface {
	pulumi.Input

	ToConferenceSubconferenceSubconfigurationOutput() ConferenceSubconferenceSubconfigurationOutput
	ToConferenceSubconferenceSubconfigurationOutputWithContext(context.Context) ConferenceSubconferenceSubconfigurationOutput
}

type ConferenceSubconferenceSubconfigurationArgs struct {
	// Specifies whether to allow guests to start conferences (only valid for random
	// ID conferences).
	AllowGuestStart pulumi.BoolPtrInput `pulumi:"allowGuestStart"`
	// The range that the webinar audience is allowed to call in.
	// The valid values are as follows:
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	AudienceCallinRestriction pulumi.IntPtrInput `pulumi:"audienceCallinRestriction"`
	// Specifies the range to allow incoming calls.
	// + **0**: All users.
	// + **2**: Users within the enterprise.
	// + **3**: The invited user.
	CallinRestriction    pulumi.IntPtrInput                                                  `pulumi:"callinRestriction"`
	ShowAudiencePolicies ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayInput `pulumi:"showAudiencePolicies"`
	// Specifies whether to open the waiting room (only valid for RTC enterprises).
	WaitingRoomEnabled pulumi.BoolPtrInput `pulumi:"waitingRoomEnabled"`
}

func (ConferenceSubconferenceSubconfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconferenceSubconfiguration)(nil)).Elem()
}

func (i ConferenceSubconferenceSubconfigurationArgs) ToConferenceSubconferenceSubconfigurationOutput() ConferenceSubconferenceSubconfigurationOutput {
	return i.ToConferenceSubconferenceSubconfigurationOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceSubconfigurationArgs) ToConferenceSubconferenceSubconfigurationOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceSubconfigurationOutput)
}

// ConferenceSubconferenceSubconfigurationArrayInput is an input type that accepts ConferenceSubconferenceSubconfigurationArray and ConferenceSubconferenceSubconfigurationArrayOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceSubconfigurationArrayInput` via:
//
//	ConferenceSubconferenceSubconfigurationArray{ ConferenceSubconferenceSubconfigurationArgs{...} }
type ConferenceSubconferenceSubconfigurationArrayInput interface {
	pulumi.Input

	ToConferenceSubconferenceSubconfigurationArrayOutput() ConferenceSubconferenceSubconfigurationArrayOutput
	ToConferenceSubconferenceSubconfigurationArrayOutputWithContext(context.Context) ConferenceSubconferenceSubconfigurationArrayOutput
}

type ConferenceSubconferenceSubconfigurationArray []ConferenceSubconferenceSubconfigurationInput

func (ConferenceSubconferenceSubconfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconferenceSubconfiguration)(nil)).Elem()
}

func (i ConferenceSubconferenceSubconfigurationArray) ToConferenceSubconferenceSubconfigurationArrayOutput() ConferenceSubconferenceSubconfigurationArrayOutput {
	return i.ToConferenceSubconferenceSubconfigurationArrayOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceSubconfigurationArray) ToConferenceSubconferenceSubconfigurationArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceSubconfigurationArrayOutput)
}

type ConferenceSubconferenceSubconfigurationOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceSubconfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconferenceSubconfiguration)(nil)).Elem()
}

func (o ConferenceSubconferenceSubconfigurationOutput) ToConferenceSubconferenceSubconfigurationOutput() ConferenceSubconferenceSubconfigurationOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationOutput) ToConferenceSubconferenceSubconfigurationOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationOutput {
	return o
}

// Specifies whether to allow guests to start conferences (only valid for random
// ID conferences).
func (o ConferenceSubconferenceSubconfigurationOutput) AllowGuestStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfiguration) *bool { return v.AllowGuestStart }).(pulumi.BoolPtrOutput)
}

// The range that the webinar audience is allowed to call in.
// The valid values are as follows:
// + **0**: All users.
// + **2**: Users within the enterprise.
func (o ConferenceSubconferenceSubconfigurationOutput) AudienceCallinRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfiguration) *int { return v.AudienceCallinRestriction }).(pulumi.IntPtrOutput)
}

// Specifies the range to allow incoming calls.
// + **0**: All users.
// + **2**: Users within the enterprise.
// + **3**: The invited user.
func (o ConferenceSubconferenceSubconfigurationOutput) CallinRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfiguration) *int { return v.CallinRestriction }).(pulumi.IntPtrOutput)
}

func (o ConferenceSubconferenceSubconfigurationOutput) ShowAudiencePolicies() ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfiguration) []ConferenceSubconferenceSubconfigurationShowAudiencePolicy {
		return v.ShowAudiencePolicies
	}).(ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput)
}

// Specifies whether to open the waiting room (only valid for RTC enterprises).
func (o ConferenceSubconferenceSubconfigurationOutput) WaitingRoomEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfiguration) *bool { return v.WaitingRoomEnabled }).(pulumi.BoolPtrOutput)
}

type ConferenceSubconferenceSubconfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceSubconfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconferenceSubconfiguration)(nil)).Elem()
}

func (o ConferenceSubconferenceSubconfigurationArrayOutput) ToConferenceSubconferenceSubconfigurationArrayOutput() ConferenceSubconferenceSubconfigurationArrayOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationArrayOutput) ToConferenceSubconferenceSubconfigurationArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationArrayOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationArrayOutput) Index(i pulumi.IntInput) ConferenceSubconferenceSubconfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConferenceSubconferenceSubconfiguration {
		return vs[0].([]ConferenceSubconferenceSubconfiguration)[vs[1].(int)]
	}).(ConferenceSubconferenceSubconfigurationOutput)
}

type ConferenceSubconferenceSubconfigurationShowAudiencePolicy struct {
	// Specifies the basic number of people, the valid values is range from `0` to `10,000`.
	BaseAudienceCount *int `pulumi:"baseAudienceCount"`
	// Audience display strategy: The server is used to calculate the number of audiences and send it to the client
	// to control the audience display.
	// + **0**: Do not display.
	// + **1**: Multiply display the number of participants, based on the real-time number of participants or the cumulative
	//   number of participants, the multiplication setting can be performed.
	Mode *int `pulumi:"mode"`
	// Specifies the multiplier. The valid values is range from `0` to `10`, it can be set to 1 decimal place.
	Multiple *float64 `pulumi:"multiple"`
}

// ConferenceSubconferenceSubconfigurationShowAudiencePolicyInput is an input type that accepts ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs and ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceSubconfigurationShowAudiencePolicyInput` via:
//
//	ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs{...}
type ConferenceSubconferenceSubconfigurationShowAudiencePolicyInput interface {
	pulumi.Input

	ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput
	ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutputWithContext(context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput
}

type ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs struct {
	// Specifies the basic number of people, the valid values is range from `0` to `10,000`.
	BaseAudienceCount pulumi.IntPtrInput `pulumi:"baseAudienceCount"`
	// Audience display strategy: The server is used to calculate the number of audiences and send it to the client
	// to control the audience display.
	// + **0**: Do not display.
	// + **1**: Multiply display the number of participants, based on the real-time number of participants or the cumulative
	//   number of participants, the multiplication setting can be performed.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Specifies the multiplier. The valid values is range from `0` to `10`, it can be set to 1 decimal place.
	Multiple pulumi.Float64PtrInput `pulumi:"multiple"`
}

func (ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconferenceSubconfigurationShowAudiencePolicy)(nil)).Elem()
}

func (i ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput {
	return i.ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput)
}

// ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayInput is an input type that accepts ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray and ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput values.
// You can construct a concrete instance of `ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayInput` via:
//
//	ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray{ ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs{...} }
type ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayInput interface {
	pulumi.Input

	ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput
	ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutputWithContext(context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput
}

type ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray []ConferenceSubconferenceSubconfigurationShowAudiencePolicyInput

func (ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconferenceSubconfigurationShowAudiencePolicy)(nil)).Elem()
}

func (i ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput {
	return i.ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutputWithContext(context.Background())
}

func (i ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput)
}

type ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConferenceSubconferenceSubconfigurationShowAudiencePolicy)(nil)).Elem()
}

func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput {
	return o
}

// Specifies the basic number of people, the valid values is range from `0` to `10,000`.
func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) BaseAudienceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfigurationShowAudiencePolicy) *int { return v.BaseAudienceCount }).(pulumi.IntPtrOutput)
}

// Audience display strategy: The server is used to calculate the number of audiences and send it to the client
// to control the audience display.
//   - **0**: Do not display.
//   - **1**: Multiply display the number of participants, based on the real-time number of participants or the cumulative
//     number of participants, the multiplication setting can be performed.
func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfigurationShowAudiencePolicy) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Specifies the multiplier. The valid values is range from `0` to `10`, it can be set to 1 decimal place.
func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput) Multiple() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConferenceSubconferenceSubconfigurationShowAudiencePolicy) *float64 { return v.Multiple }).(pulumi.Float64PtrOutput)
}

type ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput struct{ *pulumi.OutputState }

func (ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConferenceSubconferenceSubconfigurationShowAudiencePolicy)(nil)).Elem()
}

func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput() ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput) ToConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutputWithContext(ctx context.Context) ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput {
	return o
}

func (o ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput) Index(i pulumi.IntInput) ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConferenceSubconferenceSubconfigurationShowAudiencePolicy {
		return vs[0].([]ConferenceSubconferenceSubconfigurationShowAudiencePolicy)[vs[1].(int)]
	}).(ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceConfigurationInput)(nil)).Elem(), ConferenceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceConfigurationPtrInput)(nil)).Elem(), ConferenceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceCycleParamsInput)(nil)).Elem(), ConferenceCycleParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceCycleParamsPtrInput)(nil)).Elem(), ConferenceCycleParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceJoinPasswordInput)(nil)).Elem(), ConferenceJoinPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceJoinPasswordArrayInput)(nil)).Elem(), ConferenceJoinPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceParticipantInput)(nil)).Elem(), ConferenceParticipantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceParticipantArrayInput)(nil)).Elem(), ConferenceParticipantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceInput)(nil)).Elem(), ConferenceSubconferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceArrayInput)(nil)).Elem(), ConferenceSubconferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceSubconfigurationInput)(nil)).Elem(), ConferenceSubconferenceSubconfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceSubconfigurationArrayInput)(nil)).Elem(), ConferenceSubconferenceSubconfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceSubconfigurationShowAudiencePolicyInput)(nil)).Elem(), ConferenceSubconferenceSubconfigurationShowAudiencePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayInput)(nil)).Elem(), ConferenceSubconferenceSubconfigurationShowAudiencePolicyArray{})
	pulumi.RegisterOutputType(ConferenceConfigurationOutput{})
	pulumi.RegisterOutputType(ConferenceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ConferenceCycleParamsOutput{})
	pulumi.RegisterOutputType(ConferenceCycleParamsPtrOutput{})
	pulumi.RegisterOutputType(ConferenceJoinPasswordOutput{})
	pulumi.RegisterOutputType(ConferenceJoinPasswordArrayOutput{})
	pulumi.RegisterOutputType(ConferenceParticipantOutput{})
	pulumi.RegisterOutputType(ConferenceParticipantArrayOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceArrayOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceSubconfigurationOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceSubconfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceSubconfigurationShowAudiencePolicyOutput{})
	pulumi.RegisterOutputType(ConferenceSubconferenceSubconfigurationShowAudiencePolicyArrayOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationOperation struct {
	// Specifies the resource type.
	Resource string `pulumi:"resource"`
	// Specifies the cloud service.
	Service string `pulumi:"service"`
	// Specifies an array of trace names.
	TraceNames []string `pulumi:"traceNames"`
}

// NotificationOperationInput is an input type that accepts NotificationOperationArgs and NotificationOperationOutput values.
// You can construct a concrete instance of `NotificationOperationInput` via:
//
//	NotificationOperationArgs{...}
type NotificationOperationInput interface {
	pulumi.Input

	ToNotificationOperationOutput() NotificationOperationOutput
	ToNotificationOperationOutputWithContext(context.Context) NotificationOperationOutput
}

type NotificationOperationArgs struct {
	// Specifies the resource type.
	Resource pulumi.StringInput `pulumi:"resource"`
	// Specifies the cloud service.
	Service pulumi.StringInput `pulumi:"service"`
	// Specifies an array of trace names.
	TraceNames pulumi.StringArrayInput `pulumi:"traceNames"`
}

func (NotificationOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperation)(nil)).Elem()
}

func (i NotificationOperationArgs) ToNotificationOperationOutput() NotificationOperationOutput {
	return i.ToNotificationOperationOutputWithContext(context.Background())
}

func (i NotificationOperationArgs) ToNotificationOperationOutputWithContext(ctx context.Context) NotificationOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationOutput)
}

// NotificationOperationArrayInput is an input type that accepts NotificationOperationArray and NotificationOperationArrayOutput values.
// You can construct a concrete instance of `NotificationOperationArrayInput` via:
//
//	NotificationOperationArray{ NotificationOperationArgs{...} }
type NotificationOperationArrayInput interface {
	pulumi.Input

	ToNotificationOperationArrayOutput() NotificationOperationArrayOutput
	ToNotificationOperationArrayOutputWithContext(context.Context) NotificationOperationArrayOutput
}

type NotificationOperationArray []NotificationOperationInput

func (NotificationOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperation)(nil)).Elem()
}

func (i NotificationOperationArray) ToNotificationOperationArrayOutput() NotificationOperationArrayOutput {
	return i.ToNotificationOperationArrayOutputWithContext(context.Background())
}

func (i NotificationOperationArray) ToNotificationOperationArrayOutputWithContext(ctx context.Context) NotificationOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationArrayOutput)
}

type NotificationOperationOutput struct{ *pulumi.OutputState }

func (NotificationOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperation)(nil)).Elem()
}

func (o NotificationOperationOutput) ToNotificationOperationOutput() NotificationOperationOutput {
	return o
}

func (o NotificationOperationOutput) ToNotificationOperationOutputWithContext(ctx context.Context) NotificationOperationOutput {
	return o
}

// Specifies the resource type.
func (o NotificationOperationOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperation) string { return v.Resource }).(pulumi.StringOutput)
}

// Specifies the cloud service.
func (o NotificationOperationOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperation) string { return v.Service }).(pulumi.StringOutput)
}

// Specifies an array of trace names.
func (o NotificationOperationOutput) TraceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationOperation) []string { return v.TraceNames }).(pulumi.StringArrayOutput)
}

type NotificationOperationArrayOutput struct{ *pulumi.OutputState }

func (NotificationOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperation)(nil)).Elem()
}

func (o NotificationOperationArrayOutput) ToNotificationOperationArrayOutput() NotificationOperationArrayOutput {
	return o
}

func (o NotificationOperationArrayOutput) ToNotificationOperationArrayOutputWithContext(ctx context.Context) NotificationOperationArrayOutput {
	return o
}

func (o NotificationOperationArrayOutput) Index(i pulumi.IntInput) NotificationOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationOperation {
		return vs[0].([]NotificationOperation)[vs[1].(int)]
	}).(NotificationOperationOutput)
}

type NotificationOperationUser struct {
	// Specifies the IAM user group name.
	Group string `pulumi:"group"`
	// Specifies an array of IAM users in the group.
	Users []string `pulumi:"users"`
}

// NotificationOperationUserInput is an input type that accepts NotificationOperationUserArgs and NotificationOperationUserOutput values.
// You can construct a concrete instance of `NotificationOperationUserInput` via:
//
//	NotificationOperationUserArgs{...}
type NotificationOperationUserInput interface {
	pulumi.Input

	ToNotificationOperationUserOutput() NotificationOperationUserOutput
	ToNotificationOperationUserOutputWithContext(context.Context) NotificationOperationUserOutput
}

type NotificationOperationUserArgs struct {
	// Specifies the IAM user group name.
	Group pulumi.StringInput `pulumi:"group"`
	// Specifies an array of IAM users in the group.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (NotificationOperationUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperationUser)(nil)).Elem()
}

func (i NotificationOperationUserArgs) ToNotificationOperationUserOutput() NotificationOperationUserOutput {
	return i.ToNotificationOperationUserOutputWithContext(context.Background())
}

func (i NotificationOperationUserArgs) ToNotificationOperationUserOutputWithContext(ctx context.Context) NotificationOperationUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationUserOutput)
}

// NotificationOperationUserArrayInput is an input type that accepts NotificationOperationUserArray and NotificationOperationUserArrayOutput values.
// You can construct a concrete instance of `NotificationOperationUserArrayInput` via:
//
//	NotificationOperationUserArray{ NotificationOperationUserArgs{...} }
type NotificationOperationUserArrayInput interface {
	pulumi.Input

	ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput
	ToNotificationOperationUserArrayOutputWithContext(context.Context) NotificationOperationUserArrayOutput
}

type NotificationOperationUserArray []NotificationOperationUserInput

func (NotificationOperationUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperationUser)(nil)).Elem()
}

func (i NotificationOperationUserArray) ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput {
	return i.ToNotificationOperationUserArrayOutputWithContext(context.Background())
}

func (i NotificationOperationUserArray) ToNotificationOperationUserArrayOutputWithContext(ctx context.Context) NotificationOperationUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationUserArrayOutput)
}

type NotificationOperationUserOutput struct{ *pulumi.OutputState }

func (NotificationOperationUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperationUser)(nil)).Elem()
}

func (o NotificationOperationUserOutput) ToNotificationOperationUserOutput() NotificationOperationUserOutput {
	return o
}

func (o NotificationOperationUserOutput) ToNotificationOperationUserOutputWithContext(ctx context.Context) NotificationOperationUserOutput {
	return o
}

// Specifies the IAM user group name.
func (o NotificationOperationUserOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperationUser) string { return v.Group }).(pulumi.StringOutput)
}

// Specifies an array of IAM users in the group.
func (o NotificationOperationUserOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationOperationUser) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type NotificationOperationUserArrayOutput struct{ *pulumi.OutputState }

func (NotificationOperationUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperationUser)(nil)).Elem()
}

func (o NotificationOperationUserArrayOutput) ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput {
	return o
}

func (o NotificationOperationUserArrayOutput) ToNotificationOperationUserArrayOutputWithContext(ctx context.Context) NotificationOperationUserArrayOutput {
	return o
}

func (o NotificationOperationUserArrayOutput) Index(i pulumi.IntInput) NotificationOperationUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationOperationUser {
		return vs[0].([]NotificationOperationUser)[vs[1].(int)]
	}).(NotificationOperationUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationInput)(nil)).Elem(), NotificationOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationArrayInput)(nil)).Elem(), NotificationOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationUserInput)(nil)).Elem(), NotificationOperationUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationUserArrayInput)(nil)).Elem(), NotificationOperationUserArray{})
	pulumi.RegisterOutputType(NotificationOperationOutput{})
	pulumi.RegisterOutputType(NotificationOperationArrayOutput{})
	pulumi.RegisterOutputType(NotificationOperationUserOutput{})
	pulumi.RegisterOutputType(NotificationOperationUserArrayOutput{})
}

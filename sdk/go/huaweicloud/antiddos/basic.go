// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Cloud Native Anti-DDos Basic resource within HuaweiCloud.
//
// > The Cloud Native Anti-DDos Basic resource will be set to the default traffic cleaning threshold when destroyed,
//
//	instead of deleting it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/AntiDDos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			eipId := cfg.RequireObject("eipId")
//			_, err := AntiDDos.NewBasic(ctx, "antiddos1", &AntiDDos.BasicArgs{
//				EipId:            pulumi.Any(eipId),
//				TrafficThreshold: pulumi.Int(150),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Native Anti-DDos Basic resources can be imported using `eip_id`. e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:AntiDDos/basic:Basic antiddos_1 c5256d47-8f9e-4ae7-9943-6e77e3d8bd2d
//
// ```
type Basic struct {
	pulumi.CustomResourceState

	// Specifies the ID of an EIP. Changing this creates a new resource.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The public address of the EIP.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The Anti-DDos status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the traffic cleaning threshold in Mbps.
	// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
	TrafficThreshold pulumi.IntOutput `pulumi:"trafficThreshold"`
}

// NewBasic registers a new resource with the given unique name, arguments, and options.
func NewBasic(ctx *pulumi.Context,
	name string, args *BasicArgs, opts ...pulumi.ResourceOption) (*Basic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.TrafficThreshold == nil {
		return nil, errors.New("invalid value for required argument 'TrafficThreshold'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Basic
	err := ctx.RegisterResource("huaweicloud:AntiDDos/basic:Basic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasic gets an existing Basic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BasicState, opts ...pulumi.ResourceOption) (*Basic, error) {
	var resource Basic
	err := ctx.ReadResource("huaweicloud:AntiDDos/basic:Basic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Basic resources.
type basicState struct {
	// Specifies the ID of an EIP. Changing this creates a new resource.
	EipId *string `pulumi:"eipId"`
	// The public address of the EIP.
	PublicIp *string `pulumi:"publicIp"`
	// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The Anti-DDos status.
	Status *string `pulumi:"status"`
	// Specifies the traffic cleaning threshold in Mbps.
	// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
	TrafficThreshold *int `pulumi:"trafficThreshold"`
}

type BasicState struct {
	// Specifies the ID of an EIP. Changing this creates a new resource.
	EipId pulumi.StringPtrInput
	// The public address of the EIP.
	PublicIp pulumi.StringPtrInput
	// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The Anti-DDos status.
	Status pulumi.StringPtrInput
	// Specifies the traffic cleaning threshold in Mbps.
	// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
	TrafficThreshold pulumi.IntPtrInput
}

func (BasicState) ElementType() reflect.Type {
	return reflect.TypeOf((*basicState)(nil)).Elem()
}

type basicArgs struct {
	// Specifies the ID of an EIP. Changing this creates a new resource.
	EipId string `pulumi:"eipId"`
	// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the traffic cleaning threshold in Mbps.
	// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
	TrafficThreshold int `pulumi:"trafficThreshold"`
}

// The set of arguments for constructing a Basic resource.
type BasicArgs struct {
	// Specifies the ID of an EIP. Changing this creates a new resource.
	EipId pulumi.StringInput
	// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the traffic cleaning threshold in Mbps.
	// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
	TrafficThreshold pulumi.IntInput
}

func (BasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basicArgs)(nil)).Elem()
}

type BasicInput interface {
	pulumi.Input

	ToBasicOutput() BasicOutput
	ToBasicOutputWithContext(ctx context.Context) BasicOutput
}

func (*Basic) ElementType() reflect.Type {
	return reflect.TypeOf((**Basic)(nil)).Elem()
}

func (i *Basic) ToBasicOutput() BasicOutput {
	return i.ToBasicOutputWithContext(context.Background())
}

func (i *Basic) ToBasicOutputWithContext(ctx context.Context) BasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicOutput)
}

// BasicArrayInput is an input type that accepts BasicArray and BasicArrayOutput values.
// You can construct a concrete instance of `BasicArrayInput` via:
//
//	BasicArray{ BasicArgs{...} }
type BasicArrayInput interface {
	pulumi.Input

	ToBasicArrayOutput() BasicArrayOutput
	ToBasicArrayOutputWithContext(context.Context) BasicArrayOutput
}

type BasicArray []BasicInput

func (BasicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Basic)(nil)).Elem()
}

func (i BasicArray) ToBasicArrayOutput() BasicArrayOutput {
	return i.ToBasicArrayOutputWithContext(context.Background())
}

func (i BasicArray) ToBasicArrayOutputWithContext(ctx context.Context) BasicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicArrayOutput)
}

// BasicMapInput is an input type that accepts BasicMap and BasicMapOutput values.
// You can construct a concrete instance of `BasicMapInput` via:
//
//	BasicMap{ "key": BasicArgs{...} }
type BasicMapInput interface {
	pulumi.Input

	ToBasicMapOutput() BasicMapOutput
	ToBasicMapOutputWithContext(context.Context) BasicMapOutput
}

type BasicMap map[string]BasicInput

func (BasicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Basic)(nil)).Elem()
}

func (i BasicMap) ToBasicMapOutput() BasicMapOutput {
	return i.ToBasicMapOutputWithContext(context.Background())
}

func (i BasicMap) ToBasicMapOutputWithContext(ctx context.Context) BasicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicMapOutput)
}

type BasicOutput struct{ *pulumi.OutputState }

func (BasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Basic)(nil)).Elem()
}

func (o BasicOutput) ToBasicOutput() BasicOutput {
	return o
}

func (o BasicOutput) ToBasicOutputWithContext(ctx context.Context) BasicOutput {
	return o
}

// Specifies the ID of an EIP. Changing this creates a new resource.
func (o BasicOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Basic) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// The public address of the EIP.
func (o BasicOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Basic) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// Specifies the region in which to manage the Cloud Native Anti-DDos Basic resource.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o BasicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Basic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The Anti-DDos status.
func (o BasicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Basic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the traffic cleaning threshold in Mbps.
// The value can be 10, 30, 50, 70, 100, 120, 150, 200, 250, 300, 1000 Mbps.
func (o BasicOutput) TrafficThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Basic) pulumi.IntOutput { return v.TrafficThreshold }).(pulumi.IntOutput)
}

type BasicArrayOutput struct{ *pulumi.OutputState }

func (BasicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Basic)(nil)).Elem()
}

func (o BasicArrayOutput) ToBasicArrayOutput() BasicArrayOutput {
	return o
}

func (o BasicArrayOutput) ToBasicArrayOutputWithContext(ctx context.Context) BasicArrayOutput {
	return o
}

func (o BasicArrayOutput) Index(i pulumi.IntInput) BasicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Basic {
		return vs[0].([]*Basic)[vs[1].(int)]
	}).(BasicOutput)
}

type BasicMapOutput struct{ *pulumi.OutputState }

func (BasicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Basic)(nil)).Elem()
}

func (o BasicMapOutput) ToBasicMapOutput() BasicMapOutput {
	return o
}

func (o BasicMapOutput) ToBasicMapOutputWithContext(ctx context.Context) BasicMapOutput {
	return o
}

func (o BasicMapOutput) MapIndex(k pulumi.StringInput) BasicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Basic {
		return vs[0].(map[string]*Basic)[vs[1].(string)]
	}).(BasicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicInput)(nil)).Elem(), &Basic{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicArrayInput)(nil)).Elem(), BasicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicMapInput)(nil)).Elem(), BasicMap{})
	pulumi.RegisterOutputType(BasicOutput{})
	pulumi.RegisterOutputType(BasicArrayOutput{})
	pulumi.RegisterOutputType(BasicMapOutput{})
}

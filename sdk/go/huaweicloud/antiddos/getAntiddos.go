// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **WARNING:** It has been deprecated.
//
// Query the Anti-DDos resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/AntiDDos"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/AntiDDos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			eipId := cfg.RequireObject("eipId")
//			_, err := AntiDDos.GetAntiddos(ctx, &antiddos.GetAntiddosArgs{
//				FloatingIpId: pulumi.StringRef(eipId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAntiddos(ctx *pulumi.Context, args *GetAntiddosArgs, opts ...pulumi.InvokeOption) (*GetAntiddosResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAntiddosResult
	err := ctx.Invoke("huaweicloud:AntiDDos/getAntiddos:getAntiddos", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAntiddos.
type GetAntiddosArgs struct {
	// The Elastic IP address.
	FloatingIpAddress *string `pulumi:"floatingIpAddress"`
	// The Elastic IP ID.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The region in which to obtain the Antiddos client. If omitted, the provider-level region
	// will be used.
	Region *string `pulumi:"region"`
	// The defense status.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getAntiddos.
type GetAntiddosResult struct {
	// The Attack traffic in (bit/s).
	BpsAttacks []int `pulumi:"bpsAttacks"`
	// The inbound traffic in (bit/s).
	BpsIns []int `pulumi:"bpsIns"`
	// The end time of cleaning and blackhole event.
	EndTimes          []int  `pulumi:"endTimes"`
	FloatingIpAddress string `pulumi:"floatingIpAddress"`
	FloatingIpId      string `pulumi:"floatingIpId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The EIP type.
	NetworkType string `pulumi:"networkType"`
	// The Start time.
	PeriodStarts []int `pulumi:"periodStarts"`
	// The attack packet rate (number of packets per second).
	PpsAttacks []int `pulumi:"ppsAttacks"`
	// The inbound packet rate (number of packets per second).
	PpsIns []int  `pulumi:"ppsIns"`
	Region string `pulumi:"region"`
	// The start time of cleaning and blackhole event.
	StartTimes []int  `pulumi:"startTimes"`
	Status     string `pulumi:"status"`
	// The total traffic.
	TotalBps []int `pulumi:"totalBps"`
	// The total packet rate.
	TotalPps []int `pulumi:"totalPps"`
	// The traffic cleaning status.
	TrafficCleaningStatuses []int `pulumi:"trafficCleaningStatuses"`
	// The traffic at the triggering point.
	TriggerBps []int `pulumi:"triggerBps"`
	// The HTTP request rate at the triggering point.
	TriggerHttpPps []int `pulumi:"triggerHttpPps"`
	// The packet rate at the triggering point.
	TriggerPps []int `pulumi:"triggerPps"`
}

func GetAntiddosOutput(ctx *pulumi.Context, args GetAntiddosOutputArgs, opts ...pulumi.InvokeOption) GetAntiddosResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAntiddosResult, error) {
			args := v.(GetAntiddosArgs)
			r, err := GetAntiddos(ctx, &args, opts...)
			var s GetAntiddosResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAntiddosResultOutput)
}

// A collection of arguments for invoking getAntiddos.
type GetAntiddosOutputArgs struct {
	// The Elastic IP address.
	FloatingIpAddress pulumi.StringPtrInput `pulumi:"floatingIpAddress"`
	// The Elastic IP ID.
	FloatingIpId pulumi.StringPtrInput `pulumi:"floatingIpId"`
	// The region in which to obtain the Antiddos client. If omitted, the provider-level region
	// will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The defense status.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetAntiddosOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAntiddosArgs)(nil)).Elem()
}

// A collection of values returned by getAntiddos.
type GetAntiddosResultOutput struct{ *pulumi.OutputState }

func (GetAntiddosResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAntiddosResult)(nil)).Elem()
}

func (o GetAntiddosResultOutput) ToGetAntiddosResultOutput() GetAntiddosResultOutput {
	return o
}

func (o GetAntiddosResultOutput) ToGetAntiddosResultOutputWithContext(ctx context.Context) GetAntiddosResultOutput {
	return o
}

// The Attack traffic in (bit/s).
func (o GetAntiddosResultOutput) BpsAttacks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.BpsAttacks }).(pulumi.IntArrayOutput)
}

// The inbound traffic in (bit/s).
func (o GetAntiddosResultOutput) BpsIns() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.BpsIns }).(pulumi.IntArrayOutput)
}

// The end time of cleaning and blackhole event.
func (o GetAntiddosResultOutput) EndTimes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.EndTimes }).(pulumi.IntArrayOutput)
}

func (o GetAntiddosResultOutput) FloatingIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.FloatingIpAddress }).(pulumi.StringOutput)
}

func (o GetAntiddosResultOutput) FloatingIpId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.FloatingIpId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAntiddosResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.Id }).(pulumi.StringOutput)
}

// The EIP type.
func (o GetAntiddosResultOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Start time.
func (o GetAntiddosResultOutput) PeriodStarts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.PeriodStarts }).(pulumi.IntArrayOutput)
}

// The attack packet rate (number of packets per second).
func (o GetAntiddosResultOutput) PpsAttacks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.PpsAttacks }).(pulumi.IntArrayOutput)
}

// The inbound packet rate (number of packets per second).
func (o GetAntiddosResultOutput) PpsIns() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.PpsIns }).(pulumi.IntArrayOutput)
}

func (o GetAntiddosResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.Region }).(pulumi.StringOutput)
}

// The start time of cleaning and blackhole event.
func (o GetAntiddosResultOutput) StartTimes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.StartTimes }).(pulumi.IntArrayOutput)
}

func (o GetAntiddosResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAntiddosResult) string { return v.Status }).(pulumi.StringOutput)
}

// The total traffic.
func (o GetAntiddosResultOutput) TotalBps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TotalBps }).(pulumi.IntArrayOutput)
}

// The total packet rate.
func (o GetAntiddosResultOutput) TotalPps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TotalPps }).(pulumi.IntArrayOutput)
}

// The traffic cleaning status.
func (o GetAntiddosResultOutput) TrafficCleaningStatuses() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TrafficCleaningStatuses }).(pulumi.IntArrayOutput)
}

// The traffic at the triggering point.
func (o GetAntiddosResultOutput) TriggerBps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TriggerBps }).(pulumi.IntArrayOutput)
}

// The HTTP request rate at the triggering point.
func (o GetAntiddosResultOutput) TriggerHttpPps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TriggerHttpPps }).(pulumi.IntArrayOutput)
}

// The packet rate at the triggering point.
func (o GetAntiddosResultOutput) TriggerPps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAntiddosResult) []int { return v.TriggerPps }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAntiddosResultOutput{})
}

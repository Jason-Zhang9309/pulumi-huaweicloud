// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package swr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SWR repository sharing resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Swr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			organizationName := cfg.RequireObject("organizationName")
//			repositoryName := cfg.RequireObject("repositoryName")
//			sharingAccount := cfg.RequireObject("sharingAccount")
//			_, err := Swr.NewRepositorySharing(ctx, "test", &Swr.RepositorySharingArgs{
//				Organization:   pulumi.Any(organizationName),
//				Repository:     pulumi.Any(repositoryName),
//				SharingAccount: pulumi.Any(sharingAccount),
//				Permission:     pulumi.String("pull"),
//				Deadline:       pulumi.String("forever"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Repository sharing can be imported using the organization name, repository name and sharing account separated by a slash, e.g.bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Swr/repositorySharing:RepositorySharing test org-name/repo-name/sharing-account
//
// ```
type RepositorySharing struct {
	pulumi.CustomResourceState

	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	Deadline pulumi.StringOutput `pulumi:"deadline"`
	// Specifies the description of the repository sharing.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
	// Default value is **pull**.
	Permission pulumi.StringPtrOutput `pulumi:"permission"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource
	// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
	SharingAccount pulumi.StringOutput `pulumi:"sharingAccount"`
	// Indicates the repository sharing is valid (true) or expired (false).
	Status pulumi.BoolOutput `pulumi:"status"`
}

// NewRepositorySharing registers a new resource with the given unique name, arguments, and options.
func NewRepositorySharing(ctx *pulumi.Context,
	name string, args *RepositorySharingArgs, opts ...pulumi.ResourceOption) (*RepositorySharing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Deadline == nil {
		return nil, errors.New("invalid value for required argument 'Deadline'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.SharingAccount == nil {
		return nil, errors.New("invalid value for required argument 'SharingAccount'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RepositorySharing
	err := ctx.RegisterResource("huaweicloud:Swr/repositorySharing:RepositorySharing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositorySharing gets an existing RepositorySharing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositorySharing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositorySharingState, opts ...pulumi.ResourceOption) (*RepositorySharing, error) {
	var resource RepositorySharing
	err := ctx.ReadResource("huaweicloud:Swr/repositorySharing:RepositorySharing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositorySharing resources.
type repositorySharingState struct {
	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	Deadline *string `pulumi:"deadline"`
	// Specifies the description of the repository sharing.
	Description *string `pulumi:"description"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization *string `pulumi:"organization"`
	// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
	// Default value is **pull**.
	Permission *string `pulumi:"permission"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	Repository *string `pulumi:"repository"`
	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource
	// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
	SharingAccount *string `pulumi:"sharingAccount"`
	// Indicates the repository sharing is valid (true) or expired (false).
	Status *bool `pulumi:"status"`
}

type RepositorySharingState struct {
	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	Deadline pulumi.StringPtrInput
	// Specifies the description of the repository sharing.
	Description pulumi.StringPtrInput
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringPtrInput
	// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
	// Default value is **pull**.
	Permission pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	Repository pulumi.StringPtrInput
	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource
	// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
	SharingAccount pulumi.StringPtrInput
	// Indicates the repository sharing is valid (true) or expired (false).
	Status pulumi.BoolPtrInput
}

func (RepositorySharingState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositorySharingState)(nil)).Elem()
}

type repositorySharingArgs struct {
	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	Deadline string `pulumi:"deadline"`
	// Specifies the description of the repository sharing.
	Description *string `pulumi:"description"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization string `pulumi:"organization"`
	// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
	// Default value is **pull**.
	Permission *string `pulumi:"permission"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	Repository string `pulumi:"repository"`
	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource
	// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
	SharingAccount string `pulumi:"sharingAccount"`
}

// The set of arguments for constructing a RepositorySharing resource.
type RepositorySharingArgs struct {
	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	Deadline pulumi.StringInput
	// Specifies the description of the repository sharing.
	Description pulumi.StringPtrInput
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringInput
	// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
	// Default value is **pull**.
	Permission pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	Repository pulumi.StringInput
	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource
	// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
	SharingAccount pulumi.StringInput
}

func (RepositorySharingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositorySharingArgs)(nil)).Elem()
}

type RepositorySharingInput interface {
	pulumi.Input

	ToRepositorySharingOutput() RepositorySharingOutput
	ToRepositorySharingOutputWithContext(ctx context.Context) RepositorySharingOutput
}

func (*RepositorySharing) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySharing)(nil)).Elem()
}

func (i *RepositorySharing) ToRepositorySharingOutput() RepositorySharingOutput {
	return i.ToRepositorySharingOutputWithContext(context.Background())
}

func (i *RepositorySharing) ToRepositorySharingOutputWithContext(ctx context.Context) RepositorySharingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySharingOutput)
}

// RepositorySharingArrayInput is an input type that accepts RepositorySharingArray and RepositorySharingArrayOutput values.
// You can construct a concrete instance of `RepositorySharingArrayInput` via:
//
//	RepositorySharingArray{ RepositorySharingArgs{...} }
type RepositorySharingArrayInput interface {
	pulumi.Input

	ToRepositorySharingArrayOutput() RepositorySharingArrayOutput
	ToRepositorySharingArrayOutputWithContext(context.Context) RepositorySharingArrayOutput
}

type RepositorySharingArray []RepositorySharingInput

func (RepositorySharingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositorySharing)(nil)).Elem()
}

func (i RepositorySharingArray) ToRepositorySharingArrayOutput() RepositorySharingArrayOutput {
	return i.ToRepositorySharingArrayOutputWithContext(context.Background())
}

func (i RepositorySharingArray) ToRepositorySharingArrayOutputWithContext(ctx context.Context) RepositorySharingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySharingArrayOutput)
}

// RepositorySharingMapInput is an input type that accepts RepositorySharingMap and RepositorySharingMapOutput values.
// You can construct a concrete instance of `RepositorySharingMapInput` via:
//
//	RepositorySharingMap{ "key": RepositorySharingArgs{...} }
type RepositorySharingMapInput interface {
	pulumi.Input

	ToRepositorySharingMapOutput() RepositorySharingMapOutput
	ToRepositorySharingMapOutputWithContext(context.Context) RepositorySharingMapOutput
}

type RepositorySharingMap map[string]RepositorySharingInput

func (RepositorySharingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositorySharing)(nil)).Elem()
}

func (i RepositorySharingMap) ToRepositorySharingMapOutput() RepositorySharingMapOutput {
	return i.ToRepositorySharingMapOutputWithContext(context.Background())
}

func (i RepositorySharingMap) ToRepositorySharingMapOutputWithContext(ctx context.Context) RepositorySharingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySharingMapOutput)
}

type RepositorySharingOutput struct{ *pulumi.OutputState }

func (RepositorySharingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySharing)(nil)).Elem()
}

func (o RepositorySharingOutput) ToRepositorySharingOutput() RepositorySharingOutput {
	return o
}

func (o RepositorySharingOutput) ToRepositorySharingOutputWithContext(ctx context.Context) RepositorySharingOutput {
	return o
}

// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
// for example `2021-10-01`). When the value is set to forever, the image will be permanently available for the domain.
// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
func (o RepositorySharingOutput) Deadline() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringOutput { return v.Deadline }).(pulumi.StringOutput)
}

// Specifies the description of the repository sharing.
func (o RepositorySharingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the organization (namespace) the repository belongs.
// Changing this creates a new resource.
func (o RepositorySharingOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Specifies the permission to be granted. Currently, only the **pull** permission is supported.
// Default value is **pull**.
func (o RepositorySharingOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o RepositorySharingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the name of the repository to be shared.
// Changing this creates a new resource.
func (o RepositorySharingOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Specifies the name of the account for repository sharing.
// Changing this creates a new resource
// > **NOTE:** `sharingAccount` should be an existing HuaweiCloud account.
func (o RepositorySharingOutput) SharingAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.StringOutput { return v.SharingAccount }).(pulumi.StringOutput)
}

// Indicates the repository sharing is valid (true) or expired (false).
func (o RepositorySharingOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v *RepositorySharing) pulumi.BoolOutput { return v.Status }).(pulumi.BoolOutput)
}

type RepositorySharingArrayOutput struct{ *pulumi.OutputState }

func (RepositorySharingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositorySharing)(nil)).Elem()
}

func (o RepositorySharingArrayOutput) ToRepositorySharingArrayOutput() RepositorySharingArrayOutput {
	return o
}

func (o RepositorySharingArrayOutput) ToRepositorySharingArrayOutputWithContext(ctx context.Context) RepositorySharingArrayOutput {
	return o
}

func (o RepositorySharingArrayOutput) Index(i pulumi.IntInput) RepositorySharingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositorySharing {
		return vs[0].([]*RepositorySharing)[vs[1].(int)]
	}).(RepositorySharingOutput)
}

type RepositorySharingMapOutput struct{ *pulumi.OutputState }

func (RepositorySharingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositorySharing)(nil)).Elem()
}

func (o RepositorySharingMapOutput) ToRepositorySharingMapOutput() RepositorySharingMapOutput {
	return o
}

func (o RepositorySharingMapOutput) ToRepositorySharingMapOutputWithContext(ctx context.Context) RepositorySharingMapOutput {
	return o
}

func (o RepositorySharingMapOutput) MapIndex(k pulumi.StringInput) RepositorySharingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositorySharing {
		return vs[0].(map[string]*RepositorySharing)[vs[1].(string)]
	}).(RepositorySharingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySharingInput)(nil)).Elem(), &RepositorySharing{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySharingArrayInput)(nil)).Elem(), RepositorySharingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySharingMapInput)(nil)).Elem(), RepositorySharingMap{})
	pulumi.RegisterOutputType(RepositorySharingOutput{})
	pulumi.RegisterOutputType(RepositorySharingArrayOutput{})
	pulumi.RegisterOutputType(RepositorySharingMapOutput{})
}

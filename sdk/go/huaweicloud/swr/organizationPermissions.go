// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package swr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages user permissions for the SWR organization resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Swr"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Swr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			organizationName := cfg.RequireObject("organizationName")
//			user1 := cfg.RequireObject("user1")
//			user2 := cfg.RequireObject("user2")
//			_, err := Swr.NewOrganizationPermissions(ctx, "test", &Swr.OrganizationPermissionsArgs{
//				Organization: pulumi.Any(organizationName),
//				Users: swr.OrganizationPermissionsUserArray{
//					&swr.OrganizationPermissionsUserArgs{
//						UserName:   pulumi.Any(user1.Name),
//						UserId:     pulumi.Any(user1.Id),
//						Permission: pulumi.String("Read"),
//					},
//					&swr.OrganizationPermissionsUserArgs{
//						UserName:   pulumi.Any(user2.Name),
//						UserId:     pulumi.Any(user2.Id),
//						Permission: pulumi.String("Read"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Organization Permissions can be imported using the `id` (organization name), e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Swr/organizationPermissions:OrganizationPermissions test terraform-test
//
// ```
type OrganizationPermissions struct {
	pulumi.CustomResourceState

	// The creator user name of the organization.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The permission informations of current user.
	SelfPermissions OrganizationPermissionsSelfPermissionArrayOutput `pulumi:"selfPermissions"`
	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	Users OrganizationPermissionsUserArrayOutput `pulumi:"users"`
}

// NewOrganizationPermissions registers a new resource with the given unique name, arguments, and options.
func NewOrganizationPermissions(ctx *pulumi.Context,
	name string, args *OrganizationPermissionsArgs, opts ...pulumi.ResourceOption) (*OrganizationPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OrganizationPermissions
	err := ctx.RegisterResource("huaweicloud:Swr/organizationPermissions:OrganizationPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationPermissions gets an existing OrganizationPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationPermissionsState, opts ...pulumi.ResourceOption) (*OrganizationPermissions, error) {
	var resource OrganizationPermissions
	err := ctx.ReadResource("huaweicloud:Swr/organizationPermissions:OrganizationPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationPermissions resources.
type organizationPermissionsState struct {
	// The creator user name of the organization.
	Creator *string `pulumi:"creator"`
	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	Organization *string `pulumi:"organization"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The permission informations of current user.
	SelfPermissions []OrganizationPermissionsSelfPermission `pulumi:"selfPermissions"`
	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	Users []OrganizationPermissionsUser `pulumi:"users"`
}

type OrganizationPermissionsState struct {
	// The creator user name of the organization.
	Creator pulumi.StringPtrInput
	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	Organization pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The permission informations of current user.
	SelfPermissions OrganizationPermissionsSelfPermissionArrayInput
	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	Users OrganizationPermissionsUserArrayInput
}

func (OrganizationPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPermissionsState)(nil)).Elem()
}

type organizationPermissionsArgs struct {
	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	Organization string `pulumi:"organization"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	Users []OrganizationPermissionsUser `pulumi:"users"`
}

// The set of arguments for constructing a OrganizationPermissions resource.
type OrganizationPermissionsArgs struct {
	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	Organization pulumi.StringInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	Users OrganizationPermissionsUserArrayInput
}

func (OrganizationPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPermissionsArgs)(nil)).Elem()
}

type OrganizationPermissionsInput interface {
	pulumi.Input

	ToOrganizationPermissionsOutput() OrganizationPermissionsOutput
	ToOrganizationPermissionsOutputWithContext(ctx context.Context) OrganizationPermissionsOutput
}

func (*OrganizationPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPermissions)(nil)).Elem()
}

func (i *OrganizationPermissions) ToOrganizationPermissionsOutput() OrganizationPermissionsOutput {
	return i.ToOrganizationPermissionsOutputWithContext(context.Background())
}

func (i *OrganizationPermissions) ToOrganizationPermissionsOutputWithContext(ctx context.Context) OrganizationPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionsOutput)
}

// OrganizationPermissionsArrayInput is an input type that accepts OrganizationPermissionsArray and OrganizationPermissionsArrayOutput values.
// You can construct a concrete instance of `OrganizationPermissionsArrayInput` via:
//
//	OrganizationPermissionsArray{ OrganizationPermissionsArgs{...} }
type OrganizationPermissionsArrayInput interface {
	pulumi.Input

	ToOrganizationPermissionsArrayOutput() OrganizationPermissionsArrayOutput
	ToOrganizationPermissionsArrayOutputWithContext(context.Context) OrganizationPermissionsArrayOutput
}

type OrganizationPermissionsArray []OrganizationPermissionsInput

func (OrganizationPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPermissions)(nil)).Elem()
}

func (i OrganizationPermissionsArray) ToOrganizationPermissionsArrayOutput() OrganizationPermissionsArrayOutput {
	return i.ToOrganizationPermissionsArrayOutputWithContext(context.Background())
}

func (i OrganizationPermissionsArray) ToOrganizationPermissionsArrayOutputWithContext(ctx context.Context) OrganizationPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionsArrayOutput)
}

// OrganizationPermissionsMapInput is an input type that accepts OrganizationPermissionsMap and OrganizationPermissionsMapOutput values.
// You can construct a concrete instance of `OrganizationPermissionsMapInput` via:
//
//	OrganizationPermissionsMap{ "key": OrganizationPermissionsArgs{...} }
type OrganizationPermissionsMapInput interface {
	pulumi.Input

	ToOrganizationPermissionsMapOutput() OrganizationPermissionsMapOutput
	ToOrganizationPermissionsMapOutputWithContext(context.Context) OrganizationPermissionsMapOutput
}

type OrganizationPermissionsMap map[string]OrganizationPermissionsInput

func (OrganizationPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPermissions)(nil)).Elem()
}

func (i OrganizationPermissionsMap) ToOrganizationPermissionsMapOutput() OrganizationPermissionsMapOutput {
	return i.ToOrganizationPermissionsMapOutputWithContext(context.Background())
}

func (i OrganizationPermissionsMap) ToOrganizationPermissionsMapOutputWithContext(ctx context.Context) OrganizationPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPermissionsMapOutput)
}

type OrganizationPermissionsOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPermissions)(nil)).Elem()
}

func (o OrganizationPermissionsOutput) ToOrganizationPermissionsOutput() OrganizationPermissionsOutput {
	return o
}

func (o OrganizationPermissionsOutput) ToOrganizationPermissionsOutputWithContext(ctx context.Context) OrganizationPermissionsOutput {
	return o
}

// The creator user name of the organization.
func (o OrganizationPermissionsOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermissions) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Specifies the name of the organization (namespace) to be accessed.
// Changing this creates a new resource.
func (o OrganizationPermissionsOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermissions) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o OrganizationPermissionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPermissions) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The permission informations of current user.
func (o OrganizationPermissionsOutput) SelfPermissions() OrganizationPermissionsSelfPermissionArrayOutput {
	return o.ApplyT(func(v *OrganizationPermissions) OrganizationPermissionsSelfPermissionArrayOutput {
		return v.SelfPermissions
	}).(OrganizationPermissionsSelfPermissionArrayOutput)
}

// Specifies the users to access to the organization (namespace).
// Structure is documented below.
func (o OrganizationPermissionsOutput) Users() OrganizationPermissionsUserArrayOutput {
	return o.ApplyT(func(v *OrganizationPermissions) OrganizationPermissionsUserArrayOutput { return v.Users }).(OrganizationPermissionsUserArrayOutput)
}

type OrganizationPermissionsArrayOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationPermissions)(nil)).Elem()
}

func (o OrganizationPermissionsArrayOutput) ToOrganizationPermissionsArrayOutput() OrganizationPermissionsArrayOutput {
	return o
}

func (o OrganizationPermissionsArrayOutput) ToOrganizationPermissionsArrayOutputWithContext(ctx context.Context) OrganizationPermissionsArrayOutput {
	return o
}

func (o OrganizationPermissionsArrayOutput) Index(i pulumi.IntInput) OrganizationPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationPermissions {
		return vs[0].([]*OrganizationPermissions)[vs[1].(int)]
	}).(OrganizationPermissionsOutput)
}

type OrganizationPermissionsMapOutput struct{ *pulumi.OutputState }

func (OrganizationPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationPermissions)(nil)).Elem()
}

func (o OrganizationPermissionsMapOutput) ToOrganizationPermissionsMapOutput() OrganizationPermissionsMapOutput {
	return o
}

func (o OrganizationPermissionsMapOutput) ToOrganizationPermissionsMapOutputWithContext(ctx context.Context) OrganizationPermissionsMapOutput {
	return o
}

func (o OrganizationPermissionsMapOutput) MapIndex(k pulumi.StringInput) OrganizationPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationPermissions {
		return vs[0].(map[string]*OrganizationPermissions)[vs[1].(string)]
	}).(OrganizationPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionsInput)(nil)).Elem(), &OrganizationPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionsArrayInput)(nil)).Elem(), OrganizationPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPermissionsMapInput)(nil)).Elem(), OrganizationPermissionsMap{})
	pulumi.RegisterOutputType(OrganizationPermissionsOutput{})
	pulumi.RegisterOutputType(OrganizationPermissionsArrayOutput{})
	pulumi.RegisterOutputType(OrganizationPermissionsMapOutput{})
}

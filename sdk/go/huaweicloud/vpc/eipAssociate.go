// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates an EIP to a specified IP address or port.
//
// ## Example Usage
// ### Associate with a fixed IP
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			publicAddress := cfg.RequireObject("publicAddress")
//			networkId := cfg.RequireObject("networkId")
//			_, err := Vpc.NewEipAssociate(ctx, "associated", &Vpc.EipAssociateArgs{
//				PublicIp:  pulumi.Any(publicAddress),
//				NetworkId: pulumi.Any(networkId),
//				FixedIp:   pulumi.String("192.168.0.100"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Associate with a port
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			networkId := cfg.RequireObject("networkId")
//			myport, err := Vpc.GetPort(ctx, &vpc.GetPortArgs{
//				NetworkId: pulumi.StringRef(networkId),
//				FixedIp:   pulumi.StringRef("192.168.0.100"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myeip, err := Vpc.NewEip(ctx, "myeip", &Vpc.EipArgs{
//				Publicip: &vpc.EipPublicipArgs{
//					Type: pulumi.String("5_bgp"),
//				},
//				Bandwidth: &vpc.EipBandwidthArgs{
//					Name:       pulumi.String("test"),
//					Size:       pulumi.Int(5),
//					ShareType:  pulumi.String("PER"),
//					ChargeMode: pulumi.String("traffic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Vpc.NewEipAssociate(ctx, "associated", &Vpc.EipAssociateArgs{
//				PublicIp: myeip.Address,
//				PortId:   pulumi.String(myport.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EIP associations can be imported using the `id` of the EIP, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/eipAssociate:EipAssociate eip 2c7f39f3-702b-48d1-940c-b50384177ee1
//
// ```
type EipAssociate struct {
	pulumi.CustomResourceState

	// Specifies a private IP address to associate with the EIP.
	// Changing this creates a new resource.
	FixedIp pulumi.StringOutput `pulumi:"fixedIp"`
	// The MAC address of the private IP.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// Specifies the ID of the network to which the **fixed_ip** belongs.
	// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Specifies an existing port ID to associate with the EIP.
	// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// Specifies the EIP address to associate. Changing this creates a new resource.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// Specifies the region in which to associate the EIP. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of EIP, should be **BOUND**.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEipAssociate registers a new resource with the given unique name, arguments, and options.
func NewEipAssociate(ctx *pulumi.Context,
	name string, args *EipAssociateArgs, opts ...pulumi.ResourceOption) (*EipAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	var resource EipAssociate
	err := ctx.RegisterResource("huaweicloud:Vpc/eipAssociate:EipAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEipAssociate gets an existing EipAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEipAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipAssociateState, opts ...pulumi.ResourceOption) (*EipAssociate, error) {
	var resource EipAssociate
	err := ctx.ReadResource("huaweicloud:Vpc/eipAssociate:EipAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EipAssociate resources.
type eipAssociateState struct {
	// Specifies a private IP address to associate with the EIP.
	// Changing this creates a new resource.
	FixedIp *string `pulumi:"fixedIp"`
	// The MAC address of the private IP.
	MacAddress *string `pulumi:"macAddress"`
	// Specifies the ID of the network to which the **fixed_ip** belongs.
	// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
	NetworkId *string `pulumi:"networkId"`
	// Specifies an existing port ID to associate with the EIP.
	// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
	PortId *string `pulumi:"portId"`
	// Specifies the EIP address to associate. Changing this creates a new resource.
	PublicIp *string `pulumi:"publicIp"`
	// Specifies the region in which to associate the EIP. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The status of EIP, should be **BOUND**.
	Status *string `pulumi:"status"`
}

type EipAssociateState struct {
	// Specifies a private IP address to associate with the EIP.
	// Changing this creates a new resource.
	FixedIp pulumi.StringPtrInput
	// The MAC address of the private IP.
	MacAddress pulumi.StringPtrInput
	// Specifies the ID of the network to which the **fixed_ip** belongs.
	// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
	NetworkId pulumi.StringPtrInput
	// Specifies an existing port ID to associate with the EIP.
	// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
	PortId pulumi.StringPtrInput
	// Specifies the EIP address to associate. Changing this creates a new resource.
	PublicIp pulumi.StringPtrInput
	// Specifies the region in which to associate the EIP. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The status of EIP, should be **BOUND**.
	Status pulumi.StringPtrInput
}

func (EipAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociateState)(nil)).Elem()
}

type eipAssociateArgs struct {
	// Specifies a private IP address to associate with the EIP.
	// Changing this creates a new resource.
	FixedIp *string `pulumi:"fixedIp"`
	// Specifies the ID of the network to which the **fixed_ip** belongs.
	// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
	NetworkId *string `pulumi:"networkId"`
	// Specifies an existing port ID to associate with the EIP.
	// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
	PortId *string `pulumi:"portId"`
	// Specifies the EIP address to associate. Changing this creates a new resource.
	PublicIp string `pulumi:"publicIp"`
	// Specifies the region in which to associate the EIP. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a EipAssociate resource.
type EipAssociateArgs struct {
	// Specifies a private IP address to associate with the EIP.
	// Changing this creates a new resource.
	FixedIp pulumi.StringPtrInput
	// Specifies the ID of the network to which the **fixed_ip** belongs.
	// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
	NetworkId pulumi.StringPtrInput
	// Specifies an existing port ID to associate with the EIP.
	// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
	PortId pulumi.StringPtrInput
	// Specifies the EIP address to associate. Changing this creates a new resource.
	PublicIp pulumi.StringInput
	// Specifies the region in which to associate the EIP. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (EipAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociateArgs)(nil)).Elem()
}

type EipAssociateInput interface {
	pulumi.Input

	ToEipAssociateOutput() EipAssociateOutput
	ToEipAssociateOutputWithContext(ctx context.Context) EipAssociateOutput
}

func (*EipAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**EipAssociate)(nil)).Elem()
}

func (i *EipAssociate) ToEipAssociateOutput() EipAssociateOutput {
	return i.ToEipAssociateOutputWithContext(context.Background())
}

func (i *EipAssociate) ToEipAssociateOutputWithContext(ctx context.Context) EipAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociateOutput)
}

// EipAssociateArrayInput is an input type that accepts EipAssociateArray and EipAssociateArrayOutput values.
// You can construct a concrete instance of `EipAssociateArrayInput` via:
//
//	EipAssociateArray{ EipAssociateArgs{...} }
type EipAssociateArrayInput interface {
	pulumi.Input

	ToEipAssociateArrayOutput() EipAssociateArrayOutput
	ToEipAssociateArrayOutputWithContext(context.Context) EipAssociateArrayOutput
}

type EipAssociateArray []EipAssociateInput

func (EipAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EipAssociate)(nil)).Elem()
}

func (i EipAssociateArray) ToEipAssociateArrayOutput() EipAssociateArrayOutput {
	return i.ToEipAssociateArrayOutputWithContext(context.Background())
}

func (i EipAssociateArray) ToEipAssociateArrayOutputWithContext(ctx context.Context) EipAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociateArrayOutput)
}

// EipAssociateMapInput is an input type that accepts EipAssociateMap and EipAssociateMapOutput values.
// You can construct a concrete instance of `EipAssociateMapInput` via:
//
//	EipAssociateMap{ "key": EipAssociateArgs{...} }
type EipAssociateMapInput interface {
	pulumi.Input

	ToEipAssociateMapOutput() EipAssociateMapOutput
	ToEipAssociateMapOutputWithContext(context.Context) EipAssociateMapOutput
}

type EipAssociateMap map[string]EipAssociateInput

func (EipAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EipAssociate)(nil)).Elem()
}

func (i EipAssociateMap) ToEipAssociateMapOutput() EipAssociateMapOutput {
	return i.ToEipAssociateMapOutputWithContext(context.Background())
}

func (i EipAssociateMap) ToEipAssociateMapOutputWithContext(ctx context.Context) EipAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociateMapOutput)
}

type EipAssociateOutput struct{ *pulumi.OutputState }

func (EipAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipAssociate)(nil)).Elem()
}

func (o EipAssociateOutput) ToEipAssociateOutput() EipAssociateOutput {
	return o
}

func (o EipAssociateOutput) ToEipAssociateOutputWithContext(ctx context.Context) EipAssociateOutput {
	return o
}

// Specifies a private IP address to associate with the EIP.
// Changing this creates a new resource.
func (o EipAssociateOutput) FixedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.FixedIp }).(pulumi.StringOutput)
}

// The MAC address of the private IP.
func (o EipAssociateOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Specifies the ID of the network to which the **fixed_ip** belongs.
// It is mandatory when `fixedIp` is set. Changing this creates a new resource.
func (o EipAssociateOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies an existing port ID to associate with the EIP.
// This parameter and `fixedIp` are alternative. Changing this creates a new resource.
func (o EipAssociateOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// Specifies the EIP address to associate. Changing this creates a new resource.
func (o EipAssociateOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// Specifies the region in which to associate the EIP. If omitted, the provider-level
// region will be used. Changing this creates a new resource.
func (o EipAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of EIP, should be **BOUND**.
func (o EipAssociateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EipAssociate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EipAssociateArrayOutput struct{ *pulumi.OutputState }

func (EipAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EipAssociate)(nil)).Elem()
}

func (o EipAssociateArrayOutput) ToEipAssociateArrayOutput() EipAssociateArrayOutput {
	return o
}

func (o EipAssociateArrayOutput) ToEipAssociateArrayOutputWithContext(ctx context.Context) EipAssociateArrayOutput {
	return o
}

func (o EipAssociateArrayOutput) Index(i pulumi.IntInput) EipAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EipAssociate {
		return vs[0].([]*EipAssociate)[vs[1].(int)]
	}).(EipAssociateOutput)
}

type EipAssociateMapOutput struct{ *pulumi.OutputState }

func (EipAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EipAssociate)(nil)).Elem()
}

func (o EipAssociateMapOutput) ToEipAssociateMapOutput() EipAssociateMapOutput {
	return o
}

func (o EipAssociateMapOutput) ToEipAssociateMapOutputWithContext(ctx context.Context) EipAssociateMapOutput {
	return o
}

func (o EipAssociateMapOutput) MapIndex(k pulumi.StringInput) EipAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EipAssociate {
		return vs[0].(map[string]*EipAssociate)[vs[1].(string)]
	}).(EipAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EipAssociateInput)(nil)).Elem(), &EipAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipAssociateArrayInput)(nil)).Elem(), EipAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipAssociateMapInput)(nil)).Elem(), EipAssociateMap{})
	pulumi.RegisterOutputType(EipAssociateOutput{})
	pulumi.RegisterOutputType(EipAssociateArrayOutput{})
	pulumi.RegisterOutputType(EipAssociateMapOutput{})
}

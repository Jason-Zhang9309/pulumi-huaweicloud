// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Shared** Bandwidth resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.NewBandwidth(ctx, "bandwidth1", &Vpc.BandwidthArgs{
//				Size: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Shared Bandwidths can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/bandwidth:Bandwidth bandwidth_1 7117d38e-4c8f-4624-a505-bd96b97d024c
//
// ```
type Bandwidth struct {
	pulumi.CustomResourceState

	// Indicates the bandwidth type.
	BandwidthType pulumi.StringOutput `pulumi:"bandwidthType"`
	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
	// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
	// Changing this creates a new bandwidth.
	ChargeMode pulumi.StringOutput `pulumi:"chargeMode"`
	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of EIPs that use the bandwidth. The object includes the following:
	Publicips BandwidthPublicipArrayOutput `pulumi:"publicips"`
	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates whether the bandwidth is shared or dedicated.
	ShareType pulumi.StringOutput `pulumi:"shareType"`
	// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
	Size pulumi.IntOutput `pulumi:"size"`
	// Indicates the bandwidth status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBandwidth registers a new resource with the given unique name, arguments, and options.
func NewBandwidth(ctx *pulumi.Context,
	name string, args *BandwidthArgs, opts ...pulumi.ResourceOption) (*Bandwidth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Bandwidth
	err := ctx.RegisterResource("huaweicloud:Vpc/bandwidth:Bandwidth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidth gets an existing Bandwidth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthState, opts ...pulumi.ResourceOption) (*Bandwidth, error) {
	var resource Bandwidth
	err := ctx.ReadResource("huaweicloud:Vpc/bandwidth:Bandwidth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bandwidth resources.
type bandwidthState struct {
	// Indicates the bandwidth type.
	BandwidthType *string `pulumi:"bandwidthType"`
	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
	// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
	// Changing this creates a new bandwidth.
	ChargeMode *string `pulumi:"chargeMode"`
	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `pulumi:"name"`
	// An array of EIPs that use the bandwidth. The object includes the following:
	Publicips []BandwidthPublicip `pulumi:"publicips"`
	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region *string `pulumi:"region"`
	// Indicates whether the bandwidth is shared or dedicated.
	ShareType *string `pulumi:"shareType"`
	// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
	Size *int `pulumi:"size"`
	// Indicates the bandwidth status.
	Status *string `pulumi:"status"`
}

type BandwidthState struct {
	// Indicates the bandwidth type.
	BandwidthType pulumi.StringPtrInput
	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
	// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
	// Changing this creates a new bandwidth.
	ChargeMode pulumi.StringPtrInput
	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringPtrInput
	// An array of EIPs that use the bandwidth. The object includes the following:
	Publicips BandwidthPublicipArrayInput
	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region pulumi.StringPtrInput
	// Indicates whether the bandwidth is shared or dedicated.
	ShareType pulumi.StringPtrInput
	// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
	Size pulumi.IntPtrInput
	// Indicates the bandwidth status.
	Status pulumi.StringPtrInput
}

func (BandwidthState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthState)(nil)).Elem()
}

type bandwidthArgs struct {
	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
	// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
	// Changing this creates a new bandwidth.
	ChargeMode *string `pulumi:"chargeMode"`
	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region *string `pulumi:"region"`
	// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
	Size int `pulumi:"size"`
}

// The set of arguments for constructing a Bandwidth resource.
type BandwidthArgs struct {
	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
	// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
	// Changing this creates a new bandwidth.
	ChargeMode pulumi.StringPtrInput
	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region pulumi.StringPtrInput
	// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
	Size pulumi.IntInput
}

func (BandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthArgs)(nil)).Elem()
}

type BandwidthInput interface {
	pulumi.Input

	ToBandwidthOutput() BandwidthOutput
	ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput
}

func (*Bandwidth) ElementType() reflect.Type {
	return reflect.TypeOf((**Bandwidth)(nil)).Elem()
}

func (i *Bandwidth) ToBandwidthOutput() BandwidthOutput {
	return i.ToBandwidthOutputWithContext(context.Background())
}

func (i *Bandwidth) ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthOutput)
}

// BandwidthArrayInput is an input type that accepts BandwidthArray and BandwidthArrayOutput values.
// You can construct a concrete instance of `BandwidthArrayInput` via:
//
//	BandwidthArray{ BandwidthArgs{...} }
type BandwidthArrayInput interface {
	pulumi.Input

	ToBandwidthArrayOutput() BandwidthArrayOutput
	ToBandwidthArrayOutputWithContext(context.Context) BandwidthArrayOutput
}

type BandwidthArray []BandwidthInput

func (BandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bandwidth)(nil)).Elem()
}

func (i BandwidthArray) ToBandwidthArrayOutput() BandwidthArrayOutput {
	return i.ToBandwidthArrayOutputWithContext(context.Background())
}

func (i BandwidthArray) ToBandwidthArrayOutputWithContext(ctx context.Context) BandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthArrayOutput)
}

// BandwidthMapInput is an input type that accepts BandwidthMap and BandwidthMapOutput values.
// You can construct a concrete instance of `BandwidthMapInput` via:
//
//	BandwidthMap{ "key": BandwidthArgs{...} }
type BandwidthMapInput interface {
	pulumi.Input

	ToBandwidthMapOutput() BandwidthMapOutput
	ToBandwidthMapOutputWithContext(context.Context) BandwidthMapOutput
}

type BandwidthMap map[string]BandwidthInput

func (BandwidthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bandwidth)(nil)).Elem()
}

func (i BandwidthMap) ToBandwidthMapOutput() BandwidthMapOutput {
	return i.ToBandwidthMapOutputWithContext(context.Background())
}

func (i BandwidthMap) ToBandwidthMapOutputWithContext(ctx context.Context) BandwidthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthMapOutput)
}

type BandwidthOutput struct{ *pulumi.OutputState }

func (BandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bandwidth)(nil)).Elem()
}

func (o BandwidthOutput) ToBandwidthOutput() BandwidthOutput {
	return o
}

func (o BandwidthOutput) ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput {
	return o
}

// Indicates the bandwidth type.
func (o BandwidthOutput) BandwidthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.BandwidthType }).(pulumi.StringOutput)
}

// Specifies whether the billing is based on bandwidth or
// 95th percentile bandwidth (enhanced). Possible values can be **bandwidth** and **95peak_plus**.
// The default value is **bandwidth**, and **95peak_plus** is only valid for v4 and v5 Customer.
// Changing this creates a new bandwidth.
func (o BandwidthOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.ChargeMode }).(pulumi.StringOutput)
}

// Specifies the enterprise project id of the Shared Bandwidth.
// Changing this creates a new bandwidth.
func (o BandwidthOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
func (o BandwidthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of EIPs that use the bandwidth. The object includes the following:
func (o BandwidthOutput) Publicips() BandwidthPublicipArrayOutput {
	return o.ApplyT(func(v *Bandwidth) BandwidthPublicipArrayOutput { return v.Publicips }).(BandwidthPublicipArrayOutput)
}

// Specifies the region in which to create the Shared Bandwidth.
// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
func (o BandwidthOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether the bandwidth is shared or dedicated.
func (o BandwidthOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.ShareType }).(pulumi.StringOutput)
}

// Specifies the size of the Shared Bandwidth. The value ranges from 5 Mbit/s to 2000 Mbit/s.
func (o BandwidthOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Indicates the bandwidth status.
func (o BandwidthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BandwidthArrayOutput struct{ *pulumi.OutputState }

func (BandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bandwidth)(nil)).Elem()
}

func (o BandwidthArrayOutput) ToBandwidthArrayOutput() BandwidthArrayOutput {
	return o
}

func (o BandwidthArrayOutput) ToBandwidthArrayOutputWithContext(ctx context.Context) BandwidthArrayOutput {
	return o
}

func (o BandwidthArrayOutput) Index(i pulumi.IntInput) BandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bandwidth {
		return vs[0].([]*Bandwidth)[vs[1].(int)]
	}).(BandwidthOutput)
}

type BandwidthMapOutput struct{ *pulumi.OutputState }

func (BandwidthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bandwidth)(nil)).Elem()
}

func (o BandwidthMapOutput) ToBandwidthMapOutput() BandwidthMapOutput {
	return o
}

func (o BandwidthMapOutput) ToBandwidthMapOutputWithContext(ctx context.Context) BandwidthMapOutput {
	return o
}

func (o BandwidthMapOutput) MapIndex(k pulumi.StringInput) BandwidthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bandwidth {
		return vs[0].(map[string]*Bandwidth)[vs[1].(string)]
	}).(BandwidthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthInput)(nil)).Elem(), &Bandwidth{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthArrayInput)(nil)).Elem(), BandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthMapInput)(nil)).Elem(), BandwidthMap{})
	pulumi.RegisterOutputType(BandwidthOutput{})
	pulumi.RegisterOutputType(BandwidthArrayOutput{})
	pulumi.RegisterOutputType(BandwidthMapOutput{})
}

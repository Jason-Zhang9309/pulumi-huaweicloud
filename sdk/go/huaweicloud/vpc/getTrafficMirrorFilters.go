// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the traffic mirror filters.
//
// ## Example Usage
// ### query traffic mirror filter list
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetTrafficMirrorFilters(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### query traffic mirror filter by name
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetTrafficMirrorFilters(ctx, &vpc.GetTrafficMirrorFiltersArgs{
//				Name: pulumi.StringRef("test-filter"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTrafficMirrorFilters(ctx *pulumi.Context, args *GetTrafficMirrorFiltersArgs, opts ...pulumi.InvokeOption) (*GetTrafficMirrorFiltersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetTrafficMirrorFiltersResult
	err := ctx.Invoke("huaweicloud:Vpc/getTrafficMirrorFilters:getTrafficMirrorFilters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrafficMirrorFilters.
type GetTrafficMirrorFiltersArgs struct {
	// Specifies the name of the traffic mirror filter.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the ID of the traffic mirror filter.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
}

// A collection of values returned by getTrafficMirrorFilters.
type GetTrafficMirrorFiltersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Traffic mirror filter name.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Traffic mirror filter ID.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// List of traffic mirror filters.
	TrafficMirrorFilters []GetTrafficMirrorFiltersTrafficMirrorFilter `pulumi:"trafficMirrorFilters"`
}

func GetTrafficMirrorFiltersOutput(ctx *pulumi.Context, args GetTrafficMirrorFiltersOutputArgs, opts ...pulumi.InvokeOption) GetTrafficMirrorFiltersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTrafficMirrorFiltersResult, error) {
			args := v.(GetTrafficMirrorFiltersArgs)
			r, err := GetTrafficMirrorFilters(ctx, &args, opts...)
			var s GetTrafficMirrorFiltersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTrafficMirrorFiltersResultOutput)
}

// A collection of arguments for invoking getTrafficMirrorFilters.
type GetTrafficMirrorFiltersOutputArgs struct {
	// Specifies the name of the traffic mirror filter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the ID of the traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringPtrInput `pulumi:"trafficMirrorFilterId"`
}

func (GetTrafficMirrorFiltersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficMirrorFiltersArgs)(nil)).Elem()
}

// A collection of values returned by getTrafficMirrorFilters.
type GetTrafficMirrorFiltersResultOutput struct{ *pulumi.OutputState }

func (GetTrafficMirrorFiltersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficMirrorFiltersResult)(nil)).Elem()
}

func (o GetTrafficMirrorFiltersResultOutput) ToGetTrafficMirrorFiltersResultOutput() GetTrafficMirrorFiltersResultOutput {
	return o
}

func (o GetTrafficMirrorFiltersResultOutput) ToGetTrafficMirrorFiltersResultOutputWithContext(ctx context.Context) GetTrafficMirrorFiltersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTrafficMirrorFiltersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficMirrorFiltersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Traffic mirror filter name.
func (o GetTrafficMirrorFiltersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorFiltersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetTrafficMirrorFiltersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficMirrorFiltersResult) string { return v.Region }).(pulumi.StringOutput)
}

// Traffic mirror filter ID.
func (o GetTrafficMirrorFiltersResultOutput) TrafficMirrorFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorFiltersResult) *string { return v.TrafficMirrorFilterId }).(pulumi.StringPtrOutput)
}

// List of traffic mirror filters.
func (o GetTrafficMirrorFiltersResultOutput) TrafficMirrorFilters() GetTrafficMirrorFiltersTrafficMirrorFilterArrayOutput {
	return o.ApplyT(func(v GetTrafficMirrorFiltersResult) []GetTrafficMirrorFiltersTrafficMirrorFilter {
		return v.TrafficMirrorFilters
	}).(GetTrafficMirrorFiltersTrafficMirrorFilterArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTrafficMirrorFiltersResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the traffic mirror sessions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetTrafficMirrorSessions(ctx, &vpc.GetTrafficMirrorSessionsArgs{
//				Name: pulumi.StringRef("mirror-session-a6b5"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTrafficMirrorSessions(ctx *pulumi.Context, args *GetTrafficMirrorSessionsArgs, opts ...pulumi.InvokeOption) (*GetTrafficMirrorSessionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetTrafficMirrorSessionsResult
	err := ctx.Invoke("huaweicloud:Vpc/getTrafficMirrorSessions:getTrafficMirrorSessions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrafficMirrorSessions.
type GetTrafficMirrorSessionsArgs struct {
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled *string `pulumi:"enabled"`
	// Specifies the traffic mirror session name used to query.
	Name *string `pulumi:"name"`
	// Specifies the maximum transmission unit (MTU).
	// The value range is **1-1460**, defaults to **96**.
	PacketLength *string `pulumi:"packetLength"`
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority *string `pulumi:"priority"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// Specifies the traffic mirror session ID used to query.
	TrafficMirrorSessionId *string `pulumi:"trafficMirrorSessionId"`
	// Specifies the traffic mirror target ID.
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType *string `pulumi:"trafficMirrorTargetType"`
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type *string `pulumi:"type"`
	// Specifies the VNI, which is used to distinguish mirrored traffic of different
	// sessions. The value range is **0-16777215**, defaults to **1**.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

// A collection of values returned by getTrafficMirrorSessions.
type GetTrafficMirrorSessionsResult struct {
	// Whether to enable a mirror session.
	Enabled *string `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Traffic mirror session name.
	Name *string `pulumi:"name"`
	// Maximum transmission unit (MTU).
	PacketLength *string `pulumi:"packetLength"`
	// Mirror session priority.
	Priority *string `pulumi:"priority"`
	Region   string  `pulumi:"region"`
	// Traffic mirror filter ID.
	TrafficMirrorFilterId  *string `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorSessionId *string `pulumi:"trafficMirrorSessionId"`
	// List of traffic mirror sessions.
	TrafficMirrorSessions []GetTrafficMirrorSessionsTrafficMirrorSession `pulumi:"trafficMirrorSessions"`
	// Mirror target ID.
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// Mirror target type.
	TrafficMirrorTargetType *string `pulumi:"trafficMirrorTargetType"`
	// Supported mirror source type.
	Type *string `pulumi:"type"`
	// VNI, which is used to distinguish mirrored traffic of different sessions.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

func GetTrafficMirrorSessionsOutput(ctx *pulumi.Context, args GetTrafficMirrorSessionsOutputArgs, opts ...pulumi.InvokeOption) GetTrafficMirrorSessionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTrafficMirrorSessionsResult, error) {
			args := v.(GetTrafficMirrorSessionsArgs)
			r, err := GetTrafficMirrorSessions(ctx, &args, opts...)
			var s GetTrafficMirrorSessionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTrafficMirrorSessionsResultOutput)
}

// A collection of arguments for invoking getTrafficMirrorSessions.
type GetTrafficMirrorSessionsOutputArgs struct {
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// Specifies the traffic mirror session name used to query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the maximum transmission unit (MTU).
	// The value range is **1-1460**, defaults to **96**.
	PacketLength pulumi.StringPtrInput `pulumi:"packetLength"`
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId pulumi.StringPtrInput `pulumi:"trafficMirrorFilterId"`
	// Specifies the traffic mirror session ID used to query.
	TrafficMirrorSessionId pulumi.StringPtrInput `pulumi:"trafficMirrorSessionId"`
	// Specifies the traffic mirror target ID.
	TrafficMirrorTargetId pulumi.StringPtrInput `pulumi:"trafficMirrorTargetId"`
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType pulumi.StringPtrInput `pulumi:"trafficMirrorTargetType"`
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the VNI, which is used to distinguish mirrored traffic of different
	// sessions. The value range is **0-16777215**, defaults to **1**.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
}

func (GetTrafficMirrorSessionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficMirrorSessionsArgs)(nil)).Elem()
}

// A collection of values returned by getTrafficMirrorSessions.
type GetTrafficMirrorSessionsResultOutput struct{ *pulumi.OutputState }

func (GetTrafficMirrorSessionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficMirrorSessionsResult)(nil)).Elem()
}

func (o GetTrafficMirrorSessionsResultOutput) ToGetTrafficMirrorSessionsResultOutput() GetTrafficMirrorSessionsResultOutput {
	return o
}

func (o GetTrafficMirrorSessionsResultOutput) ToGetTrafficMirrorSessionsResultOutputWithContext(ctx context.Context) GetTrafficMirrorSessionsResultOutput {
	return o
}

// Whether to enable a mirror session.
func (o GetTrafficMirrorSessionsResultOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTrafficMirrorSessionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Traffic mirror session name.
func (o GetTrafficMirrorSessionsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Maximum transmission unit (MTU).
func (o GetTrafficMirrorSessionsResultOutput) PacketLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.PacketLength }).(pulumi.StringPtrOutput)
}

// Mirror session priority.
func (o GetTrafficMirrorSessionsResultOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o GetTrafficMirrorSessionsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Traffic mirror filter ID.
func (o GetTrafficMirrorSessionsResultOutput) TrafficMirrorFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.TrafficMirrorFilterId }).(pulumi.StringPtrOutput)
}

func (o GetTrafficMirrorSessionsResultOutput) TrafficMirrorSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.TrafficMirrorSessionId }).(pulumi.StringPtrOutput)
}

// List of traffic mirror sessions.
func (o GetTrafficMirrorSessionsResultOutput) TrafficMirrorSessions() GetTrafficMirrorSessionsTrafficMirrorSessionArrayOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) []GetTrafficMirrorSessionsTrafficMirrorSession {
		return v.TrafficMirrorSessions
	}).(GetTrafficMirrorSessionsTrafficMirrorSessionArrayOutput)
}

// Mirror target ID.
func (o GetTrafficMirrorSessionsResultOutput) TrafficMirrorTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.TrafficMirrorTargetId }).(pulumi.StringPtrOutput)
}

// Mirror target type.
func (o GetTrafficMirrorSessionsResultOutput) TrafficMirrorTargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.TrafficMirrorTargetType }).(pulumi.StringPtrOutput)
}

// Supported mirror source type.
func (o GetTrafficMirrorSessionsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// VNI, which is used to distinguish mirrored traffic of different sessions.
func (o GetTrafficMirrorSessionsResultOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficMirrorSessionsResult) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTrafficMirrorSessionsResultOutput{})
}

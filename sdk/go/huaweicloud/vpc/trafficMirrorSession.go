// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VPC traffic mirror session resource within HuaweiCloud.
//
// ## Import
//
// The traffic mirror session can be imported using `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession test <id>
//
// ```
type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	// The creation time of the traffic mirror session.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the traffic mirror session.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the name of the traffic mirror session.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from `1` to `1,460`, defaults to `96`.
	PacketLength pulumi.IntOutput `pulumi:"packetLength"`
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId pulumi.StringOutput `pulumi:"trafficMirrorFilterId"`
	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources pulumi.StringArrayOutput `pulumi:"trafficMirrorSources"`
	// Specifies the mirror target ID.
	TrafficMirrorTargetId pulumi.StringOutput `pulumi:"trafficMirrorTargetId"`
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType pulumi.StringOutput `pulumi:"trafficMirrorTargetType"`
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the traffic mirror session.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
	VirtualNetworkId pulumi.IntOutput `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorSources == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorSources'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	if args.TrafficMirrorTargetType == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
	// The creation time of the traffic mirror session.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the traffic mirror session.
	Name *string `pulumi:"name"`
	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from `1` to `1,460`, defaults to `96`.
	PacketLength *int `pulumi:"packetLength"`
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority *int `pulumi:"priority"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources []string `pulumi:"trafficMirrorSources"`
	// Specifies the mirror target ID.
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType *string `pulumi:"trafficMirrorTargetType"`
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type *string `pulumi:"type"`
	// The latest update time of the traffic mirror session.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

type TrafficMirrorSessionState struct {
	// The creation time of the traffic mirror session.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the traffic mirror session.
	Name pulumi.StringPtrInput
	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from `1` to `1,460`, defaults to `96`.
	PacketLength pulumi.IntPtrInput
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority pulumi.IntPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId pulumi.StringPtrInput
	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources pulumi.StringArrayInput
	// Specifies the mirror target ID.
	TrafficMirrorTargetId pulumi.StringPtrInput
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType pulumi.StringPtrInput
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type pulumi.StringPtrInput
	// The latest update time of the traffic mirror session.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
	VirtualNetworkId pulumi.IntPtrInput
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	// Specifies the description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the traffic mirror session.
	Name *string `pulumi:"name"`
	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from `1` to `1,460`, defaults to `96`.
	PacketLength *int `pulumi:"packetLength"`
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority int `pulumi:"priority"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources []string `pulumi:"trafficMirrorSources"`
	// Specifies the mirror target ID.
	TrafficMirrorTargetId string `pulumi:"trafficMirrorTargetId"`
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType string `pulumi:"trafficMirrorTargetType"`
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type *string `pulumi:"type"`
	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	// Specifies the description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// Specifies whether the mirror session is enabled. Defaults to **true**.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the traffic mirror session.
	Name pulumi.StringPtrInput
	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from `1` to `1,460`, defaults to `96`.
	PacketLength pulumi.IntPtrInput
	// Specifies the mirror session priority. The value range is **1-32766**.
	// A smaller value indicates a higher priority.
	Priority pulumi.IntInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterId pulumi.StringInput
	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources pulumi.StringArrayInput
	// Specifies the mirror target ID.
	TrafficMirrorTargetId pulumi.StringInput
	// Specifies the mirror target type. The value can be:
	// + **eni**: elastic network interface;
	// + **elb**: private network load balancer;
	TrafficMirrorTargetType pulumi.StringInput
	// Specifies the mirror source type. The value can be **eni**(elastic network interface).
	Type pulumi.StringPtrInput
	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
	VirtualNetworkId pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionInput interface {
	pulumi.Input

	ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput
	ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput
}

func (*TrafficMirrorSession) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return i.ToTrafficMirrorSessionOutputWithContext(context.Background())
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionOutput)
}

// TrafficMirrorSessionArrayInput is an input type that accepts TrafficMirrorSessionArray and TrafficMirrorSessionArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionArrayInput` via:
//
//	TrafficMirrorSessionArray{ TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionArrayInput interface {
	pulumi.Input

	ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput
	ToTrafficMirrorSessionArrayOutputWithContext(context.Context) TrafficMirrorSessionArrayOutput
}

type TrafficMirrorSessionArray []TrafficMirrorSessionInput

func (TrafficMirrorSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return i.ToTrafficMirrorSessionArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionArrayOutput)
}

// TrafficMirrorSessionMapInput is an input type that accepts TrafficMirrorSessionMap and TrafficMirrorSessionMapOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionMapInput` via:
//
//	TrafficMirrorSessionMap{ "key": TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionMapInput interface {
	pulumi.Input

	ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput
	ToTrafficMirrorSessionMapOutputWithContext(context.Context) TrafficMirrorSessionMapOutput
}

type TrafficMirrorSessionMap map[string]TrafficMirrorSessionInput

func (TrafficMirrorSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return i.ToTrafficMirrorSessionMapOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionMapOutput)
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

// The creation time of the traffic mirror session.
func (o TrafficMirrorSessionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the traffic mirror session.
func (o TrafficMirrorSessionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the mirror session is enabled. Defaults to **true**.
func (o TrafficMirrorSessionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the traffic mirror session.
func (o TrafficMirrorSessionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the maximum transmission unit (MTU).
// The valid value is range from `1` to `1,460`, defaults to `96`.
func (o TrafficMirrorSessionOutput) PacketLength() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.PacketLength }).(pulumi.IntOutput)
}

// Specifies the mirror session priority. The value range is **1-32766**.
// A smaller value indicates a higher priority.
func (o TrafficMirrorSessionOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o TrafficMirrorSessionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the traffic mirror filter ID used in the session.
func (o TrafficMirrorSessionOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

// Specifies the mirror source IDs.
// An elastic network interface can be used as a mirror source.
func (o TrafficMirrorSessionOutput) TrafficMirrorSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringArrayOutput { return v.TrafficMirrorSources }).(pulumi.StringArrayOutput)
}

// Specifies the mirror target ID.
func (o TrafficMirrorSessionOutput) TrafficMirrorTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorTargetId }).(pulumi.StringOutput)
}

// Specifies the mirror target type. The value can be:
// + **eni**: elastic network interface;
// + **elb**: private network load balancer;
func (o TrafficMirrorSessionOutput) TrafficMirrorTargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorTargetType }).(pulumi.StringOutput)
}

// Specifies the mirror source type. The value can be **eni**(elastic network interface).
func (o TrafficMirrorSessionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the traffic mirror session.
func (o TrafficMirrorSessionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the VNI, which is used to distinguish mirrored traffic of
// different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
func (o TrafficMirrorSessionOutput) VirtualNetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.VirtualNetworkId }).(pulumi.IntOutput)
}

type TrafficMirrorSessionArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) Index(i pulumi.IntInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].([]*TrafficMirrorSession)[vs[1].(int)]
	}).(TrafficMirrorSessionOutput)
}

type TrafficMirrorSessionMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].(map[string]*TrafficMirrorSession)[vs[1].(string)]
	}).(TrafficMirrorSessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionInput)(nil)).Elem(), &TrafficMirrorSession{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionArrayInput)(nil)).Elem(), TrafficMirrorSessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionMapInput)(nil)).Elem(), TrafficMirrorSessionMap{})
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionMapOutput{})
}

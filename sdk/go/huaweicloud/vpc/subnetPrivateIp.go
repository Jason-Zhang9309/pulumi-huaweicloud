// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VPC subnet private IP resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			subnetId := cfg.RequireObject("subnetId")
//			ipAddress := cfg.RequireObject("ipAddress")
//			_, err := Vpc.NewSubnetPrivateIp(ctx, "test", &Vpc.SubnetPrivateIpArgs{
//				SubnetId:  pulumi.Any(subnetId),
//				IpAddress: pulumi.Any(ipAddress),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The private IP can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp test <id>
//
// ```
type SubnetPrivateIp struct {
	pulumi.CustomResourceState

	// The resource using the private IP address. The parameter is left blank if it is not used.
	DeviceOwner    pulumi.StringOutput    `pulumi:"deviceOwner"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the IP address. The value must be an unused address
	// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the subnet to which the private IP belongs.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSubnetPrivateIp registers a new resource with the given unique name, arguments, and options.
func NewSubnetPrivateIp(ctx *pulumi.Context,
	name string, args *SubnetPrivateIpArgs, opts ...pulumi.ResourceOption) (*SubnetPrivateIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SubnetPrivateIp
	err := ctx.RegisterResource("huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetPrivateIp gets an existing SubnetPrivateIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetPrivateIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetPrivateIpState, opts ...pulumi.ResourceOption) (*SubnetPrivateIp, error) {
	var resource SubnetPrivateIp
	err := ctx.ReadResource("huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetPrivateIp resources.
type subnetPrivateIpState struct {
	// The resource using the private IP address. The parameter is left blank if it is not used.
	DeviceOwner    *string `pulumi:"deviceOwner"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the IP address. The value must be an unused address
	// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
	Status *string `pulumi:"status"`
	// Specifies the ID of the subnet to which the private IP belongs.
	SubnetId *string `pulumi:"subnetId"`
}

type SubnetPrivateIpState struct {
	// The resource using the private IP address. The parameter is left blank if it is not used.
	DeviceOwner    pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the IP address. The value must be an unused address
	// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
	IpAddress pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
	Status pulumi.StringPtrInput
	// Specifies the ID of the subnet to which the private IP belongs.
	SubnetId pulumi.StringPtrInput
}

func (SubnetPrivateIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetPrivateIpState)(nil)).Elem()
}

type subnetPrivateIpArgs struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the IP address. The value must be an unused address
	// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the subnet to which the private IP belongs.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SubnetPrivateIp resource.
type SubnetPrivateIpArgs struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the IP address. The value must be an unused address
	// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
	IpAddress pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the subnet to which the private IP belongs.
	SubnetId pulumi.StringInput
}

func (SubnetPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetPrivateIpArgs)(nil)).Elem()
}

type SubnetPrivateIpInput interface {
	pulumi.Input

	ToSubnetPrivateIpOutput() SubnetPrivateIpOutput
	ToSubnetPrivateIpOutputWithContext(ctx context.Context) SubnetPrivateIpOutput
}

func (*SubnetPrivateIp) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetPrivateIp)(nil)).Elem()
}

func (i *SubnetPrivateIp) ToSubnetPrivateIpOutput() SubnetPrivateIpOutput {
	return i.ToSubnetPrivateIpOutputWithContext(context.Background())
}

func (i *SubnetPrivateIp) ToSubnetPrivateIpOutputWithContext(ctx context.Context) SubnetPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetPrivateIpOutput)
}

// SubnetPrivateIpArrayInput is an input type that accepts SubnetPrivateIpArray and SubnetPrivateIpArrayOutput values.
// You can construct a concrete instance of `SubnetPrivateIpArrayInput` via:
//
//	SubnetPrivateIpArray{ SubnetPrivateIpArgs{...} }
type SubnetPrivateIpArrayInput interface {
	pulumi.Input

	ToSubnetPrivateIpArrayOutput() SubnetPrivateIpArrayOutput
	ToSubnetPrivateIpArrayOutputWithContext(context.Context) SubnetPrivateIpArrayOutput
}

type SubnetPrivateIpArray []SubnetPrivateIpInput

func (SubnetPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetPrivateIp)(nil)).Elem()
}

func (i SubnetPrivateIpArray) ToSubnetPrivateIpArrayOutput() SubnetPrivateIpArrayOutput {
	return i.ToSubnetPrivateIpArrayOutputWithContext(context.Background())
}

func (i SubnetPrivateIpArray) ToSubnetPrivateIpArrayOutputWithContext(ctx context.Context) SubnetPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetPrivateIpArrayOutput)
}

// SubnetPrivateIpMapInput is an input type that accepts SubnetPrivateIpMap and SubnetPrivateIpMapOutput values.
// You can construct a concrete instance of `SubnetPrivateIpMapInput` via:
//
//	SubnetPrivateIpMap{ "key": SubnetPrivateIpArgs{...} }
type SubnetPrivateIpMapInput interface {
	pulumi.Input

	ToSubnetPrivateIpMapOutput() SubnetPrivateIpMapOutput
	ToSubnetPrivateIpMapOutputWithContext(context.Context) SubnetPrivateIpMapOutput
}

type SubnetPrivateIpMap map[string]SubnetPrivateIpInput

func (SubnetPrivateIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetPrivateIp)(nil)).Elem()
}

func (i SubnetPrivateIpMap) ToSubnetPrivateIpMapOutput() SubnetPrivateIpMapOutput {
	return i.ToSubnetPrivateIpMapOutputWithContext(context.Background())
}

func (i SubnetPrivateIpMap) ToSubnetPrivateIpMapOutputWithContext(ctx context.Context) SubnetPrivateIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetPrivateIpMapOutput)
}

type SubnetPrivateIpOutput struct{ *pulumi.OutputState }

func (SubnetPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetPrivateIp)(nil)).Elem()
}

func (o SubnetPrivateIpOutput) ToSubnetPrivateIpOutput() SubnetPrivateIpOutput {
	return o
}

func (o SubnetPrivateIpOutput) ToSubnetPrivateIpOutputWithContext(ctx context.Context) SubnetPrivateIpOutput {
	return o
}

// The resource using the private IP address. The parameter is left blank if it is not used.
func (o SubnetPrivateIpOutput) DeviceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringOutput { return v.DeviceOwner }).(pulumi.StringOutput)
}

func (o SubnetPrivateIpOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the IP address. The value must be an unused address
// within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
func (o SubnetPrivateIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o SubnetPrivateIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
func (o SubnetPrivateIpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the subnet to which the private IP belongs.
func (o SubnetPrivateIpOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetPrivateIp) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type SubnetPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (SubnetPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetPrivateIp)(nil)).Elem()
}

func (o SubnetPrivateIpArrayOutput) ToSubnetPrivateIpArrayOutput() SubnetPrivateIpArrayOutput {
	return o
}

func (o SubnetPrivateIpArrayOutput) ToSubnetPrivateIpArrayOutputWithContext(ctx context.Context) SubnetPrivateIpArrayOutput {
	return o
}

func (o SubnetPrivateIpArrayOutput) Index(i pulumi.IntInput) SubnetPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubnetPrivateIp {
		return vs[0].([]*SubnetPrivateIp)[vs[1].(int)]
	}).(SubnetPrivateIpOutput)
}

type SubnetPrivateIpMapOutput struct{ *pulumi.OutputState }

func (SubnetPrivateIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetPrivateIp)(nil)).Elem()
}

func (o SubnetPrivateIpMapOutput) ToSubnetPrivateIpMapOutput() SubnetPrivateIpMapOutput {
	return o
}

func (o SubnetPrivateIpMapOutput) ToSubnetPrivateIpMapOutputWithContext(ctx context.Context) SubnetPrivateIpMapOutput {
	return o
}

func (o SubnetPrivateIpMapOutput) MapIndex(k pulumi.StringInput) SubnetPrivateIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubnetPrivateIp {
		return vs[0].(map[string]*SubnetPrivateIp)[vs[1].(string)]
	}).(SubnetPrivateIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetPrivateIpInput)(nil)).Elem(), &SubnetPrivateIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetPrivateIpArrayInput)(nil)).Elem(), SubnetPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetPrivateIpMapInput)(nil)).Elem(), SubnetPrivateIpMap{})
	pulumi.RegisterOutputType(SubnetPrivateIpOutput{})
	pulumi.RegisterOutputType(SubnetPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(SubnetPrivateIpMapOutput{})
}

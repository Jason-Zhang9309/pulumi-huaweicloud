// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BandwidthPublicip struct {
	// The ID of the EIP or IPv6 port that uses the bandwidth.
	Id *string `pulumi:"id"`
	// The IPv4 or IPv6 address.
	IpAddress *string `pulumi:"ipAddress"`
	// The IP version, either 4 or 6.
	IpVersion *int `pulumi:"ipVersion"`
	// The EIP type. Possible values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP).
	Type *string `pulumi:"type"`
}

// BandwidthPublicipInput is an input type that accepts BandwidthPublicipArgs and BandwidthPublicipOutput values.
// You can construct a concrete instance of `BandwidthPublicipInput` via:
//
//	BandwidthPublicipArgs{...}
type BandwidthPublicipInput interface {
	pulumi.Input

	ToBandwidthPublicipOutput() BandwidthPublicipOutput
	ToBandwidthPublicipOutputWithContext(context.Context) BandwidthPublicipOutput
}

type BandwidthPublicipArgs struct {
	// The ID of the EIP or IPv6 port that uses the bandwidth.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The IPv4 or IPv6 address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The IP version, either 4 or 6.
	IpVersion pulumi.IntPtrInput `pulumi:"ipVersion"`
	// The EIP type. Possible values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BandwidthPublicipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPublicip)(nil)).Elem()
}

func (i BandwidthPublicipArgs) ToBandwidthPublicipOutput() BandwidthPublicipOutput {
	return i.ToBandwidthPublicipOutputWithContext(context.Background())
}

func (i BandwidthPublicipArgs) ToBandwidthPublicipOutputWithContext(ctx context.Context) BandwidthPublicipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPublicipOutput)
}

// BandwidthPublicipArrayInput is an input type that accepts BandwidthPublicipArray and BandwidthPublicipArrayOutput values.
// You can construct a concrete instance of `BandwidthPublicipArrayInput` via:
//
//	BandwidthPublicipArray{ BandwidthPublicipArgs{...} }
type BandwidthPublicipArrayInput interface {
	pulumi.Input

	ToBandwidthPublicipArrayOutput() BandwidthPublicipArrayOutput
	ToBandwidthPublicipArrayOutputWithContext(context.Context) BandwidthPublicipArrayOutput
}

type BandwidthPublicipArray []BandwidthPublicipInput

func (BandwidthPublicipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPublicip)(nil)).Elem()
}

func (i BandwidthPublicipArray) ToBandwidthPublicipArrayOutput() BandwidthPublicipArrayOutput {
	return i.ToBandwidthPublicipArrayOutputWithContext(context.Background())
}

func (i BandwidthPublicipArray) ToBandwidthPublicipArrayOutputWithContext(ctx context.Context) BandwidthPublicipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPublicipArrayOutput)
}

type BandwidthPublicipOutput struct{ *pulumi.OutputState }

func (BandwidthPublicipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPublicip)(nil)).Elem()
}

func (o BandwidthPublicipOutput) ToBandwidthPublicipOutput() BandwidthPublicipOutput {
	return o
}

func (o BandwidthPublicipOutput) ToBandwidthPublicipOutputWithContext(ctx context.Context) BandwidthPublicipOutput {
	return o
}

// The ID of the EIP or IPv6 port that uses the bandwidth.
func (o BandwidthPublicipOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPublicip) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The IPv4 or IPv6 address.
func (o BandwidthPublicipOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPublicip) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The IP version, either 4 or 6.
func (o BandwidthPublicipOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BandwidthPublicip) *int { return v.IpVersion }).(pulumi.IntPtrOutput)
}

// The EIP type. Possible values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP).
func (o BandwidthPublicipOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPublicip) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BandwidthPublicipArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPublicipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPublicip)(nil)).Elem()
}

func (o BandwidthPublicipArrayOutput) ToBandwidthPublicipArrayOutput() BandwidthPublicipArrayOutput {
	return o
}

func (o BandwidthPublicipArrayOutput) ToBandwidthPublicipArrayOutputWithContext(ctx context.Context) BandwidthPublicipArrayOutput {
	return o
}

func (o BandwidthPublicipArrayOutput) Index(i pulumi.IntInput) BandwidthPublicipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BandwidthPublicip {
		return vs[0].([]BandwidthPublicip)[vs[1].(int)]
	}).(BandwidthPublicipOutput)
}

type EipBandwidth struct {
	// Specifies whether the bandwidth is billed by traffic or by bandwidth
	// size. The value can be **traffic** or **bandwidth**. Changing this will create a new resource.
	ChargeMode *string `pulumi:"chargeMode"`
	// The shared bandwidth ID.\
	// This parameter is mandatory when `shareType` is set to **WHOLE**. Changing this will create a new resource.
	Id *string `pulumi:"id"`
	// Specifies the bandwidth name.\
	// The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
	// This parameter is mandatory when `shareType` is set to **PER**.
	Name *string `pulumi:"name"`
	// Specifies whether the bandwidth is dedicated or shared.\
	// Changing this will create a new resource. Possible values are as follows:
	// + **PER**: Dedicated bandwidth
	// + **WHOLE**: Shared bandwidth
	ShareType string `pulumi:"shareType"`
	// The bandwidth size.\
	// The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `shareType` is set to **PER**.
	Size *int `pulumi:"size"`
}

// EipBandwidthInput is an input type that accepts EipBandwidthArgs and EipBandwidthOutput values.
// You can construct a concrete instance of `EipBandwidthInput` via:
//
//	EipBandwidthArgs{...}
type EipBandwidthInput interface {
	pulumi.Input

	ToEipBandwidthOutput() EipBandwidthOutput
	ToEipBandwidthOutputWithContext(context.Context) EipBandwidthOutput
}

type EipBandwidthArgs struct {
	// Specifies whether the bandwidth is billed by traffic or by bandwidth
	// size. The value can be **traffic** or **bandwidth**. Changing this will create a new resource.
	ChargeMode pulumi.StringPtrInput `pulumi:"chargeMode"`
	// The shared bandwidth ID.\
	// This parameter is mandatory when `shareType` is set to **WHOLE**. Changing this will create a new resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the bandwidth name.\
	// The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
	// This parameter is mandatory when `shareType` is set to **PER**.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the bandwidth is dedicated or shared.\
	// Changing this will create a new resource. Possible values are as follows:
	// + **PER**: Dedicated bandwidth
	// + **WHOLE**: Shared bandwidth
	ShareType pulumi.StringInput `pulumi:"shareType"`
	// The bandwidth size.\
	// The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `shareType` is set to **PER**.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (EipBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EipBandwidth)(nil)).Elem()
}

func (i EipBandwidthArgs) ToEipBandwidthOutput() EipBandwidthOutput {
	return i.ToEipBandwidthOutputWithContext(context.Background())
}

func (i EipBandwidthArgs) ToEipBandwidthOutputWithContext(ctx context.Context) EipBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipBandwidthOutput)
}

func (i EipBandwidthArgs) ToEipBandwidthPtrOutput() EipBandwidthPtrOutput {
	return i.ToEipBandwidthPtrOutputWithContext(context.Background())
}

func (i EipBandwidthArgs) ToEipBandwidthPtrOutputWithContext(ctx context.Context) EipBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipBandwidthOutput).ToEipBandwidthPtrOutputWithContext(ctx)
}

// EipBandwidthPtrInput is an input type that accepts EipBandwidthArgs, EipBandwidthPtr and EipBandwidthPtrOutput values.
// You can construct a concrete instance of `EipBandwidthPtrInput` via:
//
//	        EipBandwidthArgs{...}
//
//	or:
//
//	        nil
type EipBandwidthPtrInput interface {
	pulumi.Input

	ToEipBandwidthPtrOutput() EipBandwidthPtrOutput
	ToEipBandwidthPtrOutputWithContext(context.Context) EipBandwidthPtrOutput
}

type eipBandwidthPtrType EipBandwidthArgs

func EipBandwidthPtr(v *EipBandwidthArgs) EipBandwidthPtrInput {
	return (*eipBandwidthPtrType)(v)
}

func (*eipBandwidthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EipBandwidth)(nil)).Elem()
}

func (i *eipBandwidthPtrType) ToEipBandwidthPtrOutput() EipBandwidthPtrOutput {
	return i.ToEipBandwidthPtrOutputWithContext(context.Background())
}

func (i *eipBandwidthPtrType) ToEipBandwidthPtrOutputWithContext(ctx context.Context) EipBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipBandwidthPtrOutput)
}

type EipBandwidthOutput struct{ *pulumi.OutputState }

func (EipBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipBandwidth)(nil)).Elem()
}

func (o EipBandwidthOutput) ToEipBandwidthOutput() EipBandwidthOutput {
	return o
}

func (o EipBandwidthOutput) ToEipBandwidthOutputWithContext(ctx context.Context) EipBandwidthOutput {
	return o
}

func (o EipBandwidthOutput) ToEipBandwidthPtrOutput() EipBandwidthPtrOutput {
	return o.ToEipBandwidthPtrOutputWithContext(context.Background())
}

func (o EipBandwidthOutput) ToEipBandwidthPtrOutputWithContext(ctx context.Context) EipBandwidthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EipBandwidth) *EipBandwidth {
		return &v
	}).(EipBandwidthPtrOutput)
}

// Specifies whether the bandwidth is billed by traffic or by bandwidth
// size. The value can be **traffic** or **bandwidth**. Changing this will create a new resource.
func (o EipBandwidthOutput) ChargeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipBandwidth) *string { return v.ChargeMode }).(pulumi.StringPtrOutput)
}

// The shared bandwidth ID.\
// This parameter is mandatory when `shareType` is set to **WHOLE**. Changing this will create a new resource.
func (o EipBandwidthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipBandwidth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the bandwidth name.\
// The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
// This parameter is mandatory when `shareType` is set to **PER**.
func (o EipBandwidthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipBandwidth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the bandwidth is dedicated or shared.\
// Changing this will create a new resource. Possible values are as follows:
// + **PER**: Dedicated bandwidth
// + **WHOLE**: Shared bandwidth
func (o EipBandwidthOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v EipBandwidth) string { return v.ShareType }).(pulumi.StringOutput)
}

// The bandwidth size.\
// The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `shareType` is set to **PER**.
func (o EipBandwidthOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EipBandwidth) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type EipBandwidthPtrOutput struct{ *pulumi.OutputState }

func (EipBandwidthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipBandwidth)(nil)).Elem()
}

func (o EipBandwidthPtrOutput) ToEipBandwidthPtrOutput() EipBandwidthPtrOutput {
	return o
}

func (o EipBandwidthPtrOutput) ToEipBandwidthPtrOutputWithContext(ctx context.Context) EipBandwidthPtrOutput {
	return o
}

func (o EipBandwidthPtrOutput) Elem() EipBandwidthOutput {
	return o.ApplyT(func(v *EipBandwidth) EipBandwidth {
		if v != nil {
			return *v
		}
		var ret EipBandwidth
		return ret
	}).(EipBandwidthOutput)
}

// Specifies whether the bandwidth is billed by traffic or by bandwidth
// size. The value can be **traffic** or **bandwidth**. Changing this will create a new resource.
func (o EipBandwidthPtrOutput) ChargeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipBandwidth) *string {
		if v == nil {
			return nil
		}
		return v.ChargeMode
	}).(pulumi.StringPtrOutput)
}

// The shared bandwidth ID.\
// This parameter is mandatory when `shareType` is set to **WHOLE**. Changing this will create a new resource.
func (o EipBandwidthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipBandwidth) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the bandwidth name.\
// The name can contain `1` to `64` characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
// This parameter is mandatory when `shareType` is set to **PER**.
func (o EipBandwidthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipBandwidth) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the bandwidth is dedicated or shared.\
// Changing this will create a new resource. Possible values are as follows:
// + **PER**: Dedicated bandwidth
// + **WHOLE**: Shared bandwidth
func (o EipBandwidthPtrOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipBandwidth) *string {
		if v == nil {
			return nil
		}
		return &v.ShareType
	}).(pulumi.StringPtrOutput)
}

// The bandwidth size.\
// The value ranges from `1` to `300` Mbit/s. This parameter is mandatory when `shareType` is set to **PER**.
func (o EipBandwidthPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EipBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type EipPublicip struct {
	// Specifies the EIP address to be assigned.\
	// The value must be a valid **IPv4** address in the available IP address range.
	// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IP version, either `4` (default) or `6`.
	IpVersion *int `pulumi:"ipVersion"`
	// The port ID which the EIP associated with.
	PortId *string `pulumi:"portId"`
	// Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
	// and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
	Type *string `pulumi:"type"`
}

// EipPublicipInput is an input type that accepts EipPublicipArgs and EipPublicipOutput values.
// You can construct a concrete instance of `EipPublicipInput` via:
//
//	EipPublicipArgs{...}
type EipPublicipInput interface {
	pulumi.Input

	ToEipPublicipOutput() EipPublicipOutput
	ToEipPublicipOutputWithContext(context.Context) EipPublicipOutput
}

type EipPublicipArgs struct {
	// Specifies the EIP address to be assigned.\
	// The value must be a valid **IPv4** address in the available IP address range.
	// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Specifies the IP version, either `4` (default) or `6`.
	IpVersion pulumi.IntPtrInput `pulumi:"ipVersion"`
	// The port ID which the EIP associated with.
	PortId pulumi.StringPtrInput `pulumi:"portId"`
	// Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
	// and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EipPublicipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EipPublicip)(nil)).Elem()
}

func (i EipPublicipArgs) ToEipPublicipOutput() EipPublicipOutput {
	return i.ToEipPublicipOutputWithContext(context.Background())
}

func (i EipPublicipArgs) ToEipPublicipOutputWithContext(ctx context.Context) EipPublicipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipPublicipOutput)
}

func (i EipPublicipArgs) ToEipPublicipPtrOutput() EipPublicipPtrOutput {
	return i.ToEipPublicipPtrOutputWithContext(context.Background())
}

func (i EipPublicipArgs) ToEipPublicipPtrOutputWithContext(ctx context.Context) EipPublicipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipPublicipOutput).ToEipPublicipPtrOutputWithContext(ctx)
}

// EipPublicipPtrInput is an input type that accepts EipPublicipArgs, EipPublicipPtr and EipPublicipPtrOutput values.
// You can construct a concrete instance of `EipPublicipPtrInput` via:
//
//	        EipPublicipArgs{...}
//
//	or:
//
//	        nil
type EipPublicipPtrInput interface {
	pulumi.Input

	ToEipPublicipPtrOutput() EipPublicipPtrOutput
	ToEipPublicipPtrOutputWithContext(context.Context) EipPublicipPtrOutput
}

type eipPublicipPtrType EipPublicipArgs

func EipPublicipPtr(v *EipPublicipArgs) EipPublicipPtrInput {
	return (*eipPublicipPtrType)(v)
}

func (*eipPublicipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EipPublicip)(nil)).Elem()
}

func (i *eipPublicipPtrType) ToEipPublicipPtrOutput() EipPublicipPtrOutput {
	return i.ToEipPublicipPtrOutputWithContext(context.Background())
}

func (i *eipPublicipPtrType) ToEipPublicipPtrOutputWithContext(ctx context.Context) EipPublicipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipPublicipPtrOutput)
}

type EipPublicipOutput struct{ *pulumi.OutputState }

func (EipPublicipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipPublicip)(nil)).Elem()
}

func (o EipPublicipOutput) ToEipPublicipOutput() EipPublicipOutput {
	return o
}

func (o EipPublicipOutput) ToEipPublicipOutputWithContext(ctx context.Context) EipPublicipOutput {
	return o
}

func (o EipPublicipOutput) ToEipPublicipPtrOutput() EipPublicipPtrOutput {
	return o.ToEipPublicipPtrOutputWithContext(context.Background())
}

func (o EipPublicipOutput) ToEipPublicipPtrOutputWithContext(ctx context.Context) EipPublicipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EipPublicip) *EipPublicip {
		return &v
	}).(EipPublicipPtrOutput)
}

// Specifies the EIP address to be assigned.\
// The value must be a valid **IPv4** address in the available IP address range.
// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
func (o EipPublicipOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipPublicip) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Specifies the IP version, either `4` (default) or `6`.
func (o EipPublicipOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EipPublicip) *int { return v.IpVersion }).(pulumi.IntPtrOutput)
}

// The port ID which the EIP associated with.
func (o EipPublicipOutput) PortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipPublicip) *string { return v.PortId }).(pulumi.StringPtrOutput)
}

// Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
// and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
func (o EipPublicipOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipPublicip) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EipPublicipPtrOutput struct{ *pulumi.OutputState }

func (EipPublicipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipPublicip)(nil)).Elem()
}

func (o EipPublicipPtrOutput) ToEipPublicipPtrOutput() EipPublicipPtrOutput {
	return o
}

func (o EipPublicipPtrOutput) ToEipPublicipPtrOutputWithContext(ctx context.Context) EipPublicipPtrOutput {
	return o
}

func (o EipPublicipPtrOutput) Elem() EipPublicipOutput {
	return o.ApplyT(func(v *EipPublicip) EipPublicip {
		if v != nil {
			return *v
		}
		var ret EipPublicip
		return ret
	}).(EipPublicipOutput)
}

// Specifies the EIP address to be assigned.\
// The value must be a valid **IPv4** address in the available IP address range.
// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
func (o EipPublicipPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipPublicip) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// Specifies the IP version, either `4` (default) or `6`.
func (o EipPublicipPtrOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EipPublicip) *int {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.IntPtrOutput)
}

// The port ID which the EIP associated with.
func (o EipPublicipPtrOutput) PortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipPublicip) *string {
		if v == nil {
			return nil
		}
		return v.PortId
	}).(pulumi.StringPtrOutput)
}

// Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
// and **5_sbgp** (static BGP), the default value is **5_bgp**. Changing this will create a new resource.
func (o EipPublicipPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EipPublicip) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PortAllowedAddressPair struct {
	IpAddress  string  `pulumi:"ipAddress"`
	MacAddress *string `pulumi:"macAddress"`
}

// PortAllowedAddressPairInput is an input type that accepts PortAllowedAddressPairArgs and PortAllowedAddressPairOutput values.
// You can construct a concrete instance of `PortAllowedAddressPairInput` via:
//
//	PortAllowedAddressPairArgs{...}
type PortAllowedAddressPairInput interface {
	pulumi.Input

	ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput
	ToPortAllowedAddressPairOutputWithContext(context.Context) PortAllowedAddressPairOutput
}

type PortAllowedAddressPairArgs struct {
	IpAddress  pulumi.StringInput    `pulumi:"ipAddress"`
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
}

func (PortAllowedAddressPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortAllowedAddressPair)(nil)).Elem()
}

func (i PortAllowedAddressPairArgs) ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput {
	return i.ToPortAllowedAddressPairOutputWithContext(context.Background())
}

func (i PortAllowedAddressPairArgs) ToPortAllowedAddressPairOutputWithContext(ctx context.Context) PortAllowedAddressPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortAllowedAddressPairOutput)
}

// PortAllowedAddressPairArrayInput is an input type that accepts PortAllowedAddressPairArray and PortAllowedAddressPairArrayOutput values.
// You can construct a concrete instance of `PortAllowedAddressPairArrayInput` via:
//
//	PortAllowedAddressPairArray{ PortAllowedAddressPairArgs{...} }
type PortAllowedAddressPairArrayInput interface {
	pulumi.Input

	ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput
	ToPortAllowedAddressPairArrayOutputWithContext(context.Context) PortAllowedAddressPairArrayOutput
}

type PortAllowedAddressPairArray []PortAllowedAddressPairInput

func (PortAllowedAddressPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortAllowedAddressPair)(nil)).Elem()
}

func (i PortAllowedAddressPairArray) ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput {
	return i.ToPortAllowedAddressPairArrayOutputWithContext(context.Background())
}

func (i PortAllowedAddressPairArray) ToPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) PortAllowedAddressPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortAllowedAddressPairArrayOutput)
}

type PortAllowedAddressPairOutput struct{ *pulumi.OutputState }

func (PortAllowedAddressPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortAllowedAddressPair)(nil)).Elem()
}

func (o PortAllowedAddressPairOutput) ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput {
	return o
}

func (o PortAllowedAddressPairOutput) ToPortAllowedAddressPairOutputWithContext(ctx context.Context) PortAllowedAddressPairOutput {
	return o
}

func (o PortAllowedAddressPairOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v PortAllowedAddressPair) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o PortAllowedAddressPairOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortAllowedAddressPair) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

type PortAllowedAddressPairArrayOutput struct{ *pulumi.OutputState }

func (PortAllowedAddressPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortAllowedAddressPair)(nil)).Elem()
}

func (o PortAllowedAddressPairArrayOutput) ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput {
	return o
}

func (o PortAllowedAddressPairArrayOutput) ToPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) PortAllowedAddressPairArrayOutput {
	return o
}

func (o PortAllowedAddressPairArrayOutput) Index(i pulumi.IntInput) PortAllowedAddressPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortAllowedAddressPair {
		return vs[0].([]PortAllowedAddressPair)[vs[1].(int)]
	}).(PortAllowedAddressPairOutput)
}

type PortExtraDhcpOption struct {
	IpVersion *int   `pulumi:"ipVersion"`
	Name      string `pulumi:"name"`
	Value     string `pulumi:"value"`
}

// PortExtraDhcpOptionInput is an input type that accepts PortExtraDhcpOptionArgs and PortExtraDhcpOptionOutput values.
// You can construct a concrete instance of `PortExtraDhcpOptionInput` via:
//
//	PortExtraDhcpOptionArgs{...}
type PortExtraDhcpOptionInput interface {
	pulumi.Input

	ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput
	ToPortExtraDhcpOptionOutputWithContext(context.Context) PortExtraDhcpOptionOutput
}

type PortExtraDhcpOptionArgs struct {
	IpVersion pulumi.IntPtrInput `pulumi:"ipVersion"`
	Name      pulumi.StringInput `pulumi:"name"`
	Value     pulumi.StringInput `pulumi:"value"`
}

func (PortExtraDhcpOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortExtraDhcpOption)(nil)).Elem()
}

func (i PortExtraDhcpOptionArgs) ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput {
	return i.ToPortExtraDhcpOptionOutputWithContext(context.Background())
}

func (i PortExtraDhcpOptionArgs) ToPortExtraDhcpOptionOutputWithContext(ctx context.Context) PortExtraDhcpOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortExtraDhcpOptionOutput)
}

// PortExtraDhcpOptionArrayInput is an input type that accepts PortExtraDhcpOptionArray and PortExtraDhcpOptionArrayOutput values.
// You can construct a concrete instance of `PortExtraDhcpOptionArrayInput` via:
//
//	PortExtraDhcpOptionArray{ PortExtraDhcpOptionArgs{...} }
type PortExtraDhcpOptionArrayInput interface {
	pulumi.Input

	ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput
	ToPortExtraDhcpOptionArrayOutputWithContext(context.Context) PortExtraDhcpOptionArrayOutput
}

type PortExtraDhcpOptionArray []PortExtraDhcpOptionInput

func (PortExtraDhcpOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortExtraDhcpOption)(nil)).Elem()
}

func (i PortExtraDhcpOptionArray) ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput {
	return i.ToPortExtraDhcpOptionArrayOutputWithContext(context.Background())
}

func (i PortExtraDhcpOptionArray) ToPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) PortExtraDhcpOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortExtraDhcpOptionArrayOutput)
}

type PortExtraDhcpOptionOutput struct{ *pulumi.OutputState }

func (PortExtraDhcpOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortExtraDhcpOption)(nil)).Elem()
}

func (o PortExtraDhcpOptionOutput) ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput {
	return o
}

func (o PortExtraDhcpOptionOutput) ToPortExtraDhcpOptionOutputWithContext(ctx context.Context) PortExtraDhcpOptionOutput {
	return o
}

func (o PortExtraDhcpOptionOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) *int { return v.IpVersion }).(pulumi.IntPtrOutput)
}

func (o PortExtraDhcpOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) string { return v.Name }).(pulumi.StringOutput)
}

func (o PortExtraDhcpOptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) string { return v.Value }).(pulumi.StringOutput)
}

type PortExtraDhcpOptionArrayOutput struct{ *pulumi.OutputState }

func (PortExtraDhcpOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortExtraDhcpOption)(nil)).Elem()
}

func (o PortExtraDhcpOptionArrayOutput) ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput {
	return o
}

func (o PortExtraDhcpOptionArrayOutput) ToPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) PortExtraDhcpOptionArrayOutput {
	return o
}

func (o PortExtraDhcpOptionArrayOutput) Index(i pulumi.IntInput) PortExtraDhcpOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortExtraDhcpOption {
		return vs[0].([]PortExtraDhcpOption)[vs[1].(int)]
	}).(PortExtraDhcpOptionOutput)
}

type PortFixedIp struct {
	IpAddress *string `pulumi:"ipAddress"`
	SubnetId  string  `pulumi:"subnetId"`
}

// PortFixedIpInput is an input type that accepts PortFixedIpArgs and PortFixedIpOutput values.
// You can construct a concrete instance of `PortFixedIpInput` via:
//
//	PortFixedIpArgs{...}
type PortFixedIpInput interface {
	pulumi.Input

	ToPortFixedIpOutput() PortFixedIpOutput
	ToPortFixedIpOutputWithContext(context.Context) PortFixedIpOutput
}

type PortFixedIpArgs struct {
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	SubnetId  pulumi.StringInput    `pulumi:"subnetId"`
}

func (PortFixedIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortFixedIp)(nil)).Elem()
}

func (i PortFixedIpArgs) ToPortFixedIpOutput() PortFixedIpOutput {
	return i.ToPortFixedIpOutputWithContext(context.Background())
}

func (i PortFixedIpArgs) ToPortFixedIpOutputWithContext(ctx context.Context) PortFixedIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortFixedIpOutput)
}

// PortFixedIpArrayInput is an input type that accepts PortFixedIpArray and PortFixedIpArrayOutput values.
// You can construct a concrete instance of `PortFixedIpArrayInput` via:
//
//	PortFixedIpArray{ PortFixedIpArgs{...} }
type PortFixedIpArrayInput interface {
	pulumi.Input

	ToPortFixedIpArrayOutput() PortFixedIpArrayOutput
	ToPortFixedIpArrayOutputWithContext(context.Context) PortFixedIpArrayOutput
}

type PortFixedIpArray []PortFixedIpInput

func (PortFixedIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortFixedIp)(nil)).Elem()
}

func (i PortFixedIpArray) ToPortFixedIpArrayOutput() PortFixedIpArrayOutput {
	return i.ToPortFixedIpArrayOutputWithContext(context.Background())
}

func (i PortFixedIpArray) ToPortFixedIpArrayOutputWithContext(ctx context.Context) PortFixedIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortFixedIpArrayOutput)
}

type PortFixedIpOutput struct{ *pulumi.OutputState }

func (PortFixedIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortFixedIp)(nil)).Elem()
}

func (o PortFixedIpOutput) ToPortFixedIpOutput() PortFixedIpOutput {
	return o
}

func (o PortFixedIpOutput) ToPortFixedIpOutputWithContext(ctx context.Context) PortFixedIpOutput {
	return o
}

func (o PortFixedIpOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortFixedIp) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o PortFixedIpOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v PortFixedIp) string { return v.SubnetId }).(pulumi.StringOutput)
}

type PortFixedIpArrayOutput struct{ *pulumi.OutputState }

func (PortFixedIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortFixedIp)(nil)).Elem()
}

func (o PortFixedIpArrayOutput) ToPortFixedIpArrayOutput() PortFixedIpArrayOutput {
	return o
}

func (o PortFixedIpArrayOutput) ToPortFixedIpArrayOutputWithContext(ctx context.Context) PortFixedIpArrayOutput {
	return o
}

func (o PortFixedIpArrayOutput) Index(i pulumi.IntInput) PortFixedIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortFixedIp {
		return vs[0].([]PortFixedIp)[vs[1].(int)]
	}).(PortFixedIpOutput)
}

type RouteTableRoute struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
	// with any subnet in the VPC.
	Destination string `pulumi:"destination"`
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop string `pulumi:"nexthop"`
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type string `pulumi:"type"`
}

// RouteTableRouteInput is an input type that accepts RouteTableRouteArgs and RouteTableRouteOutput values.
// You can construct a concrete instance of `RouteTableRouteInput` via:
//
//	RouteTableRouteArgs{...}
type RouteTableRouteInput interface {
	pulumi.Input

	ToRouteTableRouteOutput() RouteTableRouteOutput
	ToRouteTableRouteOutputWithContext(context.Context) RouteTableRouteOutput
}

type RouteTableRouteArgs struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
	// with any subnet in the VPC.
	Destination pulumi.StringInput `pulumi:"destination"`
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop pulumi.StringInput `pulumi:"nexthop"`
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RouteTableRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableRoute)(nil)).Elem()
}

func (i RouteTableRouteArgs) ToRouteTableRouteOutput() RouteTableRouteOutput {
	return i.ToRouteTableRouteOutputWithContext(context.Background())
}

func (i RouteTableRouteArgs) ToRouteTableRouteOutputWithContext(ctx context.Context) RouteTableRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableRouteOutput)
}

// RouteTableRouteArrayInput is an input type that accepts RouteTableRouteArray and RouteTableRouteArrayOutput values.
// You can construct a concrete instance of `RouteTableRouteArrayInput` via:
//
//	RouteTableRouteArray{ RouteTableRouteArgs{...} }
type RouteTableRouteArrayInput interface {
	pulumi.Input

	ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput
	ToRouteTableRouteArrayOutputWithContext(context.Context) RouteTableRouteArrayOutput
}

type RouteTableRouteArray []RouteTableRouteInput

func (RouteTableRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableRoute)(nil)).Elem()
}

func (i RouteTableRouteArray) ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput {
	return i.ToRouteTableRouteArrayOutputWithContext(context.Background())
}

func (i RouteTableRouteArray) ToRouteTableRouteArrayOutputWithContext(ctx context.Context) RouteTableRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableRouteArrayOutput)
}

type RouteTableRouteOutput struct{ *pulumi.OutputState }

func (RouteTableRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableRoute)(nil)).Elem()
}

func (o RouteTableRouteOutput) ToRouteTableRouteOutput() RouteTableRouteOutput {
	return o
}

func (o RouteTableRouteOutput) ToRouteTableRouteOutputWithContext(ctx context.Context) RouteTableRouteOutput {
	return o
}

// Specifies the supplementary information about the route.
// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
func (o RouteTableRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableRoute) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the destination address in the CIDR notation format,
// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
// with any subnet in the VPC.
func (o RouteTableRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTableRoute) string { return v.Destination }).(pulumi.StringOutput)
}

// Specifies the next hop.
// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
// + If the route type is **vip**, the value is a virtual IP address.
// + If the route type is **nat**, the value is a VPN gateway ID.
// + If the route type is **peering**, the value is a VPC peering connection ID.
// + If the route type is **vpn**, the value is a VPN gateway ID.
// + If the route type is **dc**, the value is a Direct Connect gateway ID.
// + If the route type is **cc**, the value is a Cloud Connection ID.
func (o RouteTableRouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTableRoute) string { return v.Nexthop }).(pulumi.StringOutput)
}

// Specifies the route type. Currently, the value can be:
// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
func (o RouteTableRouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTableRoute) string { return v.Type }).(pulumi.StringOutput)
}

type RouteTableRouteArrayOutput struct{ *pulumi.OutputState }

func (RouteTableRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableRoute)(nil)).Elem()
}

func (o RouteTableRouteArrayOutput) ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput {
	return o
}

func (o RouteTableRouteArrayOutput) ToRouteTableRouteArrayOutputWithContext(ctx context.Context) RouteTableRouteArrayOutput {
	return o
}

func (o RouteTableRouteArrayOutput) Index(i pulumi.IntInput) RouteTableRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTableRoute {
		return vs[0].([]RouteTableRoute)[vs[1].(int)]
	}).(RouteTableRouteOutput)
}

type SecgroupRuleType struct {
	// The effective policy.
	Action *string `pulumi:"action"`
	// Specifies the description for the security group.
	Description *string `pulumi:"description"`
	// The direction of the rule. The value can be *egress* or *ingress*.
	Direction *string `pulumi:"direction"`
	// The IP protocol version. The value can be *IPv4* or *IPv6*.
	Ethertype *string `pulumi:"ethertype"`
	// The security group rule ID.
	Id           *string `pulumi:"id"`
	PortRangeMax *int    `pulumi:"portRangeMax"`
	PortRangeMin *int    `pulumi:"portRangeMin"`
	// The port value range.
	Ports *string `pulumi:"ports"`
	// The priority number.
	Priority *int `pulumi:"priority"`
	// The protocol type.
	Protocol *string `pulumi:"protocol"`
	// The ID of the remote address group.
	RemoteAddressGroupId *string `pulumi:"remoteAddressGroupId"`
	// The ID of the peer security group.
	RemoteGroupId *string `pulumi:"remoteGroupId"`
	// The remote IP address. The value can be in the CIDR format or IP addresses.
	RemoteIpPrefix *string `pulumi:"remoteIpPrefix"`
}

// SecgroupRuleTypeInput is an input type that accepts SecgroupRuleTypeArgs and SecgroupRuleTypeOutput values.
// You can construct a concrete instance of `SecgroupRuleTypeInput` via:
//
//	SecgroupRuleTypeArgs{...}
type SecgroupRuleTypeInput interface {
	pulumi.Input

	ToSecgroupRuleTypeOutput() SecgroupRuleTypeOutput
	ToSecgroupRuleTypeOutputWithContext(context.Context) SecgroupRuleTypeOutput
}

type SecgroupRuleTypeArgs struct {
	// The effective policy.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Specifies the description for the security group.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The direction of the rule. The value can be *egress* or *ingress*.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The IP protocol version. The value can be *IPv4* or *IPv6*.
	Ethertype pulumi.StringPtrInput `pulumi:"ethertype"`
	// The security group rule ID.
	Id           pulumi.StringPtrInput `pulumi:"id"`
	PortRangeMax pulumi.IntPtrInput    `pulumi:"portRangeMax"`
	PortRangeMin pulumi.IntPtrInput    `pulumi:"portRangeMin"`
	// The port value range.
	Ports pulumi.StringPtrInput `pulumi:"ports"`
	// The priority number.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The protocol type.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The ID of the remote address group.
	RemoteAddressGroupId pulumi.StringPtrInput `pulumi:"remoteAddressGroupId"`
	// The ID of the peer security group.
	RemoteGroupId pulumi.StringPtrInput `pulumi:"remoteGroupId"`
	// The remote IP address. The value can be in the CIDR format or IP addresses.
	RemoteIpPrefix pulumi.StringPtrInput `pulumi:"remoteIpPrefix"`
}

func (SecgroupRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecgroupRuleType)(nil)).Elem()
}

func (i SecgroupRuleTypeArgs) ToSecgroupRuleTypeOutput() SecgroupRuleTypeOutput {
	return i.ToSecgroupRuleTypeOutputWithContext(context.Background())
}

func (i SecgroupRuleTypeArgs) ToSecgroupRuleTypeOutputWithContext(ctx context.Context) SecgroupRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecgroupRuleTypeOutput)
}

// SecgroupRuleTypeArrayInput is an input type that accepts SecgroupRuleTypeArray and SecgroupRuleTypeArrayOutput values.
// You can construct a concrete instance of `SecgroupRuleTypeArrayInput` via:
//
//	SecgroupRuleTypeArray{ SecgroupRuleTypeArgs{...} }
type SecgroupRuleTypeArrayInput interface {
	pulumi.Input

	ToSecgroupRuleTypeArrayOutput() SecgroupRuleTypeArrayOutput
	ToSecgroupRuleTypeArrayOutputWithContext(context.Context) SecgroupRuleTypeArrayOutput
}

type SecgroupRuleTypeArray []SecgroupRuleTypeInput

func (SecgroupRuleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecgroupRuleType)(nil)).Elem()
}

func (i SecgroupRuleTypeArray) ToSecgroupRuleTypeArrayOutput() SecgroupRuleTypeArrayOutput {
	return i.ToSecgroupRuleTypeArrayOutputWithContext(context.Background())
}

func (i SecgroupRuleTypeArray) ToSecgroupRuleTypeArrayOutputWithContext(ctx context.Context) SecgroupRuleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecgroupRuleTypeArrayOutput)
}

type SecgroupRuleTypeOutput struct{ *pulumi.OutputState }

func (SecgroupRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecgroupRuleType)(nil)).Elem()
}

func (o SecgroupRuleTypeOutput) ToSecgroupRuleTypeOutput() SecgroupRuleTypeOutput {
	return o
}

func (o SecgroupRuleTypeOutput) ToSecgroupRuleTypeOutputWithContext(ctx context.Context) SecgroupRuleTypeOutput {
	return o
}

// The effective policy.
func (o SecgroupRuleTypeOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the description for the security group.
func (o SecgroupRuleTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction of the rule. The value can be *egress* or *ingress*.
func (o SecgroupRuleTypeOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The IP protocol version. The value can be *IPv4* or *IPv6*.
func (o SecgroupRuleTypeOutput) Ethertype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Ethertype }).(pulumi.StringPtrOutput)
}

// The security group rule ID.
func (o SecgroupRuleTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o SecgroupRuleTypeOutput) PortRangeMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *int { return v.PortRangeMax }).(pulumi.IntPtrOutput)
}

func (o SecgroupRuleTypeOutput) PortRangeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *int { return v.PortRangeMin }).(pulumi.IntPtrOutput)
}

// The port value range.
func (o SecgroupRuleTypeOutput) Ports() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Ports }).(pulumi.StringPtrOutput)
}

// The priority number.
func (o SecgroupRuleTypeOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The protocol type.
func (o SecgroupRuleTypeOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The ID of the remote address group.
func (o SecgroupRuleTypeOutput) RemoteAddressGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.RemoteAddressGroupId }).(pulumi.StringPtrOutput)
}

// The ID of the peer security group.
func (o SecgroupRuleTypeOutput) RemoteGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.RemoteGroupId }).(pulumi.StringPtrOutput)
}

// The remote IP address. The value can be in the CIDR format or IP addresses.
func (o SecgroupRuleTypeOutput) RemoteIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecgroupRuleType) *string { return v.RemoteIpPrefix }).(pulumi.StringPtrOutput)
}

type SecgroupRuleTypeArrayOutput struct{ *pulumi.OutputState }

func (SecgroupRuleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecgroupRuleType)(nil)).Elem()
}

func (o SecgroupRuleTypeArrayOutput) ToSecgroupRuleTypeArrayOutput() SecgroupRuleTypeArrayOutput {
	return o
}

func (o SecgroupRuleTypeArrayOutput) ToSecgroupRuleTypeArrayOutputWithContext(ctx context.Context) SecgroupRuleTypeArrayOutput {
	return o
}

func (o SecgroupRuleTypeArrayOutput) Index(i pulumi.IntInput) SecgroupRuleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecgroupRuleType {
		return vs[0].([]SecgroupRuleType)[vs[1].(int)]
	}).(SecgroupRuleTypeOutput)
}

type VpcRoute struct {
	Destination *string `pulumi:"destination"`
	Nexthop     *string `pulumi:"nexthop"`
}

// VpcRouteInput is an input type that accepts VpcRouteArgs and VpcRouteOutput values.
// You can construct a concrete instance of `VpcRouteInput` via:
//
//	VpcRouteArgs{...}
type VpcRouteInput interface {
	pulumi.Input

	ToVpcRouteOutput() VpcRouteOutput
	ToVpcRouteOutputWithContext(context.Context) VpcRouteOutput
}

type VpcRouteArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	Nexthop     pulumi.StringPtrInput `pulumi:"nexthop"`
}

func (VpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcRoute)(nil)).Elem()
}

func (i VpcRouteArgs) ToVpcRouteOutput() VpcRouteOutput {
	return i.ToVpcRouteOutputWithContext(context.Background())
}

func (i VpcRouteArgs) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteOutput)
}

// VpcRouteArrayInput is an input type that accepts VpcRouteArray and VpcRouteArrayOutput values.
// You can construct a concrete instance of `VpcRouteArrayInput` via:
//
//	VpcRouteArray{ VpcRouteArgs{...} }
type VpcRouteArrayInput interface {
	pulumi.Input

	ToVpcRouteArrayOutput() VpcRouteArrayOutput
	ToVpcRouteArrayOutputWithContext(context.Context) VpcRouteArrayOutput
}

type VpcRouteArray []VpcRouteInput

func (VpcRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcRoute)(nil)).Elem()
}

func (i VpcRouteArray) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return i.ToVpcRouteArrayOutputWithContext(context.Background())
}

func (i VpcRouteArray) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteArrayOutput)
}

type VpcRouteOutput struct{ *pulumi.OutputState }

func (VpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcRoute)(nil)).Elem()
}

func (o VpcRouteOutput) ToVpcRouteOutput() VpcRouteOutput {
	return o
}

func (o VpcRouteOutput) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return o
}

func (o VpcRouteOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcRoute) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o VpcRouteOutput) Nexthop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcRoute) *string { return v.Nexthop }).(pulumi.StringPtrOutput)
}

type VpcRouteArrayOutput struct{ *pulumi.OutputState }

func (VpcRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcRoute)(nil)).Elem()
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) Index(i pulumi.IntInput) VpcRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcRoute {
		return vs[0].([]VpcRoute)[vs[1].(int)]
	}).(VpcRouteOutput)
}

type GetRouteTableRoute struct {
	// The description about the route.
	Description string `pulumi:"description"`
	// The destination address in the CIDR notation format
	Destination string `pulumi:"destination"`
	// The next hop.
	Nexthop string `pulumi:"nexthop"`
	// The route type.
	Type string `pulumi:"type"`
}

// GetRouteTableRouteInput is an input type that accepts GetRouteTableRouteArgs and GetRouteTableRouteOutput values.
// You can construct a concrete instance of `GetRouteTableRouteInput` via:
//
//	GetRouteTableRouteArgs{...}
type GetRouteTableRouteInput interface {
	pulumi.Input

	ToGetRouteTableRouteOutput() GetRouteTableRouteOutput
	ToGetRouteTableRouteOutputWithContext(context.Context) GetRouteTableRouteOutput
}

type GetRouteTableRouteArgs struct {
	// The description about the route.
	Description pulumi.StringInput `pulumi:"description"`
	// The destination address in the CIDR notation format
	Destination pulumi.StringInput `pulumi:"destination"`
	// The next hop.
	Nexthop pulumi.StringInput `pulumi:"nexthop"`
	// The route type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRouteTableRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableRoute)(nil)).Elem()
}

func (i GetRouteTableRouteArgs) ToGetRouteTableRouteOutput() GetRouteTableRouteOutput {
	return i.ToGetRouteTableRouteOutputWithContext(context.Background())
}

func (i GetRouteTableRouteArgs) ToGetRouteTableRouteOutputWithContext(ctx context.Context) GetRouteTableRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableRouteOutput)
}

// GetRouteTableRouteArrayInput is an input type that accepts GetRouteTableRouteArray and GetRouteTableRouteArrayOutput values.
// You can construct a concrete instance of `GetRouteTableRouteArrayInput` via:
//
//	GetRouteTableRouteArray{ GetRouteTableRouteArgs{...} }
type GetRouteTableRouteArrayInput interface {
	pulumi.Input

	ToGetRouteTableRouteArrayOutput() GetRouteTableRouteArrayOutput
	ToGetRouteTableRouteArrayOutputWithContext(context.Context) GetRouteTableRouteArrayOutput
}

type GetRouteTableRouteArray []GetRouteTableRouteInput

func (GetRouteTableRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableRoute)(nil)).Elem()
}

func (i GetRouteTableRouteArray) ToGetRouteTableRouteArrayOutput() GetRouteTableRouteArrayOutput {
	return i.ToGetRouteTableRouteArrayOutputWithContext(context.Background())
}

func (i GetRouteTableRouteArray) ToGetRouteTableRouteArrayOutputWithContext(ctx context.Context) GetRouteTableRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableRouteArrayOutput)
}

type GetRouteTableRouteOutput struct{ *pulumi.OutputState }

func (GetRouteTableRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableRoute)(nil)).Elem()
}

func (o GetRouteTableRouteOutput) ToGetRouteTableRouteOutput() GetRouteTableRouteOutput {
	return o
}

func (o GetRouteTableRouteOutput) ToGetRouteTableRouteOutputWithContext(ctx context.Context) GetRouteTableRouteOutput {
	return o
}

// The description about the route.
func (o GetRouteTableRouteOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoute) string { return v.Description }).(pulumi.StringOutput)
}

// The destination address in the CIDR notation format
func (o GetRouteTableRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoute) string { return v.Destination }).(pulumi.StringOutput)
}

// The next hop.
func (o GetRouteTableRouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoute) string { return v.Nexthop }).(pulumi.StringOutput)
}

// The route type.
func (o GetRouteTableRouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoute) string { return v.Type }).(pulumi.StringOutput)
}

type GetRouteTableRouteArrayOutput struct{ *pulumi.OutputState }

func (GetRouteTableRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableRoute)(nil)).Elem()
}

func (o GetRouteTableRouteArrayOutput) ToGetRouteTableRouteArrayOutput() GetRouteTableRouteArrayOutput {
	return o
}

func (o GetRouteTableRouteArrayOutput) ToGetRouteTableRouteArrayOutputWithContext(ctx context.Context) GetRouteTableRouteArrayOutput {
	return o
}

func (o GetRouteTableRouteArrayOutput) Index(i pulumi.IntInput) GetRouteTableRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteTableRoute {
		return vs[0].([]GetRouteTableRoute)[vs[1].(int)]
	}).(GetRouteTableRouteOutput)
}

type GetSecgroupRuleType struct {
	// The effective policy.
	Action string `pulumi:"action"`
	// The supplementary information about the security group rule.
	Description string `pulumi:"description"`
	// The direction of the rule. The value can be *egress* or *ingress*.
	Direction string `pulumi:"direction"`
	// The IP protocol version. The value can be *IPv4* or *IPv6*.
	Ethertype string `pulumi:"ethertype"`
	// The security group rule ID.
	Id           string `pulumi:"id"`
	PortRangeMax int    `pulumi:"portRangeMax"`
	PortRangeMin int    `pulumi:"portRangeMin"`
	// The port value range.
	Ports string `pulumi:"ports"`
	// The priority number.
	Priority int `pulumi:"priority"`
	// The protocol type.
	Protocol string `pulumi:"protocol"`
	// The ID of the remote address group.
	RemoteAddressGroupId string `pulumi:"remoteAddressGroupId"`
	// The ID of the peer security group.
	RemoteGroupId string `pulumi:"remoteGroupId"`
	// The remote IP address. The value can be in the CIDR format or IP addresses.
	RemoteIpPrefix string `pulumi:"remoteIpPrefix"`
}

// GetSecgroupRuleTypeInput is an input type that accepts GetSecgroupRuleTypeArgs and GetSecgroupRuleTypeOutput values.
// You can construct a concrete instance of `GetSecgroupRuleTypeInput` via:
//
//	GetSecgroupRuleTypeArgs{...}
type GetSecgroupRuleTypeInput interface {
	pulumi.Input

	ToGetSecgroupRuleTypeOutput() GetSecgroupRuleTypeOutput
	ToGetSecgroupRuleTypeOutputWithContext(context.Context) GetSecgroupRuleTypeOutput
}

type GetSecgroupRuleTypeArgs struct {
	// The effective policy.
	Action pulumi.StringInput `pulumi:"action"`
	// The supplementary information about the security group rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The direction of the rule. The value can be *egress* or *ingress*.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The IP protocol version. The value can be *IPv4* or *IPv6*.
	Ethertype pulumi.StringInput `pulumi:"ethertype"`
	// The security group rule ID.
	Id           pulumi.StringInput `pulumi:"id"`
	PortRangeMax pulumi.IntInput    `pulumi:"portRangeMax"`
	PortRangeMin pulumi.IntInput    `pulumi:"portRangeMin"`
	// The port value range.
	Ports pulumi.StringInput `pulumi:"ports"`
	// The priority number.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The protocol type.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The ID of the remote address group.
	RemoteAddressGroupId pulumi.StringInput `pulumi:"remoteAddressGroupId"`
	// The ID of the peer security group.
	RemoteGroupId pulumi.StringInput `pulumi:"remoteGroupId"`
	// The remote IP address. The value can be in the CIDR format or IP addresses.
	RemoteIpPrefix pulumi.StringInput `pulumi:"remoteIpPrefix"`
}

func (GetSecgroupRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecgroupRuleType)(nil)).Elem()
}

func (i GetSecgroupRuleTypeArgs) ToGetSecgroupRuleTypeOutput() GetSecgroupRuleTypeOutput {
	return i.ToGetSecgroupRuleTypeOutputWithContext(context.Background())
}

func (i GetSecgroupRuleTypeArgs) ToGetSecgroupRuleTypeOutputWithContext(ctx context.Context) GetSecgroupRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecgroupRuleTypeOutput)
}

// GetSecgroupRuleTypeArrayInput is an input type that accepts GetSecgroupRuleTypeArray and GetSecgroupRuleTypeArrayOutput values.
// You can construct a concrete instance of `GetSecgroupRuleTypeArrayInput` via:
//
//	GetSecgroupRuleTypeArray{ GetSecgroupRuleTypeArgs{...} }
type GetSecgroupRuleTypeArrayInput interface {
	pulumi.Input

	ToGetSecgroupRuleTypeArrayOutput() GetSecgroupRuleTypeArrayOutput
	ToGetSecgroupRuleTypeArrayOutputWithContext(context.Context) GetSecgroupRuleTypeArrayOutput
}

type GetSecgroupRuleTypeArray []GetSecgroupRuleTypeInput

func (GetSecgroupRuleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecgroupRuleType)(nil)).Elem()
}

func (i GetSecgroupRuleTypeArray) ToGetSecgroupRuleTypeArrayOutput() GetSecgroupRuleTypeArrayOutput {
	return i.ToGetSecgroupRuleTypeArrayOutputWithContext(context.Background())
}

func (i GetSecgroupRuleTypeArray) ToGetSecgroupRuleTypeArrayOutputWithContext(ctx context.Context) GetSecgroupRuleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecgroupRuleTypeArrayOutput)
}

type GetSecgroupRuleTypeOutput struct{ *pulumi.OutputState }

func (GetSecgroupRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecgroupRuleType)(nil)).Elem()
}

func (o GetSecgroupRuleTypeOutput) ToGetSecgroupRuleTypeOutput() GetSecgroupRuleTypeOutput {
	return o
}

func (o GetSecgroupRuleTypeOutput) ToGetSecgroupRuleTypeOutputWithContext(ctx context.Context) GetSecgroupRuleTypeOutput {
	return o
}

// The effective policy.
func (o GetSecgroupRuleTypeOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Action }).(pulumi.StringOutput)
}

// The supplementary information about the security group rule.
func (o GetSecgroupRuleTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Description }).(pulumi.StringOutput)
}

// The direction of the rule. The value can be *egress* or *ingress*.
func (o GetSecgroupRuleTypeOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Direction }).(pulumi.StringOutput)
}

// The IP protocol version. The value can be *IPv4* or *IPv6*.
func (o GetSecgroupRuleTypeOutput) Ethertype() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Ethertype }).(pulumi.StringOutput)
}

// The security group rule ID.
func (o GetSecgroupRuleTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSecgroupRuleTypeOutput) PortRangeMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) int { return v.PortRangeMax }).(pulumi.IntOutput)
}

func (o GetSecgroupRuleTypeOutput) PortRangeMin() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) int { return v.PortRangeMin }).(pulumi.IntOutput)
}

// The port value range.
func (o GetSecgroupRuleTypeOutput) Ports() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Ports }).(pulumi.StringOutput)
}

// The priority number.
func (o GetSecgroupRuleTypeOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) int { return v.Priority }).(pulumi.IntOutput)
}

// The protocol type.
func (o GetSecgroupRuleTypeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.Protocol }).(pulumi.StringOutput)
}

// The ID of the remote address group.
func (o GetSecgroupRuleTypeOutput) RemoteAddressGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.RemoteAddressGroupId }).(pulumi.StringOutput)
}

// The ID of the peer security group.
func (o GetSecgroupRuleTypeOutput) RemoteGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.RemoteGroupId }).(pulumi.StringOutput)
}

// The remote IP address. The value can be in the CIDR format or IP addresses.
func (o GetSecgroupRuleTypeOutput) RemoteIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupRuleType) string { return v.RemoteIpPrefix }).(pulumi.StringOutput)
}

type GetSecgroupRuleTypeArrayOutput struct{ *pulumi.OutputState }

func (GetSecgroupRuleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecgroupRuleType)(nil)).Elem()
}

func (o GetSecgroupRuleTypeArrayOutput) ToGetSecgroupRuleTypeArrayOutput() GetSecgroupRuleTypeArrayOutput {
	return o
}

func (o GetSecgroupRuleTypeArrayOutput) ToGetSecgroupRuleTypeArrayOutputWithContext(ctx context.Context) GetSecgroupRuleTypeArrayOutput {
	return o
}

func (o GetSecgroupRuleTypeArrayOutput) Index(i pulumi.IntInput) GetSecgroupRuleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecgroupRuleType {
		return vs[0].([]GetSecgroupRuleType)[vs[1].(int)]
	}).(GetSecgroupRuleTypeOutput)
}

type GetSecgroupsSecurityGroup struct {
	// The creation time, in UTC format.
	CreatedAt string `pulumi:"createdAt"`
	// Specifies the description of the security group. The security groups can be
	// filtered by keywords in the description.
	Description string `pulumi:"description"`
	// Specifies the enterprise project ID of the security group.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired security group.
	Id string `pulumi:"id"`
	// Specifies the name of the security group.
	Name string `pulumi:"name"`
	// The last update time, in UTC format.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetSecgroupsSecurityGroupInput is an input type that accepts GetSecgroupsSecurityGroupArgs and GetSecgroupsSecurityGroupOutput values.
// You can construct a concrete instance of `GetSecgroupsSecurityGroupInput` via:
//
//	GetSecgroupsSecurityGroupArgs{...}
type GetSecgroupsSecurityGroupInput interface {
	pulumi.Input

	ToGetSecgroupsSecurityGroupOutput() GetSecgroupsSecurityGroupOutput
	ToGetSecgroupsSecurityGroupOutputWithContext(context.Context) GetSecgroupsSecurityGroupOutput
}

type GetSecgroupsSecurityGroupArgs struct {
	// The creation time, in UTC format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Specifies the description of the security group. The security groups can be
	// filtered by keywords in the description.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the enterprise project ID of the security group.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired security group.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of the security group.
	Name pulumi.StringInput `pulumi:"name"`
	// The last update time, in UTC format.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetSecgroupsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecgroupsSecurityGroup)(nil)).Elem()
}

func (i GetSecgroupsSecurityGroupArgs) ToGetSecgroupsSecurityGroupOutput() GetSecgroupsSecurityGroupOutput {
	return i.ToGetSecgroupsSecurityGroupOutputWithContext(context.Background())
}

func (i GetSecgroupsSecurityGroupArgs) ToGetSecgroupsSecurityGroupOutputWithContext(ctx context.Context) GetSecgroupsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecgroupsSecurityGroupOutput)
}

// GetSecgroupsSecurityGroupArrayInput is an input type that accepts GetSecgroupsSecurityGroupArray and GetSecgroupsSecurityGroupArrayOutput values.
// You can construct a concrete instance of `GetSecgroupsSecurityGroupArrayInput` via:
//
//	GetSecgroupsSecurityGroupArray{ GetSecgroupsSecurityGroupArgs{...} }
type GetSecgroupsSecurityGroupArrayInput interface {
	pulumi.Input

	ToGetSecgroupsSecurityGroupArrayOutput() GetSecgroupsSecurityGroupArrayOutput
	ToGetSecgroupsSecurityGroupArrayOutputWithContext(context.Context) GetSecgroupsSecurityGroupArrayOutput
}

type GetSecgroupsSecurityGroupArray []GetSecgroupsSecurityGroupInput

func (GetSecgroupsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecgroupsSecurityGroup)(nil)).Elem()
}

func (i GetSecgroupsSecurityGroupArray) ToGetSecgroupsSecurityGroupArrayOutput() GetSecgroupsSecurityGroupArrayOutput {
	return i.ToGetSecgroupsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i GetSecgroupsSecurityGroupArray) ToGetSecgroupsSecurityGroupArrayOutputWithContext(ctx context.Context) GetSecgroupsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecgroupsSecurityGroupArrayOutput)
}

type GetSecgroupsSecurityGroupOutput struct{ *pulumi.OutputState }

func (GetSecgroupsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecgroupsSecurityGroup)(nil)).Elem()
}

func (o GetSecgroupsSecurityGroupOutput) ToGetSecgroupsSecurityGroupOutput() GetSecgroupsSecurityGroupOutput {
	return o
}

func (o GetSecgroupsSecurityGroupOutput) ToGetSecgroupsSecurityGroupOutputWithContext(ctx context.Context) GetSecgroupsSecurityGroupOutput {
	return o
}

// The creation time, in UTC format.
func (o GetSecgroupsSecurityGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the security group. The security groups can be
// filtered by keywords in the description.
func (o GetSecgroupsSecurityGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID of the security group.
func (o GetSecgroupsSecurityGroupOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the id of the desired security group.
func (o GetSecgroupsSecurityGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of the security group.
func (o GetSecgroupsSecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The last update time, in UTC format.
func (o GetSecgroupsSecurityGroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecgroupsSecurityGroup) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetSecgroupsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (GetSecgroupsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecgroupsSecurityGroup)(nil)).Elem()
}

func (o GetSecgroupsSecurityGroupArrayOutput) ToGetSecgroupsSecurityGroupArrayOutput() GetSecgroupsSecurityGroupArrayOutput {
	return o
}

func (o GetSecgroupsSecurityGroupArrayOutput) ToGetSecgroupsSecurityGroupArrayOutputWithContext(ctx context.Context) GetSecgroupsSecurityGroupArrayOutput {
	return o
}

func (o GetSecgroupsSecurityGroupArrayOutput) Index(i pulumi.IntInput) GetSecgroupsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecgroupsSecurityGroup {
		return vs[0].([]GetSecgroupsSecurityGroup)[vs[1].(int)]
	}).(GetSecgroupsSecurityGroupOutput)
}

type GetSubnetsSubnet struct {
	// Specifies the availability zone (AZ) to which the desired subnet belongs to.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the network segment of desired subnet. The value must be in CIDR format.
	Cidr        string   `pulumi:"cidr"`
	Description string   `pulumi:"description"`
	DhcpEnable  bool     `pulumi:"dhcpEnable"`
	DnsLists    []string `pulumi:"dnsLists"`
	// Specifies the subnet gateway address of desired subnet.
	GatewayIp string `pulumi:"gatewayIp"`
	// - Specifies the id of the desired subnet.
	Id           string `pulumi:"id"`
	Ipv4SubnetId string `pulumi:"ipv4SubnetId"`
	Ipv6Cidr     string `pulumi:"ipv6Cidr"`
	Ipv6Enable   bool   `pulumi:"ipv6Enable"`
	Ipv6Gateway  string `pulumi:"ipv6Gateway"`
	Ipv6SubnetId string `pulumi:"ipv6SubnetId"`
	// Specifies the name of the desired subnet.
	Name string `pulumi:"name"`
	// Specifies the IP address of DNS server 1 on the desired subnet.
	PrimaryDns string `pulumi:"primaryDns"`
	// Specifies the IP address of DNS server 2 on the desired subnet.
	SecondaryDns string `pulumi:"secondaryDns"`
	// Specifies the current status of the desired subnet.
	// the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
	Status   string `pulumi:"status"`
	SubnetId string `pulumi:"subnetId"`
	// Specifies the included key/value pairs which associated with the desired subnet.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the id of the VPC that the desired subnet belongs to.
	VpcId string `pulumi:"vpcId"`
}

// GetSubnetsSubnetInput is an input type that accepts GetSubnetsSubnetArgs and GetSubnetsSubnetOutput values.
// You can construct a concrete instance of `GetSubnetsSubnetInput` via:
//
//	GetSubnetsSubnetArgs{...}
type GetSubnetsSubnetInput interface {
	pulumi.Input

	ToGetSubnetsSubnetOutput() GetSubnetsSubnetOutput
	ToGetSubnetsSubnetOutputWithContext(context.Context) GetSubnetsSubnetOutput
}

type GetSubnetsSubnetArgs struct {
	// Specifies the availability zone (AZ) to which the desired subnet belongs to.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Specifies the network segment of desired subnet. The value must be in CIDR format.
	Cidr        pulumi.StringInput      `pulumi:"cidr"`
	Description pulumi.StringInput      `pulumi:"description"`
	DhcpEnable  pulumi.BoolInput        `pulumi:"dhcpEnable"`
	DnsLists    pulumi.StringArrayInput `pulumi:"dnsLists"`
	// Specifies the subnet gateway address of desired subnet.
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// - Specifies the id of the desired subnet.
	Id           pulumi.StringInput `pulumi:"id"`
	Ipv4SubnetId pulumi.StringInput `pulumi:"ipv4SubnetId"`
	Ipv6Cidr     pulumi.StringInput `pulumi:"ipv6Cidr"`
	Ipv6Enable   pulumi.BoolInput   `pulumi:"ipv6Enable"`
	Ipv6Gateway  pulumi.StringInput `pulumi:"ipv6Gateway"`
	Ipv6SubnetId pulumi.StringInput `pulumi:"ipv6SubnetId"`
	// Specifies the name of the desired subnet.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the IP address of DNS server 1 on the desired subnet.
	PrimaryDns pulumi.StringInput `pulumi:"primaryDns"`
	// Specifies the IP address of DNS server 2 on the desired subnet.
	SecondaryDns pulumi.StringInput `pulumi:"secondaryDns"`
	// Specifies the current status of the desired subnet.
	// the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
	Status   pulumi.StringInput `pulumi:"status"`
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Specifies the included key/value pairs which associated with the desired subnet.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Specifies the id of the VPC that the desired subnet belongs to.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetSubnetsSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetsSubnet)(nil)).Elem()
}

func (i GetSubnetsSubnetArgs) ToGetSubnetsSubnetOutput() GetSubnetsSubnetOutput {
	return i.ToGetSubnetsSubnetOutputWithContext(context.Background())
}

func (i GetSubnetsSubnetArgs) ToGetSubnetsSubnetOutputWithContext(ctx context.Context) GetSubnetsSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetsSubnetOutput)
}

// GetSubnetsSubnetArrayInput is an input type that accepts GetSubnetsSubnetArray and GetSubnetsSubnetArrayOutput values.
// You can construct a concrete instance of `GetSubnetsSubnetArrayInput` via:
//
//	GetSubnetsSubnetArray{ GetSubnetsSubnetArgs{...} }
type GetSubnetsSubnetArrayInput interface {
	pulumi.Input

	ToGetSubnetsSubnetArrayOutput() GetSubnetsSubnetArrayOutput
	ToGetSubnetsSubnetArrayOutputWithContext(context.Context) GetSubnetsSubnetArrayOutput
}

type GetSubnetsSubnetArray []GetSubnetsSubnetInput

func (GetSubnetsSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetsSubnet)(nil)).Elem()
}

func (i GetSubnetsSubnetArray) ToGetSubnetsSubnetArrayOutput() GetSubnetsSubnetArrayOutput {
	return i.ToGetSubnetsSubnetArrayOutputWithContext(context.Background())
}

func (i GetSubnetsSubnetArray) ToGetSubnetsSubnetArrayOutputWithContext(ctx context.Context) GetSubnetsSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetsSubnetArrayOutput)
}

type GetSubnetsSubnetOutput struct{ *pulumi.OutputState }

func (GetSubnetsSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetsSubnet)(nil)).Elem()
}

func (o GetSubnetsSubnetOutput) ToGetSubnetsSubnetOutput() GetSubnetsSubnetOutput {
	return o
}

func (o GetSubnetsSubnetOutput) ToGetSubnetsSubnetOutputWithContext(ctx context.Context) GetSubnetsSubnetOutput {
	return o
}

// Specifies the availability zone (AZ) to which the desired subnet belongs to.
func (o GetSubnetsSubnetOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the network segment of desired subnet. The value must be in CIDR format.
func (o GetSubnetsSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) DhcpEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) bool { return v.DhcpEnable }).(pulumi.BoolOutput)
}

func (o GetSubnetsSubnetOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) []string { return v.DnsLists }).(pulumi.StringArrayOutput)
}

// Specifies the subnet gateway address of desired subnet.
func (o GetSubnetsSubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// - Specifies the id of the desired subnet.
func (o GetSubnetsSubnetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) Ipv4SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Ipv4SubnetId }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) Ipv6Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Ipv6Cidr }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o GetSubnetsSubnetOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) Ipv6SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Ipv6SubnetId }).(pulumi.StringOutput)
}

// Specifies the name of the desired subnet.
func (o GetSubnetsSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the IP address of DNS server 1 on the desired subnet.
func (o GetSubnetsSubnetOutput) PrimaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.PrimaryDns }).(pulumi.StringOutput)
}

// Specifies the IP address of DNS server 2 on the desired subnet.
func (o GetSubnetsSubnetOutput) SecondaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.SecondaryDns }).(pulumi.StringOutput)
}

// Specifies the current status of the desired subnet.
// the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
func (o GetSubnetsSubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetSubnetsSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the included key/value pairs which associated with the desired subnet.
func (o GetSubnetsSubnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the id of the VPC that the desired subnet belongs to.
func (o GetSubnetsSubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsSubnet) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetSubnetsSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetSubnetsSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetsSubnet)(nil)).Elem()
}

func (o GetSubnetsSubnetArrayOutput) ToGetSubnetsSubnetArrayOutput() GetSubnetsSubnetArrayOutput {
	return o
}

func (o GetSubnetsSubnetArrayOutput) ToGetSubnetsSubnetArrayOutputWithContext(ctx context.Context) GetSubnetsSubnetArrayOutput {
	return o
}

func (o GetSubnetsSubnetArrayOutput) Index(i pulumi.IntInput) GetSubnetsSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubnetsSubnet {
		return vs[0].([]GetSubnetsSubnet)[vs[1].(int)]
	}).(GetSubnetsSubnetOutput)
}

type GetVpcRoute struct {
	Destination string `pulumi:"destination"`
	Nexthop     string `pulumi:"nexthop"`
}

// GetVpcRouteInput is an input type that accepts GetVpcRouteArgs and GetVpcRouteOutput values.
// You can construct a concrete instance of `GetVpcRouteInput` via:
//
//	GetVpcRouteArgs{...}
type GetVpcRouteInput interface {
	pulumi.Input

	ToGetVpcRouteOutput() GetVpcRouteOutput
	ToGetVpcRouteOutputWithContext(context.Context) GetVpcRouteOutput
}

type GetVpcRouteArgs struct {
	Destination pulumi.StringInput `pulumi:"destination"`
	Nexthop     pulumi.StringInput `pulumi:"nexthop"`
}

func (GetVpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcRoute)(nil)).Elem()
}

func (i GetVpcRouteArgs) ToGetVpcRouteOutput() GetVpcRouteOutput {
	return i.ToGetVpcRouteOutputWithContext(context.Background())
}

func (i GetVpcRouteArgs) ToGetVpcRouteOutputWithContext(ctx context.Context) GetVpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcRouteOutput)
}

// GetVpcRouteArrayInput is an input type that accepts GetVpcRouteArray and GetVpcRouteArrayOutput values.
// You can construct a concrete instance of `GetVpcRouteArrayInput` via:
//
//	GetVpcRouteArray{ GetVpcRouteArgs{...} }
type GetVpcRouteArrayInput interface {
	pulumi.Input

	ToGetVpcRouteArrayOutput() GetVpcRouteArrayOutput
	ToGetVpcRouteArrayOutputWithContext(context.Context) GetVpcRouteArrayOutput
}

type GetVpcRouteArray []GetVpcRouteInput

func (GetVpcRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcRoute)(nil)).Elem()
}

func (i GetVpcRouteArray) ToGetVpcRouteArrayOutput() GetVpcRouteArrayOutput {
	return i.ToGetVpcRouteArrayOutputWithContext(context.Background())
}

func (i GetVpcRouteArray) ToGetVpcRouteArrayOutputWithContext(ctx context.Context) GetVpcRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcRouteArrayOutput)
}

type GetVpcRouteOutput struct{ *pulumi.OutputState }

func (GetVpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcRoute)(nil)).Elem()
}

func (o GetVpcRouteOutput) ToGetVpcRouteOutput() GetVpcRouteOutput {
	return o
}

func (o GetVpcRouteOutput) ToGetVpcRouteOutputWithContext(ctx context.Context) GetVpcRouteOutput {
	return o
}

func (o GetVpcRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcRoute) string { return v.Destination }).(pulumi.StringOutput)
}

func (o GetVpcRouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcRoute) string { return v.Nexthop }).(pulumi.StringOutput)
}

type GetVpcRouteArrayOutput struct{ *pulumi.OutputState }

func (GetVpcRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcRoute)(nil)).Elem()
}

func (o GetVpcRouteArrayOutput) ToGetVpcRouteArrayOutput() GetVpcRouteArrayOutput {
	return o
}

func (o GetVpcRouteArrayOutput) ToGetVpcRouteArrayOutputWithContext(ctx context.Context) GetVpcRouteArrayOutput {
	return o
}

func (o GetVpcRouteArrayOutput) Index(i pulumi.IntInput) GetVpcRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcRoute {
		return vs[0].([]GetVpcRoute)[vs[1].(int)]
	}).(GetVpcRouteOutput)
}

type GetVpcsVpc struct {
	// Specifies the cidr block of the desired VPC.
	Cidr string `pulumi:"cidr"`
	// Indicates the description of the VPC.
	Description string `pulumi:"description"`
	// Specifies the enterprise project ID which the desired VPC belongs to.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired VPC.
	Id string `pulumi:"id"`
	// Specifies the name of the desired VPC. The value is a string of no more than 64 characters
	// and can contain digits, letters, underscores (_) and hyphens (-).
	Name string `pulumi:"name"`
	// Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
	Status string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired VPC.
	Tags map[string]string `pulumi:"tags"`
}

// GetVpcsVpcInput is an input type that accepts GetVpcsVpcArgs and GetVpcsVpcOutput values.
// You can construct a concrete instance of `GetVpcsVpcInput` via:
//
//	GetVpcsVpcArgs{...}
type GetVpcsVpcInput interface {
	pulumi.Input

	ToGetVpcsVpcOutput() GetVpcsVpcOutput
	ToGetVpcsVpcOutputWithContext(context.Context) GetVpcsVpcOutput
}

type GetVpcsVpcArgs struct {
	// Specifies the cidr block of the desired VPC.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Indicates the description of the VPC.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the enterprise project ID which the desired VPC belongs to.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired VPC.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of the desired VPC. The value is a string of no more than 64 characters
	// and can contain digits, letters, underscores (_) and hyphens (-).
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired VPC.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetVpcsVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsVpc)(nil)).Elem()
}

func (i GetVpcsVpcArgs) ToGetVpcsVpcOutput() GetVpcsVpcOutput {
	return i.ToGetVpcsVpcOutputWithContext(context.Background())
}

func (i GetVpcsVpcArgs) ToGetVpcsVpcOutputWithContext(ctx context.Context) GetVpcsVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsVpcOutput)
}

// GetVpcsVpcArrayInput is an input type that accepts GetVpcsVpcArray and GetVpcsVpcArrayOutput values.
// You can construct a concrete instance of `GetVpcsVpcArrayInput` via:
//
//	GetVpcsVpcArray{ GetVpcsVpcArgs{...} }
type GetVpcsVpcArrayInput interface {
	pulumi.Input

	ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput
	ToGetVpcsVpcArrayOutputWithContext(context.Context) GetVpcsVpcArrayOutput
}

type GetVpcsVpcArray []GetVpcsVpcInput

func (GetVpcsVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsVpc)(nil)).Elem()
}

func (i GetVpcsVpcArray) ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput {
	return i.ToGetVpcsVpcArrayOutputWithContext(context.Background())
}

func (i GetVpcsVpcArray) ToGetVpcsVpcArrayOutputWithContext(ctx context.Context) GetVpcsVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsVpcArrayOutput)
}

type GetVpcsVpcOutput struct{ *pulumi.OutputState }

func (GetVpcsVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsVpc)(nil)).Elem()
}

func (o GetVpcsVpcOutput) ToGetVpcsVpcOutput() GetVpcsVpcOutput {
	return o
}

func (o GetVpcsVpcOutput) ToGetVpcsVpcOutputWithContext(ctx context.Context) GetVpcsVpcOutput {
	return o
}

// Specifies the cidr block of the desired VPC.
func (o GetVpcsVpcOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Cidr }).(pulumi.StringOutput)
}

// Indicates the description of the VPC.
func (o GetVpcsVpcOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID which the desired VPC belongs to.
func (o GetVpcsVpcOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the id of the desired VPC.
func (o GetVpcsVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of the desired VPC. The value is a string of no more than 64 characters
// and can contain digits, letters, underscores (_) and hyphens (-).
func (o GetVpcsVpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
func (o GetVpcsVpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsVpc) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the included key/value pairs which associated with the desired VPC.
func (o GetVpcsVpcOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVpcsVpc) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetVpcsVpcArrayOutput struct{ *pulumi.OutputState }

func (GetVpcsVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsVpc)(nil)).Elem()
}

func (o GetVpcsVpcArrayOutput) ToGetVpcsVpcArrayOutput() GetVpcsVpcArrayOutput {
	return o
}

func (o GetVpcsVpcArrayOutput) ToGetVpcsVpcArrayOutputWithContext(ctx context.Context) GetVpcsVpcArrayOutput {
	return o
}

func (o GetVpcsVpcArrayOutput) Index(i pulumi.IntInput) GetVpcsVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcsVpc {
		return vs[0].([]GetVpcsVpc)[vs[1].(int)]
	}).(GetVpcsVpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPublicipInput)(nil)).Elem(), BandwidthPublicipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPublicipArrayInput)(nil)).Elem(), BandwidthPublicipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipBandwidthInput)(nil)).Elem(), EipBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipBandwidthPtrInput)(nil)).Elem(), EipBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipPublicipInput)(nil)).Elem(), EipPublicipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipPublicipPtrInput)(nil)).Elem(), EipPublicipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortAllowedAddressPairInput)(nil)).Elem(), PortAllowedAddressPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortAllowedAddressPairArrayInput)(nil)).Elem(), PortAllowedAddressPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortExtraDhcpOptionInput)(nil)).Elem(), PortExtraDhcpOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortExtraDhcpOptionArrayInput)(nil)).Elem(), PortExtraDhcpOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortFixedIpInput)(nil)).Elem(), PortFixedIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortFixedIpArrayInput)(nil)).Elem(), PortFixedIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableRouteInput)(nil)).Elem(), RouteTableRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableRouteArrayInput)(nil)).Elem(), RouteTableRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecgroupRuleTypeInput)(nil)).Elem(), SecgroupRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecgroupRuleTypeArrayInput)(nil)).Elem(), SecgroupRuleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteInput)(nil)).Elem(), VpcRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteArrayInput)(nil)).Elem(), VpcRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableRouteInput)(nil)).Elem(), GetRouteTableRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableRouteArrayInput)(nil)).Elem(), GetRouteTableRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecgroupRuleTypeInput)(nil)).Elem(), GetSecgroupRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecgroupRuleTypeArrayInput)(nil)).Elem(), GetSecgroupRuleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecgroupsSecurityGroupInput)(nil)).Elem(), GetSecgroupsSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecgroupsSecurityGroupArrayInput)(nil)).Elem(), GetSecgroupsSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubnetsSubnetInput)(nil)).Elem(), GetSubnetsSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubnetsSubnetArrayInput)(nil)).Elem(), GetSubnetsSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcRouteInput)(nil)).Elem(), GetVpcRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcRouteArrayInput)(nil)).Elem(), GetVpcRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcsVpcInput)(nil)).Elem(), GetVpcsVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcsVpcArrayInput)(nil)).Elem(), GetVpcsVpcArray{})
	pulumi.RegisterOutputType(BandwidthPublicipOutput{})
	pulumi.RegisterOutputType(BandwidthPublicipArrayOutput{})
	pulumi.RegisterOutputType(EipBandwidthOutput{})
	pulumi.RegisterOutputType(EipBandwidthPtrOutput{})
	pulumi.RegisterOutputType(EipPublicipOutput{})
	pulumi.RegisterOutputType(EipPublicipPtrOutput{})
	pulumi.RegisterOutputType(PortAllowedAddressPairOutput{})
	pulumi.RegisterOutputType(PortAllowedAddressPairArrayOutput{})
	pulumi.RegisterOutputType(PortExtraDhcpOptionOutput{})
	pulumi.RegisterOutputType(PortExtraDhcpOptionArrayOutput{})
	pulumi.RegisterOutputType(PortFixedIpOutput{})
	pulumi.RegisterOutputType(PortFixedIpArrayOutput{})
	pulumi.RegisterOutputType(RouteTableRouteOutput{})
	pulumi.RegisterOutputType(RouteTableRouteArrayOutput{})
	pulumi.RegisterOutputType(SecgroupRuleTypeOutput{})
	pulumi.RegisterOutputType(SecgroupRuleTypeArrayOutput{})
	pulumi.RegisterOutputType(VpcRouteOutput{})
	pulumi.RegisterOutputType(VpcRouteArrayOutput{})
	pulumi.RegisterOutputType(GetRouteTableRouteOutput{})
	pulumi.RegisterOutputType(GetRouteTableRouteArrayOutput{})
	pulumi.RegisterOutputType(GetSecgroupRuleTypeOutput{})
	pulumi.RegisterOutputType(GetSecgroupRuleTypeArrayOutput{})
	pulumi.RegisterOutputType(GetSecgroupsSecurityGroupOutput{})
	pulumi.RegisterOutputType(GetSecgroupsSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(GetSubnetsSubnetOutput{})
	pulumi.RegisterOutputType(GetSubnetsSubnetArrayOutput{})
	pulumi.RegisterOutputType(GetVpcRouteOutput{})
	pulumi.RegisterOutputType(GetVpcRouteArrayOutput{})
	pulumi.RegisterOutputType(GetVpcsVpcOutput{})
	pulumi.RegisterOutputType(GetVpcsVpcArrayOutput{})
}

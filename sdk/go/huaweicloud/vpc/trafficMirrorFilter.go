// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VPC traffic mirror filter resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			trafficMirrorFilterName := cfg.RequireObject("trafficMirrorFilterName")
//			_, err := Vpc.NewTrafficMirrorFilter(ctx, "test", &Vpc.TrafficMirrorFilterArgs{
//				Description: pulumi.String("Traffic mirror filter created by terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The traffic mirror filter can be imported using `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/trafficMirrorFilter:TrafficMirrorFilter test <id>
//
// ```
type TrafficMirrorFilter struct {
	pulumi.CustomResourceState

	// The creation time of the traffic mirror filter.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the traffic mirror filter.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name of the traffic mirror filter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The latest update time of the traffic mirror filter.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTrafficMirrorFilter registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilter(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilter, error) {
	if args == nil {
		args = &TrafficMirrorFilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource TrafficMirrorFilter
	err := ctx.RegisterResource("huaweicloud:Vpc/trafficMirrorFilter:TrafficMirrorFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilter gets an existing TrafficMirrorFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilter, error) {
	var resource TrafficMirrorFilter
	err := ctx.ReadResource("huaweicloud:Vpc/trafficMirrorFilter:TrafficMirrorFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilter resources.
type trafficMirrorFilterState struct {
	// The creation time of the traffic mirror filter.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the traffic mirror filter.
	Description *string `pulumi:"description"`
	// Specifies the name of the traffic mirror filter.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The latest update time of the traffic mirror filter.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TrafficMirrorFilterState struct {
	// The creation time of the traffic mirror filter.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the traffic mirror filter.
	Description pulumi.StringPtrInput
	// Specifies the name of the traffic mirror filter.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The latest update time of the traffic mirror filter.
	UpdatedAt pulumi.StringPtrInput
}

func (TrafficMirrorFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterState)(nil)).Elem()
}

type trafficMirrorFilterArgs struct {
	// Specifies the description of the traffic mirror filter.
	Description *string `pulumi:"description"`
	// Specifies the name of the traffic mirror filter.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a TrafficMirrorFilter resource.
type TrafficMirrorFilterArgs struct {
	// Specifies the description of the traffic mirror filter.
	Description pulumi.StringPtrInput
	// Specifies the name of the traffic mirror filter.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (TrafficMirrorFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterArgs)(nil)).Elem()
}

type TrafficMirrorFilterInput interface {
	pulumi.Input

	ToTrafficMirrorFilterOutput() TrafficMirrorFilterOutput
	ToTrafficMirrorFilterOutputWithContext(ctx context.Context) TrafficMirrorFilterOutput
}

func (*TrafficMirrorFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilter)(nil)).Elem()
}

func (i *TrafficMirrorFilter) ToTrafficMirrorFilterOutput() TrafficMirrorFilterOutput {
	return i.ToTrafficMirrorFilterOutputWithContext(context.Background())
}

func (i *TrafficMirrorFilter) ToTrafficMirrorFilterOutputWithContext(ctx context.Context) TrafficMirrorFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterOutput)
}

// TrafficMirrorFilterArrayInput is an input type that accepts TrafficMirrorFilterArray and TrafficMirrorFilterArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterArrayInput` via:
//
//	TrafficMirrorFilterArray{ TrafficMirrorFilterArgs{...} }
type TrafficMirrorFilterArrayInput interface {
	pulumi.Input

	ToTrafficMirrorFilterArrayOutput() TrafficMirrorFilterArrayOutput
	ToTrafficMirrorFilterArrayOutputWithContext(context.Context) TrafficMirrorFilterArrayOutput
}

type TrafficMirrorFilterArray []TrafficMirrorFilterInput

func (TrafficMirrorFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilter)(nil)).Elem()
}

func (i TrafficMirrorFilterArray) ToTrafficMirrorFilterArrayOutput() TrafficMirrorFilterArrayOutput {
	return i.ToTrafficMirrorFilterArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterArray) ToTrafficMirrorFilterArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterArrayOutput)
}

// TrafficMirrorFilterMapInput is an input type that accepts TrafficMirrorFilterMap and TrafficMirrorFilterMapOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterMapInput` via:
//
//	TrafficMirrorFilterMap{ "key": TrafficMirrorFilterArgs{...} }
type TrafficMirrorFilterMapInput interface {
	pulumi.Input

	ToTrafficMirrorFilterMapOutput() TrafficMirrorFilterMapOutput
	ToTrafficMirrorFilterMapOutputWithContext(context.Context) TrafficMirrorFilterMapOutput
}

type TrafficMirrorFilterMap map[string]TrafficMirrorFilterInput

func (TrafficMirrorFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilter)(nil)).Elem()
}

func (i TrafficMirrorFilterMap) ToTrafficMirrorFilterMapOutput() TrafficMirrorFilterMapOutput {
	return i.ToTrafficMirrorFilterMapOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterMap) ToTrafficMirrorFilterMapOutputWithContext(ctx context.Context) TrafficMirrorFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterMapOutput)
}

type TrafficMirrorFilterOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilter)(nil)).Elem()
}

func (o TrafficMirrorFilterOutput) ToTrafficMirrorFilterOutput() TrafficMirrorFilterOutput {
	return o
}

func (o TrafficMirrorFilterOutput) ToTrafficMirrorFilterOutputWithContext(ctx context.Context) TrafficMirrorFilterOutput {
	return o
}

// The creation time of the traffic mirror filter.
func (o TrafficMirrorFilterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilter) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the traffic mirror filter.
func (o TrafficMirrorFilterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the traffic mirror filter.
func (o TrafficMirrorFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o TrafficMirrorFilterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The latest update time of the traffic mirror filter.
func (o TrafficMirrorFilterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilter) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TrafficMirrorFilterArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilter)(nil)).Elem()
}

func (o TrafficMirrorFilterArrayOutput) ToTrafficMirrorFilterArrayOutput() TrafficMirrorFilterArrayOutput {
	return o
}

func (o TrafficMirrorFilterArrayOutput) ToTrafficMirrorFilterArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterArrayOutput {
	return o
}

func (o TrafficMirrorFilterArrayOutput) Index(i pulumi.IntInput) TrafficMirrorFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorFilter {
		return vs[0].([]*TrafficMirrorFilter)[vs[1].(int)]
	}).(TrafficMirrorFilterOutput)
}

type TrafficMirrorFilterMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilter)(nil)).Elem()
}

func (o TrafficMirrorFilterMapOutput) ToTrafficMirrorFilterMapOutput() TrafficMirrorFilterMapOutput {
	return o
}

func (o TrafficMirrorFilterMapOutput) ToTrafficMirrorFilterMapOutputWithContext(ctx context.Context) TrafficMirrorFilterMapOutput {
	return o
}

func (o TrafficMirrorFilterMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorFilter {
		return vs[0].(map[string]*TrafficMirrorFilter)[vs[1].(string)]
	}).(TrafficMirrorFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterInput)(nil)).Elem(), &TrafficMirrorFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterArrayInput)(nil)).Elem(), TrafficMirrorFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterMapInput)(nil)).Elem(), TrafficMirrorFilterMap{})
	pulumi.RegisterOutputType(TrafficMirrorFilterOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterMapOutput{})
}

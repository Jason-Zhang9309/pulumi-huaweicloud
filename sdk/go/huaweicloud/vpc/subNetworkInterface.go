// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a supplementary network interface resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			subnetId := cfg.RequireObject("subnetId")
//			parentId := cfg.RequireObject("parentId")
//			vlanId := cfg.RequireObject("vlanId")
//			_, err := Vpc.NewSubNetworkInterface(ctx, "test", &Vpc.SubNetworkInterfaceArgs{
//				SubnetId:    pulumi.Any(subnetId),
//				ParentId:    pulumi.Any(parentId),
//				VlanId:      pulumi.Any(vlanId),
//				Description: pulumi.String("create a supplementary network interface"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The supplementary network interface can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Vpc/subNetworkInterface:SubNetworkInterface test <id>
//
// ```
type SubNetworkInterface struct {
	pulumi.CustomResourceState

	// The create time of the supplementary network interface.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the supplementary network interface.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the private IPv4 address of the supplementary network interface.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Specifies the IPv6 address is it enabled of the supplementary network interface.
	Ipv6Enable pulumi.BoolPtrOutput `pulumi:"ipv6Enable"`
	// Specifies the IPv6 address of the supplementary network interface.
	Ipv6IpAddress pulumi.StringOutput `pulumi:"ipv6IpAddress"`
	// The MAC address of the supplementary network interface.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The ID of the ECS to which the supplementary network interface belongs.
	ParentDeviceId pulumi.StringOutput `pulumi:"parentDeviceId"`
	// Specifies the ID of the elastic network interface to which the
	// supplementary network interface belongs.
	// Changing this creates a new resource.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the list of the security groups IDs to which the supplementary
	// network interface belongs.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The status of the supplementary network interface.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the subnet to which the supplementary network
	// interface belongs.
	// Changing this creates a new resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the vlan ID of the supplementary network interface.
	// The valid value is range from `1` t0 `4094`.
	VlanId pulumi.StringOutput `pulumi:"vlanId"`
	// The ID of the VPC to which the supplementary network interface belongs.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewSubNetworkInterface(ctx *pulumi.Context,
	name string, args *SubNetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*SubNetworkInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SubNetworkInterface
	err := ctx.RegisterResource("huaweicloud:Vpc/subNetworkInterface:SubNetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubNetworkInterface gets an existing SubNetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubNetworkInterfaceState, opts ...pulumi.ResourceOption) (*SubNetworkInterface, error) {
	var resource SubNetworkInterface
	err := ctx.ReadResource("huaweicloud:Vpc/subNetworkInterface:SubNetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubNetworkInterface resources.
type subNetworkInterfaceState struct {
	// The create time of the supplementary network interface.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the supplementary network interface.
	Description *string `pulumi:"description"`
	// Specifies the private IPv4 address of the supplementary network interface.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IPv6 address is it enabled of the supplementary network interface.
	Ipv6Enable *bool `pulumi:"ipv6Enable"`
	// Specifies the IPv6 address of the supplementary network interface.
	Ipv6IpAddress *string `pulumi:"ipv6IpAddress"`
	// The MAC address of the supplementary network interface.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the ECS to which the supplementary network interface belongs.
	ParentDeviceId *string `pulumi:"parentDeviceId"`
	// Specifies the ID of the elastic network interface to which the
	// supplementary network interface belongs.
	// Changing this creates a new resource.
	ParentId *string `pulumi:"parentId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the list of the security groups IDs to which the supplementary
	// network interface belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The status of the supplementary network interface.
	Status *string `pulumi:"status"`
	// Specifies the ID of the subnet to which the supplementary network
	// interface belongs.
	// Changing this creates a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the vlan ID of the supplementary network interface.
	// The valid value is range from `1` t0 `4094`.
	VlanId *string `pulumi:"vlanId"`
	// The ID of the VPC to which the supplementary network interface belongs.
	VpcId *string `pulumi:"vpcId"`
}

type SubNetworkInterfaceState struct {
	// The create time of the supplementary network interface.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the supplementary network interface.
	Description pulumi.StringPtrInput
	// Specifies the private IPv4 address of the supplementary network interface.
	IpAddress pulumi.StringPtrInput
	// Specifies the IPv6 address is it enabled of the supplementary network interface.
	Ipv6Enable pulumi.BoolPtrInput
	// Specifies the IPv6 address of the supplementary network interface.
	Ipv6IpAddress pulumi.StringPtrInput
	// The MAC address of the supplementary network interface.
	MacAddress pulumi.StringPtrInput
	// The ID of the ECS to which the supplementary network interface belongs.
	ParentDeviceId pulumi.StringPtrInput
	// Specifies the ID of the elastic network interface to which the
	// supplementary network interface belongs.
	// Changing this creates a new resource.
	ParentId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the list of the security groups IDs to which the supplementary
	// network interface belongs.
	SecurityGroupIds pulumi.StringArrayInput
	// The status of the supplementary network interface.
	Status pulumi.StringPtrInput
	// Specifies the ID of the subnet to which the supplementary network
	// interface belongs.
	// Changing this creates a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the vlan ID of the supplementary network interface.
	// The valid value is range from `1` t0 `4094`.
	VlanId pulumi.StringPtrInput
	// The ID of the VPC to which the supplementary network interface belongs.
	VpcId pulumi.StringPtrInput
}

func (SubNetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*subNetworkInterfaceState)(nil)).Elem()
}

type subNetworkInterfaceArgs struct {
	// Specifies the description of the supplementary network interface.
	Description *string `pulumi:"description"`
	// Specifies the private IPv4 address of the supplementary network interface.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IPv6 address is it enabled of the supplementary network interface.
	Ipv6Enable *bool `pulumi:"ipv6Enable"`
	// Specifies the IPv6 address of the supplementary network interface.
	Ipv6IpAddress *string `pulumi:"ipv6IpAddress"`
	// Specifies the ID of the elastic network interface to which the
	// supplementary network interface belongs.
	// Changing this creates a new resource.
	ParentId string `pulumi:"parentId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the list of the security groups IDs to which the supplementary
	// network interface belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specifies the ID of the subnet to which the supplementary network
	// interface belongs.
	// Changing this creates a new resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the vlan ID of the supplementary network interface.
	// The valid value is range from `1` t0 `4094`.
	VlanId *string `pulumi:"vlanId"`
}

// The set of arguments for constructing a SubNetworkInterface resource.
type SubNetworkInterfaceArgs struct {
	// Specifies the description of the supplementary network interface.
	Description pulumi.StringPtrInput
	// Specifies the private IPv4 address of the supplementary network interface.
	IpAddress pulumi.StringPtrInput
	// Specifies the IPv6 address is it enabled of the supplementary network interface.
	Ipv6Enable pulumi.BoolPtrInput
	// Specifies the IPv6 address of the supplementary network interface.
	Ipv6IpAddress pulumi.StringPtrInput
	// Specifies the ID of the elastic network interface to which the
	// supplementary network interface belongs.
	// Changing this creates a new resource.
	ParentId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the list of the security groups IDs to which the supplementary
	// network interface belongs.
	SecurityGroupIds pulumi.StringArrayInput
	// Specifies the ID of the subnet to which the supplementary network
	// interface belongs.
	// Changing this creates a new resource.
	SubnetId pulumi.StringInput
	// Specifies the vlan ID of the supplementary network interface.
	// The valid value is range from `1` t0 `4094`.
	VlanId pulumi.StringPtrInput
}

func (SubNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subNetworkInterfaceArgs)(nil)).Elem()
}

type SubNetworkInterfaceInput interface {
	pulumi.Input

	ToSubNetworkInterfaceOutput() SubNetworkInterfaceOutput
	ToSubNetworkInterfaceOutputWithContext(ctx context.Context) SubNetworkInterfaceOutput
}

func (*SubNetworkInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**SubNetworkInterface)(nil)).Elem()
}

func (i *SubNetworkInterface) ToSubNetworkInterfaceOutput() SubNetworkInterfaceOutput {
	return i.ToSubNetworkInterfaceOutputWithContext(context.Background())
}

func (i *SubNetworkInterface) ToSubNetworkInterfaceOutputWithContext(ctx context.Context) SubNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubNetworkInterfaceOutput)
}

// SubNetworkInterfaceArrayInput is an input type that accepts SubNetworkInterfaceArray and SubNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `SubNetworkInterfaceArrayInput` via:
//
//	SubNetworkInterfaceArray{ SubNetworkInterfaceArgs{...} }
type SubNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToSubNetworkInterfaceArrayOutput() SubNetworkInterfaceArrayOutput
	ToSubNetworkInterfaceArrayOutputWithContext(context.Context) SubNetworkInterfaceArrayOutput
}

type SubNetworkInterfaceArray []SubNetworkInterfaceInput

func (SubNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubNetworkInterface)(nil)).Elem()
}

func (i SubNetworkInterfaceArray) ToSubNetworkInterfaceArrayOutput() SubNetworkInterfaceArrayOutput {
	return i.ToSubNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i SubNetworkInterfaceArray) ToSubNetworkInterfaceArrayOutputWithContext(ctx context.Context) SubNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubNetworkInterfaceArrayOutput)
}

// SubNetworkInterfaceMapInput is an input type that accepts SubNetworkInterfaceMap and SubNetworkInterfaceMapOutput values.
// You can construct a concrete instance of `SubNetworkInterfaceMapInput` via:
//
//	SubNetworkInterfaceMap{ "key": SubNetworkInterfaceArgs{...} }
type SubNetworkInterfaceMapInput interface {
	pulumi.Input

	ToSubNetworkInterfaceMapOutput() SubNetworkInterfaceMapOutput
	ToSubNetworkInterfaceMapOutputWithContext(context.Context) SubNetworkInterfaceMapOutput
}

type SubNetworkInterfaceMap map[string]SubNetworkInterfaceInput

func (SubNetworkInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubNetworkInterface)(nil)).Elem()
}

func (i SubNetworkInterfaceMap) ToSubNetworkInterfaceMapOutput() SubNetworkInterfaceMapOutput {
	return i.ToSubNetworkInterfaceMapOutputWithContext(context.Background())
}

func (i SubNetworkInterfaceMap) ToSubNetworkInterfaceMapOutputWithContext(ctx context.Context) SubNetworkInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubNetworkInterfaceMapOutput)
}

type SubNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (SubNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubNetworkInterface)(nil)).Elem()
}

func (o SubNetworkInterfaceOutput) ToSubNetworkInterfaceOutput() SubNetworkInterfaceOutput {
	return o
}

func (o SubNetworkInterfaceOutput) ToSubNetworkInterfaceOutputWithContext(ctx context.Context) SubNetworkInterfaceOutput {
	return o
}

// The create time of the supplementary network interface.
func (o SubNetworkInterfaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the supplementary network interface.
func (o SubNetworkInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the private IPv4 address of the supplementary network interface.
func (o SubNetworkInterfaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the IPv6 address is it enabled of the supplementary network interface.
func (o SubNetworkInterfaceOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

// Specifies the IPv6 address of the supplementary network interface.
func (o SubNetworkInterfaceOutput) Ipv6IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.Ipv6IpAddress }).(pulumi.StringOutput)
}

// The MAC address of the supplementary network interface.
func (o SubNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of the ECS to which the supplementary network interface belongs.
func (o SubNetworkInterfaceOutput) ParentDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.ParentDeviceId }).(pulumi.StringOutput)
}

// Specifies the ID of the elastic network interface to which the
// supplementary network interface belongs.
// Changing this creates a new resource.
func (o SubNetworkInterfaceOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o SubNetworkInterfaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the list of the security groups IDs to which the supplementary
// network interface belongs.
func (o SubNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The status of the supplementary network interface.
func (o SubNetworkInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the subnet to which the supplementary network
// interface belongs.
// Changing this creates a new resource.
func (o SubNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the vlan ID of the supplementary network interface.
// The valid value is range from `1` t0 `4094`.
func (o SubNetworkInterfaceOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.VlanId }).(pulumi.StringOutput)
}

// The ID of the VPC to which the supplementary network interface belongs.
func (o SubNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubNetworkInterface) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SubNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (SubNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubNetworkInterface)(nil)).Elem()
}

func (o SubNetworkInterfaceArrayOutput) ToSubNetworkInterfaceArrayOutput() SubNetworkInterfaceArrayOutput {
	return o
}

func (o SubNetworkInterfaceArrayOutput) ToSubNetworkInterfaceArrayOutputWithContext(ctx context.Context) SubNetworkInterfaceArrayOutput {
	return o
}

func (o SubNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) SubNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubNetworkInterface {
		return vs[0].([]*SubNetworkInterface)[vs[1].(int)]
	}).(SubNetworkInterfaceOutput)
}

type SubNetworkInterfaceMapOutput struct{ *pulumi.OutputState }

func (SubNetworkInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubNetworkInterface)(nil)).Elem()
}

func (o SubNetworkInterfaceMapOutput) ToSubNetworkInterfaceMapOutput() SubNetworkInterfaceMapOutput {
	return o
}

func (o SubNetworkInterfaceMapOutput) ToSubNetworkInterfaceMapOutputWithContext(ctx context.Context) SubNetworkInterfaceMapOutput {
	return o
}

func (o SubNetworkInterfaceMapOutput) MapIndex(k pulumi.StringInput) SubNetworkInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubNetworkInterface {
		return vs[0].(map[string]*SubNetworkInterface)[vs[1].(string)]
	}).(SubNetworkInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubNetworkInterfaceInput)(nil)).Elem(), &SubNetworkInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubNetworkInterfaceArrayInput)(nil)).Elem(), SubNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubNetworkInterfaceMapInput)(nil)).Elem(), SubNetworkInterfaceMap{})
	pulumi.RegisterOutputType(SubNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(SubNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(SubNetworkInterfaceMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package modelarts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of ModelArts dataset versions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			datasetId := cfg.RequireObject("datasetId")
//			_, err := ModelArts.GetDataset_versions(ctx, &modelarts.GetDataset_versionsArgs{
//				DatasetId: datasetId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDataset_versions(ctx *pulumi.Context, args *GetDataset_versionsArgs, opts ...pulumi.InvokeOption) (*GetDataset_versionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDataset_versionsResult
	err := ctx.Invoke("huaweicloud:ModelArts/getDataset_versions:getDataset_versions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataset_versions.
type GetDataset_versionsArgs struct {
	// Specifies the ID of dataset.
	DatasetId string `pulumi:"datasetId"`
	// Specifies the name of the dataset version.
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain dataset versions. If omitted, the
	// provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the range of splitting ratio which randomly divides a labeled sample
	// into a training set and a validation set. Separate the minimum and maximum split ratios with commas,
	// for example: "0.0,1.0".
	SplitRatio *string `pulumi:"splitRatio"`
}

// A collection of values returned by getDataset_versions.
type GetDataset_versionsResult struct {
	DatasetId string `pulumi:"datasetId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the dataset version.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// The ratio of splitting which randomly divides a labeled sample into a training set and
	// a validation set.
	SplitRatio *string `pulumi:"splitRatio"`
	// Indicates a list of all dataset versions found. Structure is documented below.
	Versions []GetDataset_versionsVersion `pulumi:"versions"`
}

func GetDataset_versionsOutput(ctx *pulumi.Context, args GetDataset_versionsOutputArgs, opts ...pulumi.InvokeOption) GetDataset_versionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDataset_versionsResult, error) {
			args := v.(GetDataset_versionsArgs)
			r, err := GetDataset_versions(ctx, &args, opts...)
			var s GetDataset_versionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDataset_versionsResultOutput)
}

// A collection of arguments for invoking getDataset_versions.
type GetDataset_versionsOutputArgs struct {
	// Specifies the ID of dataset.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// Specifies the name of the dataset version.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain dataset versions. If omitted, the
	// provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the range of splitting ratio which randomly divides a labeled sample
	// into a training set and a validation set. Separate the minimum and maximum split ratios with commas,
	// for example: "0.0,1.0".
	SplitRatio pulumi.StringPtrInput `pulumi:"splitRatio"`
}

func (GetDataset_versionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataset_versionsArgs)(nil)).Elem()
}

// A collection of values returned by getDataset_versions.
type GetDataset_versionsResultOutput struct{ *pulumi.OutputState }

func (GetDataset_versionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataset_versionsResult)(nil)).Elem()
}

func (o GetDataset_versionsResultOutput) ToGetDataset_versionsResultOutput() GetDataset_versionsResultOutput {
	return o
}

func (o GetDataset_versionsResultOutput) ToGetDataset_versionsResultOutputWithContext(ctx context.Context) GetDataset_versionsResultOutput {
	return o
}

func (o GetDataset_versionsResultOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDataset_versionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the dataset version.
func (o GetDataset_versionsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetDataset_versionsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The ratio of splitting which randomly divides a labeled sample into a training set and
// a validation set.
func (o GetDataset_versionsResultOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) *string { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// Indicates a list of all dataset versions found. Structure is documented below.
func (o GetDataset_versionsResultOutput) Versions() GetDataset_versionsVersionArrayOutput {
	return o.ApplyT(func(v GetDataset_versionsResult) []GetDataset_versionsVersion { return v.Versions }).(GetDataset_versionsVersionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDataset_versionsResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package modelarts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages ModelArts dataset version resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			datasetId := cfg.RequireObject("datasetId")
//			_, err := ModelArts.NewDatasetVersion(ctx, "v001", &ModelArts.DatasetVersionArgs{
//				DatasetId:   pulumi.Any(datasetId),
//				Description: pulumi.String("Created by demo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The dataset versions can be imported by dataset ID and version ID, separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:ModelArts/datasetVersion:DatasetVersion test yiROKoTTjtwjvP71yLG/wieeeoTrtrtjvn67yLm
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`hard_example`. It is generally recommended running `terraform plan` after importing a dataset. You can then decide if changes should be applied to the dataset, or the resource definition should be updated to align with the dataset. Also you can ignore changes as below. hcl resource "huaweicloud_modelarts_dataset_version" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	hard_example,
//
//	]
//
//	} }
type DatasetVersion struct {
	pulumi.CustomResourceState

	// The creation time, in UTC format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// Specifies the description of dataset version. It contains a maximum of
	// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The total number of samples.
	Files pulumi.IntOutput `pulumi:"files"`
	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is `false`.
	// Changing this parameter will create a new resource.
	HardExample pulumi.BoolPtrOutput `pulumi:"hardExample"`
	// Whether this version is current version.
	IsCurrent pulumi.BoolOutput `pulumi:"isCurrent"`
	// The label type of the dataset version. Valid values are as follows:
	// + **multi**: Indicates that there are multi-label samples.
	// + **single**: Indicates that all samples are single-label.
	// + **unlabeled**: Indicates that all samples are unlabeled.
	LabelingType pulumi.StringOutput `pulumi:"labelingType"`
	// Specifies the name of the dataset version. The name consists of `1` to `32`
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	SplitRatio pulumi.StringPtrOutput `pulumi:"splitRatio"`
	// The status of the dataset version. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Normal.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	Status pulumi.IntOutput `pulumi:"status"`
	// The path to save the manifest file of the version.
	StoragePath pulumi.StringOutput `pulumi:"storagePath"`
	// The last update time, in UTC format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Whether the data has been verified by the verification algorithm before publishing.
	Verification pulumi.BoolOutput `pulumi:"verification"`
	// The version ID.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewDatasetVersion registers a new resource with the given unique name, arguments, and options.
func NewDatasetVersion(ctx *pulumi.Context,
	name string, args *DatasetVersionArgs, opts ...pulumi.ResourceOption) (*DatasetVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DatasetVersion
	err := ctx.RegisterResource("huaweicloud:ModelArts/datasetVersion:DatasetVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetVersion gets an existing DatasetVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetVersionState, opts ...pulumi.ResourceOption) (*DatasetVersion, error) {
	var resource DatasetVersion
	err := ctx.ReadResource("huaweicloud:ModelArts/datasetVersion:DatasetVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetVersion resources.
type datasetVersionState struct {
	// The creation time, in UTC format.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	DatasetId *string `pulumi:"datasetId"`
	// Specifies the description of dataset version. It contains a maximum of
	// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
	Description *string `pulumi:"description"`
	// The total number of samples.
	Files *int `pulumi:"files"`
	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is `false`.
	// Changing this parameter will create a new resource.
	HardExample *bool `pulumi:"hardExample"`
	// Whether this version is current version.
	IsCurrent *bool `pulumi:"isCurrent"`
	// The label type of the dataset version. Valid values are as follows:
	// + **multi**: Indicates that there are multi-label samples.
	// + **single**: Indicates that all samples are single-label.
	// + **unlabeled**: Indicates that all samples are unlabeled.
	LabelingType *string `pulumi:"labelingType"`
	// Specifies the name of the dataset version. The name consists of `1` to `32`
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	SplitRatio *string `pulumi:"splitRatio"`
	// The status of the dataset version. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Normal.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	Status *int `pulumi:"status"`
	// The path to save the manifest file of the version.
	StoragePath *string `pulumi:"storagePath"`
	// The last update time, in UTC format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Whether the data has been verified by the verification algorithm before publishing.
	Verification *bool `pulumi:"verification"`
	// The version ID.
	VersionId *string `pulumi:"versionId"`
}

type DatasetVersionState struct {
	// The creation time, in UTC format.
	CreatedAt pulumi.StringPtrInput
	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	DatasetId pulumi.StringPtrInput
	// Specifies the description of dataset version. It contains a maximum of
	// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
	Description pulumi.StringPtrInput
	// The total number of samples.
	Files pulumi.IntPtrInput
	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is `false`.
	// Changing this parameter will create a new resource.
	HardExample pulumi.BoolPtrInput
	// Whether this version is current version.
	IsCurrent pulumi.BoolPtrInput
	// The label type of the dataset version. Valid values are as follows:
	// + **multi**: Indicates that there are multi-label samples.
	// + **single**: Indicates that all samples are single-label.
	// + **unlabeled**: Indicates that all samples are unlabeled.
	LabelingType pulumi.StringPtrInput
	// Specifies the name of the dataset version. The name consists of `1` to `32`
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	SplitRatio pulumi.StringPtrInput
	// The status of the dataset version. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Normal.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	Status pulumi.IntPtrInput
	// The path to save the manifest file of the version.
	StoragePath pulumi.StringPtrInput
	// The last update time, in UTC format.
	UpdatedAt pulumi.StringPtrInput
	// Whether the data has been verified by the verification algorithm before publishing.
	Verification pulumi.BoolPtrInput
	// The version ID.
	VersionId pulumi.StringPtrInput
}

func (DatasetVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetVersionState)(nil)).Elem()
}

type datasetVersionArgs struct {
	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	DatasetId string `pulumi:"datasetId"`
	// Specifies the description of dataset version. It contains a maximum of
	// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
	Description *string `pulumi:"description"`
	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is `false`.
	// Changing this parameter will create a new resource.
	HardExample *bool `pulumi:"hardExample"`
	// Specifies the name of the dataset version. The name consists of `1` to `32`
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	SplitRatio *string `pulumi:"splitRatio"`
}

// The set of arguments for constructing a DatasetVersion resource.
type DatasetVersionArgs struct {
	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	DatasetId pulumi.StringInput
	// Specifies the description of dataset version. It contains a maximum of
	// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
	Description pulumi.StringPtrInput
	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is `false`.
	// Changing this parameter will create a new resource.
	HardExample pulumi.BoolPtrInput
	// Specifies the name of the dataset version. The name consists of `1` to `32`
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	SplitRatio pulumi.StringPtrInput
}

func (DatasetVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetVersionArgs)(nil)).Elem()
}

type DatasetVersionInput interface {
	pulumi.Input

	ToDatasetVersionOutput() DatasetVersionOutput
	ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput
}

func (*DatasetVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetVersion)(nil)).Elem()
}

func (i *DatasetVersion) ToDatasetVersionOutput() DatasetVersionOutput {
	return i.ToDatasetVersionOutputWithContext(context.Background())
}

func (i *DatasetVersion) ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetVersionOutput)
}

// DatasetVersionArrayInput is an input type that accepts DatasetVersionArray and DatasetVersionArrayOutput values.
// You can construct a concrete instance of `DatasetVersionArrayInput` via:
//
//	DatasetVersionArray{ DatasetVersionArgs{...} }
type DatasetVersionArrayInput interface {
	pulumi.Input

	ToDatasetVersionArrayOutput() DatasetVersionArrayOutput
	ToDatasetVersionArrayOutputWithContext(context.Context) DatasetVersionArrayOutput
}

type DatasetVersionArray []DatasetVersionInput

func (DatasetVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetVersion)(nil)).Elem()
}

func (i DatasetVersionArray) ToDatasetVersionArrayOutput() DatasetVersionArrayOutput {
	return i.ToDatasetVersionArrayOutputWithContext(context.Background())
}

func (i DatasetVersionArray) ToDatasetVersionArrayOutputWithContext(ctx context.Context) DatasetVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetVersionArrayOutput)
}

// DatasetVersionMapInput is an input type that accepts DatasetVersionMap and DatasetVersionMapOutput values.
// You can construct a concrete instance of `DatasetVersionMapInput` via:
//
//	DatasetVersionMap{ "key": DatasetVersionArgs{...} }
type DatasetVersionMapInput interface {
	pulumi.Input

	ToDatasetVersionMapOutput() DatasetVersionMapOutput
	ToDatasetVersionMapOutputWithContext(context.Context) DatasetVersionMapOutput
}

type DatasetVersionMap map[string]DatasetVersionInput

func (DatasetVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetVersion)(nil)).Elem()
}

func (i DatasetVersionMap) ToDatasetVersionMapOutput() DatasetVersionMapOutput {
	return i.ToDatasetVersionMapOutputWithContext(context.Background())
}

func (i DatasetVersionMap) ToDatasetVersionMapOutputWithContext(ctx context.Context) DatasetVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetVersionMapOutput)
}

type DatasetVersionOutput struct{ *pulumi.OutputState }

func (DatasetVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetVersion)(nil)).Elem()
}

func (o DatasetVersionOutput) ToDatasetVersionOutput() DatasetVersionOutput {
	return o
}

func (o DatasetVersionOutput) ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput {
	return o
}

// The creation time, in UTC format.
func (o DatasetVersionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the ID of dataset.
// Changing this parameter will create a new resource.
func (o DatasetVersionOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Specifies the description of dataset version. It contains a maximum of
// `256` characters and cannot contain special characters `!<>=&"'`. Changing this parameter will create a new resource.
func (o DatasetVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The total number of samples.
func (o DatasetVersionOutput) Files() pulumi.IntOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.IntOutput { return v.Files }).(pulumi.IntOutput)
}

// Specifies whether to enable ModelArts to write the hard example
// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
// use these attributes to optimize hard example filtering. Default value is `false`.
// Changing this parameter will create a new resource.
func (o DatasetVersionOutput) HardExample() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.BoolPtrOutput { return v.HardExample }).(pulumi.BoolPtrOutput)
}

// Whether this version is current version.
func (o DatasetVersionOutput) IsCurrent() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.BoolOutput { return v.IsCurrent }).(pulumi.BoolOutput)
}

// The label type of the dataset version. Valid values are as follows:
// + **multi**: Indicates that there are multi-label samples.
// + **single**: Indicates that all samples are single-label.
// + **unlabeled**: Indicates that all samples are unlabeled.
func (o DatasetVersionOutput) LabelingType() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.LabelingType }).(pulumi.StringOutput)
}

// Specifies the name of the dataset version. The name consists of `1` to `32`
// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
// Changing this parameter will create a new resource.
func (o DatasetVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o DatasetVersionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ratio of splitting which randomly divides a labeled sample
// into a training set and a validation set. Changing this parameter will create a new resource.
func (o DatasetVersionOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringPtrOutput { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// The status of the dataset version. Valid values are as follows:
// + **0**: Creating.
// + **1**: Normal.
// + **2**: Deleting.
// + **3**: Deleted.
// + **4**: Exception.
func (o DatasetVersionOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// The path to save the manifest file of the version.
func (o DatasetVersionOutput) StoragePath() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.StoragePath }).(pulumi.StringOutput)
}

// The last update time, in UTC format.
func (o DatasetVersionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether the data has been verified by the verification algorithm before publishing.
func (o DatasetVersionOutput) Verification() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.BoolOutput { return v.Verification }).(pulumi.BoolOutput)
}

// The version ID.
func (o DatasetVersionOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type DatasetVersionArrayOutput struct{ *pulumi.OutputState }

func (DatasetVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetVersion)(nil)).Elem()
}

func (o DatasetVersionArrayOutput) ToDatasetVersionArrayOutput() DatasetVersionArrayOutput {
	return o
}

func (o DatasetVersionArrayOutput) ToDatasetVersionArrayOutputWithContext(ctx context.Context) DatasetVersionArrayOutput {
	return o
}

func (o DatasetVersionArrayOutput) Index(i pulumi.IntInput) DatasetVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetVersion {
		return vs[0].([]*DatasetVersion)[vs[1].(int)]
	}).(DatasetVersionOutput)
}

type DatasetVersionMapOutput struct{ *pulumi.OutputState }

func (DatasetVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetVersion)(nil)).Elem()
}

func (o DatasetVersionMapOutput) ToDatasetVersionMapOutput() DatasetVersionMapOutput {
	return o
}

func (o DatasetVersionMapOutput) ToDatasetVersionMapOutputWithContext(ctx context.Context) DatasetVersionMapOutput {
	return o
}

func (o DatasetVersionMapOutput) MapIndex(k pulumi.StringInput) DatasetVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetVersion {
		return vs[0].(map[string]*DatasetVersion)[vs[1].(string)]
	}).(DatasetVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetVersionInput)(nil)).Elem(), &DatasetVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetVersionArrayInput)(nil)).Elem(), DatasetVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetVersionMapInput)(nil)).Elem(), DatasetVersionMap{})
	pulumi.RegisterOutputType(DatasetVersionOutput{})
	pulumi.RegisterOutputType(DatasetVersionArrayOutput{})
	pulumi.RegisterOutputType(DatasetVersionMapOutput{})
}

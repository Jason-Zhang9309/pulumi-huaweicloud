// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package modelarts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages ModelArts dataset resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			outputObsPath := cfg.RequireObject("outputObsPath")
//			inputObsPath := cfg.RequireObject("inputObsPath")
//			_, err := ModelArts.NewDataset(ctx, "test", &ModelArts.DatasetArgs{
//				Type:        pulumi.Int(1),
//				OutputPath:  pulumi.Any(outputObsPath),
//				Description: pulumi.String("Terraform Demo"),
//				DataSource: &modelarts.DatasetDataSourceArgs{
//					Path: pulumi.Any(inputObsPath),
//				},
//				Labels: modelarts.DatasetLabelArray{
//					&modelarts.DatasetLabelArgs{
//						Name: pulumi.String("foo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The datasets can be imported by `id`.
//
// ```sh
//
//	$ pulumi import huaweicloud:ModelArts/dataset:Dataset test yiROKoTTjtwjvP71yLG
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`data_source.0.path`, `data_source.0.queue_name`, `data_source.0.database_name`, `data_source.0.table_name`, `data_source.0.cluster_id`, `data_source.0.user_name` and `data_source.0.password`. It is generally recommended running `terraform plan` after importing a dataset. You can then decide if changes should be applied to the dataset, or the resource definition should be updated to align with the dataset. Also you can ignore changes as below. resource "huaweicloud_modelarts_dataset" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	data_source.0.path, data_source.0.queue_name, data_source.0.database_name, data_source.0.table_name,
//
//	data_source.0.cluster_id, data_source.0.user_name, data_source.0.password,
//
//	]
//
//	} }
type Dataset struct {
	pulumi.CustomResourceState

	// The dataset creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
	// table type datasets).
	DataFormat pulumi.StringOutput `pulumi:"dataFormat"`
	// Specifies the data sources which be used to imported the source data (such
	// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
	// Changing this parameter will create a new resource.
	DataSource DatasetDataSourceOutput `pulumi:"dataSource"`
	// Specifies the description of dataset. It contains a maximum of 256 characters and
	// cannot contain special characters `!<>=&"'`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether to import labeled files.
	// Default value is `true`. Changing this parameter will create a new resource.
	ImportLabeledEnabled pulumi.BoolPtrOutput `pulumi:"importLabeledEnabled"`
	// Specifies the custom format information of labeled files when import
	// labeled files for Text classification. Structure is documented below.
	// Changing this parameter will create a new resource.
	LabelFormat DatasetLabelFormatPtrOutput `pulumi:"labelFormat"`
	// Specifies labels information. Structure is documented below.
	Labels DatasetLabelArrayOutput `pulumi:"labels"`
	// Specifies the name of label.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the OBS path for storing output files such as labeled files.
	// The path cannot be the same as the import path or subdirectory of the import path.
	// Changing this parameter will create a new resource.
	OutputPath pulumi.StringOutput `pulumi:"outputPath"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the schema information of source data when `type` is `400`.
	// Structure is documented below. Changing this parameter will create a new resource.
	Schemas DatasetSchemaArrayOutput `pulumi:"schemas"`
	// Dataset status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Completed.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	// + **5**: Syncing.
	// + **6**: Releasing.
	// + **7**: Version switching.
	// + **8**: Importing.
	Status pulumi.IntOutput `pulumi:"status"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	if args.OutputPath == nil {
		return nil, errors.New("invalid value for required argument 'OutputPath'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Dataset
	err := ctx.RegisterResource("huaweicloud:ModelArts/dataset:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("huaweicloud:ModelArts/dataset:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
	// The dataset creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
	// table type datasets).
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies the data sources which be used to imported the source data (such
	// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
	// Changing this parameter will create a new resource.
	DataSource *DatasetDataSource `pulumi:"dataSource"`
	// Specifies the description of dataset. It contains a maximum of 256 characters and
	// cannot contain special characters `!<>=&"'`.
	Description *string `pulumi:"description"`
	// Specifies whether to import labeled files.
	// Default value is `true`. Changing this parameter will create a new resource.
	ImportLabeledEnabled *bool `pulumi:"importLabeledEnabled"`
	// Specifies the custom format information of labeled files when import
	// labeled files for Text classification. Structure is documented below.
	// Changing this parameter will create a new resource.
	LabelFormat *DatasetLabelFormat `pulumi:"labelFormat"`
	// Specifies labels information. Structure is documented below.
	Labels []DatasetLabel `pulumi:"labels"`
	// Specifies the name of label.
	Name *string `pulumi:"name"`
	// Specifies the OBS path for storing output files such as labeled files.
	// The path cannot be the same as the import path or subdirectory of the import path.
	// Changing this parameter will create a new resource.
	OutputPath *string `pulumi:"outputPath"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the schema information of source data when `type` is `400`.
	// Structure is documented below. Changing this parameter will create a new resource.
	Schemas []DatasetSchema `pulumi:"schemas"`
	// Dataset status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Completed.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	// + **5**: Syncing.
	// + **6**: Releasing.
	// + **7**: Version switching.
	// + **8**: Importing.
	Status *int `pulumi:"status"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type *int `pulumi:"type"`
}

type DatasetState struct {
	// The dataset creation time.
	CreatedAt pulumi.StringPtrInput
	// dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
	// table type datasets).
	DataFormat pulumi.StringPtrInput
	// Specifies the data sources which be used to imported the source data (such
	// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
	// Changing this parameter will create a new resource.
	DataSource DatasetDataSourcePtrInput
	// Specifies the description of dataset. It contains a maximum of 256 characters and
	// cannot contain special characters `!<>=&"'`.
	Description pulumi.StringPtrInput
	// Specifies whether to import labeled files.
	// Default value is `true`. Changing this parameter will create a new resource.
	ImportLabeledEnabled pulumi.BoolPtrInput
	// Specifies the custom format information of labeled files when import
	// labeled files for Text classification. Structure is documented below.
	// Changing this parameter will create a new resource.
	LabelFormat DatasetLabelFormatPtrInput
	// Specifies labels information. Structure is documented below.
	Labels DatasetLabelArrayInput
	// Specifies the name of label.
	Name pulumi.StringPtrInput
	// Specifies the OBS path for storing output files such as labeled files.
	// The path cannot be the same as the import path or subdirectory of the import path.
	// Changing this parameter will create a new resource.
	OutputPath pulumi.StringPtrInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the schema information of source data when `type` is `400`.
	// Structure is documented below. Changing this parameter will create a new resource.
	Schemas DatasetSchemaArrayInput
	// Dataset status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Completed.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	// + **5**: Syncing.
	// + **6**: Releasing.
	// + **7**: Version switching.
	// + **8**: Importing.
	Status pulumi.IntPtrInput
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type pulumi.IntPtrInput
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// Specifies the data sources which be used to imported the source data (such
	// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
	// Changing this parameter will create a new resource.
	DataSource DatasetDataSource `pulumi:"dataSource"`
	// Specifies the description of dataset. It contains a maximum of 256 characters and
	// cannot contain special characters `!<>=&"'`.
	Description *string `pulumi:"description"`
	// Specifies whether to import labeled files.
	// Default value is `true`. Changing this parameter will create a new resource.
	ImportLabeledEnabled *bool `pulumi:"importLabeledEnabled"`
	// Specifies the custom format information of labeled files when import
	// labeled files for Text classification. Structure is documented below.
	// Changing this parameter will create a new resource.
	LabelFormat *DatasetLabelFormat `pulumi:"labelFormat"`
	// Specifies labels information. Structure is documented below.
	Labels []DatasetLabel `pulumi:"labels"`
	// Specifies the name of label.
	Name *string `pulumi:"name"`
	// Specifies the OBS path for storing output files such as labeled files.
	// The path cannot be the same as the import path or subdirectory of the import path.
	// Changing this parameter will create a new resource.
	OutputPath string `pulumi:"outputPath"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the schema information of source data when `type` is `400`.
	// Structure is documented below. Changing this parameter will create a new resource.
	Schemas []DatasetSchema `pulumi:"schemas"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// Specifies the data sources which be used to imported the source data (such
	// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
	// Changing this parameter will create a new resource.
	DataSource DatasetDataSourceInput
	// Specifies the description of dataset. It contains a maximum of 256 characters and
	// cannot contain special characters `!<>=&"'`.
	Description pulumi.StringPtrInput
	// Specifies whether to import labeled files.
	// Default value is `true`. Changing this parameter will create a new resource.
	ImportLabeledEnabled pulumi.BoolPtrInput
	// Specifies the custom format information of labeled files when import
	// labeled files for Text classification. Structure is documented below.
	// Changing this parameter will create a new resource.
	LabelFormat DatasetLabelFormatPtrInput
	// Specifies labels information. Structure is documented below.
	Labels DatasetLabelArrayInput
	// Specifies the name of label.
	Name pulumi.StringPtrInput
	// Specifies the OBS path for storing output files such as labeled files.
	// The path cannot be the same as the import path or subdirectory of the import path.
	// Changing this parameter will create a new resource.
	OutputPath pulumi.StringInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the schema information of source data when `type` is `400`.
	// Structure is documented below. Changing this parameter will create a new resource.
	Schemas DatasetSchemaArrayInput
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type pulumi.IntInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//	DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// DatasetMapInput is an input type that accepts DatasetMap and DatasetMapOutput values.
// You can construct a concrete instance of `DatasetMapInput` via:
//
//	DatasetMap{ "key": DatasetArgs{...} }
type DatasetMapInput interface {
	pulumi.Input

	ToDatasetMapOutput() DatasetMapOutput
	ToDatasetMapOutputWithContext(context.Context) DatasetMapOutput
}

type DatasetMap map[string]DatasetInput

func (DatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (i DatasetMap) ToDatasetMapOutput() DatasetMapOutput {
	return i.ToDatasetMapOutputWithContext(context.Background())
}

func (i DatasetMap) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMapOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

// The dataset creation time.
func (o DatasetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
// table type datasets).
func (o DatasetOutput) DataFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.DataFormat }).(pulumi.StringOutput)
}

// Specifies the data sources which be used to imported the source data (such
// as pictures/files/audio, etc.) in this directory and subdirectories to the dataset. Structure is documented below.
// Changing this parameter will create a new resource.
func (o DatasetOutput) DataSource() DatasetDataSourceOutput {
	return o.ApplyT(func(v *Dataset) DatasetDataSourceOutput { return v.DataSource }).(DatasetDataSourceOutput)
}

// Specifies the description of dataset. It contains a maximum of 256 characters and
// cannot contain special characters `!<>=&"'`.
func (o DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether to import labeled files.
// Default value is `true`. Changing this parameter will create a new resource.
func (o DatasetOutput) ImportLabeledEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dataset) pulumi.BoolPtrOutput { return v.ImportLabeledEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the custom format information of labeled files when import
// labeled files for Text classification. Structure is documented below.
// Changing this parameter will create a new resource.
func (o DatasetOutput) LabelFormat() DatasetLabelFormatPtrOutput {
	return o.ApplyT(func(v *Dataset) DatasetLabelFormatPtrOutput { return v.LabelFormat }).(DatasetLabelFormatPtrOutput)
}

// Specifies labels information. Structure is documented below.
func (o DatasetOutput) Labels() DatasetLabelArrayOutput {
	return o.ApplyT(func(v *Dataset) DatasetLabelArrayOutput { return v.Labels }).(DatasetLabelArrayOutput)
}

// Specifies the name of label.
func (o DatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the OBS path for storing output files such as labeled files.
// The path cannot be the same as the import path or subdirectory of the import path.
// Changing this parameter will create a new resource.
func (o DatasetOutput) OutputPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.OutputPath }).(pulumi.StringOutput)
}

// The region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o DatasetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the schema information of source data when `type` is `400`.
// Structure is documented below. Changing this parameter will create a new resource.
func (o DatasetOutput) Schemas() DatasetSchemaArrayOutput {
	return o.ApplyT(func(v *Dataset) DatasetSchemaArrayOutput { return v.Schemas }).(DatasetSchemaArrayOutput)
}

// Dataset status. Valid values are as follows:
// + **0**: Creating.
// + **1**: Completed.
// + **2**: Deleting.
// + **3**: Deleted.
// + **4**: Exception.
// + **5**: Syncing.
// + **6**: Releasing.
// + **7**: Version switching.
// + **8**: Importing.
func (o DatasetOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Specifies Label type for text classification.
// The optional values are as follows:
func (o DatasetOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].([]*Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

type DatasetMapOutput struct{ *pulumi.OutputState }

func (DatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (o DatasetMapOutput) ToDatasetMapOutput() DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) MapIndex(k pulumi.StringInput) DatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].(map[string]*Dataset)[vs[1].(string)]
	}).(DatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetArrayInput)(nil)).Elem(), DatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetMapInput)(nil)).Elem(), DatasetMap{})
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetMapOutput{})
}

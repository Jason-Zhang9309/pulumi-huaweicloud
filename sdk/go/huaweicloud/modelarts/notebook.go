// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package modelarts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages ModelArts notebook resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/ModelArts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			notebookName := cfg.RequireObject("notebookName")
//			keyPairName := cfg.RequireObject("keyPairName")
//			ip := cfg.RequireObject("ip")
//			_, err := ModelArts.NewNotebook(ctx, "notebook", &ModelArts.NotebookArgs{
//				FlavorId: pulumi.String("modelarts.vm.cpu.2u"),
//				ImageId:  pulumi.String("e1a07296-22a8-4f05-8bc8-e936c8e54090"),
//				AllowedAccessIps: pulumi.StringArray{
//					pulumi.Any(ip),
//				},
//				KeyPair: pulumi.Any(keyPairName),
//				Volume: &modelarts.NotebookVolumeArgs{
//					Type: pulumi.String("EFS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The notebook can be imported by `id`.
//
// ```sh
//
//	$ pulumi import huaweicloud:ModelArts/notebook:Notebook test b11b407c-e604-4e8d-8bc4-92398320b847
//
// ```
type Notebook struct {
	pulumi.CustomResourceState

	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps pulumi.StringArrayOutput `pulumi:"allowedAccessIps"`
	// Whether enabled the notebook instance to automatically stop.
	AutoStopEnabled pulumi.BoolOutput `pulumi:"autoStopEnabled"`
	// The notebook creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters `&<>"'/`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the flavor ID. The options are as follows:
	// - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
	//   discovery.
	// - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
	//   applications.
	// - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
	//   training and debugging.
	// - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Specifies the image ID of notebook.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The image name.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// The image path in swr.
	ImageSwrPath pulumi.StringOutput `pulumi:"imageSwrPath"`
	// The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// An array of storages which mount to the notebook. Structure is documented below.
	MountStorages NotebookMountStorageTypeArrayOutput `pulumi:"mountStorages"`
	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolId pulumi.StringPtrOutput `pulumi:"poolId"`
	// The name of Dedicated resource pool which the notebook used.
	PoolName pulumi.StringOutput `pulumi:"poolName"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The uri for remote SSH access.
	// * `volume/mount_path` - The local mount path of volume.
	SshUri pulumi.StringOutput `pulumi:"sshUri"`
	// The status of mount.
	Status pulumi.StringOutput `pulumi:"status"`
	// The notebook update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The web url of the notebook.
	Url pulumi.StringOutput `pulumi:"url"`
	// Specifies the volume information. Structure is documented below.
	Volume NotebookVolumeOutput `pulumi:"volume"`
	// Specifies the workspace ID which the notebook belongs to.
	// The default value is `0`. Changing this parameter will create a new resource.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNotebook registers a new resource with the given unique name, arguments, and options.
func NewNotebook(ctx *pulumi.Context,
	name string, args *NotebookArgs, opts ...pulumi.ResourceOption) (*Notebook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Notebook
	err := ctx.RegisterResource("huaweicloud:ModelArts/notebook:Notebook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebook gets an existing Notebook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotebookState, opts ...pulumi.ResourceOption) (*Notebook, error) {
	var resource Notebook
	err := ctx.ReadResource("huaweicloud:ModelArts/notebook:Notebook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notebook resources.
type notebookState struct {
	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps []string `pulumi:"allowedAccessIps"`
	// Whether enabled the notebook instance to automatically stop.
	AutoStopEnabled *bool `pulumi:"autoStopEnabled"`
	// The notebook creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters `&<>"'/`.
	Description *string `pulumi:"description"`
	// Specifies the flavor ID. The options are as follows:
	// - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
	//   discovery.
	// - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
	//   applications.
	// - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
	//   training and debugging.
	// - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the image ID of notebook.
	ImageId *string `pulumi:"imageId"`
	// The image name.
	ImageName *string `pulumi:"imageName"`
	// The image path in swr.
	ImageSwrPath *string `pulumi:"imageSwrPath"`
	// The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
	ImageType *string `pulumi:"imageType"`
	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair *string `pulumi:"keyPair"`
	// An array of storages which mount to the notebook. Structure is documented below.
	MountStorages []NotebookMountStorageType `pulumi:"mountStorages"`
	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolId *string `pulumi:"poolId"`
	// The name of Dedicated resource pool which the notebook used.
	PoolName *string `pulumi:"poolName"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The uri for remote SSH access.
	// * `volume/mount_path` - The local mount path of volume.
	SshUri *string `pulumi:"sshUri"`
	// The status of mount.
	Status *string `pulumi:"status"`
	// The notebook update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The web url of the notebook.
	Url *string `pulumi:"url"`
	// Specifies the volume information. Structure is documented below.
	Volume *NotebookVolume `pulumi:"volume"`
	// Specifies the workspace ID which the notebook belongs to.
	// The default value is `0`. Changing this parameter will create a new resource.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NotebookState struct {
	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps pulumi.StringArrayInput
	// Whether enabled the notebook instance to automatically stop.
	AutoStopEnabled pulumi.BoolPtrInput
	// The notebook creation time.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters `&<>"'/`.
	Description pulumi.StringPtrInput
	// Specifies the flavor ID. The options are as follows:
	// - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
	//   discovery.
	// - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
	//   applications.
	// - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
	//   training and debugging.
	// - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	FlavorId pulumi.StringPtrInput
	// Specifies the image ID of notebook.
	ImageId pulumi.StringPtrInput
	// The image name.
	ImageName pulumi.StringPtrInput
	// The image path in swr.
	ImageSwrPath pulumi.StringPtrInput
	// The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
	ImageType pulumi.StringPtrInput
	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrInput
	// An array of storages which mount to the notebook. Structure is documented below.
	MountStorages NotebookMountStorageTypeArrayInput
	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolId pulumi.StringPtrInput
	// The name of Dedicated resource pool which the notebook used.
	PoolName pulumi.StringPtrInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The uri for remote SSH access.
	// * `volume/mount_path` - The local mount path of volume.
	SshUri pulumi.StringPtrInput
	// The status of mount.
	Status pulumi.StringPtrInput
	// The notebook update time.
	UpdatedAt pulumi.StringPtrInput
	// The web url of the notebook.
	Url pulumi.StringPtrInput
	// Specifies the volume information. Structure is documented below.
	Volume NotebookVolumePtrInput
	// Specifies the workspace ID which the notebook belongs to.
	// The default value is `0`. Changing this parameter will create a new resource.
	WorkspaceId pulumi.StringPtrInput
}

func (NotebookState) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookState)(nil)).Elem()
}

type notebookArgs struct {
	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps []string `pulumi:"allowedAccessIps"`
	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters `&<>"'/`.
	Description *string `pulumi:"description"`
	// Specifies the flavor ID. The options are as follows:
	// - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
	//   discovery.
	// - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
	//   applications.
	// - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
	//   training and debugging.
	// - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	FlavorId string `pulumi:"flavorId"`
	// Specifies the image ID of notebook.
	ImageId string `pulumi:"imageId"`
	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolId *string `pulumi:"poolId"`
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the volume information. Structure is documented below.
	Volume NotebookVolume `pulumi:"volume"`
	// Specifies the workspace ID which the notebook belongs to.
	// The default value is `0`. Changing this parameter will create a new resource.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Notebook resource.
type NotebookArgs struct {
	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps pulumi.StringArrayInput
	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters `&<>"'/`.
	Description pulumi.StringPtrInput
	// Specifies the flavor ID. The options are as follows:
	// - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
	//   discovery.
	// - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
	//   applications.
	// - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
	//   training and debugging.
	// - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	// - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
	//   and debugging.
	FlavorId pulumi.StringInput
	// Specifies the image ID of notebook.
	ImageId pulumi.StringInput
	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair pulumi.StringPtrInput
	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolId pulumi.StringPtrInput
	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the volume information. Structure is documented below.
	Volume NotebookVolumeInput
	// Specifies the workspace ID which the notebook belongs to.
	// The default value is `0`. Changing this parameter will create a new resource.
	WorkspaceId pulumi.StringPtrInput
}

func (NotebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookArgs)(nil)).Elem()
}

type NotebookInput interface {
	pulumi.Input

	ToNotebookOutput() NotebookOutput
	ToNotebookOutputWithContext(ctx context.Context) NotebookOutput
}

func (*Notebook) ElementType() reflect.Type {
	return reflect.TypeOf((**Notebook)(nil)).Elem()
}

func (i *Notebook) ToNotebookOutput() NotebookOutput {
	return i.ToNotebookOutputWithContext(context.Background())
}

func (i *Notebook) ToNotebookOutputWithContext(ctx context.Context) NotebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookOutput)
}

// NotebookArrayInput is an input type that accepts NotebookArray and NotebookArrayOutput values.
// You can construct a concrete instance of `NotebookArrayInput` via:
//
//	NotebookArray{ NotebookArgs{...} }
type NotebookArrayInput interface {
	pulumi.Input

	ToNotebookArrayOutput() NotebookArrayOutput
	ToNotebookArrayOutputWithContext(context.Context) NotebookArrayOutput
}

type NotebookArray []NotebookInput

func (NotebookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notebook)(nil)).Elem()
}

func (i NotebookArray) ToNotebookArrayOutput() NotebookArrayOutput {
	return i.ToNotebookArrayOutputWithContext(context.Background())
}

func (i NotebookArray) ToNotebookArrayOutputWithContext(ctx context.Context) NotebookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookArrayOutput)
}

// NotebookMapInput is an input type that accepts NotebookMap and NotebookMapOutput values.
// You can construct a concrete instance of `NotebookMapInput` via:
//
//	NotebookMap{ "key": NotebookArgs{...} }
type NotebookMapInput interface {
	pulumi.Input

	ToNotebookMapOutput() NotebookMapOutput
	ToNotebookMapOutputWithContext(context.Context) NotebookMapOutput
}

type NotebookMap map[string]NotebookInput

func (NotebookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notebook)(nil)).Elem()
}

func (i NotebookMap) ToNotebookMapOutput() NotebookMapOutput {
	return i.ToNotebookMapOutputWithContext(context.Background())
}

func (i NotebookMap) ToNotebookMapOutputWithContext(ctx context.Context) NotebookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookMapOutput)
}

type NotebookOutput struct{ *pulumi.OutputState }

func (NotebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notebook)(nil)).Elem()
}

func (o NotebookOutput) ToNotebookOutput() NotebookOutput {
	return o
}

func (o NotebookOutput) ToNotebookOutputWithContext(ctx context.Context) NotebookOutput {
	return o
}

// Specifies public IP addresses that are allowed for remote SSH access.
// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
func (o NotebookOutput) AllowedAccessIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringArrayOutput { return v.AllowedAccessIps }).(pulumi.StringArrayOutput)
}

// Whether enabled the notebook instance to automatically stop.
func (o NotebookOutput) AutoStopEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Notebook) pulumi.BoolOutput { return v.AutoStopEnabled }).(pulumi.BoolOutput)
}

// The notebook creation time.
func (o NotebookOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of notebook. It contains a maximum of 512 characters and
// cannot contain special characters `&<>"'/`.
func (o NotebookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the flavor ID. The options are as follows:
//   - **modelarts.vm.cpu.2u**: General-purpose Intel CPU specifications, suitable for data exploration and algorithm
//     discovery.
//   - **modelarts.vm.cpu.8u**: General computing-plus Intel CPU specifications, suitable for compute-intensive
//     applications.
//   - **modelarts.bm.gpu.v100NV32**: One NVIDIA V100 GPU with 32GB of memory, suitable for deep learning algorithm
//     training and debugging.
//   - **modelarts.bm.d910.xlarge.1**: One Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
//     and debugging.
//   - **modelarts.bm.d910.xlarge.2**: Two Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
//     and debugging.
//   - **modelarts.bm.d910.xlarge.8**: Eight Ascend 910 NPU with 32GB of memory, suitable for deep learning code running
//     and debugging.
func (o NotebookOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Specifies the image ID of notebook.
func (o NotebookOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// The image name.
func (o NotebookOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// The image path in swr.
func (o NotebookOutput) ImageSwrPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.ImageSwrPath }).(pulumi.StringOutput)
}

// The image type. Valid values include: `BUILD_IN`, `DEDICATED`.
func (o NotebookOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// Specifies the key pair name for remote SSH access.
// Changing this parameter will create a new resource.
func (o NotebookOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// An array of storages which mount to the notebook. Structure is documented below.
func (o NotebookOutput) MountStorages() NotebookMountStorageTypeArrayOutput {
	return o.ApplyT(func(v *Notebook) NotebookMountStorageTypeArrayOutput { return v.MountStorages }).(NotebookMountStorageTypeArrayOutput)
}

// Specifies the name of the notebook. The name consists of 1 to 64 characters,
// starting with a letter. Only letters, digits and underscores (_) are allowed.
func (o NotebookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of Dedicated resource pool which the notebook used.
// Changing this parameter will create a new resource.
func (o NotebookOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringPtrOutput { return v.PoolId }).(pulumi.StringPtrOutput)
}

// The name of Dedicated resource pool which the notebook used.
func (o NotebookOutput) PoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.PoolName }).(pulumi.StringOutput)
}

// The region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o NotebookOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The uri for remote SSH access.
// * `volume/mount_path` - The local mount path of volume.
func (o NotebookOutput) SshUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.SshUri }).(pulumi.StringOutput)
}

// The status of mount.
func (o NotebookOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The notebook update time.
func (o NotebookOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The web url of the notebook.
func (o NotebookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Specifies the volume information. Structure is documented below.
func (o NotebookOutput) Volume() NotebookVolumeOutput {
	return o.ApplyT(func(v *Notebook) NotebookVolumeOutput { return v.Volume }).(NotebookVolumeOutput)
}

// Specifies the workspace ID which the notebook belongs to.
// The default value is `0`. Changing this parameter will create a new resource.
func (o NotebookOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NotebookArrayOutput struct{ *pulumi.OutputState }

func (NotebookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notebook)(nil)).Elem()
}

func (o NotebookArrayOutput) ToNotebookArrayOutput() NotebookArrayOutput {
	return o
}

func (o NotebookArrayOutput) ToNotebookArrayOutputWithContext(ctx context.Context) NotebookArrayOutput {
	return o
}

func (o NotebookArrayOutput) Index(i pulumi.IntInput) NotebookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notebook {
		return vs[0].([]*Notebook)[vs[1].(int)]
	}).(NotebookOutput)
}

type NotebookMapOutput struct{ *pulumi.OutputState }

func (NotebookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notebook)(nil)).Elem()
}

func (o NotebookMapOutput) ToNotebookMapOutput() NotebookMapOutput {
	return o
}

func (o NotebookMapOutput) ToNotebookMapOutputWithContext(ctx context.Context) NotebookMapOutput {
	return o
}

func (o NotebookMapOutput) MapIndex(k pulumi.StringInput) NotebookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notebook {
		return vs[0].(map[string]*Notebook)[vs[1].(string)]
	}).(NotebookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookInput)(nil)).Elem(), &Notebook{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookArrayInput)(nil)).Elem(), NotebookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookMapInput)(nil)).Elem(), NotebookMap{})
	pulumi.RegisterOutputType(NotebookOutput{})
	pulumi.RegisterOutputType(NotebookArrayOutput{})
	pulumi.RegisterOutputType(NotebookMapOutput{})
}

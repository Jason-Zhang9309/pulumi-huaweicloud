// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package modelarts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatasetDataSource struct {
	// Specifies the cluster ID of DWS/MRS when `dataType` is `1` or `4`.
	// Changing this parameter will create a new resource.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the type of data source. The options are as follows:
	// + **0**: OBS.
	// + **1**: GaussDB(DWS).
	// + **2**: DLI.
	// + **4**: MRS.
	DataType *int `pulumi:"dataType"`
	// Specifies the database name of DWS/DLI when `dataType` is `1` or `2`.
	// Changing this parameter will create a new resource.
	DatabaseName *string `pulumi:"databaseName"`
	// Specifies the password of database when `dataType` is `1`.
	// Changing this parameter will create a new resource.
	Password *string `pulumi:"password"`
	// Specifies the OBS path when `dataType` is `0`
	// or the hdsf path when `dataType` is `4`. All the file in this directory and subdirectories will be which be imported
	// to the dataset. Changing this parameter will create a new resource.
	Path *string `pulumi:"path"`
	// Specifies the queue name of DLI when `dataType` is `2`.
	// Changing this parameter will create a new resource.
	QueueName *string `pulumi:"queueName"`
	// Specifies the table name of DWS/DLI when `dataType` is `1` or `2`.
	// Changing this parameter will create a new resource.
	TableName *string `pulumi:"tableName"`
	// Specifies the user name of database when `dataType` is `1`.
	// Changing this parameter will create a new resource.
	UserName *string `pulumi:"userName"`
	// Specifies whether the data contains table header when the type
	// of dataset is `400`(Table type). Default value is `true`. Changing this parameter will create a new resource.
	WithColumnHeader *bool `pulumi:"withColumnHeader"`
}

// DatasetDataSourceInput is an input type that accepts DatasetDataSourceArgs and DatasetDataSourceOutput values.
// You can construct a concrete instance of `DatasetDataSourceInput` via:
//
//	DatasetDataSourceArgs{...}
type DatasetDataSourceInput interface {
	pulumi.Input

	ToDatasetDataSourceOutput() DatasetDataSourceOutput
	ToDatasetDataSourceOutputWithContext(context.Context) DatasetDataSourceOutput
}

type DatasetDataSourceArgs struct {
	// Specifies the cluster ID of DWS/MRS when `dataType` is `1` or `4`.
	// Changing this parameter will create a new resource.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// Specifies the type of data source. The options are as follows:
	// + **0**: OBS.
	// + **1**: GaussDB(DWS).
	// + **2**: DLI.
	// + **4**: MRS.
	DataType pulumi.IntPtrInput `pulumi:"dataType"`
	// Specifies the database name of DWS/DLI when `dataType` is `1` or `2`.
	// Changing this parameter will create a new resource.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Specifies the password of database when `dataType` is `1`.
	// Changing this parameter will create a new resource.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the OBS path when `dataType` is `0`
	// or the hdsf path when `dataType` is `4`. All the file in this directory and subdirectories will be which be imported
	// to the dataset. Changing this parameter will create a new resource.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Specifies the queue name of DLI when `dataType` is `2`.
	// Changing this parameter will create a new resource.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// Specifies the table name of DWS/DLI when `dataType` is `1` or `2`.
	// Changing this parameter will create a new resource.
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
	// Specifies the user name of database when `dataType` is `1`.
	// Changing this parameter will create a new resource.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
	// Specifies whether the data contains table header when the type
	// of dataset is `400`(Table type). Default value is `true`. Changing this parameter will create a new resource.
	WithColumnHeader pulumi.BoolPtrInput `pulumi:"withColumnHeader"`
}

func (DatasetDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataSource)(nil)).Elem()
}

func (i DatasetDataSourceArgs) ToDatasetDataSourceOutput() DatasetDataSourceOutput {
	return i.ToDatasetDataSourceOutputWithContext(context.Background())
}

func (i DatasetDataSourceArgs) ToDatasetDataSourceOutputWithContext(ctx context.Context) DatasetDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataSourceOutput)
}

func (i DatasetDataSourceArgs) ToDatasetDataSourcePtrOutput() DatasetDataSourcePtrOutput {
	return i.ToDatasetDataSourcePtrOutputWithContext(context.Background())
}

func (i DatasetDataSourceArgs) ToDatasetDataSourcePtrOutputWithContext(ctx context.Context) DatasetDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataSourceOutput).ToDatasetDataSourcePtrOutputWithContext(ctx)
}

// DatasetDataSourcePtrInput is an input type that accepts DatasetDataSourceArgs, DatasetDataSourcePtr and DatasetDataSourcePtrOutput values.
// You can construct a concrete instance of `DatasetDataSourcePtrInput` via:
//
//	        DatasetDataSourceArgs{...}
//
//	or:
//
//	        nil
type DatasetDataSourcePtrInput interface {
	pulumi.Input

	ToDatasetDataSourcePtrOutput() DatasetDataSourcePtrOutput
	ToDatasetDataSourcePtrOutputWithContext(context.Context) DatasetDataSourcePtrOutput
}

type datasetDataSourcePtrType DatasetDataSourceArgs

func DatasetDataSourcePtr(v *DatasetDataSourceArgs) DatasetDataSourcePtrInput {
	return (*datasetDataSourcePtrType)(v)
}

func (*datasetDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataSource)(nil)).Elem()
}

func (i *datasetDataSourcePtrType) ToDatasetDataSourcePtrOutput() DatasetDataSourcePtrOutput {
	return i.ToDatasetDataSourcePtrOutputWithContext(context.Background())
}

func (i *datasetDataSourcePtrType) ToDatasetDataSourcePtrOutputWithContext(ctx context.Context) DatasetDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataSourcePtrOutput)
}

type DatasetDataSourceOutput struct{ *pulumi.OutputState }

func (DatasetDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataSource)(nil)).Elem()
}

func (o DatasetDataSourceOutput) ToDatasetDataSourceOutput() DatasetDataSourceOutput {
	return o
}

func (o DatasetDataSourceOutput) ToDatasetDataSourceOutputWithContext(ctx context.Context) DatasetDataSourceOutput {
	return o
}

func (o DatasetDataSourceOutput) ToDatasetDataSourcePtrOutput() DatasetDataSourcePtrOutput {
	return o.ToDatasetDataSourcePtrOutputWithContext(context.Background())
}

func (o DatasetDataSourceOutput) ToDatasetDataSourcePtrOutputWithContext(ctx context.Context) DatasetDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDataSource) *DatasetDataSource {
		return &v
	}).(DatasetDataSourcePtrOutput)
}

// Specifies the cluster ID of DWS/MRS when `dataType` is `1` or `4`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Specifies the type of data source. The options are as follows:
// + **0**: OBS.
// + **1**: GaussDB(DWS).
// + **2**: DLI.
// + **4**: MRS.
func (o DatasetDataSourceOutput) DataType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *int { return v.DataType }).(pulumi.IntPtrOutput)
}

// Specifies the database name of DWS/DLI when `dataType` is `1` or `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Specifies the password of database when `dataType` is `1`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the OBS path when `dataType` is `0`
// or the hdsf path when `dataType` is `4`. All the file in this directory and subdirectories will be which be imported
// to the dataset. Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Specifies the queue name of DLI when `dataType` is `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// Specifies the table name of DWS/DLI when `dataType` is `1` or `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

// Specifies the user name of database when `dataType` is `1`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// Specifies whether the data contains table header when the type
// of dataset is `400`(Table type). Default value is `true`. Changing this parameter will create a new resource.
func (o DatasetDataSourceOutput) WithColumnHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetDataSource) *bool { return v.WithColumnHeader }).(pulumi.BoolPtrOutput)
}

type DatasetDataSourcePtrOutput struct{ *pulumi.OutputState }

func (DatasetDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataSource)(nil)).Elem()
}

func (o DatasetDataSourcePtrOutput) ToDatasetDataSourcePtrOutput() DatasetDataSourcePtrOutput {
	return o
}

func (o DatasetDataSourcePtrOutput) ToDatasetDataSourcePtrOutputWithContext(ctx context.Context) DatasetDataSourcePtrOutput {
	return o
}

func (o DatasetDataSourcePtrOutput) Elem() DatasetDataSourceOutput {
	return o.ApplyT(func(v *DatasetDataSource) DatasetDataSource {
		if v != nil {
			return *v
		}
		var ret DatasetDataSource
		return ret
	}).(DatasetDataSourceOutput)
}

// Specifies the cluster ID of DWS/MRS when `dataType` is `1` or `4`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of data source. The options are as follows:
// + **0**: OBS.
// + **1**: GaussDB(DWS).
// + **2**: DLI.
// + **4**: MRS.
func (o DatasetDataSourcePtrOutput) DataType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *int {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(pulumi.IntPtrOutput)
}

// Specifies the database name of DWS/DLI when `dataType` is `1` or `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Specifies the password of database when `dataType` is `1`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies the OBS path when `dataType` is `0`
// or the hdsf path when `dataType` is `4`. All the file in this directory and subdirectories will be which be imported
// to the dataset. Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Specifies the queue name of DLI when `dataType` is `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Specifies the table name of DWS/DLI when `dataType` is `1` or `2`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

// Specifies the user name of database when `dataType` is `1`.
// Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the data contains table header when the type
// of dataset is `400`(Table type). Default value is `true`. Changing this parameter will create a new resource.
func (o DatasetDataSourcePtrOutput) WithColumnHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetDataSource) *bool {
		if v == nil {
			return nil
		}
		return v.WithColumnHeader
	}).(pulumi.BoolPtrOutput)
}

type DatasetLabel struct {
	// Specifies the name of label.
	Name string `pulumi:"name"`
	// Specifies color of label.
	PropertyColor *string `pulumi:"propertyColor"`
	// Specifies shape of label. Valid values include: `bndbox`, `polygon`,
	// `circle`, `line`, `dashed`, `point`, `polyline`.
	PropertyShape *string `pulumi:"propertyShape"`
	// Specifies shortcut of label.
	PropertyShortcut *string `pulumi:"propertyShortcut"`
}

// DatasetLabelInput is an input type that accepts DatasetLabelArgs and DatasetLabelOutput values.
// You can construct a concrete instance of `DatasetLabelInput` via:
//
//	DatasetLabelArgs{...}
type DatasetLabelInput interface {
	pulumi.Input

	ToDatasetLabelOutput() DatasetLabelOutput
	ToDatasetLabelOutputWithContext(context.Context) DatasetLabelOutput
}

type DatasetLabelArgs struct {
	// Specifies the name of label.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies color of label.
	PropertyColor pulumi.StringPtrInput `pulumi:"propertyColor"`
	// Specifies shape of label. Valid values include: `bndbox`, `polygon`,
	// `circle`, `line`, `dashed`, `point`, `polyline`.
	PropertyShape pulumi.StringPtrInput `pulumi:"propertyShape"`
	// Specifies shortcut of label.
	PropertyShortcut pulumi.StringPtrInput `pulumi:"propertyShortcut"`
}

func (DatasetLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetLabel)(nil)).Elem()
}

func (i DatasetLabelArgs) ToDatasetLabelOutput() DatasetLabelOutput {
	return i.ToDatasetLabelOutputWithContext(context.Background())
}

func (i DatasetLabelArgs) ToDatasetLabelOutputWithContext(ctx context.Context) DatasetLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetLabelOutput)
}

// DatasetLabelArrayInput is an input type that accepts DatasetLabelArray and DatasetLabelArrayOutput values.
// You can construct a concrete instance of `DatasetLabelArrayInput` via:
//
//	DatasetLabelArray{ DatasetLabelArgs{...} }
type DatasetLabelArrayInput interface {
	pulumi.Input

	ToDatasetLabelArrayOutput() DatasetLabelArrayOutput
	ToDatasetLabelArrayOutputWithContext(context.Context) DatasetLabelArrayOutput
}

type DatasetLabelArray []DatasetLabelInput

func (DatasetLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetLabel)(nil)).Elem()
}

func (i DatasetLabelArray) ToDatasetLabelArrayOutput() DatasetLabelArrayOutput {
	return i.ToDatasetLabelArrayOutputWithContext(context.Background())
}

func (i DatasetLabelArray) ToDatasetLabelArrayOutputWithContext(ctx context.Context) DatasetLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetLabelArrayOutput)
}

type DatasetLabelOutput struct{ *pulumi.OutputState }

func (DatasetLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetLabel)(nil)).Elem()
}

func (o DatasetLabelOutput) ToDatasetLabelOutput() DatasetLabelOutput {
	return o
}

func (o DatasetLabelOutput) ToDatasetLabelOutputWithContext(ctx context.Context) DatasetLabelOutput {
	return o
}

// Specifies the name of label.
func (o DatasetLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetLabel) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies color of label.
func (o DatasetLabelOutput) PropertyColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabel) *string { return v.PropertyColor }).(pulumi.StringPtrOutput)
}

// Specifies shape of label. Valid values include: `bndbox`, `polygon`,
// `circle`, `line`, `dashed`, `point`, `polyline`.
func (o DatasetLabelOutput) PropertyShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabel) *string { return v.PropertyShape }).(pulumi.StringPtrOutput)
}

// Specifies shortcut of label.
func (o DatasetLabelOutput) PropertyShortcut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabel) *string { return v.PropertyShortcut }).(pulumi.StringPtrOutput)
}

type DatasetLabelArrayOutput struct{ *pulumi.OutputState }

func (DatasetLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetLabel)(nil)).Elem()
}

func (o DatasetLabelArrayOutput) ToDatasetLabelArrayOutput() DatasetLabelArrayOutput {
	return o
}

func (o DatasetLabelArrayOutput) ToDatasetLabelArrayOutputWithContext(ctx context.Context) DatasetLabelArrayOutput {
	return o
}

func (o DatasetLabelArrayOutput) Index(i pulumi.IntInput) DatasetLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetLabel {
		return vs[0].([]DatasetLabel)[vs[1].(int)]
	}).(DatasetLabelOutput)
}

type DatasetLabelFormat struct {
	// Specifies the separator between label and label.
	// Changing this parameter will create a new resource.
	LabelSeparator *string `pulumi:"labelSeparator"`
	// Specifies the separator between text and label.
	// Changing this parameter will create a new resource.
	TextLabelSeparator *string `pulumi:"textLabelSeparator"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type *string `pulumi:"type"`
}

// DatasetLabelFormatInput is an input type that accepts DatasetLabelFormatArgs and DatasetLabelFormatOutput values.
// You can construct a concrete instance of `DatasetLabelFormatInput` via:
//
//	DatasetLabelFormatArgs{...}
type DatasetLabelFormatInput interface {
	pulumi.Input

	ToDatasetLabelFormatOutput() DatasetLabelFormatOutput
	ToDatasetLabelFormatOutputWithContext(context.Context) DatasetLabelFormatOutput
}

type DatasetLabelFormatArgs struct {
	// Specifies the separator between label and label.
	// Changing this parameter will create a new resource.
	LabelSeparator pulumi.StringPtrInput `pulumi:"labelSeparator"`
	// Specifies the separator between text and label.
	// Changing this parameter will create a new resource.
	TextLabelSeparator pulumi.StringPtrInput `pulumi:"textLabelSeparator"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetLabelFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetLabelFormat)(nil)).Elem()
}

func (i DatasetLabelFormatArgs) ToDatasetLabelFormatOutput() DatasetLabelFormatOutput {
	return i.ToDatasetLabelFormatOutputWithContext(context.Background())
}

func (i DatasetLabelFormatArgs) ToDatasetLabelFormatOutputWithContext(ctx context.Context) DatasetLabelFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetLabelFormatOutput)
}

func (i DatasetLabelFormatArgs) ToDatasetLabelFormatPtrOutput() DatasetLabelFormatPtrOutput {
	return i.ToDatasetLabelFormatPtrOutputWithContext(context.Background())
}

func (i DatasetLabelFormatArgs) ToDatasetLabelFormatPtrOutputWithContext(ctx context.Context) DatasetLabelFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetLabelFormatOutput).ToDatasetLabelFormatPtrOutputWithContext(ctx)
}

// DatasetLabelFormatPtrInput is an input type that accepts DatasetLabelFormatArgs, DatasetLabelFormatPtr and DatasetLabelFormatPtrOutput values.
// You can construct a concrete instance of `DatasetLabelFormatPtrInput` via:
//
//	        DatasetLabelFormatArgs{...}
//
//	or:
//
//	        nil
type DatasetLabelFormatPtrInput interface {
	pulumi.Input

	ToDatasetLabelFormatPtrOutput() DatasetLabelFormatPtrOutput
	ToDatasetLabelFormatPtrOutputWithContext(context.Context) DatasetLabelFormatPtrOutput
}

type datasetLabelFormatPtrType DatasetLabelFormatArgs

func DatasetLabelFormatPtr(v *DatasetLabelFormatArgs) DatasetLabelFormatPtrInput {
	return (*datasetLabelFormatPtrType)(v)
}

func (*datasetLabelFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetLabelFormat)(nil)).Elem()
}

func (i *datasetLabelFormatPtrType) ToDatasetLabelFormatPtrOutput() DatasetLabelFormatPtrOutput {
	return i.ToDatasetLabelFormatPtrOutputWithContext(context.Background())
}

func (i *datasetLabelFormatPtrType) ToDatasetLabelFormatPtrOutputWithContext(ctx context.Context) DatasetLabelFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetLabelFormatPtrOutput)
}

type DatasetLabelFormatOutput struct{ *pulumi.OutputState }

func (DatasetLabelFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetLabelFormat)(nil)).Elem()
}

func (o DatasetLabelFormatOutput) ToDatasetLabelFormatOutput() DatasetLabelFormatOutput {
	return o
}

func (o DatasetLabelFormatOutput) ToDatasetLabelFormatOutputWithContext(ctx context.Context) DatasetLabelFormatOutput {
	return o
}

func (o DatasetLabelFormatOutput) ToDatasetLabelFormatPtrOutput() DatasetLabelFormatPtrOutput {
	return o.ToDatasetLabelFormatPtrOutputWithContext(context.Background())
}

func (o DatasetLabelFormatOutput) ToDatasetLabelFormatPtrOutputWithContext(ctx context.Context) DatasetLabelFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetLabelFormat) *DatasetLabelFormat {
		return &v
	}).(DatasetLabelFormatPtrOutput)
}

// Specifies the separator between label and label.
// Changing this parameter will create a new resource.
func (o DatasetLabelFormatOutput) LabelSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabelFormat) *string { return v.LabelSeparator }).(pulumi.StringPtrOutput)
}

// Specifies the separator between text and label.
// Changing this parameter will create a new resource.
func (o DatasetLabelFormatOutput) TextLabelSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabelFormat) *string { return v.TextLabelSeparator }).(pulumi.StringPtrOutput)
}

// Specifies Label type for text classification.
// The optional values are as follows:
func (o DatasetLabelFormatOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetLabelFormat) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetLabelFormatPtrOutput struct{ *pulumi.OutputState }

func (DatasetLabelFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetLabelFormat)(nil)).Elem()
}

func (o DatasetLabelFormatPtrOutput) ToDatasetLabelFormatPtrOutput() DatasetLabelFormatPtrOutput {
	return o
}

func (o DatasetLabelFormatPtrOutput) ToDatasetLabelFormatPtrOutputWithContext(ctx context.Context) DatasetLabelFormatPtrOutput {
	return o
}

func (o DatasetLabelFormatPtrOutput) Elem() DatasetLabelFormatOutput {
	return o.ApplyT(func(v *DatasetLabelFormat) DatasetLabelFormat {
		if v != nil {
			return *v
		}
		var ret DatasetLabelFormat
		return ret
	}).(DatasetLabelFormatOutput)
}

// Specifies the separator between label and label.
// Changing this parameter will create a new resource.
func (o DatasetLabelFormatPtrOutput) LabelSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetLabelFormat) *string {
		if v == nil {
			return nil
		}
		return v.LabelSeparator
	}).(pulumi.StringPtrOutput)
}

// Specifies the separator between text and label.
// Changing this parameter will create a new resource.
func (o DatasetLabelFormatPtrOutput) TextLabelSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetLabelFormat) *string {
		if v == nil {
			return nil
		}
		return v.TextLabelSeparator
	}).(pulumi.StringPtrOutput)
}

// Specifies Label type for text classification.
// The optional values are as follows:
func (o DatasetLabelFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetLabelFormat) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DatasetSchema struct {
	// Specifies the name of label.
	Name string `pulumi:"name"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type string `pulumi:"type"`
}

// DatasetSchemaInput is an input type that accepts DatasetSchemaArgs and DatasetSchemaOutput values.
// You can construct a concrete instance of `DatasetSchemaInput` via:
//
//	DatasetSchemaArgs{...}
type DatasetSchemaInput interface {
	pulumi.Input

	ToDatasetSchemaOutput() DatasetSchemaOutput
	ToDatasetSchemaOutputWithContext(context.Context) DatasetSchemaOutput
}

type DatasetSchemaArgs struct {
	// Specifies the name of label.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies Label type for text classification.
	// The optional values are as follows:
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSchema)(nil)).Elem()
}

func (i DatasetSchemaArgs) ToDatasetSchemaOutput() DatasetSchemaOutput {
	return i.ToDatasetSchemaOutputWithContext(context.Background())
}

func (i DatasetSchemaArgs) ToDatasetSchemaOutputWithContext(ctx context.Context) DatasetSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSchemaOutput)
}

// DatasetSchemaArrayInput is an input type that accepts DatasetSchemaArray and DatasetSchemaArrayOutput values.
// You can construct a concrete instance of `DatasetSchemaArrayInput` via:
//
//	DatasetSchemaArray{ DatasetSchemaArgs{...} }
type DatasetSchemaArrayInput interface {
	pulumi.Input

	ToDatasetSchemaArrayOutput() DatasetSchemaArrayOutput
	ToDatasetSchemaArrayOutputWithContext(context.Context) DatasetSchemaArrayOutput
}

type DatasetSchemaArray []DatasetSchemaInput

func (DatasetSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSchema)(nil)).Elem()
}

func (i DatasetSchemaArray) ToDatasetSchemaArrayOutput() DatasetSchemaArrayOutput {
	return i.ToDatasetSchemaArrayOutputWithContext(context.Background())
}

func (i DatasetSchemaArray) ToDatasetSchemaArrayOutputWithContext(ctx context.Context) DatasetSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSchemaArrayOutput)
}

type DatasetSchemaOutput struct{ *pulumi.OutputState }

func (DatasetSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSchema)(nil)).Elem()
}

func (o DatasetSchemaOutput) ToDatasetSchemaOutput() DatasetSchemaOutput {
	return o
}

func (o DatasetSchemaOutput) ToDatasetSchemaOutputWithContext(ctx context.Context) DatasetSchemaOutput {
	return o
}

// Specifies the name of label.
func (o DatasetSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetSchema) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies Label type for text classification.
// The optional values are as follows:
func (o DatasetSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetSchema) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetSchemaArrayOutput struct{ *pulumi.OutputState }

func (DatasetSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSchema)(nil)).Elem()
}

func (o DatasetSchemaArrayOutput) ToDatasetSchemaArrayOutput() DatasetSchemaArrayOutput {
	return o
}

func (o DatasetSchemaArrayOutput) ToDatasetSchemaArrayOutputWithContext(ctx context.Context) DatasetSchemaArrayOutput {
	return o
}

func (o DatasetSchemaArrayOutput) Index(i pulumi.IntInput) DatasetSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetSchema {
		return vs[0].([]DatasetSchema)[vs[1].(int)]
	}).(DatasetSchemaOutput)
}

type NotebookMountStorageType struct {
	// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`.
	// Changing this parameter will create a new resource.
	Id *string `pulumi:"id"`
	// The local mount path.
	MountPath *string `pulumi:"mountPath"`
	// The path of storage which be mounted.
	Path *string `pulumi:"path"`
	// The status of mount.
	Status *string `pulumi:"status"`
	// Specifies the volume type. The options are as follows:
	// - *EFS*: use Scalable File Service, default 50GB is **free**.
	// - *EVS*: use Elastic Volume Service, default size is 5 GB.
	Type *string `pulumi:"type"`
}

// NotebookMountStorageTypeInput is an input type that accepts NotebookMountStorageTypeArgs and NotebookMountStorageTypeOutput values.
// You can construct a concrete instance of `NotebookMountStorageTypeInput` via:
//
//	NotebookMountStorageTypeArgs{...}
type NotebookMountStorageTypeInput interface {
	pulumi.Input

	ToNotebookMountStorageTypeOutput() NotebookMountStorageTypeOutput
	ToNotebookMountStorageTypeOutputWithContext(context.Context) NotebookMountStorageTypeOutput
}

type NotebookMountStorageTypeArgs struct {
	// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`.
	// Changing this parameter will create a new resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The local mount path.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The path of storage which be mounted.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The status of mount.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the volume type. The options are as follows:
	// - *EFS*: use Scalable File Service, default 50GB is **free**.
	// - *EVS*: use Elastic Volume Service, default size is 5 GB.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NotebookMountStorageTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookMountStorageType)(nil)).Elem()
}

func (i NotebookMountStorageTypeArgs) ToNotebookMountStorageTypeOutput() NotebookMountStorageTypeOutput {
	return i.ToNotebookMountStorageTypeOutputWithContext(context.Background())
}

func (i NotebookMountStorageTypeArgs) ToNotebookMountStorageTypeOutputWithContext(ctx context.Context) NotebookMountStorageTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookMountStorageTypeOutput)
}

// NotebookMountStorageTypeArrayInput is an input type that accepts NotebookMountStorageTypeArray and NotebookMountStorageTypeArrayOutput values.
// You can construct a concrete instance of `NotebookMountStorageTypeArrayInput` via:
//
//	NotebookMountStorageTypeArray{ NotebookMountStorageTypeArgs{...} }
type NotebookMountStorageTypeArrayInput interface {
	pulumi.Input

	ToNotebookMountStorageTypeArrayOutput() NotebookMountStorageTypeArrayOutput
	ToNotebookMountStorageTypeArrayOutputWithContext(context.Context) NotebookMountStorageTypeArrayOutput
}

type NotebookMountStorageTypeArray []NotebookMountStorageTypeInput

func (NotebookMountStorageTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotebookMountStorageType)(nil)).Elem()
}

func (i NotebookMountStorageTypeArray) ToNotebookMountStorageTypeArrayOutput() NotebookMountStorageTypeArrayOutput {
	return i.ToNotebookMountStorageTypeArrayOutputWithContext(context.Background())
}

func (i NotebookMountStorageTypeArray) ToNotebookMountStorageTypeArrayOutputWithContext(ctx context.Context) NotebookMountStorageTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookMountStorageTypeArrayOutput)
}

type NotebookMountStorageTypeOutput struct{ *pulumi.OutputState }

func (NotebookMountStorageTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookMountStorageType)(nil)).Elem()
}

func (o NotebookMountStorageTypeOutput) ToNotebookMountStorageTypeOutput() NotebookMountStorageTypeOutput {
	return o
}

func (o NotebookMountStorageTypeOutput) ToNotebookMountStorageTypeOutputWithContext(ctx context.Context) NotebookMountStorageTypeOutput {
	return o
}

// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
// is `EFS` and the `ownership` is `DEDICATED`.
// Changing this parameter will create a new resource.
func (o NotebookMountStorageTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookMountStorageType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The local mount path.
func (o NotebookMountStorageTypeOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookMountStorageType) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The path of storage which be mounted.
func (o NotebookMountStorageTypeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookMountStorageType) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The status of mount.
func (o NotebookMountStorageTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookMountStorageType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the volume type. The options are as follows:
// - *EFS*: use Scalable File Service, default 50GB is **free**.
// - *EVS*: use Elastic Volume Service, default size is 5 GB.
func (o NotebookMountStorageTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookMountStorageType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NotebookMountStorageTypeArrayOutput struct{ *pulumi.OutputState }

func (NotebookMountStorageTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotebookMountStorageType)(nil)).Elem()
}

func (o NotebookMountStorageTypeArrayOutput) ToNotebookMountStorageTypeArrayOutput() NotebookMountStorageTypeArrayOutput {
	return o
}

func (o NotebookMountStorageTypeArrayOutput) ToNotebookMountStorageTypeArrayOutputWithContext(ctx context.Context) NotebookMountStorageTypeArrayOutput {
	return o
}

func (o NotebookMountStorageTypeArrayOutput) Index(i pulumi.IntInput) NotebookMountStorageTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotebookMountStorageType {
		return vs[0].([]NotebookMountStorageType)[vs[1].(int)]
	}).(NotebookMountStorageTypeOutput)
}

type NotebookVolume struct {
	// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`.
	// Changing this parameter will create a new resource.
	Id *string `pulumi:"id"`
	// The local mount path.
	MountPath *string `pulumi:"mountPath"`
	// Specifies the volume ownership. The options are as follows:
	// - *MANAGED*: shared storage disk of the ModelArts service.
	// - *DEDICATED*: dedicated storage disk, only supported when the category is `EFS`.
	Ownership *string `pulumi:"ownership"`
	// Specifies the volume size. Its value range is from `5` GB to `4,096` GB.
	Size *int `pulumi:"size"`
	// Specifies the volume type. The options are as follows:
	// - *EFS*: use Scalable File Service, default 50GB is **free**.
	// - *EVS*: use Elastic Volume Service, default size is 5 GB.
	Type string `pulumi:"type"`
	// Specifies the URL of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`. Example: `192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/`.
	// Changing this parameter will create a new resource.
	Uri *string `pulumi:"uri"`
}

// NotebookVolumeInput is an input type that accepts NotebookVolumeArgs and NotebookVolumeOutput values.
// You can construct a concrete instance of `NotebookVolumeInput` via:
//
//	NotebookVolumeArgs{...}
type NotebookVolumeInput interface {
	pulumi.Input

	ToNotebookVolumeOutput() NotebookVolumeOutput
	ToNotebookVolumeOutputWithContext(context.Context) NotebookVolumeOutput
}

type NotebookVolumeArgs struct {
	// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`.
	// Changing this parameter will create a new resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The local mount path.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Specifies the volume ownership. The options are as follows:
	// - *MANAGED*: shared storage disk of the ModelArts service.
	// - *DEDICATED*: dedicated storage disk, only supported when the category is `EFS`.
	Ownership pulumi.StringPtrInput `pulumi:"ownership"`
	// Specifies the volume size. Its value range is from `5` GB to `4,096` GB.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Specifies the volume type. The options are as follows:
	// - *EFS*: use Scalable File Service, default 50GB is **free**.
	// - *EVS*: use Elastic Volume Service, default size is 5 GB.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the URL of dedicated storage disk, which is mandatory when the `type`
	// is `EFS` and the `ownership` is `DEDICATED`. Example: `192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/`.
	// Changing this parameter will create a new resource.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (NotebookVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookVolume)(nil)).Elem()
}

func (i NotebookVolumeArgs) ToNotebookVolumeOutput() NotebookVolumeOutput {
	return i.ToNotebookVolumeOutputWithContext(context.Background())
}

func (i NotebookVolumeArgs) ToNotebookVolumeOutputWithContext(ctx context.Context) NotebookVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookVolumeOutput)
}

func (i NotebookVolumeArgs) ToNotebookVolumePtrOutput() NotebookVolumePtrOutput {
	return i.ToNotebookVolumePtrOutputWithContext(context.Background())
}

func (i NotebookVolumeArgs) ToNotebookVolumePtrOutputWithContext(ctx context.Context) NotebookVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookVolumeOutput).ToNotebookVolumePtrOutputWithContext(ctx)
}

// NotebookVolumePtrInput is an input type that accepts NotebookVolumeArgs, NotebookVolumePtr and NotebookVolumePtrOutput values.
// You can construct a concrete instance of `NotebookVolumePtrInput` via:
//
//	        NotebookVolumeArgs{...}
//
//	or:
//
//	        nil
type NotebookVolumePtrInput interface {
	pulumi.Input

	ToNotebookVolumePtrOutput() NotebookVolumePtrOutput
	ToNotebookVolumePtrOutputWithContext(context.Context) NotebookVolumePtrOutput
}

type notebookVolumePtrType NotebookVolumeArgs

func NotebookVolumePtr(v *NotebookVolumeArgs) NotebookVolumePtrInput {
	return (*notebookVolumePtrType)(v)
}

func (*notebookVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookVolume)(nil)).Elem()
}

func (i *notebookVolumePtrType) ToNotebookVolumePtrOutput() NotebookVolumePtrOutput {
	return i.ToNotebookVolumePtrOutputWithContext(context.Background())
}

func (i *notebookVolumePtrType) ToNotebookVolumePtrOutputWithContext(ctx context.Context) NotebookVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookVolumePtrOutput)
}

type NotebookVolumeOutput struct{ *pulumi.OutputState }

func (NotebookVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookVolume)(nil)).Elem()
}

func (o NotebookVolumeOutput) ToNotebookVolumeOutput() NotebookVolumeOutput {
	return o
}

func (o NotebookVolumeOutput) ToNotebookVolumeOutputWithContext(ctx context.Context) NotebookVolumeOutput {
	return o
}

func (o NotebookVolumeOutput) ToNotebookVolumePtrOutput() NotebookVolumePtrOutput {
	return o.ToNotebookVolumePtrOutputWithContext(context.Background())
}

func (o NotebookVolumeOutput) ToNotebookVolumePtrOutputWithContext(ctx context.Context) NotebookVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotebookVolume) *NotebookVolume {
		return &v
	}).(NotebookVolumePtrOutput)
}

// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
// is `EFS` and the `ownership` is `DEDICATED`.
// Changing this parameter will create a new resource.
func (o NotebookVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The local mount path.
func (o NotebookVolumeOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookVolume) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Specifies the volume ownership. The options are as follows:
// - *MANAGED*: shared storage disk of the ModelArts service.
// - *DEDICATED*: dedicated storage disk, only supported when the category is `EFS`.
func (o NotebookVolumeOutput) Ownership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookVolume) *string { return v.Ownership }).(pulumi.StringPtrOutput)
}

// Specifies the volume size. Its value range is from `5` GB to `4,096` GB.
func (o NotebookVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotebookVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Specifies the volume type. The options are as follows:
// - *EFS*: use Scalable File Service, default 50GB is **free**.
// - *EVS*: use Elastic Volume Service, default size is 5 GB.
func (o NotebookVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotebookVolume) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the URL of dedicated storage disk, which is mandatory when the `type`
// is `EFS` and the `ownership` is `DEDICATED`. Example: `192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/`.
// Changing this parameter will create a new resource.
func (o NotebookVolumeOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookVolume) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type NotebookVolumePtrOutput struct{ *pulumi.OutputState }

func (NotebookVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookVolume)(nil)).Elem()
}

func (o NotebookVolumePtrOutput) ToNotebookVolumePtrOutput() NotebookVolumePtrOutput {
	return o
}

func (o NotebookVolumePtrOutput) ToNotebookVolumePtrOutputWithContext(ctx context.Context) NotebookVolumePtrOutput {
	return o
}

func (o NotebookVolumePtrOutput) Elem() NotebookVolumeOutput {
	return o.ApplyT(func(v *NotebookVolume) NotebookVolume {
		if v != nil {
			return *v
		}
		var ret NotebookVolume
		return ret
	}).(NotebookVolumeOutput)
}

// Specifies the ID of dedicated storage disk, which is mandatory when the `type`
// is `EFS` and the `ownership` is `DEDICATED`.
// Changing this parameter will create a new resource.
func (o NotebookVolumePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The local mount path.
func (o NotebookVolumePtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *string {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(pulumi.StringPtrOutput)
}

// Specifies the volume ownership. The options are as follows:
// - *MANAGED*: shared storage disk of the ModelArts service.
// - *DEDICATED*: dedicated storage disk, only supported when the category is `EFS`.
func (o NotebookVolumePtrOutput) Ownership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *string {
		if v == nil {
			return nil
		}
		return v.Ownership
	}).(pulumi.StringPtrOutput)
}

// Specifies the volume size. Its value range is from `5` GB to `4,096` GB.
func (o NotebookVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. The options are as follows:
// - *EFS*: use Scalable File Service, default 50GB is **free**.
// - *EVS*: use Elastic Volume Service, default size is 5 GB.
func (o NotebookVolumePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the URL of dedicated storage disk, which is mandatory when the `type`
// is `EFS` and the `ownership` is `DEDICATED`. Example: `192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/`.
// Changing this parameter will create a new resource.
func (o NotebookVolumePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookVolume) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type GetDataset_versionsVersion struct {
	// The creation time, in UTC format.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the dataset version.
	Description string `pulumi:"description"`
	// The total number of samples.
	Files int `pulumi:"files"`
	// The ID of the dataset version.
	Id string `pulumi:"id"`
	// Whether this version is current version.
	IsCurrent bool `pulumi:"isCurrent"`
	// Specifies the name of the dataset version.
	Name string `pulumi:"name"`
	// Specifies the range of splitting ratio which randomly divides a labeled sample
	// into a training set and a validation set. Separate the minimum and maximum split ratios with commas,
	// for example: "0.0,1.0".
	SplitRatio string `pulumi:"splitRatio"`
	// Dataset version status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Normal.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	Status int `pulumi:"status"`
	// The path to save the manifest file of the version.
	StoragePath string `pulumi:"storagePath"`
	// The last update time, in UTC format.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetDataset_versionsVersionInput is an input type that accepts GetDataset_versionsVersionArgs and GetDataset_versionsVersionOutput values.
// You can construct a concrete instance of `GetDataset_versionsVersionInput` via:
//
//	GetDataset_versionsVersionArgs{...}
type GetDataset_versionsVersionInput interface {
	pulumi.Input

	ToGetDataset_versionsVersionOutput() GetDataset_versionsVersionOutput
	ToGetDataset_versionsVersionOutputWithContext(context.Context) GetDataset_versionsVersionOutput
}

type GetDataset_versionsVersionArgs struct {
	// The creation time, in UTC format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the dataset version.
	Description pulumi.StringInput `pulumi:"description"`
	// The total number of samples.
	Files pulumi.IntInput `pulumi:"files"`
	// The ID of the dataset version.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether this version is current version.
	IsCurrent pulumi.BoolInput `pulumi:"isCurrent"`
	// Specifies the name of the dataset version.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the range of splitting ratio which randomly divides a labeled sample
	// into a training set and a validation set. Separate the minimum and maximum split ratios with commas,
	// for example: "0.0,1.0".
	SplitRatio pulumi.StringInput `pulumi:"splitRatio"`
	// Dataset version status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Normal.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	Status pulumi.IntInput `pulumi:"status"`
	// The path to save the manifest file of the version.
	StoragePath pulumi.StringInput `pulumi:"storagePath"`
	// The last update time, in UTC format.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetDataset_versionsVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataset_versionsVersion)(nil)).Elem()
}

func (i GetDataset_versionsVersionArgs) ToGetDataset_versionsVersionOutput() GetDataset_versionsVersionOutput {
	return i.ToGetDataset_versionsVersionOutputWithContext(context.Background())
}

func (i GetDataset_versionsVersionArgs) ToGetDataset_versionsVersionOutputWithContext(ctx context.Context) GetDataset_versionsVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataset_versionsVersionOutput)
}

// GetDataset_versionsVersionArrayInput is an input type that accepts GetDataset_versionsVersionArray and GetDataset_versionsVersionArrayOutput values.
// You can construct a concrete instance of `GetDataset_versionsVersionArrayInput` via:
//
//	GetDataset_versionsVersionArray{ GetDataset_versionsVersionArgs{...} }
type GetDataset_versionsVersionArrayInput interface {
	pulumi.Input

	ToGetDataset_versionsVersionArrayOutput() GetDataset_versionsVersionArrayOutput
	ToGetDataset_versionsVersionArrayOutputWithContext(context.Context) GetDataset_versionsVersionArrayOutput
}

type GetDataset_versionsVersionArray []GetDataset_versionsVersionInput

func (GetDataset_versionsVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataset_versionsVersion)(nil)).Elem()
}

func (i GetDataset_versionsVersionArray) ToGetDataset_versionsVersionArrayOutput() GetDataset_versionsVersionArrayOutput {
	return i.ToGetDataset_versionsVersionArrayOutputWithContext(context.Background())
}

func (i GetDataset_versionsVersionArray) ToGetDataset_versionsVersionArrayOutputWithContext(ctx context.Context) GetDataset_versionsVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataset_versionsVersionArrayOutput)
}

type GetDataset_versionsVersionOutput struct{ *pulumi.OutputState }

func (GetDataset_versionsVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataset_versionsVersion)(nil)).Elem()
}

func (o GetDataset_versionsVersionOutput) ToGetDataset_versionsVersionOutput() GetDataset_versionsVersionOutput {
	return o
}

func (o GetDataset_versionsVersionOutput) ToGetDataset_versionsVersionOutputWithContext(ctx context.Context) GetDataset_versionsVersionOutput {
	return o
}

// The creation time, in UTC format.
func (o GetDataset_versionsVersionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the dataset version.
func (o GetDataset_versionsVersionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.Description }).(pulumi.StringOutput)
}

// The total number of samples.
func (o GetDataset_versionsVersionOutput) Files() pulumi.IntOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) int { return v.Files }).(pulumi.IntOutput)
}

// The ID of the dataset version.
func (o GetDataset_versionsVersionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.Id }).(pulumi.StringOutput)
}

// Whether this version is current version.
func (o GetDataset_versionsVersionOutput) IsCurrent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) bool { return v.IsCurrent }).(pulumi.BoolOutput)
}

// Specifies the name of the dataset version.
func (o GetDataset_versionsVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the range of splitting ratio which randomly divides a labeled sample
// into a training set and a validation set. Separate the minimum and maximum split ratios with commas,
// for example: "0.0,1.0".
func (o GetDataset_versionsVersionOutput) SplitRatio() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.SplitRatio }).(pulumi.StringOutput)
}

// Dataset version status. Valid values are as follows:
// + **0**: Creating.
// + **1**: Normal.
// + **2**: Deleting.
// + **3**: Deleted.
// + **4**: Exception.
func (o GetDataset_versionsVersionOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) int { return v.Status }).(pulumi.IntOutput)
}

// The path to save the manifest file of the version.
func (o GetDataset_versionsVersionOutput) StoragePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.StoragePath }).(pulumi.StringOutput)
}

// The last update time, in UTC format.
func (o GetDataset_versionsVersionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataset_versionsVersion) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetDataset_versionsVersionArrayOutput struct{ *pulumi.OutputState }

func (GetDataset_versionsVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataset_versionsVersion)(nil)).Elem()
}

func (o GetDataset_versionsVersionArrayOutput) ToGetDataset_versionsVersionArrayOutput() GetDataset_versionsVersionArrayOutput {
	return o
}

func (o GetDataset_versionsVersionArrayOutput) ToGetDataset_versionsVersionArrayOutputWithContext(ctx context.Context) GetDataset_versionsVersionArrayOutput {
	return o
}

func (o GetDataset_versionsVersionArrayOutput) Index(i pulumi.IntInput) GetDataset_versionsVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataset_versionsVersion {
		return vs[0].([]GetDataset_versionsVersion)[vs[1].(int)]
	}).(GetDataset_versionsVersionOutput)
}

type GetDatasetsDataset struct {
	// The dataset creation time.
	CreatedAt string `pulumi:"createdAt"`
	// The dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
	// table type dataset.).
	DataFormat string `pulumi:"dataFormat"`
	// The data sources which is used to imported the source data (such as pictures/files/audio, etc.) in
	// this directory and subdirectories to the dataset. Structure is documented below.
	DataSources []GetDatasetsDatasetDataSource `pulumi:"dataSources"`
	// The description of the dataset.
	Description string `pulumi:"description"`
	// The ID of the dataset.
	Id string `pulumi:"id"`
	// The labels information. Structure is documented below.
	Labels []GetDatasetsDatasetLabel `pulumi:"labels"`
	// Specifies the name of datasets.
	Name string `pulumi:"name"`
	// The OBS path for storing output files such as labeled files.
	OutputPath string `pulumi:"outputPath"`
	// The schema information of source data when `type` is `400`(Table Type). Structure is documented below.
	Schemas []GetDatasetsDatasetSchema `pulumi:"schemas"`
	// Dataset status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Completed.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	// + **5**: Syncing.
	// + **6**: Releasing.
	// + **7**: Version switching.
	// + **8**: Importing.
	Status int `pulumi:"status"`
	// Specifies the type of datasets. The options are:
	// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **100**: Text classification, supported formats: `.txt`, `.csv`.
	// + **200**: Sound classification, Supported formats: `.wav`.
	// + **400**: Table type, supported formats: Carbon type.
	// + **600**: Video, supported formats: `.mp4`
	// + **900**: Free format.
	Type int `pulumi:"type"`
}

// GetDatasetsDatasetInput is an input type that accepts GetDatasetsDatasetArgs and GetDatasetsDatasetOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetInput` via:
//
//	GetDatasetsDatasetArgs{...}
type GetDatasetsDatasetInput interface {
	pulumi.Input

	ToGetDatasetsDatasetOutput() GetDatasetsDatasetOutput
	ToGetDatasetsDatasetOutputWithContext(context.Context) GetDatasetsDatasetOutput
}

type GetDatasetsDatasetArgs struct {
	// The dataset creation time.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
	// table type dataset.).
	DataFormat pulumi.StringInput `pulumi:"dataFormat"`
	// The data sources which is used to imported the source data (such as pictures/files/audio, etc.) in
	// this directory and subdirectories to the dataset. Structure is documented below.
	DataSources GetDatasetsDatasetDataSourceArrayInput `pulumi:"dataSources"`
	// The description of the dataset.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the dataset.
	Id pulumi.StringInput `pulumi:"id"`
	// The labels information. Structure is documented below.
	Labels GetDatasetsDatasetLabelArrayInput `pulumi:"labels"`
	// Specifies the name of datasets.
	Name pulumi.StringInput `pulumi:"name"`
	// The OBS path for storing output files such as labeled files.
	OutputPath pulumi.StringInput `pulumi:"outputPath"`
	// The schema information of source data when `type` is `400`(Table Type). Structure is documented below.
	Schemas GetDatasetsDatasetSchemaArrayInput `pulumi:"schemas"`
	// Dataset status. Valid values are as follows:
	// + **0**: Creating.
	// + **1**: Completed.
	// + **2**: Deleting.
	// + **3**: Deleted.
	// + **4**: Exception.
	// + **5**: Syncing.
	// + **6**: Releasing.
	// + **7**: Version switching.
	// + **8**: Importing.
	Status pulumi.IntInput `pulumi:"status"`
	// Specifies the type of datasets. The options are:
	// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **100**: Text classification, supported formats: `.txt`, `.csv`.
	// + **200**: Sound classification, Supported formats: `.wav`.
	// + **400**: Table type, supported formats: Carbon type.
	// + **600**: Video, supported formats: `.mp4`
	// + **900**: Free format.
	Type pulumi.IntInput `pulumi:"type"`
}

func (GetDatasetsDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDataset)(nil)).Elem()
}

func (i GetDatasetsDatasetArgs) ToGetDatasetsDatasetOutput() GetDatasetsDatasetOutput {
	return i.ToGetDatasetsDatasetOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetArgs) ToGetDatasetsDatasetOutputWithContext(ctx context.Context) GetDatasetsDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetOutput)
}

// GetDatasetsDatasetArrayInput is an input type that accepts GetDatasetsDatasetArray and GetDatasetsDatasetArrayOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetArrayInput` via:
//
//	GetDatasetsDatasetArray{ GetDatasetsDatasetArgs{...} }
type GetDatasetsDatasetArrayInput interface {
	pulumi.Input

	ToGetDatasetsDatasetArrayOutput() GetDatasetsDatasetArrayOutput
	ToGetDatasetsDatasetArrayOutputWithContext(context.Context) GetDatasetsDatasetArrayOutput
}

type GetDatasetsDatasetArray []GetDatasetsDatasetInput

func (GetDatasetsDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDataset)(nil)).Elem()
}

func (i GetDatasetsDatasetArray) ToGetDatasetsDatasetArrayOutput() GetDatasetsDatasetArrayOutput {
	return i.ToGetDatasetsDatasetArrayOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetArray) ToGetDatasetsDatasetArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetArrayOutput)
}

type GetDatasetsDatasetOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDataset)(nil)).Elem()
}

func (o GetDatasetsDatasetOutput) ToGetDatasetsDatasetOutput() GetDatasetsDatasetOutput {
	return o
}

func (o GetDatasetsDatasetOutput) ToGetDatasetsDatasetOutputWithContext(ctx context.Context) GetDatasetsDatasetOutput {
	return o
}

// The dataset creation time.
func (o GetDatasetsDatasetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The dataset format. Valid values include: `Default`, `CarbonData`: Carbon format(Supported only for
// table type dataset.).
func (o GetDatasetsDatasetOutput) DataFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.DataFormat }).(pulumi.StringOutput)
}

// The data sources which is used to imported the source data (such as pictures/files/audio, etc.) in
// this directory and subdirectories to the dataset. Structure is documented below.
func (o GetDatasetsDatasetOutput) DataSources() GetDatasetsDatasetDataSourceArrayOutput {
	return o.ApplyT(func(v GetDatasetsDataset) []GetDatasetsDatasetDataSource { return v.DataSources }).(GetDatasetsDatasetDataSourceArrayOutput)
}

// The description of the dataset.
func (o GetDatasetsDatasetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the dataset.
func (o GetDatasetsDatasetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.Id }).(pulumi.StringOutput)
}

// The labels information. Structure is documented below.
func (o GetDatasetsDatasetOutput) Labels() GetDatasetsDatasetLabelArrayOutput {
	return o.ApplyT(func(v GetDatasetsDataset) []GetDatasetsDatasetLabel { return v.Labels }).(GetDatasetsDatasetLabelArrayOutput)
}

// Specifies the name of datasets.
func (o GetDatasetsDatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.Name }).(pulumi.StringOutput)
}

// The OBS path for storing output files such as labeled files.
func (o GetDatasetsDatasetOutput) OutputPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDataset) string { return v.OutputPath }).(pulumi.StringOutput)
}

// The schema information of source data when `type` is `400`(Table Type). Structure is documented below.
func (o GetDatasetsDatasetOutput) Schemas() GetDatasetsDatasetSchemaArrayOutput {
	return o.ApplyT(func(v GetDatasetsDataset) []GetDatasetsDatasetSchema { return v.Schemas }).(GetDatasetsDatasetSchemaArrayOutput)
}

// Dataset status. Valid values are as follows:
// + **0**: Creating.
// + **1**: Completed.
// + **2**: Deleting.
// + **3**: Deleted.
// + **4**: Exception.
// + **5**: Syncing.
// + **6**: Releasing.
// + **7**: Version switching.
// + **8**: Importing.
func (o GetDatasetsDatasetOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatasetsDataset) int { return v.Status }).(pulumi.IntOutput)
}

// Specifies the type of datasets. The options are:
// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **100**: Text classification, supported formats: `.txt`, `.csv`.
// + **200**: Sound classification, Supported formats: `.wav`.
// + **400**: Table type, supported formats: Carbon type.
// + **600**: Video, supported formats: `.mp4`
// + **900**: Free format.
func (o GetDatasetsDatasetOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatasetsDataset) int { return v.Type }).(pulumi.IntOutput)
}

type GetDatasetsDatasetArrayOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDataset)(nil)).Elem()
}

func (o GetDatasetsDatasetArrayOutput) ToGetDatasetsDatasetArrayOutput() GetDatasetsDatasetArrayOutput {
	return o
}

func (o GetDatasetsDatasetArrayOutput) ToGetDatasetsDatasetArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetArrayOutput {
	return o
}

func (o GetDatasetsDatasetArrayOutput) Index(i pulumi.IntInput) GetDatasetsDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatasetsDataset {
		return vs[0].([]GetDatasetsDataset)[vs[1].(int)]
	}).(GetDatasetsDatasetOutput)
}

type GetDatasetsDatasetDataSource struct {
	// The type of data source. Valid values are as follows:
	// + *0*: OBS.
	// + *1*: GaussDB(DWS).
	// + *2*: DLI.
	// + *4*: MRS.
	DataType int `pulumi:"dataType"`
	// The OBS path when `dataType` is `0`(OBS) or the HDFS path when `dataType` is `4`(MRS). All the file in this
	// directory and subdirectories will be which be imported to the dataset.
	Path string `pulumi:"path"`
	// Whether the data contains table header when the type of dataset is `400`(Table type).
	WithColumnHeader bool `pulumi:"withColumnHeader"`
}

// GetDatasetsDatasetDataSourceInput is an input type that accepts GetDatasetsDatasetDataSourceArgs and GetDatasetsDatasetDataSourceOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetDataSourceInput` via:
//
//	GetDatasetsDatasetDataSourceArgs{...}
type GetDatasetsDatasetDataSourceInput interface {
	pulumi.Input

	ToGetDatasetsDatasetDataSourceOutput() GetDatasetsDatasetDataSourceOutput
	ToGetDatasetsDatasetDataSourceOutputWithContext(context.Context) GetDatasetsDatasetDataSourceOutput
}

type GetDatasetsDatasetDataSourceArgs struct {
	// The type of data source. Valid values are as follows:
	// + *0*: OBS.
	// + *1*: GaussDB(DWS).
	// + *2*: DLI.
	// + *4*: MRS.
	DataType pulumi.IntInput `pulumi:"dataType"`
	// The OBS path when `dataType` is `0`(OBS) or the HDFS path when `dataType` is `4`(MRS). All the file in this
	// directory and subdirectories will be which be imported to the dataset.
	Path pulumi.StringInput `pulumi:"path"`
	// Whether the data contains table header when the type of dataset is `400`(Table type).
	WithColumnHeader pulumi.BoolInput `pulumi:"withColumnHeader"`
}

func (GetDatasetsDatasetDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetDataSource)(nil)).Elem()
}

func (i GetDatasetsDatasetDataSourceArgs) ToGetDatasetsDatasetDataSourceOutput() GetDatasetsDatasetDataSourceOutput {
	return i.ToGetDatasetsDatasetDataSourceOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetDataSourceArgs) ToGetDatasetsDatasetDataSourceOutputWithContext(ctx context.Context) GetDatasetsDatasetDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetDataSourceOutput)
}

// GetDatasetsDatasetDataSourceArrayInput is an input type that accepts GetDatasetsDatasetDataSourceArray and GetDatasetsDatasetDataSourceArrayOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetDataSourceArrayInput` via:
//
//	GetDatasetsDatasetDataSourceArray{ GetDatasetsDatasetDataSourceArgs{...} }
type GetDatasetsDatasetDataSourceArrayInput interface {
	pulumi.Input

	ToGetDatasetsDatasetDataSourceArrayOutput() GetDatasetsDatasetDataSourceArrayOutput
	ToGetDatasetsDatasetDataSourceArrayOutputWithContext(context.Context) GetDatasetsDatasetDataSourceArrayOutput
}

type GetDatasetsDatasetDataSourceArray []GetDatasetsDatasetDataSourceInput

func (GetDatasetsDatasetDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetDataSource)(nil)).Elem()
}

func (i GetDatasetsDatasetDataSourceArray) ToGetDatasetsDatasetDataSourceArrayOutput() GetDatasetsDatasetDataSourceArrayOutput {
	return i.ToGetDatasetsDatasetDataSourceArrayOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetDataSourceArray) ToGetDatasetsDatasetDataSourceArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetDataSourceArrayOutput)
}

type GetDatasetsDatasetDataSourceOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetDataSource)(nil)).Elem()
}

func (o GetDatasetsDatasetDataSourceOutput) ToGetDatasetsDatasetDataSourceOutput() GetDatasetsDatasetDataSourceOutput {
	return o
}

func (o GetDatasetsDatasetDataSourceOutput) ToGetDatasetsDatasetDataSourceOutputWithContext(ctx context.Context) GetDatasetsDatasetDataSourceOutput {
	return o
}

// The type of data source. Valid values are as follows:
// + *0*: OBS.
// + *1*: GaussDB(DWS).
// + *2*: DLI.
// + *4*: MRS.
func (o GetDatasetsDatasetDataSourceOutput) DataType() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatasetsDatasetDataSource) int { return v.DataType }).(pulumi.IntOutput)
}

// The OBS path when `dataType` is `0`(OBS) or the HDFS path when `dataType` is `4`(MRS). All the file in this
// directory and subdirectories will be which be imported to the dataset.
func (o GetDatasetsDatasetDataSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetDataSource) string { return v.Path }).(pulumi.StringOutput)
}

// Whether the data contains table header when the type of dataset is `400`(Table type).
func (o GetDatasetsDatasetDataSourceOutput) WithColumnHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatasetsDatasetDataSource) bool { return v.WithColumnHeader }).(pulumi.BoolOutput)
}

type GetDatasetsDatasetDataSourceArrayOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetDataSource)(nil)).Elem()
}

func (o GetDatasetsDatasetDataSourceArrayOutput) ToGetDatasetsDatasetDataSourceArrayOutput() GetDatasetsDatasetDataSourceArrayOutput {
	return o
}

func (o GetDatasetsDatasetDataSourceArrayOutput) ToGetDatasetsDatasetDataSourceArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetDataSourceArrayOutput {
	return o
}

func (o GetDatasetsDatasetDataSourceArrayOutput) Index(i pulumi.IntInput) GetDatasetsDatasetDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatasetsDatasetDataSource {
		return vs[0].([]GetDatasetsDatasetDataSource)[vs[1].(int)]
	}).(GetDatasetsDatasetDataSourceOutput)
}

type GetDatasetsDatasetLabel struct {
	// Specifies the name of datasets.
	Name string `pulumi:"name"`
	// The color of label.
	PropertyColor string `pulumi:"propertyColor"`
	// The shape of label. Valid values include: `bndbox`, `polygon`, `circle`, `line`, `dashed`,
	// `point`, `polyline`.
	PropertyShape string `pulumi:"propertyShape"`
	// The shortcut of label.
	PropertyShortcut string `pulumi:"propertyShortcut"`
}

// GetDatasetsDatasetLabelInput is an input type that accepts GetDatasetsDatasetLabelArgs and GetDatasetsDatasetLabelOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetLabelInput` via:
//
//	GetDatasetsDatasetLabelArgs{...}
type GetDatasetsDatasetLabelInput interface {
	pulumi.Input

	ToGetDatasetsDatasetLabelOutput() GetDatasetsDatasetLabelOutput
	ToGetDatasetsDatasetLabelOutputWithContext(context.Context) GetDatasetsDatasetLabelOutput
}

type GetDatasetsDatasetLabelArgs struct {
	// Specifies the name of datasets.
	Name pulumi.StringInput `pulumi:"name"`
	// The color of label.
	PropertyColor pulumi.StringInput `pulumi:"propertyColor"`
	// The shape of label. Valid values include: `bndbox`, `polygon`, `circle`, `line`, `dashed`,
	// `point`, `polyline`.
	PropertyShape pulumi.StringInput `pulumi:"propertyShape"`
	// The shortcut of label.
	PropertyShortcut pulumi.StringInput `pulumi:"propertyShortcut"`
}

func (GetDatasetsDatasetLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetLabel)(nil)).Elem()
}

func (i GetDatasetsDatasetLabelArgs) ToGetDatasetsDatasetLabelOutput() GetDatasetsDatasetLabelOutput {
	return i.ToGetDatasetsDatasetLabelOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetLabelArgs) ToGetDatasetsDatasetLabelOutputWithContext(ctx context.Context) GetDatasetsDatasetLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetLabelOutput)
}

// GetDatasetsDatasetLabelArrayInput is an input type that accepts GetDatasetsDatasetLabelArray and GetDatasetsDatasetLabelArrayOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetLabelArrayInput` via:
//
//	GetDatasetsDatasetLabelArray{ GetDatasetsDatasetLabelArgs{...} }
type GetDatasetsDatasetLabelArrayInput interface {
	pulumi.Input

	ToGetDatasetsDatasetLabelArrayOutput() GetDatasetsDatasetLabelArrayOutput
	ToGetDatasetsDatasetLabelArrayOutputWithContext(context.Context) GetDatasetsDatasetLabelArrayOutput
}

type GetDatasetsDatasetLabelArray []GetDatasetsDatasetLabelInput

func (GetDatasetsDatasetLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetLabel)(nil)).Elem()
}

func (i GetDatasetsDatasetLabelArray) ToGetDatasetsDatasetLabelArrayOutput() GetDatasetsDatasetLabelArrayOutput {
	return i.ToGetDatasetsDatasetLabelArrayOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetLabelArray) ToGetDatasetsDatasetLabelArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetLabelArrayOutput)
}

type GetDatasetsDatasetLabelOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetLabel)(nil)).Elem()
}

func (o GetDatasetsDatasetLabelOutput) ToGetDatasetsDatasetLabelOutput() GetDatasetsDatasetLabelOutput {
	return o
}

func (o GetDatasetsDatasetLabelOutput) ToGetDatasetsDatasetLabelOutputWithContext(ctx context.Context) GetDatasetsDatasetLabelOutput {
	return o
}

// Specifies the name of datasets.
func (o GetDatasetsDatasetLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The color of label.
func (o GetDatasetsDatasetLabelOutput) PropertyColor() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetLabel) string { return v.PropertyColor }).(pulumi.StringOutput)
}

// The shape of label. Valid values include: `bndbox`, `polygon`, `circle`, `line`, `dashed`,
// `point`, `polyline`.
func (o GetDatasetsDatasetLabelOutput) PropertyShape() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetLabel) string { return v.PropertyShape }).(pulumi.StringOutput)
}

// The shortcut of label.
func (o GetDatasetsDatasetLabelOutput) PropertyShortcut() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetLabel) string { return v.PropertyShortcut }).(pulumi.StringOutput)
}

type GetDatasetsDatasetLabelArrayOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetLabel)(nil)).Elem()
}

func (o GetDatasetsDatasetLabelArrayOutput) ToGetDatasetsDatasetLabelArrayOutput() GetDatasetsDatasetLabelArrayOutput {
	return o
}

func (o GetDatasetsDatasetLabelArrayOutput) ToGetDatasetsDatasetLabelArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetLabelArrayOutput {
	return o
}

func (o GetDatasetsDatasetLabelArrayOutput) Index(i pulumi.IntInput) GetDatasetsDatasetLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatasetsDatasetLabel {
		return vs[0].([]GetDatasetsDatasetLabel)[vs[1].(int)]
	}).(GetDatasetsDatasetLabelOutput)
}

type GetDatasetsDatasetSchema struct {
	// Specifies the name of datasets.
	Name string `pulumi:"name"`
	// Specifies the type of datasets. The options are:
	// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **100**: Text classification, supported formats: `.txt`, `.csv`.
	// + **200**: Sound classification, Supported formats: `.wav`.
	// + **400**: Table type, supported formats: Carbon type.
	// + **600**: Video, supported formats: `.mp4`
	// + **900**: Free format.
	Type string `pulumi:"type"`
}

// GetDatasetsDatasetSchemaInput is an input type that accepts GetDatasetsDatasetSchemaArgs and GetDatasetsDatasetSchemaOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetSchemaInput` via:
//
//	GetDatasetsDatasetSchemaArgs{...}
type GetDatasetsDatasetSchemaInput interface {
	pulumi.Input

	ToGetDatasetsDatasetSchemaOutput() GetDatasetsDatasetSchemaOutput
	ToGetDatasetsDatasetSchemaOutputWithContext(context.Context) GetDatasetsDatasetSchemaOutput
}

type GetDatasetsDatasetSchemaArgs struct {
	// Specifies the name of datasets.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the type of datasets. The options are:
	// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
	// + **100**: Text classification, supported formats: `.txt`, `.csv`.
	// + **200**: Sound classification, Supported formats: `.wav`.
	// + **400**: Table type, supported formats: Carbon type.
	// + **600**: Video, supported formats: `.mp4`
	// + **900**: Free format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDatasetsDatasetSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetSchema)(nil)).Elem()
}

func (i GetDatasetsDatasetSchemaArgs) ToGetDatasetsDatasetSchemaOutput() GetDatasetsDatasetSchemaOutput {
	return i.ToGetDatasetsDatasetSchemaOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetSchemaArgs) ToGetDatasetsDatasetSchemaOutputWithContext(ctx context.Context) GetDatasetsDatasetSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetSchemaOutput)
}

// GetDatasetsDatasetSchemaArrayInput is an input type that accepts GetDatasetsDatasetSchemaArray and GetDatasetsDatasetSchemaArrayOutput values.
// You can construct a concrete instance of `GetDatasetsDatasetSchemaArrayInput` via:
//
//	GetDatasetsDatasetSchemaArray{ GetDatasetsDatasetSchemaArgs{...} }
type GetDatasetsDatasetSchemaArrayInput interface {
	pulumi.Input

	ToGetDatasetsDatasetSchemaArrayOutput() GetDatasetsDatasetSchemaArrayOutput
	ToGetDatasetsDatasetSchemaArrayOutputWithContext(context.Context) GetDatasetsDatasetSchemaArrayOutput
}

type GetDatasetsDatasetSchemaArray []GetDatasetsDatasetSchemaInput

func (GetDatasetsDatasetSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetSchema)(nil)).Elem()
}

func (i GetDatasetsDatasetSchemaArray) ToGetDatasetsDatasetSchemaArrayOutput() GetDatasetsDatasetSchemaArrayOutput {
	return i.ToGetDatasetsDatasetSchemaArrayOutputWithContext(context.Background())
}

func (i GetDatasetsDatasetSchemaArray) ToGetDatasetsDatasetSchemaArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDatasetSchemaArrayOutput)
}

type GetDatasetsDatasetSchemaOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDatasetSchema)(nil)).Elem()
}

func (o GetDatasetsDatasetSchemaOutput) ToGetDatasetsDatasetSchemaOutput() GetDatasetsDatasetSchemaOutput {
	return o
}

func (o GetDatasetsDatasetSchemaOutput) ToGetDatasetsDatasetSchemaOutputWithContext(ctx context.Context) GetDatasetsDatasetSchemaOutput {
	return o
}

// Specifies the name of datasets.
func (o GetDatasetsDatasetSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetSchema) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the type of datasets. The options are:
// + **0**: Image classification, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **1**: Object detection, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **3**: Image segmentation, supported formats: `.jpg`, `.png`, `.jpeg`, `.bmp`.
// + **100**: Text classification, supported formats: `.txt`, `.csv`.
// + **200**: Sound classification, Supported formats: `.wav`.
// + **400**: Table type, supported formats: Carbon type.
// + **600**: Video, supported formats: `.mp4`
// + **900**: Free format.
func (o GetDatasetsDatasetSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDatasetSchema) string { return v.Type }).(pulumi.StringOutput)
}

type GetDatasetsDatasetSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetDatasetsDatasetSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatasetsDatasetSchema)(nil)).Elem()
}

func (o GetDatasetsDatasetSchemaArrayOutput) ToGetDatasetsDatasetSchemaArrayOutput() GetDatasetsDatasetSchemaArrayOutput {
	return o
}

func (o GetDatasetsDatasetSchemaArrayOutput) ToGetDatasetsDatasetSchemaArrayOutputWithContext(ctx context.Context) GetDatasetsDatasetSchemaArrayOutput {
	return o
}

func (o GetDatasetsDatasetSchemaArrayOutput) Index(i pulumi.IntInput) GetDatasetsDatasetSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatasetsDatasetSchema {
		return vs[0].([]GetDatasetsDatasetSchema)[vs[1].(int)]
	}).(GetDatasetsDatasetSchemaOutput)
}

type GetNotebookImagesImage struct {
	// Specifies the CPU architecture of image. The value can be **x86_64** and **aarch64**.
	CpuArch string `pulumi:"cpuArch"`
	// The description of the image.
	Description string `pulumi:"description"`
	// The ID of the image.
	Id string `pulumi:"id"`
	// Specifies the name of image.
	Name string `pulumi:"name"`
	// The path the image in HuaweiCloud SWR service (SoftWare Repository for Container).
	SwrPath string `pulumi:"swrPath"`
	// Specifies the type of image. The options are:
	// + `BUILD_IN`: The system built-in image.
	// + `DEDICATED`: User-saved images.
	Type string `pulumi:"type"`
}

// GetNotebookImagesImageInput is an input type that accepts GetNotebookImagesImageArgs and GetNotebookImagesImageOutput values.
// You can construct a concrete instance of `GetNotebookImagesImageInput` via:
//
//	GetNotebookImagesImageArgs{...}
type GetNotebookImagesImageInput interface {
	pulumi.Input

	ToGetNotebookImagesImageOutput() GetNotebookImagesImageOutput
	ToGetNotebookImagesImageOutputWithContext(context.Context) GetNotebookImagesImageOutput
}

type GetNotebookImagesImageArgs struct {
	// Specifies the CPU architecture of image. The value can be **x86_64** and **aarch64**.
	CpuArch pulumi.StringInput `pulumi:"cpuArch"`
	// The description of the image.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the image.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of image.
	Name pulumi.StringInput `pulumi:"name"`
	// The path the image in HuaweiCloud SWR service (SoftWare Repository for Container).
	SwrPath pulumi.StringInput `pulumi:"swrPath"`
	// Specifies the type of image. The options are:
	// + `BUILD_IN`: The system built-in image.
	// + `DEDICATED`: User-saved images.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetNotebookImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotebookImagesImage)(nil)).Elem()
}

func (i GetNotebookImagesImageArgs) ToGetNotebookImagesImageOutput() GetNotebookImagesImageOutput {
	return i.ToGetNotebookImagesImageOutputWithContext(context.Background())
}

func (i GetNotebookImagesImageArgs) ToGetNotebookImagesImageOutputWithContext(ctx context.Context) GetNotebookImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNotebookImagesImageOutput)
}

// GetNotebookImagesImageArrayInput is an input type that accepts GetNotebookImagesImageArray and GetNotebookImagesImageArrayOutput values.
// You can construct a concrete instance of `GetNotebookImagesImageArrayInput` via:
//
//	GetNotebookImagesImageArray{ GetNotebookImagesImageArgs{...} }
type GetNotebookImagesImageArrayInput interface {
	pulumi.Input

	ToGetNotebookImagesImageArrayOutput() GetNotebookImagesImageArrayOutput
	ToGetNotebookImagesImageArrayOutputWithContext(context.Context) GetNotebookImagesImageArrayOutput
}

type GetNotebookImagesImageArray []GetNotebookImagesImageInput

func (GetNotebookImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNotebookImagesImage)(nil)).Elem()
}

func (i GetNotebookImagesImageArray) ToGetNotebookImagesImageArrayOutput() GetNotebookImagesImageArrayOutput {
	return i.ToGetNotebookImagesImageArrayOutputWithContext(context.Background())
}

func (i GetNotebookImagesImageArray) ToGetNotebookImagesImageArrayOutputWithContext(ctx context.Context) GetNotebookImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNotebookImagesImageArrayOutput)
}

type GetNotebookImagesImageOutput struct{ *pulumi.OutputState }

func (GetNotebookImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotebookImagesImage)(nil)).Elem()
}

func (o GetNotebookImagesImageOutput) ToGetNotebookImagesImageOutput() GetNotebookImagesImageOutput {
	return o
}

func (o GetNotebookImagesImageOutput) ToGetNotebookImagesImageOutputWithContext(ctx context.Context) GetNotebookImagesImageOutput {
	return o
}

// Specifies the CPU architecture of image. The value can be **x86_64** and **aarch64**.
func (o GetNotebookImagesImageOutput) CpuArch() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.CpuArch }).(pulumi.StringOutput)
}

// The description of the image.
func (o GetNotebookImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the image.
func (o GetNotebookImagesImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of image.
func (o GetNotebookImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

// The path the image in HuaweiCloud SWR service (SoftWare Repository for Container).
func (o GetNotebookImagesImageOutput) SwrPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.SwrPath }).(pulumi.StringOutput)
}

// Specifies the type of image. The options are:
// + `BUILD_IN`: The system built-in image.
// + `DEDICATED`: User-saved images.
func (o GetNotebookImagesImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookImagesImage) string { return v.Type }).(pulumi.StringOutput)
}

type GetNotebookImagesImageArrayOutput struct{ *pulumi.OutputState }

func (GetNotebookImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNotebookImagesImage)(nil)).Elem()
}

func (o GetNotebookImagesImageArrayOutput) ToGetNotebookImagesImageArrayOutput() GetNotebookImagesImageArrayOutput {
	return o
}

func (o GetNotebookImagesImageArrayOutput) ToGetNotebookImagesImageArrayOutputWithContext(ctx context.Context) GetNotebookImagesImageArrayOutput {
	return o
}

func (o GetNotebookImagesImageArrayOutput) Index(i pulumi.IntInput) GetNotebookImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNotebookImagesImage {
		return vs[0].([]GetNotebookImagesImage)[vs[1].(int)]
	}).(GetNotebookImagesImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDataSourceInput)(nil)).Elem(), DatasetDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDataSourcePtrInput)(nil)).Elem(), DatasetDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetLabelInput)(nil)).Elem(), DatasetLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetLabelArrayInput)(nil)).Elem(), DatasetLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetLabelFormatInput)(nil)).Elem(), DatasetLabelFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetLabelFormatPtrInput)(nil)).Elem(), DatasetLabelFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetSchemaInput)(nil)).Elem(), DatasetSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetSchemaArrayInput)(nil)).Elem(), DatasetSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookMountStorageTypeInput)(nil)).Elem(), NotebookMountStorageTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookMountStorageTypeArrayInput)(nil)).Elem(), NotebookMountStorageTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookVolumeInput)(nil)).Elem(), NotebookVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookVolumePtrInput)(nil)).Elem(), NotebookVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataset_versionsVersionInput)(nil)).Elem(), GetDataset_versionsVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataset_versionsVersionArrayInput)(nil)).Elem(), GetDataset_versionsVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetInput)(nil)).Elem(), GetDatasetsDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetArrayInput)(nil)).Elem(), GetDatasetsDatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetDataSourceInput)(nil)).Elem(), GetDatasetsDatasetDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetDataSourceArrayInput)(nil)).Elem(), GetDatasetsDatasetDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetLabelInput)(nil)).Elem(), GetDatasetsDatasetLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetLabelArrayInput)(nil)).Elem(), GetDatasetsDatasetLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetSchemaInput)(nil)).Elem(), GetDatasetsDatasetSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDatasetSchemaArrayInput)(nil)).Elem(), GetDatasetsDatasetSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNotebookImagesImageInput)(nil)).Elem(), GetNotebookImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNotebookImagesImageArrayInput)(nil)).Elem(), GetNotebookImagesImageArray{})
	pulumi.RegisterOutputType(DatasetDataSourceOutput{})
	pulumi.RegisterOutputType(DatasetDataSourcePtrOutput{})
	pulumi.RegisterOutputType(DatasetLabelOutput{})
	pulumi.RegisterOutputType(DatasetLabelArrayOutput{})
	pulumi.RegisterOutputType(DatasetLabelFormatOutput{})
	pulumi.RegisterOutputType(DatasetLabelFormatPtrOutput{})
	pulumi.RegisterOutputType(DatasetSchemaOutput{})
	pulumi.RegisterOutputType(DatasetSchemaArrayOutput{})
	pulumi.RegisterOutputType(NotebookMountStorageTypeOutput{})
	pulumi.RegisterOutputType(NotebookMountStorageTypeArrayOutput{})
	pulumi.RegisterOutputType(NotebookVolumeOutput{})
	pulumi.RegisterOutputType(NotebookVolumePtrOutput{})
	pulumi.RegisterOutputType(GetDataset_versionsVersionOutput{})
	pulumi.RegisterOutputType(GetDataset_versionsVersionArrayOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetArrayOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetDataSourceOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetDataSourceArrayOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetLabelOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetLabelArrayOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetSchemaOutput{})
	pulumi.RegisterOutputType(GetDatasetsDatasetSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetNotebookImagesImageOutput{})
	pulumi.RegisterOutputType(GetNotebookImagesImageArrayOutput{})
}

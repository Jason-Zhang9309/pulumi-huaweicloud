// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoTDA device within HuaweiCloud.
//
// ## Example Usage
// ### Create a directly connected device and an indirectly connected device
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			spaceId := cfg.RequireObject("spaceId")
//			productId := cfg.RequireObject("productId")
//			secret := cfg.RequireObject("secret")
//			device, err := IoTDA.NewDevice(ctx, "device", &IoTDA.DeviceArgs{
//				NodeId:    pulumi.String("device_SN_1"),
//				SpaceId:   pulumi.Any(spaceId),
//				ProductId: pulumi.Any(productId),
//				Secret:    pulumi.Any(secret),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = IoTDA.NewDevice(ctx, "subDevice", &IoTDA.DeviceArgs{
//				NodeId:    pulumi.String("device_SN_2"),
//				SpaceId:   pulumi.Any(spaceId),
//				ProductId: pulumi.Any(productId),
//				GatewayId: device.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Devices can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:IoTDA/device:Device test 10022532f4f94f26b01daa1e424853e1
//
// ```
type Device struct {
	pulumi.CustomResourceState

	// The authentication type of device. The options are as follows:
	// + **SECRET**: Use a secret for identity authentication.
	// + **CERTIFICATES**: Use an x.509 certificate for identity authentication.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Specifies the description of device. The description contains a maximum of 2048
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the device ID, which contains 4 to 256 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
	// a device ID. Changing this parameter will create a new resource.
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Specifies a fingerprint of X.509 certificate for identity authentication,
	// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
	// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Specifies whether to freeze the device. Defaults to `false`.
	Frozen pulumi.BoolOutput `pulumi:"frozen"`
	// Specifies the gateway ID which is the device ID of the parent device.
	// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
	// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// Specifies the device name, which contains 4 to 256 characters. Only letters,
	// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the node ID, which contains 4 to 256 characters.
	// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// The node type of device. The options are as follows:
	// + **GATEWAY**: Directly connected device.
	// + **ENDPOINT**: Indirectly connected device.
	// + **UNKNOWN**: Unknown type.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Specifies the product ID which the device belongs to.
	// Changing this parameter will create a new resource.
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Specifies the region in which to create the IoTDA device resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies a secret for identity authentication, which contains 8 to 32 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// Specifies the resource space ID which the device belongs to.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The status of device. The valid values are **INACTIVE**, **ONLINE**, **OFFLINE**, **FROZEN**, **ABNORMAL**.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the device.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeId == nil {
		return nil, errors.New("invalid value for required argument 'NodeId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.SpaceId == nil {
		return nil, errors.New("invalid value for required argument 'SpaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("huaweicloud:IoTDA/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("huaweicloud:IoTDA/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// The authentication type of device. The options are as follows:
	// + **SECRET**: Use a secret for identity authentication.
	// + **CERTIFICATES**: Use an x.509 certificate for identity authentication.
	AuthType *string `pulumi:"authType"`
	// Specifies the description of device. The description contains a maximum of 2048
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the device ID, which contains 4 to 256 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
	// a device ID. Changing this parameter will create a new resource.
	DeviceId *string `pulumi:"deviceId"`
	// Specifies a fingerprint of X.509 certificate for identity authentication,
	// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
	// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
	Fingerprint *string `pulumi:"fingerprint"`
	// Specifies whether to freeze the device. Defaults to `false`.
	Frozen *bool `pulumi:"frozen"`
	// Specifies the gateway ID which is the device ID of the parent device.
	// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
	// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
	GatewayId *string `pulumi:"gatewayId"`
	// Specifies the device name, which contains 4 to 256 characters. Only letters,
	// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
	Name *string `pulumi:"name"`
	// Specifies the node ID, which contains 4 to 256 characters.
	// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
	NodeId *string `pulumi:"nodeId"`
	// The node type of device. The options are as follows:
	// + **GATEWAY**: Directly connected device.
	// + **ENDPOINT**: Indirectly connected device.
	// + **UNKNOWN**: Unknown type.
	NodeType *string `pulumi:"nodeType"`
	// Specifies the product ID which the device belongs to.
	// Changing this parameter will create a new resource.
	ProductId *string `pulumi:"productId"`
	// Specifies the region in which to create the IoTDA device resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies a secret for identity authentication, which contains 8 to 32 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed.
	Secret *string `pulumi:"secret"`
	// Specifies the resource space ID which the device belongs to.
	// Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
	// The status of device. The valid values are **INACTIVE**, **ONLINE**, **OFFLINE**, **FROZEN**, **ABNORMAL**.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the device.
	Tags map[string]string `pulumi:"tags"`
}

type DeviceState struct {
	// The authentication type of device. The options are as follows:
	// + **SECRET**: Use a secret for identity authentication.
	// + **CERTIFICATES**: Use an x.509 certificate for identity authentication.
	AuthType pulumi.StringPtrInput
	// Specifies the description of device. The description contains a maximum of 2048
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the device ID, which contains 4 to 256 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
	// a device ID. Changing this parameter will create a new resource.
	DeviceId pulumi.StringPtrInput
	// Specifies a fingerprint of X.509 certificate for identity authentication,
	// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
	// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
	Fingerprint pulumi.StringPtrInput
	// Specifies whether to freeze the device. Defaults to `false`.
	Frozen pulumi.BoolPtrInput
	// Specifies the gateway ID which is the device ID of the parent device.
	// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
	// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
	GatewayId pulumi.StringPtrInput
	// Specifies the device name, which contains 4 to 256 characters. Only letters,
	// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
	Name pulumi.StringPtrInput
	// Specifies the node ID, which contains 4 to 256 characters.
	// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
	NodeId pulumi.StringPtrInput
	// The node type of device. The options are as follows:
	// + **GATEWAY**: Directly connected device.
	// + **ENDPOINT**: Indirectly connected device.
	// + **UNKNOWN**: Unknown type.
	NodeType pulumi.StringPtrInput
	// Specifies the product ID which the device belongs to.
	// Changing this parameter will create a new resource.
	ProductId pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA device resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies a secret for identity authentication, which contains 8 to 32 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed.
	Secret pulumi.StringPtrInput
	// Specifies the resource space ID which the device belongs to.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
	// The status of device. The valid values are **INACTIVE**, **ONLINE**, **OFFLINE**, **FROZEN**, **ABNORMAL**.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the device.
	Tags pulumi.StringMapInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// Specifies the description of device. The description contains a maximum of 2048
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the device ID, which contains 4 to 256 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
	// a device ID. Changing this parameter will create a new resource.
	DeviceId *string `pulumi:"deviceId"`
	// Specifies a fingerprint of X.509 certificate for identity authentication,
	// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
	// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
	Fingerprint *string `pulumi:"fingerprint"`
	// Specifies whether to freeze the device. Defaults to `false`.
	Frozen *bool `pulumi:"frozen"`
	// Specifies the gateway ID which is the device ID of the parent device.
	// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
	// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
	GatewayId *string `pulumi:"gatewayId"`
	// Specifies the device name, which contains 4 to 256 characters. Only letters,
	// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
	Name *string `pulumi:"name"`
	// Specifies the node ID, which contains 4 to 256 characters.
	// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
	NodeId string `pulumi:"nodeId"`
	// Specifies the product ID which the device belongs to.
	// Changing this parameter will create a new resource.
	ProductId string `pulumi:"productId"`
	// Specifies the region in which to create the IoTDA device resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies a secret for identity authentication, which contains 8 to 32 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed.
	Secret *string `pulumi:"secret"`
	// Specifies the resource space ID which the device belongs to.
	// Changing this parameter will create a new resource.
	SpaceId string `pulumi:"spaceId"`
	// Specifies the key/value pairs to associate with the device.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// Specifies the description of device. The description contains a maximum of 2048
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the device ID, which contains 4 to 256 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
	// a device ID. Changing this parameter will create a new resource.
	DeviceId pulumi.StringPtrInput
	// Specifies a fingerprint of X.509 certificate for identity authentication,
	// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
	// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
	Fingerprint pulumi.StringPtrInput
	// Specifies whether to freeze the device. Defaults to `false`.
	Frozen pulumi.BoolPtrInput
	// Specifies the gateway ID which is the device ID of the parent device.
	// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
	// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
	GatewayId pulumi.StringPtrInput
	// Specifies the device name, which contains 4 to 256 characters. Only letters,
	// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
	Name pulumi.StringPtrInput
	// Specifies the node ID, which contains 4 to 256 characters.
	// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
	NodeId pulumi.StringInput
	// Specifies the product ID which the device belongs to.
	// Changing this parameter will create a new resource.
	ProductId pulumi.StringInput
	// Specifies the region in which to create the IoTDA device resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies a secret for identity authentication, which contains 8 to 32 characters.
	// Only letters, digits, hyphens (-) and underscore (_) are allowed.
	Secret pulumi.StringPtrInput
	// Specifies the resource space ID which the device belongs to.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringInput
	// Specifies the key/value pairs to associate with the device.
	Tags pulumi.StringMapInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

// The authentication type of device. The options are as follows:
// + **SECRET**: Use a secret for identity authentication.
// + **CERTIFICATES**: Use an x.509 certificate for identity authentication.
func (o DeviceOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Specifies the description of device. The description contains a maximum of 2048
// characters. Only letters, Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters
// are allowed: `?'#().,&%@!`.
func (o DeviceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the device ID, which contains 4 to 256 characters.
// Only letters, digits, hyphens (-) and underscore (_) are allowed. If omitted, the platform will automatically allocate
// a device ID. Changing this parameter will create a new resource.
func (o DeviceOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// Specifies a fingerprint of X.509 certificate for identity authentication,
// which is a 40-digit or 64-digit hexadecimal string. For more detail, please see
// [Registering a Device Authenticated by an X.509 Certificate](https://support.huaweicloud.com/en-us/usermanual-iothub/iot_01_0055.html).
func (o DeviceOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Specifies whether to freeze the device. Defaults to `false`.
func (o DeviceOutput) Frozen() pulumi.BoolOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolOutput { return v.Frozen }).(pulumi.BoolOutput)
}

// Specifies the gateway ID which is the device ID of the parent device.
// The child device is not directly connected to the platform. If omitted, it means to create a device directly connected
// to the platform, the `deviceId` of the device is the same as the `gatewayId`.
func (o DeviceOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// Specifies the device name, which contains 4 to 256 characters. Only letters,
// Chinese characters, digits, hyphens (-), underscore (_) and the following specail characters are allowed: `?'#().,&%@!`.
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the node ID, which contains 4 to 256 characters.
// The node ID can be IMEI, MAC address, or serial number. Changing this parameter will create a new resource.
func (o DeviceOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// The node type of device. The options are as follows:
// + **GATEWAY**: Directly connected device.
// + **ENDPOINT**: Indirectly connected device.
// + **UNKNOWN**: Unknown type.
func (o DeviceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Specifies the product ID which the device belongs to.
// Changing this parameter will create a new resource.
func (o DeviceOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the IoTDA device resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o DeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies a secret for identity authentication, which contains 8 to 32 characters.
// Only letters, digits, hyphens (-) and underscore (_) are allowed.
func (o DeviceOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// Specifies the resource space ID which the device belongs to.
// Changing this parameter will create a new resource.
func (o DeviceOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The status of device. The valid values are **INACTIVE**, **ONLINE**, **OFFLINE**, **FROZEN**, **ABNORMAL**.
func (o DeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the device.
func (o DeviceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Device) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}

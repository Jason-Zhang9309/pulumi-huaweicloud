// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoTDA device group within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			spaceId := cfg.RequireObject("spaceId")
//			deviceId := cfg.RequireObject("deviceId")
//			_, err := IoTDA.NewDeviceGroup(ctx, "group", &IoTDA.DeviceGroupArgs{
//				SpaceId: pulumi.Any(spaceId),
//				DeviceIds: pulumi.StringArray{
//					pulumi.Any(deviceId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Groups can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:IoTDA/deviceGroup:DeviceGroup test 10022532f4f94f26b01daa1e424853e1
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`space_id`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the group. Also you can ignore changes as below. resource "huaweicloud_iotda_device_group" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	space_id,
//
//	]
//
//	} }
type DeviceGroup struct {
	pulumi.CustomResourceState

	// Specifies the description of device group. The description contains a maximum of 64
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the list of device IDs bound to the group.
	DeviceIds pulumi.StringArrayOutput `pulumi:"deviceIds"`
	// Specifies the name of device group. The name contains a maximum of 64 characters.
	// Only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the parent group id.
	// Changing this parameter will create a new resource.
	ParentGroupId pulumi.StringOutput `pulumi:"parentGroupId"`
	// Specifies the region in which to create the IoTDA device group resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the resource space ID to which the device group belongs.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewDeviceGroup registers a new resource with the given unique name, arguments, and options.
func NewDeviceGroup(ctx *pulumi.Context,
	name string, args *DeviceGroupArgs, opts ...pulumi.ResourceOption) (*DeviceGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpaceId == nil {
		return nil, errors.New("invalid value for required argument 'SpaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeviceGroup
	err := ctx.RegisterResource("huaweicloud:IoTDA/deviceGroup:DeviceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceGroup gets an existing DeviceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceGroupState, opts ...pulumi.ResourceOption) (*DeviceGroup, error) {
	var resource DeviceGroup
	err := ctx.ReadResource("huaweicloud:IoTDA/deviceGroup:DeviceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceGroup resources.
type deviceGroupState struct {
	// Specifies the description of device group. The description contains a maximum of 64
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the list of device IDs bound to the group.
	DeviceIds []string `pulumi:"deviceIds"`
	// Specifies the name of device group. The name contains a maximum of 64 characters.
	// Only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the parent group id.
	// Changing this parameter will create a new resource.
	ParentGroupId *string `pulumi:"parentGroupId"`
	// Specifies the region in which to create the IoTDA device group resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the resource space ID to which the device group belongs.
	// Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
}

type DeviceGroupState struct {
	// Specifies the description of device group. The description contains a maximum of 64
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the list of device IDs bound to the group.
	DeviceIds pulumi.StringArrayInput
	// Specifies the name of device group. The name contains a maximum of 64 characters.
	// Only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the parent group id.
	// Changing this parameter will create a new resource.
	ParentGroupId pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA device group resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the resource space ID to which the device group belongs.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
}

func (DeviceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupState)(nil)).Elem()
}

type deviceGroupArgs struct {
	// Specifies the description of device group. The description contains a maximum of 64
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the list of device IDs bound to the group.
	DeviceIds []string `pulumi:"deviceIds"`
	// Specifies the name of device group. The name contains a maximum of 64 characters.
	// Only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the parent group id.
	// Changing this parameter will create a new resource.
	ParentGroupId *string `pulumi:"parentGroupId"`
	// Specifies the region in which to create the IoTDA device group resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the resource space ID to which the device group belongs.
	// Changing this parameter will create a new resource.
	SpaceId string `pulumi:"spaceId"`
}

// The set of arguments for constructing a DeviceGroup resource.
type DeviceGroupArgs struct {
	// Specifies the description of device group. The description contains a maximum of 64
	// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the list of device IDs bound to the group.
	DeviceIds pulumi.StringArrayInput
	// Specifies the name of device group. The name contains a maximum of 64 characters.
	// Only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the parent group id.
	// Changing this parameter will create a new resource.
	ParentGroupId pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA device group resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the resource space ID to which the device group belongs.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringInput
}

func (DeviceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupArgs)(nil)).Elem()
}

type DeviceGroupInput interface {
	pulumi.Input

	ToDeviceGroupOutput() DeviceGroupOutput
	ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput
}

func (*DeviceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroup)(nil)).Elem()
}

func (i *DeviceGroup) ToDeviceGroupOutput() DeviceGroupOutput {
	return i.ToDeviceGroupOutputWithContext(context.Background())
}

func (i *DeviceGroup) ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupOutput)
}

// DeviceGroupArrayInput is an input type that accepts DeviceGroupArray and DeviceGroupArrayOutput values.
// You can construct a concrete instance of `DeviceGroupArrayInput` via:
//
//	DeviceGroupArray{ DeviceGroupArgs{...} }
type DeviceGroupArrayInput interface {
	pulumi.Input

	ToDeviceGroupArrayOutput() DeviceGroupArrayOutput
	ToDeviceGroupArrayOutputWithContext(context.Context) DeviceGroupArrayOutput
}

type DeviceGroupArray []DeviceGroupInput

func (DeviceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroup)(nil)).Elem()
}

func (i DeviceGroupArray) ToDeviceGroupArrayOutput() DeviceGroupArrayOutput {
	return i.ToDeviceGroupArrayOutputWithContext(context.Background())
}

func (i DeviceGroupArray) ToDeviceGroupArrayOutputWithContext(ctx context.Context) DeviceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupArrayOutput)
}

// DeviceGroupMapInput is an input type that accepts DeviceGroupMap and DeviceGroupMapOutput values.
// You can construct a concrete instance of `DeviceGroupMapInput` via:
//
//	DeviceGroupMap{ "key": DeviceGroupArgs{...} }
type DeviceGroupMapInput interface {
	pulumi.Input

	ToDeviceGroupMapOutput() DeviceGroupMapOutput
	ToDeviceGroupMapOutputWithContext(context.Context) DeviceGroupMapOutput
}

type DeviceGroupMap map[string]DeviceGroupInput

func (DeviceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroup)(nil)).Elem()
}

func (i DeviceGroupMap) ToDeviceGroupMapOutput() DeviceGroupMapOutput {
	return i.ToDeviceGroupMapOutputWithContext(context.Background())
}

func (i DeviceGroupMap) ToDeviceGroupMapOutputWithContext(ctx context.Context) DeviceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupMapOutput)
}

type DeviceGroupOutput struct{ *pulumi.OutputState }

func (DeviceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupOutput) ToDeviceGroupOutput() DeviceGroupOutput {
	return o
}

func (o DeviceGroupOutput) ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput {
	return o
}

// Specifies the description of device group. The description contains a maximum of 64
// characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
// are allowed: `?'#().,&%@!`.
func (o DeviceGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the list of device IDs bound to the group.
func (o DeviceGroupOutput) DeviceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringArrayOutput { return v.DeviceIds }).(pulumi.StringArrayOutput)
}

// Specifies the name of device group. The name contains a maximum of 64 characters.
// Only letters, digits, hyphens (-) and underscores (_) are allowed.
func (o DeviceGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parent group id.
// Changing this parameter will create a new resource.
func (o DeviceGroupOutput) ParentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringOutput { return v.ParentGroupId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the IoTDA device group resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o DeviceGroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the resource space ID to which the device group belongs.
// Changing this parameter will create a new resource.
func (o DeviceGroupOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type DeviceGroupArrayOutput struct{ *pulumi.OutputState }

func (DeviceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupArrayOutput) ToDeviceGroupArrayOutput() DeviceGroupArrayOutput {
	return o
}

func (o DeviceGroupArrayOutput) ToDeviceGroupArrayOutputWithContext(ctx context.Context) DeviceGroupArrayOutput {
	return o
}

func (o DeviceGroupArrayOutput) Index(i pulumi.IntInput) DeviceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceGroup {
		return vs[0].([]*DeviceGroup)[vs[1].(int)]
	}).(DeviceGroupOutput)
}

type DeviceGroupMapOutput struct{ *pulumi.OutputState }

func (DeviceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupMapOutput) ToDeviceGroupMapOutput() DeviceGroupMapOutput {
	return o
}

func (o DeviceGroupMapOutput) ToDeviceGroupMapOutputWithContext(ctx context.Context) DeviceGroupMapOutput {
	return o
}

func (o DeviceGroupMapOutput) MapIndex(k pulumi.StringInput) DeviceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceGroup {
		return vs[0].(map[string]*DeviceGroup)[vs[1].(string)]
	}).(DeviceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupInput)(nil)).Elem(), &DeviceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupArrayInput)(nil)).Elem(), DeviceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupMapInput)(nil)).Elem(), DeviceGroupMap{})
	pulumi.RegisterOutputType(DeviceGroupOutput{})
	pulumi.RegisterOutputType(DeviceGroupArrayOutput{})
	pulumi.RegisterOutputType(DeviceGroupMapOutput{})
}

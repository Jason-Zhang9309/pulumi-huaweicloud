// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoTDA device CA certificate within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			certificateContent := cfg.RequireObject("certificateContent")
//			_, err := IoTDA.NewDeviceCertificate(ctx, "test", &IoTDA.DeviceCertificateArgs{
//				Content: pulumi.Any(certificateContent),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Device CA certificates can be imported by `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:IoTDA/deviceCertificate:DeviceCertificate test 62b3cec5558d4b703f064534
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`content`, `space_id`, `verify_content`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the group. Also you can ignore changes as below. resource "huaweicloud_iotda_device_certificate" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	content, space_id, verify_content
//
//	]
//
//	} }
type DeviceCertificate struct {
	pulumi.CustomResourceState

	// The CN name of the device CA certificate.
	Cn pulumi.StringOutput `pulumi:"cn"`
	// Specifies the content of device CA certificate.
	// Changing this parameter will create a new resource. Create a private CA certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
	Content pulumi.StringOutput `pulumi:"content"`
	// The effective date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	EffectiveDate pulumi.StringOutput `pulumi:"effectiveDate"`
	// The expiry date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	ExpiryDate pulumi.StringOutput `pulumi:"expiryDate"`
	// The owner of the device CA certificate.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Specifies the region in which to create the IoTDA device CA certificate
	// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the resource space ID to which the device CA certificate belongs.
	// If omitted, the certificate will belong to the default resource space.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrOutput `pulumi:"spaceId"`
	// The status of the device CA certificate. The valid values are **Unverified** and **Verified**.
	Status pulumi.StringOutput `pulumi:"status"`
	// The verify code of the device CA certificate.
	VerifyCode pulumi.StringOutput `pulumi:"verifyCode"`
	// Specifies the content of verification certificate. Can only be used to verify
	// the validity of the device CA certificate after creation. Get the verification certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
	VerifyContent pulumi.StringPtrOutput `pulumi:"verifyContent"`
}

// NewDeviceCertificate registers a new resource with the given unique name, arguments, and options.
func NewDeviceCertificate(ctx *pulumi.Context,
	name string, args *DeviceCertificateArgs, opts ...pulumi.ResourceOption) (*DeviceCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	var resource DeviceCertificate
	err := ctx.RegisterResource("huaweicloud:IoTDA/deviceCertificate:DeviceCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceCertificate gets an existing DeviceCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceCertificateState, opts ...pulumi.ResourceOption) (*DeviceCertificate, error) {
	var resource DeviceCertificate
	err := ctx.ReadResource("huaweicloud:IoTDA/deviceCertificate:DeviceCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceCertificate resources.
type deviceCertificateState struct {
	// The CN name of the device CA certificate.
	Cn *string `pulumi:"cn"`
	// Specifies the content of device CA certificate.
	// Changing this parameter will create a new resource. Create a private CA certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
	Content *string `pulumi:"content"`
	// The effective date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	EffectiveDate *string `pulumi:"effectiveDate"`
	// The expiry date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	ExpiryDate *string `pulumi:"expiryDate"`
	// The owner of the device CA certificate.
	Owner *string `pulumi:"owner"`
	// Specifies the region in which to create the IoTDA device CA certificate
	// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the resource space ID to which the device CA certificate belongs.
	// If omitted, the certificate will belong to the default resource space.
	// Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
	// The status of the device CA certificate. The valid values are **Unverified** and **Verified**.
	Status *string `pulumi:"status"`
	// The verify code of the device CA certificate.
	VerifyCode *string `pulumi:"verifyCode"`
	// Specifies the content of verification certificate. Can only be used to verify
	// the validity of the device CA certificate after creation. Get the verification certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
	VerifyContent *string `pulumi:"verifyContent"`
}

type DeviceCertificateState struct {
	// The CN name of the device CA certificate.
	Cn pulumi.StringPtrInput
	// Specifies the content of device CA certificate.
	// Changing this parameter will create a new resource. Create a private CA certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
	Content pulumi.StringPtrInput
	// The effective date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	EffectiveDate pulumi.StringPtrInput
	// The expiry date of the device CA certificate.
	// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
	ExpiryDate pulumi.StringPtrInput
	// The owner of the device CA certificate.
	Owner pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA device CA certificate
	// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the resource space ID to which the device CA certificate belongs.
	// If omitted, the certificate will belong to the default resource space.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
	// The status of the device CA certificate. The valid values are **Unverified** and **Verified**.
	Status pulumi.StringPtrInput
	// The verify code of the device CA certificate.
	VerifyCode pulumi.StringPtrInput
	// Specifies the content of verification certificate. Can only be used to verify
	// the validity of the device CA certificate after creation. Get the verification certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
	VerifyContent pulumi.StringPtrInput
}

func (DeviceCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceCertificateState)(nil)).Elem()
}

type deviceCertificateArgs struct {
	// Specifies the content of device CA certificate.
	// Changing this parameter will create a new resource. Create a private CA certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
	Content string `pulumi:"content"`
	// Specifies the region in which to create the IoTDA device CA certificate
	// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the resource space ID to which the device CA certificate belongs.
	// If omitted, the certificate will belong to the default resource space.
	// Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
	// Specifies the content of verification certificate. Can only be used to verify
	// the validity of the device CA certificate after creation. Get the verification certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
	VerifyContent *string `pulumi:"verifyContent"`
}

// The set of arguments for constructing a DeviceCertificate resource.
type DeviceCertificateArgs struct {
	// Specifies the content of device CA certificate.
	// Changing this parameter will create a new resource. Create a private CA certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
	Content pulumi.StringInput
	// Specifies the region in which to create the IoTDA device CA certificate
	// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the resource space ID to which the device CA certificate belongs.
	// If omitted, the certificate will belong to the default resource space.
	// Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
	// Specifies the content of verification certificate. Can only be used to verify
	// the validity of the device CA certificate after creation. Get the verification certificate,
	// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
	VerifyContent pulumi.StringPtrInput
}

func (DeviceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceCertificateArgs)(nil)).Elem()
}

type DeviceCertificateInput interface {
	pulumi.Input

	ToDeviceCertificateOutput() DeviceCertificateOutput
	ToDeviceCertificateOutputWithContext(ctx context.Context) DeviceCertificateOutput
}

func (*DeviceCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceCertificate)(nil)).Elem()
}

func (i *DeviceCertificate) ToDeviceCertificateOutput() DeviceCertificateOutput {
	return i.ToDeviceCertificateOutputWithContext(context.Background())
}

func (i *DeviceCertificate) ToDeviceCertificateOutputWithContext(ctx context.Context) DeviceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificateOutput)
}

// DeviceCertificateArrayInput is an input type that accepts DeviceCertificateArray and DeviceCertificateArrayOutput values.
// You can construct a concrete instance of `DeviceCertificateArrayInput` via:
//
//	DeviceCertificateArray{ DeviceCertificateArgs{...} }
type DeviceCertificateArrayInput interface {
	pulumi.Input

	ToDeviceCertificateArrayOutput() DeviceCertificateArrayOutput
	ToDeviceCertificateArrayOutputWithContext(context.Context) DeviceCertificateArrayOutput
}

type DeviceCertificateArray []DeviceCertificateInput

func (DeviceCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceCertificate)(nil)).Elem()
}

func (i DeviceCertificateArray) ToDeviceCertificateArrayOutput() DeviceCertificateArrayOutput {
	return i.ToDeviceCertificateArrayOutputWithContext(context.Background())
}

func (i DeviceCertificateArray) ToDeviceCertificateArrayOutputWithContext(ctx context.Context) DeviceCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificateArrayOutput)
}

// DeviceCertificateMapInput is an input type that accepts DeviceCertificateMap and DeviceCertificateMapOutput values.
// You can construct a concrete instance of `DeviceCertificateMapInput` via:
//
//	DeviceCertificateMap{ "key": DeviceCertificateArgs{...} }
type DeviceCertificateMapInput interface {
	pulumi.Input

	ToDeviceCertificateMapOutput() DeviceCertificateMapOutput
	ToDeviceCertificateMapOutputWithContext(context.Context) DeviceCertificateMapOutput
}

type DeviceCertificateMap map[string]DeviceCertificateInput

func (DeviceCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceCertificate)(nil)).Elem()
}

func (i DeviceCertificateMap) ToDeviceCertificateMapOutput() DeviceCertificateMapOutput {
	return i.ToDeviceCertificateMapOutputWithContext(context.Background())
}

func (i DeviceCertificateMap) ToDeviceCertificateMapOutputWithContext(ctx context.Context) DeviceCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificateMapOutput)
}

type DeviceCertificateOutput struct{ *pulumi.OutputState }

func (DeviceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceCertificate)(nil)).Elem()
}

func (o DeviceCertificateOutput) ToDeviceCertificateOutput() DeviceCertificateOutput {
	return o
}

func (o DeviceCertificateOutput) ToDeviceCertificateOutputWithContext(ctx context.Context) DeviceCertificateOutput {
	return o
}

// The CN name of the device CA certificate.
func (o DeviceCertificateOutput) Cn() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.Cn }).(pulumi.StringOutput)
}

// Specifies the content of device CA certificate.
// Changing this parameter will create a new resource. Create a private CA certificate,
// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0104.html)
func (o DeviceCertificateOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The effective date of the device CA certificate.
// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
func (o DeviceCertificateOutput) EffectiveDate() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.EffectiveDate }).(pulumi.StringOutput)
}

// The expiry date of the device CA certificate.
// The format is: **yyyyMMdd'T'HHmmss'Z'**, e.g., **20151212T121212Z**.
func (o DeviceCertificateOutput) ExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.ExpiryDate }).(pulumi.StringOutput)
}

// The owner of the device CA certificate.
func (o DeviceCertificateOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Specifies the region in which to create the IoTDA device CA certificate
// resource. If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o DeviceCertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the resource space ID to which the device CA certificate belongs.
// If omitted, the certificate will belong to the default resource space.
// Changing this parameter will create a new resource.
func (o DeviceCertificateOutput) SpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringPtrOutput { return v.SpaceId }).(pulumi.StringPtrOutput)
}

// The status of the device CA certificate. The valid values are **Unverified** and **Verified**.
func (o DeviceCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The verify code of the device CA certificate.
func (o DeviceCertificateOutput) VerifyCode() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringOutput { return v.VerifyCode }).(pulumi.StringOutput)
}

// Specifies the content of verification certificate. Can only be used to verify
// the validity of the device CA certificate after creation. Get the verification certificate,
// please following [reference](https://support.huaweicloud.com/usermanual-iothub/iot_01_0106.html)
func (o DeviceCertificateOutput) VerifyContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceCertificate) pulumi.StringPtrOutput { return v.VerifyContent }).(pulumi.StringPtrOutput)
}

type DeviceCertificateArrayOutput struct{ *pulumi.OutputState }

func (DeviceCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceCertificate)(nil)).Elem()
}

func (o DeviceCertificateArrayOutput) ToDeviceCertificateArrayOutput() DeviceCertificateArrayOutput {
	return o
}

func (o DeviceCertificateArrayOutput) ToDeviceCertificateArrayOutputWithContext(ctx context.Context) DeviceCertificateArrayOutput {
	return o
}

func (o DeviceCertificateArrayOutput) Index(i pulumi.IntInput) DeviceCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceCertificate {
		return vs[0].([]*DeviceCertificate)[vs[1].(int)]
	}).(DeviceCertificateOutput)
}

type DeviceCertificateMapOutput struct{ *pulumi.OutputState }

func (DeviceCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceCertificate)(nil)).Elem()
}

func (o DeviceCertificateMapOutput) ToDeviceCertificateMapOutput() DeviceCertificateMapOutput {
	return o
}

func (o DeviceCertificateMapOutput) ToDeviceCertificateMapOutputWithContext(ctx context.Context) DeviceCertificateMapOutput {
	return o
}

func (o DeviceCertificateMapOutput) MapIndex(k pulumi.StringInput) DeviceCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceCertificate {
		return vs[0].(map[string]*DeviceCertificate)[vs[1].(string)]
	}).(DeviceCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCertificateInput)(nil)).Elem(), &DeviceCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCertificateArrayInput)(nil)).Elem(), DeviceCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCertificateMapInput)(nil)).Elem(), DeviceCertificateMap{})
	pulumi.RegisterOutputType(DeviceCertificateOutput{})
	pulumi.RegisterOutputType(DeviceCertificateArrayOutput{})
	pulumi.RegisterOutputType(DeviceCertificateMapOutput{})
}

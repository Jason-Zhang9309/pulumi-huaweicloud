// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoTDA AMQP queue resource within HuaweiCloud.
//
// > When accessing an IoTDA **standard** or **enterprise** edition instance, you need to specify the IoTDA service
//
//	endpoint in `provider` block.
//	You can login to the IoTDA console, choose the instance **Overview** and click **Access Details**
//	to view the HTTPS application access address. An example of the access address might be
//	**9bc34xxxxx.st1.iotda-app.ap-southeast-1.myhuaweicloud.com**, then you need to configure the
//	`provider` block as follows:
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			queueName := cfg.RequireObject("queueName")
//			_, err := IoTDA.NewAmqp(ctx, "test", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The AMQP queue can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:IoTDA/amqp:Amqp test <id>
//
// ```
type Amqp struct {
	pulumi.CustomResourceState

	// The creation time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the AMQP queue name, which contains `8` to `128` characters.
	// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the IoTDA AMQP queue resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The latest update time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAmqp registers a new resource with the given unique name, arguments, and options.
func NewAmqp(ctx *pulumi.Context,
	name string, args *AmqpArgs, opts ...pulumi.ResourceOption) (*Amqp, error) {
	if args == nil {
		args = &AmqpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Amqp
	err := ctx.RegisterResource("huaweicloud:IoTDA/amqp:Amqp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmqp gets an existing Amqp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmqp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AmqpState, opts ...pulumi.ResourceOption) (*Amqp, error) {
	var resource Amqp
	err := ctx.ReadResource("huaweicloud:IoTDA/amqp:Amqp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Amqp resources.
type amqpState struct {
	// The creation time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the AMQP queue name, which contains `8` to `128` characters.
	// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the IoTDA AMQP queue resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The latest update time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AmqpState struct {
	// The creation time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	CreatedAt pulumi.StringPtrInput
	// Specifies the AMQP queue name, which contains `8` to `128` characters.
	// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA AMQP queue resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The latest update time of the AMQP queue.
	// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
	UpdatedAt pulumi.StringPtrInput
}

func (AmqpState) ElementType() reflect.Type {
	return reflect.TypeOf((*amqpState)(nil)).Elem()
}

type amqpArgs struct {
	// Specifies the AMQP queue name, which contains `8` to `128` characters.
	// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the IoTDA AMQP queue resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Amqp resource.
type AmqpArgs struct {
	// Specifies the AMQP queue name, which contains `8` to `128` characters.
	// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA AMQP queue resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (AmqpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*amqpArgs)(nil)).Elem()
}

type AmqpInput interface {
	pulumi.Input

	ToAmqpOutput() AmqpOutput
	ToAmqpOutputWithContext(ctx context.Context) AmqpOutput
}

func (*Amqp) ElementType() reflect.Type {
	return reflect.TypeOf((**Amqp)(nil)).Elem()
}

func (i *Amqp) ToAmqpOutput() AmqpOutput {
	return i.ToAmqpOutputWithContext(context.Background())
}

func (i *Amqp) ToAmqpOutputWithContext(ctx context.Context) AmqpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmqpOutput)
}

// AmqpArrayInput is an input type that accepts AmqpArray and AmqpArrayOutput values.
// You can construct a concrete instance of `AmqpArrayInput` via:
//
//	AmqpArray{ AmqpArgs{...} }
type AmqpArrayInput interface {
	pulumi.Input

	ToAmqpArrayOutput() AmqpArrayOutput
	ToAmqpArrayOutputWithContext(context.Context) AmqpArrayOutput
}

type AmqpArray []AmqpInput

func (AmqpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Amqp)(nil)).Elem()
}

func (i AmqpArray) ToAmqpArrayOutput() AmqpArrayOutput {
	return i.ToAmqpArrayOutputWithContext(context.Background())
}

func (i AmqpArray) ToAmqpArrayOutputWithContext(ctx context.Context) AmqpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmqpArrayOutput)
}

// AmqpMapInput is an input type that accepts AmqpMap and AmqpMapOutput values.
// You can construct a concrete instance of `AmqpMapInput` via:
//
//	AmqpMap{ "key": AmqpArgs{...} }
type AmqpMapInput interface {
	pulumi.Input

	ToAmqpMapOutput() AmqpMapOutput
	ToAmqpMapOutputWithContext(context.Context) AmqpMapOutput
}

type AmqpMap map[string]AmqpInput

func (AmqpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Amqp)(nil)).Elem()
}

func (i AmqpMap) ToAmqpMapOutput() AmqpMapOutput {
	return i.ToAmqpMapOutputWithContext(context.Background())
}

func (i AmqpMap) ToAmqpMapOutputWithContext(ctx context.Context) AmqpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmqpMapOutput)
}

type AmqpOutput struct{ *pulumi.OutputState }

func (AmqpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Amqp)(nil)).Elem()
}

func (o AmqpOutput) ToAmqpOutput() AmqpOutput {
	return o
}

func (o AmqpOutput) ToAmqpOutputWithContext(ctx context.Context) AmqpOutput {
	return o
}

// The creation time of the AMQP queue.
// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
func (o AmqpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Amqp) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the AMQP queue name, which contains `8` to `128` characters.
// Only letters, digits, hyphens (-), underscores (_), dots (.) and colons (:) are allowed.
// Changing this parameter will create a new resource.
func (o AmqpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Amqp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the IoTDA AMQP queue resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o AmqpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Amqp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The latest update time of the AMQP queue.
// The format is **yyyyMMdd'T'HHmmss'Z'**. e.g. **20151212T121212Z**.
func (o AmqpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Amqp) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AmqpArrayOutput struct{ *pulumi.OutputState }

func (AmqpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Amqp)(nil)).Elem()
}

func (o AmqpArrayOutput) ToAmqpArrayOutput() AmqpArrayOutput {
	return o
}

func (o AmqpArrayOutput) ToAmqpArrayOutputWithContext(ctx context.Context) AmqpArrayOutput {
	return o
}

func (o AmqpArrayOutput) Index(i pulumi.IntInput) AmqpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Amqp {
		return vs[0].([]*Amqp)[vs[1].(int)]
	}).(AmqpOutput)
}

type AmqpMapOutput struct{ *pulumi.OutputState }

func (AmqpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Amqp)(nil)).Elem()
}

func (o AmqpMapOutput) ToAmqpMapOutput() AmqpMapOutput {
	return o
}

func (o AmqpMapOutput) ToAmqpMapOutputWithContext(ctx context.Context) AmqpMapOutput {
	return o
}

func (o AmqpMapOutput) MapIndex(k pulumi.StringInput) AmqpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Amqp {
		return vs[0].(map[string]*Amqp)[vs[1].(string)]
	}).(AmqpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AmqpInput)(nil)).Elem(), &Amqp{})
	pulumi.RegisterInputType(reflect.TypeOf((*AmqpArrayInput)(nil)).Elem(), AmqpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AmqpMapInput)(nil)).Elem(), AmqpMap{})
	pulumi.RegisterOutputType(AmqpOutput{})
	pulumi.RegisterOutputType(AmqpArrayOutput{})
	pulumi.RegisterOutputType(AmqpMapOutput{})
}

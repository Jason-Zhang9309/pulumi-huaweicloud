// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoTDA product within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/IoTDA"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			productName := cfg.RequireObject("productName")
//			_, err := IoTDA.NewSpace(ctx, "space", nil)
//			if err != nil {
//				return err
//			}
//			_, err = IoTDA.NewProduct(ctx, "test", &IoTDA.ProductArgs{
//				DeviceType:       pulumi.String("WaterMeter"),
//				Protocol:         pulumi.String("MQTT"),
//				SpaceId:          pulumi.Any(huaweicloud_iotda_space.Test.Id),
//				DataType:         pulumi.String("json"),
//				ManufacturerName: pulumi.String("demo_manufacturer_name"),
//				Industry:         pulumi.String("demo_industry"),
//				Services: iotda.ProductServiceArray{
//					&iotda.ProductServiceArgs{
//						Id:   pulumi.String("service_1"),
//						Type: pulumi.String("serv_type"),
//						Properties: iotda.ProductServicePropertyArray{
//							&iotda.ProductServicePropertyArgs{
//								Name:        pulumi.String("p_1"),
//								Type:        pulumi.String("int"),
//								Min:         pulumi.String("3"),
//								Max:         pulumi.String("666"),
//								Description: pulumi.String("desc"),
//								Method:      pulumi.String("RW"),
//							},
//							&iotda.ProductServicePropertyArgs{
//								Name:      pulumi.String("p_2"),
//								Type:      pulumi.String("string"),
//								MaxLength: pulumi.Int(20),
//								EnumLists: pulumi.StringArray{
//									pulumi.String("1"),
//									pulumi.String("E"),
//								},
//								Method: pulumi.String("R"),
//							},
//							&iotda.ProductServicePropertyArgs{
//								Name:      pulumi.String("p_3"),
//								Type:      pulumi.String("string"),
//								Method:    pulumi.String("W"),
//								MaxLength: pulumi.Int(200),
//							},
//							&iotda.ProductServicePropertyArgs{
//								Name:   pulumi.String("p_4"),
//								Type:   pulumi.String("decimal"),
//								Method: pulumi.String("W"),
//								Min:    pulumi.String("3.1"),
//								Max:    pulumi.String("666.99"),
//							},
//						},
//						Commands: iotda.ProductServiceCommandArray{
//							&iotda.ProductServiceCommandArgs{
//								Name: pulumi.String("cmd_1"),
//								Paras: iotda.ProductServiceCommandParaArray{
//									&iotda.ProductServiceCommandParaArgs{
//										Name:        pulumi.String("cmd_p_1"),
//										Type:        pulumi.String("int"),
//										Description: pulumi.String("desc"),
//										Min:         pulumi.String("1"),
//										Max:         pulumi.String("33"),
//									},
//								},
//								Responses: iotda.ProductServiceCommandResponseArray{
//									&iotda.ProductServiceCommandResponseArgs{
//										Name:        pulumi.String("cmd_r_1"),
//										Type:        pulumi.String("int"),
//										Description: pulumi.String("desc"),
//										Min:         pulumi.String("1"),
//										Max:         pulumi.String("22"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Products can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:IoTDA/product:Product test 10022532f4f94f26b01daa1e424853e1
//
// ```
type Product struct {
	pulumi.CustomResourceState

	// Specifies the type of data.
	// The valid values are **json** and **binary**.
	DataType pulumi.StringOutput `pulumi:"dataType"`
	// Specifies the description of the parameter. The description contains a maximum of
	// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the device type. The device type contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
	DeviceType pulumi.StringOutput `pulumi:"deviceType"`
	// Specifies the industry which the device belongs to. The industry contains a maximum of
	// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
	// the following specail characters are allowed: `?'#().,&%@!`.
	Industry pulumi.StringOutput `pulumi:"industry"`
	// Specifies the manufacturer name. The name contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	ManufacturerName pulumi.StringOutput `pulumi:"manufacturerName"`
	// Specifies the name of the parameter. The name contains a maximum of 64 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
	// allowed: `?'#().,&%@!`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the product ID. The product ID contains a maximum of 32
	// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
	// automatically allocate a product ID. Changing this parameter will create a new resource.
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Specifies the protocal.
	// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies the region in which to create the IoTDA product resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the list of services.
	// The services structure is documented below.
	Services ProductServiceArrayOutput `pulumi:"services"`
	// Specifies the resource space ID which the product belongs to. If omitted,
	// the product will belong to the default resource space. Changing this parameter will create a new resource.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataType == nil {
		return nil, errors.New("invalid value for required argument 'DataType'")
	}
	if args.DeviceType == nil {
		return nil, errors.New("invalid value for required argument 'DeviceType'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Product
	err := ctx.RegisterResource("huaweicloud:IoTDA/product:Product", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	var resource Product
	err := ctx.ReadResource("huaweicloud:IoTDA/product:Product", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type productState struct {
	// Specifies the type of data.
	// The valid values are **json** and **binary**.
	DataType *string `pulumi:"dataType"`
	// Specifies the description of the parameter. The description contains a maximum of
	// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the device type. The device type contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
	DeviceType *string `pulumi:"deviceType"`
	// Specifies the industry which the device belongs to. The industry contains a maximum of
	// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
	// the following specail characters are allowed: `?'#().,&%@!`.
	Industry *string `pulumi:"industry"`
	// Specifies the manufacturer name. The name contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	ManufacturerName *string `pulumi:"manufacturerName"`
	// Specifies the name of the parameter. The name contains a maximum of 64 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
	// allowed: `?'#().,&%@!`.
	Name *string `pulumi:"name"`
	// Specifies the product ID. The product ID contains a maximum of 32
	// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
	// automatically allocate a product ID. Changing this parameter will create a new resource.
	ProductId *string `pulumi:"productId"`
	// Specifies the protocal.
	// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the region in which to create the IoTDA product resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the list of services.
	// The services structure is documented below.
	Services []ProductService `pulumi:"services"`
	// Specifies the resource space ID which the product belongs to. If omitted,
	// the product will belong to the default resource space. Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
}

type ProductState struct {
	// Specifies the type of data.
	// The valid values are **json** and **binary**.
	DataType pulumi.StringPtrInput
	// Specifies the description of the parameter. The description contains a maximum of
	// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the device type. The device type contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
	DeviceType pulumi.StringPtrInput
	// Specifies the industry which the device belongs to. The industry contains a maximum of
	// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
	// the following specail characters are allowed: `?'#().,&%@!`.
	Industry pulumi.StringPtrInput
	// Specifies the manufacturer name. The name contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	ManufacturerName pulumi.StringPtrInput
	// Specifies the name of the parameter. The name contains a maximum of 64 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
	// allowed: `?'#().,&%@!`.
	Name pulumi.StringPtrInput
	// Specifies the product ID. The product ID contains a maximum of 32
	// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
	// automatically allocate a product ID. Changing this parameter will create a new resource.
	ProductId pulumi.StringPtrInput
	// Specifies the protocal.
	// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
	Protocol pulumi.StringPtrInput
	// Specifies the region in which to create the IoTDA product resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the list of services.
	// The services structure is documented below.
	Services ProductServiceArrayInput
	// Specifies the resource space ID which the product belongs to. If omitted,
	// the product will belong to the default resource space. Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
}

func (ProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*productState)(nil)).Elem()
}

type productArgs struct {
	// Specifies the type of data.
	// The valid values are **json** and **binary**.
	DataType string `pulumi:"dataType"`
	// Specifies the description of the parameter. The description contains a maximum of
	// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	Description *string `pulumi:"description"`
	// Specifies the device type. The device type contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
	DeviceType string `pulumi:"deviceType"`
	// Specifies the industry which the device belongs to. The industry contains a maximum of
	// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
	// the following specail characters are allowed: `?'#().,&%@!`.
	Industry *string `pulumi:"industry"`
	// Specifies the manufacturer name. The name contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	ManufacturerName *string `pulumi:"manufacturerName"`
	// Specifies the name of the parameter. The name contains a maximum of 64 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
	// allowed: `?'#().,&%@!`.
	Name *string `pulumi:"name"`
	// Specifies the product ID. The product ID contains a maximum of 32
	// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
	// automatically allocate a product ID. Changing this parameter will create a new resource.
	ProductId *string `pulumi:"productId"`
	// Specifies the protocal.
	// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
	Protocol string `pulumi:"protocol"`
	// Specifies the region in which to create the IoTDA product resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the list of services.
	// The services structure is documented below.
	Services []ProductService `pulumi:"services"`
	// Specifies the resource space ID which the product belongs to. If omitted,
	// the product will belong to the default resource space. Changing this parameter will create a new resource.
	SpaceId *string `pulumi:"spaceId"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	// Specifies the type of data.
	// The valid values are **json** and **binary**.
	DataType pulumi.StringInput
	// Specifies the description of the parameter. The description contains a maximum of
	// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	Description pulumi.StringPtrInput
	// Specifies the device type. The device type contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
	// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
	DeviceType pulumi.StringInput
	// Specifies the industry which the device belongs to. The industry contains a maximum of
	// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
	// the following specail characters are allowed: `?'#().,&%@!`.
	Industry pulumi.StringPtrInput
	// Specifies the manufacturer name. The name contains a maximum of 32 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
	// characters are allowed: `?'#().,&%@!`.
	ManufacturerName pulumi.StringPtrInput
	// Specifies the name of the parameter. The name contains a maximum of 64 characters.
	// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
	// allowed: `?'#().,&%@!`.
	Name pulumi.StringPtrInput
	// Specifies the product ID. The product ID contains a maximum of 32
	// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
	// automatically allocate a product ID. Changing this parameter will create a new resource.
	ProductId pulumi.StringPtrInput
	// Specifies the protocal.
	// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
	Protocol pulumi.StringInput
	// Specifies the region in which to create the IoTDA product resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the list of services.
	// The services structure is documented below.
	Services ProductServiceArrayInput
	// Specifies the resource space ID which the product belongs to. If omitted,
	// the product will belong to the default resource space. Changing this parameter will create a new resource.
	SpaceId pulumi.StringPtrInput
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productArgs)(nil)).Elem()
}

type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(ctx context.Context) ProductOutput
}

func (*Product) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *Product) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i *Product) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

// ProductArrayInput is an input type that accepts ProductArray and ProductArrayOutput values.
// You can construct a concrete instance of `ProductArrayInput` via:
//
//	ProductArray{ ProductArgs{...} }
type ProductArrayInput interface {
	pulumi.Input

	ToProductArrayOutput() ProductArrayOutput
	ToProductArrayOutputWithContext(context.Context) ProductArrayOutput
}

type ProductArray []ProductInput

func (ProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (i ProductArray) ToProductArrayOutput() ProductArrayOutput {
	return i.ToProductArrayOutputWithContext(context.Background())
}

func (i ProductArray) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductArrayOutput)
}

// ProductMapInput is an input type that accepts ProductMap and ProductMapOutput values.
// You can construct a concrete instance of `ProductMapInput` via:
//
//	ProductMap{ "key": ProductArgs{...} }
type ProductMapInput interface {
	pulumi.Input

	ToProductMapOutput() ProductMapOutput
	ToProductMapOutputWithContext(context.Context) ProductMapOutput
}

type ProductMap map[string]ProductInput

func (ProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (i ProductMap) ToProductMapOutput() ProductMapOutput {
	return i.ToProductMapOutputWithContext(context.Background())
}

func (i ProductMap) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductMapOutput)
}

type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

// Specifies the type of data.
// The valid values are **json** and **binary**.
func (o ProductOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

// Specifies the description of the parameter. The description contains a maximum of
// 128 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
// characters are allowed: `?'#().,&%@!`.
func (o ProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the device type. The device type contains a maximum of 32 characters.
// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters
// are allowed: `?'#().,&%@!`. Example: StreetLight, GasMeter, or WaterMeter.
func (o ProductOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.DeviceType }).(pulumi.StringOutput)
}

// Specifies the industry which the device belongs to. The industry contains a maximum of
// 64 characters. Only letters, Chinese characters, digits, hyphens (-), underscores (_) and
// the following specail characters are allowed: `?'#().,&%@!`.
func (o ProductOutput) Industry() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Industry }).(pulumi.StringOutput)
}

// Specifies the manufacturer name. The name contains a maximum of 32 characters.
// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail
// characters are allowed: `?'#().,&%@!`.
func (o ProductOutput) ManufacturerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.ManufacturerName }).(pulumi.StringOutput)
}

// Specifies the name of the parameter. The name contains a maximum of 64 characters.
// Only letters, Chinese characters, digits, hyphens (-), underscores (_) and the following specail characters are
// allowed: `?'#().,&%@!`.
func (o ProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the product ID. The product ID contains a maximum of 32
// characters. Only letters, digits, hyphens (-) and underscores (_) are allowed. If omitted, the platform will
// automatically allocate a product ID. Changing this parameter will create a new resource.
func (o ProductOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Specifies the protocal.
// The valid values are **MQTT**, **CoAP**, **HTTP**, **HTTPS**, **Modbus**, **ONVIF**, **OPC-UA**, **OPC-DA**, **Other**.
func (o ProductOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies the region in which to create the IoTDA product resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ProductOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the list of services.
// The services structure is documented below.
func (o ProductOutput) Services() ProductServiceArrayOutput {
	return o.ApplyT(func(v *Product) ProductServiceArrayOutput { return v.Services }).(ProductServiceArrayOutput)
}

// Specifies the resource space ID which the product belongs to. If omitted,
// the product will belong to the default resource space. Changing this parameter will create a new resource.
func (o ProductOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type ProductArrayOutput struct{ *pulumi.OutputState }

func (ProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (o ProductArrayOutput) ToProductArrayOutput() ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) Index(i pulumi.IntInput) ProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Product {
		return vs[0].([]*Product)[vs[1].(int)]
	}).(ProductOutput)
}

type ProductMapOutput struct{ *pulumi.OutputState }

func (ProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (o ProductMapOutput) ToProductMapOutput() ProductMapOutput {
	return o
}

func (o ProductMapOutput) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return o
}

func (o ProductMapOutput) MapIndex(k pulumi.StringInput) ProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Product {
		return vs[0].(map[string]*Product)[vs[1].(string)]
	}).(ProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), &Product{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductArrayInput)(nil)).Elem(), ProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductMapInput)(nil)).Elem(), ProductMap{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductArrayOutput{})
	pulumi.RegisterOutputType(ProductMapOutput{})
}

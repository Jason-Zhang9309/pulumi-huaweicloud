// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cci

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GetNamespacesNamespace struct {
	// Whether elastic scheduling is enabled.
	AutoExpendEnabled bool `pulumi:"autoExpendEnabled"`
	// Whether container network is enabled.
	ContainerNetworkEnabled bool `pulumi:"containerNetworkEnabled"`
	// The time when the namespace was created in UTC format, such as **2021-09-27T01:30:39Z**.
	CreatedAt string `pulumi:"createdAt"`
	// Specifies the enterprise project ID in UUID format.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The VPC ID in UUID format.
	Id string `pulumi:"id"`
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name string `pulumi:"name"`
	// The network information of the CCI namespace. The structure is documented below.
	Networks []GetNamespacesNamespaceNetwork `pulumi:"networks"`
	// Whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission.
	RbacEnabled bool `pulumi:"rbacEnabled"`
	// The IP address recycling interval in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	RecyclingInterval int `pulumi:"recyclingInterval"`
	// The CCI namespace status.
	Status string `pulumi:"status"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	Type string `pulumi:"type"`
	// The size of IP pool to warm-up.
	WarmupPoolSize int `pulumi:"warmupPoolSize"`
}

// GetNamespacesNamespaceInput is an input type that accepts GetNamespacesNamespaceArgs and GetNamespacesNamespaceOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceInput` via:
//
//	GetNamespacesNamespaceArgs{...}
type GetNamespacesNamespaceInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput
	ToGetNamespacesNamespaceOutputWithContext(context.Context) GetNamespacesNamespaceOutput
}

type GetNamespacesNamespaceArgs struct {
	// Whether elastic scheduling is enabled.
	AutoExpendEnabled pulumi.BoolInput `pulumi:"autoExpendEnabled"`
	// Whether container network is enabled.
	ContainerNetworkEnabled pulumi.BoolInput `pulumi:"containerNetworkEnabled"`
	// The time when the namespace was created in UTC format, such as **2021-09-27T01:30:39Z**.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Specifies the enterprise project ID in UUID format.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The VPC ID in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name pulumi.StringInput `pulumi:"name"`
	// The network information of the CCI namespace. The structure is documented below.
	Networks GetNamespacesNamespaceNetworkArrayInput `pulumi:"networks"`
	// Whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission.
	RbacEnabled pulumi.BoolInput `pulumi:"rbacEnabled"`
	// The IP address recycling interval in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	RecyclingInterval pulumi.IntInput `pulumi:"recyclingInterval"`
	// The CCI namespace status.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	Type pulumi.StringInput `pulumi:"type"`
	// The size of IP pool to warm-up.
	WarmupPoolSize pulumi.IntInput `pulumi:"warmupPoolSize"`
}

func (GetNamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return i.ToGetNamespacesNamespaceOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceOutput)
}

// GetNamespacesNamespaceArrayInput is an input type that accepts GetNamespacesNamespaceArray and GetNamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceArrayInput` via:
//
//	GetNamespacesNamespaceArray{ GetNamespacesNamespaceArgs{...} }
type GetNamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput
	ToGetNamespacesNamespaceArrayOutputWithContext(context.Context) GetNamespacesNamespaceArrayOutput
}

type GetNamespacesNamespaceArray []GetNamespacesNamespaceInput

func (GetNamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return i.ToGetNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceArrayOutput)
}

type GetNamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return o
}

// Whether elastic scheduling is enabled.
func (o GetNamespacesNamespaceOutput) AutoExpendEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) bool { return v.AutoExpendEnabled }).(pulumi.BoolOutput)
}

// Whether container network is enabled.
func (o GetNamespacesNamespaceOutput) ContainerNetworkEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) bool { return v.ContainerNetworkEnabled }).(pulumi.BoolOutput)
}

// The time when the namespace was created in UTC format, such as **2021-09-27T01:30:39Z**.
func (o GetNamespacesNamespaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID in UUID format.
func (o GetNamespacesNamespaceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The VPC ID in UUID format.
func (o GetNamespacesNamespaceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies th name of the specified CCI namespace.
// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
// and must start and end with lowercase letters and digits.
func (o GetNamespacesNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Name }).(pulumi.StringOutput)
}

// The network information of the CCI namespace. The structure is documented below.
func (o GetNamespacesNamespaceOutput) Networks() GetNamespacesNamespaceNetworkArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) []GetNamespacesNamespaceNetwork { return v.Networks }).(GetNamespacesNamespaceNetworkArrayOutput)
}

// Whether Role-based access control is enabled.
// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
// permission.
func (o GetNamespacesNamespaceOutput) RbacEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) bool { return v.RbacEnabled }).(pulumi.BoolOutput)
}

// The IP address recycling interval in hour.
// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
func (o GetNamespacesNamespaceOutput) RecyclingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) int { return v.RecyclingInterval }).(pulumi.IntOutput)
}

// The CCI namespace status.
func (o GetNamespacesNamespaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the CCI namespace type.
// The valid values are **general-computing** and **gpu-accelerated**.
func (o GetNamespacesNamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Type }).(pulumi.StringOutput)
}

// The size of IP pool to warm-up.
func (o GetNamespacesNamespaceOutput) WarmupPoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) int { return v.WarmupPoolSize }).(pulumi.IntOutput)
}

type GetNamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespace {
		return vs[0].([]GetNamespacesNamespace)[vs[1].(int)]
	}).(GetNamespacesNamespaceOutput)
}

type GetNamespacesNamespaceNetwork struct {
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name string `pulumi:"name"`
	// The default security group ID in UUID format.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The network information of the VPC under the CCI network. The structure is documented below.
	Vpcs []GetNamespacesNamespaceNetworkVpc `pulumi:"vpcs"`
}

// GetNamespacesNamespaceNetworkInput is an input type that accepts GetNamespacesNamespaceNetworkArgs and GetNamespacesNamespaceNetworkOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceNetworkInput` via:
//
//	GetNamespacesNamespaceNetworkArgs{...}
type GetNamespacesNamespaceNetworkInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceNetworkOutput() GetNamespacesNamespaceNetworkOutput
	ToGetNamespacesNamespaceNetworkOutputWithContext(context.Context) GetNamespacesNamespaceNetworkOutput
}

type GetNamespacesNamespaceNetworkArgs struct {
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name pulumi.StringInput `pulumi:"name"`
	// The default security group ID in UUID format.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The network information of the VPC under the CCI network. The structure is documented below.
	Vpcs GetNamespacesNamespaceNetworkVpcArrayInput `pulumi:"vpcs"`
}

func (GetNamespacesNamespaceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceNetwork)(nil)).Elem()
}

func (i GetNamespacesNamespaceNetworkArgs) ToGetNamespacesNamespaceNetworkOutput() GetNamespacesNamespaceNetworkOutput {
	return i.ToGetNamespacesNamespaceNetworkOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceNetworkArgs) ToGetNamespacesNamespaceNetworkOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceNetworkOutput)
}

// GetNamespacesNamespaceNetworkArrayInput is an input type that accepts GetNamespacesNamespaceNetworkArray and GetNamespacesNamespaceNetworkArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceNetworkArrayInput` via:
//
//	GetNamespacesNamespaceNetworkArray{ GetNamespacesNamespaceNetworkArgs{...} }
type GetNamespacesNamespaceNetworkArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceNetworkArrayOutput() GetNamespacesNamespaceNetworkArrayOutput
	ToGetNamespacesNamespaceNetworkArrayOutputWithContext(context.Context) GetNamespacesNamespaceNetworkArrayOutput
}

type GetNamespacesNamespaceNetworkArray []GetNamespacesNamespaceNetworkInput

func (GetNamespacesNamespaceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceNetwork)(nil)).Elem()
}

func (i GetNamespacesNamespaceNetworkArray) ToGetNamespacesNamespaceNetworkArrayOutput() GetNamespacesNamespaceNetworkArrayOutput {
	return i.ToGetNamespacesNamespaceNetworkArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceNetworkArray) ToGetNamespacesNamespaceNetworkArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceNetworkArrayOutput)
}

type GetNamespacesNamespaceNetworkOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceNetwork)(nil)).Elem()
}

func (o GetNamespacesNamespaceNetworkOutput) ToGetNamespacesNamespaceNetworkOutput() GetNamespacesNamespaceNetworkOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkOutput) ToGetNamespacesNamespaceNetworkOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkOutput {
	return o
}

// Specifies th name of the specified CCI namespace.
// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
// and must start and end with lowercase letters and digits.
func (o GetNamespacesNamespaceNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetwork) string { return v.Name }).(pulumi.StringOutput)
}

// The default security group ID in UUID format.
func (o GetNamespacesNamespaceNetworkOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetwork) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The network information of the VPC under the CCI network. The structure is documented below.
func (o GetNamespacesNamespaceNetworkOutput) Vpcs() GetNamespacesNamespaceNetworkVpcArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetwork) []GetNamespacesNamespaceNetworkVpc { return v.Vpcs }).(GetNamespacesNamespaceNetworkVpcArrayOutput)
}

type GetNamespacesNamespaceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceNetwork)(nil)).Elem()
}

func (o GetNamespacesNamespaceNetworkArrayOutput) ToGetNamespacesNamespaceNetworkArrayOutput() GetNamespacesNamespaceNetworkArrayOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkArrayOutput) ToGetNamespacesNamespaceNetworkArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkArrayOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespaceNetwork {
		return vs[0].([]GetNamespacesNamespaceNetwork)[vs[1].(int)]
	}).(GetNamespacesNamespaceNetworkOutput)
}

type GetNamespacesNamespaceNetworkVpc struct {
	// The VPC ID in UUID format.
	Id string `pulumi:"id"`
	// The network ID of the VPC subnet in UUID format.
	NetworkId string `pulumi:"networkId"`
	// The subnet CIDR block.
	SubnetCidr string `pulumi:"subnetCidr"`
	// The VPC subnet ID in UUID format.
	SubnetId string `pulumi:"subnetId"`
}

// GetNamespacesNamespaceNetworkVpcInput is an input type that accepts GetNamespacesNamespaceNetworkVpcArgs and GetNamespacesNamespaceNetworkVpcOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceNetworkVpcInput` via:
//
//	GetNamespacesNamespaceNetworkVpcArgs{...}
type GetNamespacesNamespaceNetworkVpcInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceNetworkVpcOutput() GetNamespacesNamespaceNetworkVpcOutput
	ToGetNamespacesNamespaceNetworkVpcOutputWithContext(context.Context) GetNamespacesNamespaceNetworkVpcOutput
}

type GetNamespacesNamespaceNetworkVpcArgs struct {
	// The VPC ID in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// The network ID of the VPC subnet in UUID format.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The subnet CIDR block.
	SubnetCidr pulumi.StringInput `pulumi:"subnetCidr"`
	// The VPC subnet ID in UUID format.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetNamespacesNamespaceNetworkVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceNetworkVpc)(nil)).Elem()
}

func (i GetNamespacesNamespaceNetworkVpcArgs) ToGetNamespacesNamespaceNetworkVpcOutput() GetNamespacesNamespaceNetworkVpcOutput {
	return i.ToGetNamespacesNamespaceNetworkVpcOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceNetworkVpcArgs) ToGetNamespacesNamespaceNetworkVpcOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceNetworkVpcOutput)
}

// GetNamespacesNamespaceNetworkVpcArrayInput is an input type that accepts GetNamespacesNamespaceNetworkVpcArray and GetNamespacesNamespaceNetworkVpcArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceNetworkVpcArrayInput` via:
//
//	GetNamespacesNamespaceNetworkVpcArray{ GetNamespacesNamespaceNetworkVpcArgs{...} }
type GetNamespacesNamespaceNetworkVpcArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceNetworkVpcArrayOutput() GetNamespacesNamespaceNetworkVpcArrayOutput
	ToGetNamespacesNamespaceNetworkVpcArrayOutputWithContext(context.Context) GetNamespacesNamespaceNetworkVpcArrayOutput
}

type GetNamespacesNamespaceNetworkVpcArray []GetNamespacesNamespaceNetworkVpcInput

func (GetNamespacesNamespaceNetworkVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceNetworkVpc)(nil)).Elem()
}

func (i GetNamespacesNamespaceNetworkVpcArray) ToGetNamespacesNamespaceNetworkVpcArrayOutput() GetNamespacesNamespaceNetworkVpcArrayOutput {
	return i.ToGetNamespacesNamespaceNetworkVpcArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceNetworkVpcArray) ToGetNamespacesNamespaceNetworkVpcArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceNetworkVpcArrayOutput)
}

type GetNamespacesNamespaceNetworkVpcOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceNetworkVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceNetworkVpc)(nil)).Elem()
}

func (o GetNamespacesNamespaceNetworkVpcOutput) ToGetNamespacesNamespaceNetworkVpcOutput() GetNamespacesNamespaceNetworkVpcOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkVpcOutput) ToGetNamespacesNamespaceNetworkVpcOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkVpcOutput {
	return o
}

// The VPC ID in UUID format.
func (o GetNamespacesNamespaceNetworkVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetworkVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The network ID of the VPC subnet in UUID format.
func (o GetNamespacesNamespaceNetworkVpcOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetworkVpc) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The subnet CIDR block.
func (o GetNamespacesNamespaceNetworkVpcOutput) SubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetworkVpc) string { return v.SubnetCidr }).(pulumi.StringOutput)
}

// The VPC subnet ID in UUID format.
func (o GetNamespacesNamespaceNetworkVpcOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceNetworkVpc) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceNetworkVpcArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceNetworkVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceNetworkVpc)(nil)).Elem()
}

func (o GetNamespacesNamespaceNetworkVpcArrayOutput) ToGetNamespacesNamespaceNetworkVpcArrayOutput() GetNamespacesNamespaceNetworkVpcArrayOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkVpcArrayOutput) ToGetNamespacesNamespaceNetworkVpcArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceNetworkVpcArrayOutput {
	return o
}

func (o GetNamespacesNamespaceNetworkVpcArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceNetworkVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespaceNetworkVpc {
		return vs[0].([]GetNamespacesNamespaceNetworkVpc)[vs[1].(int)]
	}).(GetNamespacesNamespaceNetworkVpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceInput)(nil)).Elem(), GetNamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceArrayInput)(nil)).Elem(), GetNamespacesNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceNetworkInput)(nil)).Elem(), GetNamespacesNamespaceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceNetworkArrayInput)(nil)).Elem(), GetNamespacesNamespaceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceNetworkVpcInput)(nil)).Elem(), GetNamespacesNamespaceNetworkVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceNetworkVpcArrayInput)(nil)).Elem(), GetNamespacesNamespaceNetworkVpcArray{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceNetworkOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceNetworkVpcOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceNetworkVpcArrayOutput{})
}

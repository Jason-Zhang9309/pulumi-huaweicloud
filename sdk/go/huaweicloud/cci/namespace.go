// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CCI namespace resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			namespaceName := cfg.RequireObject("namespaceName")
//			_, err := Cci.NewNamespace(ctx, "test", &Cci.NamespaceArgs{
//				Type:        pulumi.String("gpu-accelerated"),
//				RbacEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CCI Namespaces can be imported using their `name`, e.g., bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cci/namespace:Namespace test terraform-test
//
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// Specifies whether elastic scheduling is enabled.
	// Changing this will create a new CCI namespace resource.
	AutoExpendEnabled pulumi.BoolOutput `pulumi:"autoExpendEnabled"`
	// Specifies whether container network is enabled.
	// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
	// network as soon as they are started. Default to **false**.
	// Changing this will create a new CCI namespace resource.
	ContainerNetworkEnabled pulumi.BoolOutput `pulumi:"containerNetworkEnabled"`
	// The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies a unique ID in UUID format of enterprise project.
	// Changing this will create a new CCI namespace resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the unique name of the CCI namespace.\
	// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new CCI namespace resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission. Changing this will create a new CCI namespace resource.
	RbacEnabled pulumi.BoolPtrOutput `pulumi:"rbacEnabled"`
	// Specifies the IP address recycling interval, in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	// Changing this will create a new CCI namespace resource.
	RecyclingInterval pulumi.IntOutput `pulumi:"recyclingInterval"`
	// Specifies the region in which to create the CCI namespace resource.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Namespace status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	// Changing this will create a new CCI namespace resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the size of IP pool to warm-up.\
	// The valid value is range from `1` to `500`.
	// Changing this will create a new CCI namespace resource.
	WarmupPoolSize pulumi.IntOutput `pulumi:"warmupPoolSize"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("huaweicloud:Cci/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("huaweicloud:Cci/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// Specifies whether elastic scheduling is enabled.
	// Changing this will create a new CCI namespace resource.
	AutoExpendEnabled *bool `pulumi:"autoExpendEnabled"`
	// Specifies whether container network is enabled.
	// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
	// network as soon as they are started. Default to **false**.
	// Changing this will create a new CCI namespace resource.
	ContainerNetworkEnabled *bool `pulumi:"containerNetworkEnabled"`
	// The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies a unique ID in UUID format of enterprise project.
	// Changing this will create a new CCI namespace resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the unique name of the CCI namespace.\
	// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new CCI namespace resource.
	Name *string `pulumi:"name"`
	// Specifies whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission. Changing this will create a new CCI namespace resource.
	RbacEnabled *bool `pulumi:"rbacEnabled"`
	// Specifies the IP address recycling interval, in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	// Changing this will create a new CCI namespace resource.
	RecyclingInterval *int `pulumi:"recyclingInterval"`
	// Specifies the region in which to create the CCI namespace resource.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
	Region *string `pulumi:"region"`
	// Namespace status.
	Status *string `pulumi:"status"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	// Changing this will create a new CCI namespace resource.
	Type *string `pulumi:"type"`
	// Specifies the size of IP pool to warm-up.\
	// The valid value is range from `1` to `500`.
	// Changing this will create a new CCI namespace resource.
	WarmupPoolSize *int `pulumi:"warmupPoolSize"`
}

type NamespaceState struct {
	// Specifies whether elastic scheduling is enabled.
	// Changing this will create a new CCI namespace resource.
	AutoExpendEnabled pulumi.BoolPtrInput
	// Specifies whether container network is enabled.
	// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
	// network as soon as they are started. Default to **false**.
	// Changing this will create a new CCI namespace resource.
	ContainerNetworkEnabled pulumi.BoolPtrInput
	// The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
	CreatedAt pulumi.StringPtrInput
	// Specifies a unique ID in UUID format of enterprise project.
	// Changing this will create a new CCI namespace resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the unique name of the CCI namespace.\
	// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new CCI namespace resource.
	Name pulumi.StringPtrInput
	// Specifies whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission. Changing this will create a new CCI namespace resource.
	RbacEnabled pulumi.BoolPtrInput
	// Specifies the IP address recycling interval, in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	// Changing this will create a new CCI namespace resource.
	RecyclingInterval pulumi.IntPtrInput
	// Specifies the region in which to create the CCI namespace resource.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
	Region pulumi.StringPtrInput
	// Namespace status.
	Status pulumi.StringPtrInput
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	// Changing this will create a new CCI namespace resource.
	Type pulumi.StringPtrInput
	// Specifies the size of IP pool to warm-up.\
	// The valid value is range from `1` to `500`.
	// Changing this will create a new CCI namespace resource.
	WarmupPoolSize pulumi.IntPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// Specifies whether elastic scheduling is enabled.
	// Changing this will create a new CCI namespace resource.
	AutoExpendEnabled *bool `pulumi:"autoExpendEnabled"`
	// Specifies whether container network is enabled.
	// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
	// network as soon as they are started. Default to **false**.
	// Changing this will create a new CCI namespace resource.
	ContainerNetworkEnabled *bool `pulumi:"containerNetworkEnabled"`
	// Specifies a unique ID in UUID format of enterprise project.
	// Changing this will create a new CCI namespace resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the unique name of the CCI namespace.\
	// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new CCI namespace resource.
	Name *string `pulumi:"name"`
	// Specifies whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission. Changing this will create a new CCI namespace resource.
	RbacEnabled *bool `pulumi:"rbacEnabled"`
	// Specifies the IP address recycling interval, in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	// Changing this will create a new CCI namespace resource.
	RecyclingInterval *int `pulumi:"recyclingInterval"`
	// Specifies the region in which to create the CCI namespace resource.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
	Region *string `pulumi:"region"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	// Changing this will create a new CCI namespace resource.
	Type string `pulumi:"type"`
	// Specifies the size of IP pool to warm-up.\
	// The valid value is range from `1` to `500`.
	// Changing this will create a new CCI namespace resource.
	WarmupPoolSize *int `pulumi:"warmupPoolSize"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Specifies whether elastic scheduling is enabled.
	// Changing this will create a new CCI namespace resource.
	AutoExpendEnabled pulumi.BoolPtrInput
	// Specifies whether container network is enabled.
	// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
	// network as soon as they are started. Default to **false**.
	// Changing this will create a new CCI namespace resource.
	ContainerNetworkEnabled pulumi.BoolPtrInput
	// Specifies a unique ID in UUID format of enterprise project.
	// Changing this will create a new CCI namespace resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the unique name of the CCI namespace.\
	// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new CCI namespace resource.
	Name pulumi.StringPtrInput
	// Specifies whether Role-based access control is enabled.
	// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
	// permission. Changing this will create a new CCI namespace resource.
	RbacEnabled pulumi.BoolPtrInput
	// Specifies the IP address recycling interval, in hour.
	// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
	// Changing this will create a new CCI namespace resource.
	RecyclingInterval pulumi.IntPtrInput
	// Specifies the region in which to create the CCI namespace resource.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
	Region pulumi.StringPtrInput
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	// Changing this will create a new CCI namespace resource.
	Type pulumi.StringInput
	// Specifies the size of IP pool to warm-up.\
	// The valid value is range from `1` to `500`.
	// Changing this will create a new CCI namespace resource.
	WarmupPoolSize pulumi.IntPtrInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

// Specifies whether elastic scheduling is enabled.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) AutoExpendEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.AutoExpendEnabled }).(pulumi.BoolOutput)
}

// Specifies whether container network is enabled.
// Enable this option if you want CCI to start the container network in advance so that containers can connect to the
// network as soon as they are started. Default to **false**.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) ContainerNetworkEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.ContainerNetworkEnabled }).(pulumi.BoolOutput)
}

// The time when the namespace was created, in UTC format, e.g., **2021-09-27T01:30:39Z**.
func (o NamespaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies a unique ID in UUID format of enterprise project.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the unique name of the CCI namespace.\
// This parameter can contain a maximum of `63` characters, which may consist of lowercase letters, digits and
// hyphens (-), and must start and end with lowercase letters and digits.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether Role-based access control is enabled.
// After the RBAC permission is enabled, the user's use of resources under the namespace will be controlled by the RBAC
// permission. Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) RbacEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolPtrOutput { return v.RbacEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the IP address recycling interval, in hour.
// The idle IP resources from the elastic expansion of the IP resource pool can be recycled within this time.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) RecyclingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Namespace) pulumi.IntOutput { return v.RecyclingInterval }).(pulumi.IntOutput)
}

// Specifies the region in which to create the CCI namespace resource.
// If omitted, the provider-level region will be used. Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Namespace status.
func (o NamespaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the CCI namespace type.
// The valid values are **general-computing** and **gpu-accelerated**.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the size of IP pool to warm-up.\
// The valid value is range from `1` to `500`.
// Changing this will create a new CCI namespace resource.
func (o NamespaceOutput) WarmupPoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Namespace) pulumi.IntOutput { return v.WarmupPoolSize }).(pulumi.IntOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cci

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to obtain CCI namespaces within HuaweiCloud.
//
// ## Example Usage
// ### Get the specified namespace details
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			namespaceName := cfg.RequireObject("namespaceName")
//			_, err := Cci.GetNamespaces(ctx, &cci.GetNamespacesArgs{
//				Name: pulumi.StringRef(namespaceName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNamespaces(ctx *pulumi.Context, args *GetNamespacesArgs, opts ...pulumi.InvokeOption) (*GetNamespacesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetNamespacesResult
	err := ctx.Invoke("huaweicloud:Cci/getNamespaces:getNamespaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNamespaces.
type GetNamespacesArgs struct {
	// Specifies the enterprise project ID in UUID format.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain the CCI namespace list.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getNamespaces.
type GetNamespacesResult struct {
	// The enterprise project ID in UUID format.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The CCI network name.
	Name *string `pulumi:"name"`
	// All CCI namespaces that meet the query parameters.
	Namespaces []GetNamespacesNamespace `pulumi:"namespaces"`
	Region     string                   `pulumi:"region"`
	// The CCI namespace type.
	Type *string `pulumi:"type"`
}

func GetNamespacesOutput(ctx *pulumi.Context, args GetNamespacesOutputArgs, opts ...pulumi.InvokeOption) GetNamespacesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNamespacesResult, error) {
			args := v.(GetNamespacesArgs)
			r, err := GetNamespaces(ctx, &args, opts...)
			var s GetNamespacesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNamespacesResultOutput)
}

// A collection of arguments for invoking getNamespaces.
type GetNamespacesOutputArgs struct {
	// Specifies the enterprise project ID in UUID format.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies th name of the specified CCI namespace.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and hyphens,
	// and must start and end with lowercase letters and digits.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain the CCI namespace list.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the CCI namespace type.
	// The valid values are **general-computing** and **gpu-accelerated**.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetNamespacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesArgs)(nil)).Elem()
}

// A collection of values returned by getNamespaces.
type GetNamespacesResultOutput struct{ *pulumi.OutputState }

func (GetNamespacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesResult)(nil)).Elem()
}

func (o GetNamespacesResultOutput) ToGetNamespacesResultOutput() GetNamespacesResultOutput {
	return o
}

func (o GetNamespacesResultOutput) ToGetNamespacesResultOutputWithContext(ctx context.Context) GetNamespacesResultOutput {
	return o
}

// The enterprise project ID in UUID format.
func (o GetNamespacesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNamespacesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNamespacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The CCI network name.
func (o GetNamespacesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNamespacesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// All CCI namespaces that meet the query parameters.
func (o GetNamespacesResultOutput) Namespaces() GetNamespacesNamespaceArrayOutput {
	return o.ApplyT(func(v GetNamespacesResult) []GetNamespacesNamespace { return v.Namespaces }).(GetNamespacesNamespaceArrayOutput)
}

func (o GetNamespacesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesResult) string { return v.Region }).(pulumi.StringOutput)
}

// The CCI namespace type.
func (o GetNamespacesResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNamespacesResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNamespacesResultOutput{})
}

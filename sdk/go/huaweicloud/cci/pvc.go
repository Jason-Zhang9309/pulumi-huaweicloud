// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CCI Persistent Volume Claim resource within HuaweiCloud.
//
// ## Example Usage
// ### Import an EVS volume
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			volumeId := cfg.RequireObject("volumeId")
//			namespace := cfg.RequireObject("namespace")
//			pvcName := cfg.RequireObject("pvcName")
//			_, err := Cci.NewPvc(ctx, "test", &Cci.PvcArgs{
//				Namespace:  pulumi.Any(namespace),
//				VolumeType: pulumi.String("ssd"),
//				VolumeId:   pulumi.Any(volumeId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Import an OBS bucket
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			obsBucketName := cfg.RequireObject("obsBucketName")
//			namespace := cfg.RequireObject("namespace")
//			pvcName := cfg.RequireObject("pvcName")
//			_, err := Cci.NewPvc(ctx, "test", &Cci.PvcArgs{
//				Namespace:  pulumi.Any(namespace),
//				VolumeType: pulumi.String("obs"),
//				VolumeId:   pulumi.Any(obsBucketName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Import an SFS
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sfsId := cfg.RequireObject("sfsId")
//			namespace := cfg.RequireObject("namespace")
//			pvcName := cfg.RequireObject("pvcName")
//			exportLocation := cfg.RequireObject("exportLocation")
//			_, err := Cci.NewPvc(ctx, "test", &Cci.PvcArgs{
//				Namespace:       pulumi.Any(namespace),
//				VolumeType:      pulumi.String("nfs-rw"),
//				VolumeId:        pulumi.Any(sfsId),
//				DeviceMountPath: pulumi.Any(exportLocation),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Import an SFS Turbo
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sfsTurboId := cfg.RequireObject("sfsTurboId")
//			namespace := cfg.RequireObject("namespace")
//			pvcName := cfg.RequireObject("pvcName")
//			exportLocation := cfg.RequireObject("exportLocation")
//			_, err := Cci.NewPvc(ctx, "test", &Cci.PvcArgs{
//				Namespace:       pulumi.Any(namespace),
//				VolumeType:      pulumi.String("efs-standard"),
//				VolumeId:        pulumi.Any(sfsTurboId),
//				DeviceMountPath: pulumi.Any(exportLocation),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PVCs can be imported using the `namespace`, `volume_type` and `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cci/pvc:Pvc test <namespace>/<volume_type>/<id>
//
// ```
type Pvc struct {
	pulumi.CustomResourceState

	// The access mode the volume should have.
	AccessModes pulumi.StringArrayOutput `pulumi:"accessModes"`
	// The server time when PVC was created.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// Specifies the share path of the SFS storage bound to the CCI
	// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
	// PVC resource.
	DeviceMountPath pulumi.StringOutput `pulumi:"deviceMountPath"`
	// Whether the PVC is available.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new PVC resource.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Specifies the region in which to create the PVC resource. If omitted, the
	// provider-level region will be used. Changing this will create a new PVC resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current phase of the PVC.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the storage bound to the CCI Namespace. Changing this
	// will create a new PVC resource.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// Specifies the type of the storage bound to the CCI Namespace. The valid
	// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
	// this will create a new PVC resource.
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewPvc registers a new resource with the given unique name, arguments, and options.
func NewPvc(ctx *pulumi.Context,
	name string, args *PvcArgs, opts ...pulumi.ResourceOption) (*Pvc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Pvc
	err := ctx.RegisterResource("huaweicloud:Cci/pvc:Pvc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPvc gets an existing Pvc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPvc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PvcState, opts ...pulumi.ResourceOption) (*Pvc, error) {
	var resource Pvc
	err := ctx.ReadResource("huaweicloud:Cci/pvc:Pvc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pvc resources.
type pvcState struct {
	// The access mode the volume should have.
	AccessModes []string `pulumi:"accessModes"`
	// The server time when PVC was created.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Specifies the share path of the SFS storage bound to the CCI
	// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
	// PVC resource.
	DeviceMountPath *string `pulumi:"deviceMountPath"`
	// Whether the PVC is available.
	Enable *bool `pulumi:"enable"`
	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	Name *string `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new PVC resource.
	Namespace *string `pulumi:"namespace"`
	// Specifies the region in which to create the PVC resource. If omitted, the
	// provider-level region will be used. Changing this will create a new PVC resource.
	Region *string `pulumi:"region"`
	// The current phase of the PVC.
	Status *string `pulumi:"status"`
	// Specifies the ID of the storage bound to the CCI Namespace. Changing this
	// will create a new PVC resource.
	VolumeId *string `pulumi:"volumeId"`
	// Specifies the type of the storage bound to the CCI Namespace. The valid
	// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
	// this will create a new PVC resource.
	VolumeType *string `pulumi:"volumeType"`
}

type PvcState struct {
	// The access mode the volume should have.
	AccessModes pulumi.StringArrayInput
	// The server time when PVC was created.
	CreationTimestamp pulumi.StringPtrInput
	// Specifies the share path of the SFS storage bound to the CCI
	// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
	// PVC resource.
	DeviceMountPath pulumi.StringPtrInput
	// Whether the PVC is available.
	Enable pulumi.BoolPtrInput
	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	Name pulumi.StringPtrInput
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new PVC resource.
	Namespace pulumi.StringPtrInput
	// Specifies the region in which to create the PVC resource. If omitted, the
	// provider-level region will be used. Changing this will create a new PVC resource.
	Region pulumi.StringPtrInput
	// The current phase of the PVC.
	Status pulumi.StringPtrInput
	// Specifies the ID of the storage bound to the CCI Namespace. Changing this
	// will create a new PVC resource.
	VolumeId pulumi.StringPtrInput
	// Specifies the type of the storage bound to the CCI Namespace. The valid
	// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
	// this will create a new PVC resource.
	VolumeType pulumi.StringPtrInput
}

func (PvcState) ElementType() reflect.Type {
	return reflect.TypeOf((*pvcState)(nil)).Elem()
}

type pvcArgs struct {
	// Specifies the share path of the SFS storage bound to the CCI
	// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
	// PVC resource.
	DeviceMountPath *string `pulumi:"deviceMountPath"`
	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	Name *string `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new PVC resource.
	Namespace string `pulumi:"namespace"`
	// Specifies the region in which to create the PVC resource. If omitted, the
	// provider-level region will be used. Changing this will create a new PVC resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the storage bound to the CCI Namespace. Changing this
	// will create a new PVC resource.
	VolumeId string `pulumi:"volumeId"`
	// Specifies the type of the storage bound to the CCI Namespace. The valid
	// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
	// this will create a new PVC resource.
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Pvc resource.
type PvcArgs struct {
	// Specifies the share path of the SFS storage bound to the CCI
	// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
	// PVC resource.
	DeviceMountPath pulumi.StringPtrInput
	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	Name pulumi.StringPtrInput
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new PVC resource.
	Namespace pulumi.StringInput
	// Specifies the region in which to create the PVC resource. If omitted, the
	// provider-level region will be used. Changing this will create a new PVC resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the storage bound to the CCI Namespace. Changing this
	// will create a new PVC resource.
	VolumeId pulumi.StringInput
	// Specifies the type of the storage bound to the CCI Namespace. The valid
	// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
	// this will create a new PVC resource.
	VolumeType pulumi.StringPtrInput
}

func (PvcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pvcArgs)(nil)).Elem()
}

type PvcInput interface {
	pulumi.Input

	ToPvcOutput() PvcOutput
	ToPvcOutputWithContext(ctx context.Context) PvcOutput
}

func (*Pvc) ElementType() reflect.Type {
	return reflect.TypeOf((**Pvc)(nil)).Elem()
}

func (i *Pvc) ToPvcOutput() PvcOutput {
	return i.ToPvcOutputWithContext(context.Background())
}

func (i *Pvc) ToPvcOutputWithContext(ctx context.Context) PvcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcOutput)
}

// PvcArrayInput is an input type that accepts PvcArray and PvcArrayOutput values.
// You can construct a concrete instance of `PvcArrayInput` via:
//
//	PvcArray{ PvcArgs{...} }
type PvcArrayInput interface {
	pulumi.Input

	ToPvcArrayOutput() PvcArrayOutput
	ToPvcArrayOutputWithContext(context.Context) PvcArrayOutput
}

type PvcArray []PvcInput

func (PvcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pvc)(nil)).Elem()
}

func (i PvcArray) ToPvcArrayOutput() PvcArrayOutput {
	return i.ToPvcArrayOutputWithContext(context.Background())
}

func (i PvcArray) ToPvcArrayOutputWithContext(ctx context.Context) PvcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcArrayOutput)
}

// PvcMapInput is an input type that accepts PvcMap and PvcMapOutput values.
// You can construct a concrete instance of `PvcMapInput` via:
//
//	PvcMap{ "key": PvcArgs{...} }
type PvcMapInput interface {
	pulumi.Input

	ToPvcMapOutput() PvcMapOutput
	ToPvcMapOutputWithContext(context.Context) PvcMapOutput
}

type PvcMap map[string]PvcInput

func (PvcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pvc)(nil)).Elem()
}

func (i PvcMap) ToPvcMapOutput() PvcMapOutput {
	return i.ToPvcMapOutputWithContext(context.Background())
}

func (i PvcMap) ToPvcMapOutputWithContext(ctx context.Context) PvcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcMapOutput)
}

type PvcOutput struct{ *pulumi.OutputState }

func (PvcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pvc)(nil)).Elem()
}

func (o PvcOutput) ToPvcOutput() PvcOutput {
	return o
}

func (o PvcOutput) ToPvcOutputWithContext(ctx context.Context) PvcOutput {
	return o
}

// The access mode the volume should have.
func (o PvcOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringArrayOutput { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// The server time when PVC was created.
func (o PvcOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Specifies the share path of the SFS storage bound to the CCI
// Namespace. Required if `volumeType` is *nfs-rw*, *efs-standard* or *efs-performance*. Changing this will create a new
// PVC resource.
func (o PvcOutput) DeviceMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.DeviceMountPath }).(pulumi.StringOutput)
}

// Whether the PVC is available.
func (o PvcOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pvc) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// Specifies the unique name of the PVC resource. This parameter can contain a
// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens, and must start and end with
// lowercase letters and digits. Changing this will create a new PVC resource.
func (o PvcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the namespace to logically divide your cloud container instances
// into different group. Changing this will create a new PVC resource.
func (o PvcOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Specifies the region in which to create the PVC resource. If omitted, the
// provider-level region will be used. Changing this will create a new PVC resource.
func (o PvcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current phase of the PVC.
func (o PvcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the storage bound to the CCI Namespace. Changing this
// will create a new PVC resource.
func (o PvcOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// Specifies the type of the storage bound to the CCI Namespace. The valid
// values are *sas*, *ssd*, *sata*, *obs*, *nfs-rw*, *efs-standard* and *efs-performance*, Defalut to *sas*. Changing
// this will create a new PVC resource.
func (o PvcOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type PvcArrayOutput struct{ *pulumi.OutputState }

func (PvcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pvc)(nil)).Elem()
}

func (o PvcArrayOutput) ToPvcArrayOutput() PvcArrayOutput {
	return o
}

func (o PvcArrayOutput) ToPvcArrayOutputWithContext(ctx context.Context) PvcArrayOutput {
	return o
}

func (o PvcArrayOutput) Index(i pulumi.IntInput) PvcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pvc {
		return vs[0].([]*Pvc)[vs[1].(int)]
	}).(PvcOutput)
}

type PvcMapOutput struct{ *pulumi.OutputState }

func (PvcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pvc)(nil)).Elem()
}

func (o PvcMapOutput) ToPvcMapOutput() PvcMapOutput {
	return o
}

func (o PvcMapOutput) ToPvcMapOutputWithContext(ctx context.Context) PvcMapOutput {
	return o
}

func (o PvcMapOutput) MapIndex(k pulumi.StringInput) PvcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pvc {
		return vs[0].(map[string]*Pvc)[vs[1].(string)]
	}).(PvcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PvcInput)(nil)).Elem(), &Pvc{})
	pulumi.RegisterInputType(reflect.TypeOf((*PvcArrayInput)(nil)).Elem(), PvcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PvcMapInput)(nil)).Elem(), PvcMap{})
	pulumi.RegisterOutputType(PvcOutput{})
	pulumi.RegisterOutputType(PvcArrayOutput{})
	pulumi.RegisterOutputType(PvcMapOutput{})
}

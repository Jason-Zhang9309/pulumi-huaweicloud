// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CCI Network resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cci"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			namespaceName := cfg.RequireObject("namespaceName")
//			networkName := cfg.RequireObject("networkName")
//			vpcNetworkId := cfg.RequireObject("vpcNetworkId")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cci.NewNetwork(ctx, "testNetwork", &Cci.NetworkArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Namespace:        pulumi.Any(namespaceName),
//				NetworkId:        pulumi.Any(vpcNetworkId),
//				SecurityGroupId:  pulumi.Any(securityGroupId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Networks can be imported using their `namespace` and `id`, separated by a slash, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Cci/network:Network test <namespace>/<id>
//
// ```
type Network struct {
	pulumi.CustomResourceState

	// Specifies the availability zone (AZ) to which the CCI network
	// belongs. Changing this will create a new CCI network resource.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The network segment on which the subnet resides.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// Specifies an unique name of the CCI network resource.
	// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
	// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new CCI network resource.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Specifies a network ID of the VPC subnet which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Specifies the region in which to create the CCI network.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies a security group ID to which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The CCI network status, including **Initializing**, **Pending** and **Active**.
	Status pulumi.StringOutput `pulumi:"status"`
	// IPv4 subnet ID.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// VPC ID which the subnet and CCI network belongs to.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	var resource Network
	err := ctx.RegisterResource("huaweicloud:Cci/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("huaweicloud:Cci/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// Specifies the availability zone (AZ) to which the CCI network
	// belongs. Changing this will create a new CCI network resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The network segment on which the subnet resides.
	Cidr *string `pulumi:"cidr"`
	// Specifies an unique name of the CCI network resource.
	// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
	// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
	Name *string `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new CCI network resource.
	Namespace *string `pulumi:"namespace"`
	// Specifies a network ID of the VPC subnet which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	NetworkId *string `pulumi:"networkId"`
	// Specifies the region in which to create the CCI network.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
	Region *string `pulumi:"region"`
	// Specifies a security group ID to which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The CCI network status, including **Initializing**, **Pending** and **Active**.
	Status *string `pulumi:"status"`
	// IPv4 subnet ID.
	SubnetId *string `pulumi:"subnetId"`
	// VPC ID which the subnet and CCI network belongs to.
	VpcId *string `pulumi:"vpcId"`
}

type NetworkState struct {
	// Specifies the availability zone (AZ) to which the CCI network
	// belongs. Changing this will create a new CCI network resource.
	AvailabilityZone pulumi.StringPtrInput
	// The network segment on which the subnet resides.
	Cidr pulumi.StringPtrInput
	// Specifies an unique name of the CCI network resource.
	// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
	// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
	Name pulumi.StringPtrInput
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new CCI network resource.
	Namespace pulumi.StringPtrInput
	// Specifies a network ID of the VPC subnet which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	NetworkId pulumi.StringPtrInput
	// Specifies the region in which to create the CCI network.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
	Region pulumi.StringPtrInput
	// Specifies a security group ID to which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	SecurityGroupId pulumi.StringPtrInput
	// The CCI network status, including **Initializing**, **Pending** and **Active**.
	Status pulumi.StringPtrInput
	// IPv4 subnet ID.
	SubnetId pulumi.StringPtrInput
	// VPC ID which the subnet and CCI network belongs to.
	VpcId pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// Specifies the availability zone (AZ) to which the CCI network
	// belongs. Changing this will create a new CCI network resource.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies an unique name of the CCI network resource.
	// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
	// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
	Name *string `pulumi:"name"`
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new CCI network resource.
	Namespace string `pulumi:"namespace"`
	// Specifies a network ID of the VPC subnet which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	NetworkId string `pulumi:"networkId"`
	// Specifies the region in which to create the CCI network.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
	Region *string `pulumi:"region"`
	// Specifies a security group ID to which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	SecurityGroupId string `pulumi:"securityGroupId"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// Specifies the availability zone (AZ) to which the CCI network
	// belongs. Changing this will create a new CCI network resource.
	AvailabilityZone pulumi.StringInput
	// Specifies an unique name of the CCI network resource.
	// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
	// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
	Name pulumi.StringPtrInput
	// Specifies the namespace to logically divide your cloud container instances
	// into different group. Changing this will create a new CCI network resource.
	Namespace pulumi.StringInput
	// Specifies a network ID of the VPC subnet which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	NetworkId pulumi.StringInput
	// Specifies the region in which to create the CCI network.
	// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
	Region pulumi.StringPtrInput
	// Specifies a security group ID to which the CCI network belongs to.
	// Changing this will create a new CCI network resource.
	SecurityGroupId pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// Specifies the availability zone (AZ) to which the CCI network
// belongs. Changing this will create a new CCI network resource.
func (o NetworkOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The network segment on which the subnet resides.
func (o NetworkOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// Specifies an unique name of the CCI network resource.
// The name can contain a maximum of 200 characters, which may consist of lowercase letters, digits and hyphens (-).
// The name must start and end with a lowercase letter or digit. Changing this will create a new CCI network resource.
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the namespace to logically divide your cloud container instances
// into different group. Changing this will create a new CCI network resource.
func (o NetworkOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Specifies a network ID of the VPC subnet which the CCI network belongs to.
// Changing this will create a new CCI network resource.
func (o NetworkOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the CCI network.
// If omitted, the provider-level region will be used. Changing this will create a new CCI network resource.
func (o NetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies a security group ID to which the CCI network belongs to.
// Changing this will create a new CCI network resource.
func (o NetworkOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The CCI network status, including **Initializing**, **Pending** and **Active**.
func (o NetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// IPv4 subnet ID.
func (o NetworkOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC ID which the subnet and CCI network belongs to.
func (o NetworkOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}

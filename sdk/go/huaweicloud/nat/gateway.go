// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a gateway resource of the **public** NAT within HuaweiCloud.
//
// ## Example Usage
// ### Creating a postpaid NAT gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Nat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			gatewayName := cfg.RequireObject("gatewayName")
//			vpcId := cfg.RequireObject("vpcId")
//			networkId := cfg.RequireObject("networkId")
//			gatewaySpecification := cfg.RequireObject("gatewaySpecification")
//			_, err := Nat.NewGateway(ctx, "test", &Nat.GatewayArgs{
//				Description: pulumi.String("test for terraform"),
//				Spec:        pulumi.Any(gatewaySpecification),
//				VpcId:       pulumi.Any(vpcId),
//				SubnetId:    pulumi.Any(networkId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating a prepaid NAT gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Nat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			gatewayName := cfg.RequireObject("gatewayName")
//			vpcId := cfg.RequireObject("vpcId")
//			networkId := cfg.RequireObject("networkId")
//			gatewaySpecification := cfg.RequireObject("gatewaySpecification")
//			_, err := Nat.NewGateway(ctx, "test", &Nat.GatewayArgs{
//				Description:  pulumi.String("test for terraform"),
//				Spec:         pulumi.Any(gatewaySpecification),
//				VpcId:        pulumi.Any(vpcId),
//				SubnetId:     pulumi.Any(networkId),
//				ChargingMode: pulumi.String("prePaid"),
//				PeriodUnit:   pulumi.String("month"),
//				Period:       pulumi.Int(1),
//				AutoRenew:    pulumi.String("true"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NAT gateways can be imported using their `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Nat/gateway:Gateway test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`charging_mode`, `period_unit`, `period` and `auto_renew`. It is generally recommended running `terraform plan` after importing a resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also, you can ignore changes as below. hcl resource "huaweicloud_nat_gateway" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	charging_mode, period_unit, period, auto_renew,
//
//	]
//
//	} }
type Gateway struct {
	pulumi.CustomResourceState

	// Specifies whether auto-renew is enabled. This parameter is only valid when
	// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	// When the `chargingMode` is set to **prePaid**, this parameter is available.
	BillingInfo pulumi.StringOutput `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second, unit is MB.
	BpsMax pulumi.IntOutput `pulumi:"bpsMax"`
	// Specifies the charging mode of the NAT gateway.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the NAT gateway, which contain maximum of `512`
	// characters, and angle brackets (<) and (>) are not allowed.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway. Defaults to `200`.
	DnatRulesLimit pulumi.IntOutput `pulumi:"dnatRulesLimit"`
	// Specifies the enterprise project ID of the NAT gateway.\
	// Changing this will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the NAT gateway name.\
	// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the IP address used for the NG port of the NAT gateway.
	// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
	// If not spacified, it will be automatically allocated.
	// Changing this will creates a new resource.
	NgportIpAddress pulumi.StringOutput `pulumi:"ngportIpAddress"`
	// Specifies the charging period of the NAT gateway.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the NAT gateway.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntOutput `pulumi:"ppsMax"`
	// Specifies the region where the NAT gateway is located.\
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the session configuration of the NAT gateway.
	// The sessionConf structure is documented below.
	SessionConf GatewaySessionConfOutput `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway. Defaults to `20`.
	SnatRulePublicIpLimit pulumi.IntOutput `pulumi:"snatRulePublicIpLimit"`
	// Specifies the specification of the NAT gateway. The valid values are as follows:
	// + **1**: Small type, which supports up to `10,000` SNAT connections.
	// + **2**: Medium type, which supports up to `50,000` SNAT connections.
	// + **3**: Large type, which supports up to `200,000` SNAT connections.
	// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The current status of the NAT gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT gateway.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("huaweicloud:Nat/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("huaweicloud:Nat/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// Specifies whether auto-renew is enabled. This parameter is only valid when
	// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	// When the `chargingMode` is set to **prePaid**, this parameter is available.
	BillingInfo *string `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second, unit is MB.
	BpsMax *int `pulumi:"bpsMax"`
	// Specifies the charging mode of the NAT gateway.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode *string `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the NAT gateway, which contain maximum of `512`
	// characters, and angle brackets (<) and (>) are not allowed.
	Description *string `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway. Defaults to `200`.
	DnatRulesLimit *int `pulumi:"dnatRulesLimit"`
	// Specifies the enterprise project ID of the NAT gateway.\
	// Changing this will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the NAT gateway name.\
	// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the IP address used for the NG port of the NAT gateway.
	// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
	// If not spacified, it will be automatically allocated.
	// Changing this will creates a new resource.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	// Specifies the charging period of the NAT gateway.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the NAT gateway.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax *int `pulumi:"ppsMax"`
	// Specifies the region where the NAT gateway is located.\
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the session configuration of the NAT gateway.
	// The sessionConf structure is documented below.
	SessionConf *GatewaySessionConf `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway. Defaults to `20`.
	SnatRulePublicIpLimit *int `pulumi:"snatRulePublicIpLimit"`
	// Specifies the specification of the NAT gateway. The valid values are as follows:
	// + **1**: Small type, which supports up to `10,000` SNAT connections.
	// + **2**: Medium type, which supports up to `50,000` SNAT connections.
	// + **3**: Large type, which supports up to `200,000` SNAT connections.
	// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
	Spec *string `pulumi:"spec"`
	// The current status of the NAT gateway.
	Status *string `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT gateway.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type GatewayState struct {
	// Specifies whether auto-renew is enabled. This parameter is only valid when
	// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrInput
	// The order information of the NAT gateway.
	// When the `chargingMode` is set to **prePaid**, this parameter is available.
	BillingInfo pulumi.StringPtrInput
	// The bandwidth that the NAT gateway can receive or send per second, unit is MB.
	BpsMax pulumi.IntPtrInput
	// Specifies the charging mode of the NAT gateway.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringPtrInput
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the NAT gateway, which contain maximum of `512`
	// characters, and angle brackets (<) and (>) are not allowed.
	Description pulumi.StringPtrInput
	// The maximum number of DNAT rules on the NAT gateway. Defaults to `200`.
	DnatRulesLimit pulumi.IntPtrInput
	// Specifies the enterprise project ID of the NAT gateway.\
	// Changing this will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the NAT gateway name.\
	// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the IP address used for the NG port of the NAT gateway.
	// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
	// If not spacified, it will be automatically allocated.
	// Changing this will creates a new resource.
	NgportIpAddress pulumi.StringPtrInput
	// Specifies the charging period of the NAT gateway.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the NAT gateway.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	PeriodUnit pulumi.StringPtrInput
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntPtrInput
	// Specifies the region where the NAT gateway is located.\
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the session configuration of the NAT gateway.
	// The sessionConf structure is documented below.
	SessionConf GatewaySessionConfPtrInput
	// The maximum number of SNAT rules on the NAT gateway. Defaults to `20`.
	SnatRulePublicIpLimit pulumi.IntPtrInput
	// Specifies the specification of the NAT gateway. The valid values are as follows:
	// + **1**: Small type, which supports up to `10,000` SNAT connections.
	// + **2**: Medium type, which supports up to `50,000` SNAT connections.
	// + **3**: Large type, which supports up to `200,000` SNAT connections.
	// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
	Spec pulumi.StringPtrInput
	// The current status of the NAT gateway.
	Status pulumi.StringPtrInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the NAT gateway.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// Specifies whether auto-renew is enabled. This parameter is only valid when
	// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the charging mode of the NAT gateway.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the description of the NAT gateway, which contain maximum of `512`
	// characters, and angle brackets (<) and (>) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of the NAT gateway.\
	// Changing this will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the NAT gateway name.\
	// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the IP address used for the NG port of the NAT gateway.
	// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
	// If not spacified, it will be automatically allocated.
	// Changing this will creates a new resource.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	// Specifies the charging period of the NAT gateway.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the NAT gateway.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the region where the NAT gateway is located.\
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the session configuration of the NAT gateway.
	// The sessionConf structure is documented below.
	SessionConf *GatewaySessionConf `pulumi:"sessionConf"`
	// Specifies the specification of the NAT gateway. The valid values are as follows:
	// + **1**: Small type, which supports up to `10,000` SNAT connections.
	// + **2**: Medium type, which supports up to `50,000` SNAT connections.
	// + **3**: Large type, which supports up to `200,000` SNAT connections.
	// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
	Spec string `pulumi:"spec"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT gateway.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// Specifies whether auto-renew is enabled. This parameter is only valid when
	// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the charging mode of the NAT gateway.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringPtrInput
	// Specifies the description of the NAT gateway, which contain maximum of `512`
	// characters, and angle brackets (<) and (>) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of the NAT gateway.\
	// Changing this will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the NAT gateway name.\
	// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the IP address used for the NG port of the NAT gateway.
	// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
	// If not spacified, it will be automatically allocated.
	// Changing this will creates a new resource.
	NgportIpAddress pulumi.StringPtrInput
	// Specifies the charging period of the NAT gateway.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the NAT gateway.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this will create a new resource.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the region where the NAT gateway is located.\
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the session configuration of the NAT gateway.
	// The sessionConf structure is documented below.
	SessionConf GatewaySessionConfPtrInput
	// Specifies the specification of the NAT gateway. The valid values are as follows:
	// + **1**: Small type, which supports up to `10,000` SNAT connections.
	// + **2**: Medium type, which supports up to `50,000` SNAT connections.
	// + **3**: Large type, which supports up to `200,000` SNAT connections.
	// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
	Spec pulumi.StringInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringInput
	// Specifies the key/value pairs to associate with the NAT gateway.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// Specifies whether auto-renew is enabled. This parameter is only valid when
// `chargingMode` is set to **prePaid**. Valid values are **true** and **false**. Defaults to **false**.
func (o GatewayOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The order information of the NAT gateway.
// When the `chargingMode` is set to **prePaid**, this parameter is available.
func (o GatewayOutput) BillingInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.BillingInfo }).(pulumi.StringOutput)
}

// The bandwidth that the NAT gateway can receive or send per second, unit is MB.
func (o GatewayOutput) BpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.BpsMax }).(pulumi.IntOutput)
}

// Specifies the charging mode of the NAT gateway.
// The valid values are as follows:
// + **prePaid**: the yearly/monthly billing mode.
// + **postPaid**: the pay-per-use billing mode.
func (o GatewayOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The creation time of the NAT gateway.
func (o GatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the NAT gateway, which contain maximum of `512`
// characters, and angle brackets (<) and (>) are not allowed.
func (o GatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The maximum number of DNAT rules on the NAT gateway. Defaults to `200`.
func (o GatewayOutput) DnatRulesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.DnatRulesLimit }).(pulumi.IntOutput)
}

// Specifies the enterprise project ID of the NAT gateway.\
// Changing this will create a new resource.
func (o GatewayOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the NAT gateway name.\
// The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the IP address used for the NG port of the NAT gateway.
// The IP address must be one of the IP addresses of the VPC subnet associated with the NAT gateway.
// If not spacified, it will be automatically allocated.
// Changing this will creates a new resource.
func (o GatewayOutput) NgportIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.NgportIpAddress }).(pulumi.StringOutput)
}

// Specifies the charging period of the NAT gateway.
// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
// This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this will create a new resource.
func (o GatewayOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the NAT gateway.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this will create a new resource.
func (o GatewayOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The number of packets that the NAT gateway can receive or send per second.
func (o GatewayOutput) PpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.PpsMax }).(pulumi.IntOutput)
}

// Specifies the region where the NAT gateway is located.\
// If omitted, the provider-level region will be used. Changing this will create a new resource.
func (o GatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the session configuration of the NAT gateway.
// The sessionConf structure is documented below.
func (o GatewayOutput) SessionConf() GatewaySessionConfOutput {
	return o.ApplyT(func(v *Gateway) GatewaySessionConfOutput { return v.SessionConf }).(GatewaySessionConfOutput)
}

// The maximum number of SNAT rules on the NAT gateway. Defaults to `20`.
func (o GatewayOutput) SnatRulePublicIpLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.SnatRulePublicIpLimit }).(pulumi.IntOutput)
}

// Specifies the specification of the NAT gateway. The valid values are as follows:
// + **1**: Small type, which supports up to `10,000` SNAT connections.
// + **2**: Medium type, which supports up to `50,000` SNAT connections.
// + **3**: Large type, which supports up to `200,000` SNAT connections.
// + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
func (o GatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The current status of the NAT gateway.
func (o GatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the subnet ID of the downstream interface (the next hop of the
// DVR) of the NAT gateway.
// Changing this will create a new resource.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the NAT gateway.
func (o GatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the ID of the VPC to which the NAT gateway belongs.\
// Changing this will create a new resource.
func (o GatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Nat gateway resource within HuaweiCloud Nat.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Nat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Nat.NewGateway(ctx, "nat1", &Nat.GatewayArgs{
//				Description: pulumi.String("test for terraform"),
//				Spec:        pulumi.String("3"),
//				SubnetId:    pulumi.String("dc8632e2-d9ff-41b1-aa0c-d455557314a0"),
//				VpcId:       pulumi.String("2c1fe4bd-ebad-44ca-ae9d-e94e63847b75"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Nat gateway can be imported using the following format
//
// ```sh
//
//	$ pulumi import huaweicloud:Nat/gateway:Gateway nat_1 d126fb87-43ce-4867-a2ff-cf34af3765d9
//
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// Specifies the description of the nat gateway. The value contains 0 to 255
	// characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the enterprise project id of the nat gateway. The
	// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
	// creates a new nat gateway.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Deprecated: use subnet_id instead
	InternalNetworkId pulumi.StringPtrOutput `pulumi:"internalNetworkId"`
	// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
	// , and hyphens(-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the Nat gateway resource. If omitted,
	// the provider-level region will be used. Changing this creates a new nat gateway.
	Region pulumi.StringOutput `pulumi:"region"`
	// Deprecated: use vpc_id instead
	RouterId pulumi.StringPtrOutput `pulumi:"routerId"`
	// Specifies the nat gateway type. The value can be:
	// + `1`: small type, which supports up to 10,000 SNAT connections.
	// + `2`: medium type, which supports up to 50,000 SNAT connections.
	// + `3`: large type, which supports up to 200,000 SNAT connections.
	// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The status of the nat gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway. Changing this creates a new nat gateway.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
	// a new nat gateway.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	var resource Gateway
	err := ctx.RegisterResource("huaweicloud:Nat/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("huaweicloud:Nat/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// Specifies the description of the nat gateway. The value contains 0 to 255
	// characters, and angle brackets (<)
	// and (>) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project id of the nat gateway. The
	// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
	// creates a new nat gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: use subnet_id instead
	InternalNetworkId *string `pulumi:"internalNetworkId"`
	// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
	// , and hyphens(-).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the Nat gateway resource. If omitted,
	// the provider-level region will be used. Changing this creates a new nat gateway.
	Region *string `pulumi:"region"`
	// Deprecated: use vpc_id instead
	RouterId *string `pulumi:"routerId"`
	// Specifies the nat gateway type. The value can be:
	// + `1`: small type, which supports up to 10,000 SNAT connections.
	// + `2`: medium type, which supports up to 50,000 SNAT connections.
	// + `3`: large type, which supports up to 200,000 SNAT connections.
	// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
	Spec *string `pulumi:"spec"`
	// The status of the nat gateway.
	Status *string `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway. Changing this creates a new nat gateway.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
	// a new nat gateway.
	VpcId *string `pulumi:"vpcId"`
}

type GatewayState struct {
	// Specifies the description of the nat gateway. The value contains 0 to 255
	// characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project id of the nat gateway. The
	// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
	// creates a new nat gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: use subnet_id instead
	InternalNetworkId pulumi.StringPtrInput
	// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
	// , and hyphens(-).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the Nat gateway resource. If omitted,
	// the provider-level region will be used. Changing this creates a new nat gateway.
	Region pulumi.StringPtrInput
	// Deprecated: use vpc_id instead
	RouterId pulumi.StringPtrInput
	// Specifies the nat gateway type. The value can be:
	// + `1`: small type, which supports up to 10,000 SNAT connections.
	// + `2`: medium type, which supports up to 50,000 SNAT connections.
	// + `3`: large type, which supports up to 200,000 SNAT connections.
	// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
	Spec pulumi.StringPtrInput
	// The status of the nat gateway.
	Status pulumi.StringPtrInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway. Changing this creates a new nat gateway.
	SubnetId pulumi.StringPtrInput
	// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
	// a new nat gateway.
	VpcId pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// Specifies the description of the nat gateway. The value contains 0 to 255
	// characters, and angle brackets (<)
	// and (>) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project id of the nat gateway. The
	// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
	// creates a new nat gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: use subnet_id instead
	InternalNetworkId *string `pulumi:"internalNetworkId"`
	// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
	// , and hyphens(-).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the Nat gateway resource. If omitted,
	// the provider-level region will be used. Changing this creates a new nat gateway.
	Region *string `pulumi:"region"`
	// Deprecated: use vpc_id instead
	RouterId *string `pulumi:"routerId"`
	// Specifies the nat gateway type. The value can be:
	// + `1`: small type, which supports up to 10,000 SNAT connections.
	// + `2`: medium type, which supports up to 50,000 SNAT connections.
	// + `3`: large type, which supports up to 200,000 SNAT connections.
	// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
	Spec string `pulumi:"spec"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway. Changing this creates a new nat gateway.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
	// a new nat gateway.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// Specifies the description of the nat gateway. The value contains 0 to 255
	// characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project id of the nat gateway. The
	// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
	// creates a new nat gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: use subnet_id instead
	InternalNetworkId pulumi.StringPtrInput
	// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
	// , and hyphens(-).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the Nat gateway resource. If omitted,
	// the provider-level region will be used. Changing this creates a new nat gateway.
	Region pulumi.StringPtrInput
	// Deprecated: use vpc_id instead
	RouterId pulumi.StringPtrInput
	// Specifies the nat gateway type. The value can be:
	// + `1`: small type, which supports up to 10,000 SNAT connections.
	// + `2`: medium type, which supports up to 50,000 SNAT connections.
	// + `3`: large type, which supports up to 200,000 SNAT connections.
	// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
	Spec pulumi.StringInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway. Changing this creates a new nat gateway.
	SubnetId pulumi.StringPtrInput
	// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
	// a new nat gateway.
	VpcId pulumi.StringPtrInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// Specifies the description of the nat gateway. The value contains 0 to 255
// characters, and angle brackets (<)
// and (>) are not allowed.
func (o GatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project id of the nat gateway. The
// value can contains maximum of 36 characters which it is string "0" or in UUID format with hyphens (-). Changing this
// creates a new nat gateway.
func (o GatewayOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Deprecated: use subnet_id instead
func (o GatewayOutput) InternalNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.InternalNetworkId }).(pulumi.StringPtrOutput)
}

// Specifies the nat gateway name. The name can contain only digits, letters, underscores (_)
// , and hyphens(-).
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the Nat gateway resource. If omitted,
// the provider-level region will be used. Changing this creates a new nat gateway.
func (o GatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: use vpc_id instead
func (o GatewayOutput) RouterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.RouterId }).(pulumi.StringPtrOutput)
}

// Specifies the nat gateway type. The value can be:
// + `1`: small type, which supports up to 10,000 SNAT connections.
// + `2`: medium type, which supports up to 50,000 SNAT connections.
// + `3`: large type, which supports up to 200,000 SNAT connections.
// + `4`: extra-large type, which supports up to 1,000,000 SNAT connections.
func (o GatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The status of the nat gateway.
func (o GatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the subnet ID of the downstream interface (the next hop of the
// DVR) of the NAT gateway. Changing this creates a new nat gateway.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the ID of the VPC this nat gateway belongs to. Changing this creates
// a new nat gateway.
func (o GatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a DCS instance within HuaweiCloud.
//
// !> **WARNING:** DCS for Memcached is about to become unavailable and is no longer sold in some regions.
// You can use DCS for Redis 4.0 or 5.0 instead. It is not possible to create Memcached instances through this resource.
// You can use this resource to manage Memcached instances that exist in HuaweiCloud.
//
// ## Example Usage
// ### Create a single mode Redis instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dcs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dcs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			singleFlavors, err := Dcs.GetFlavors(ctx, &dcs.GetFlavorsArgs{
//				CacheMode: pulumi.StringRef("single"),
//				Capacity:  0.125,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Dcs.NewInstance(ctx, "instance1", &Dcs.InstanceArgs{
//				Engine:        pulumi.String("Redis"),
//				EngineVersion: pulumi.String("5.0"),
//				Capacity:      pulumi.Float64(singleFlavors.Capacity),
//				Flavor:        pulumi.String(singleFlavors.Flavors[0].Name),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("cn-north-1a"),
//				},
//				Password: pulumi.String("YourPassword@123"),
//				VpcId:    pulumi.Any(vpcId),
//				SubnetId: pulumi.Any(subnetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create Master/Standby mode Redis instances with backup policy
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dcs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dcs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			_, err := Dcs.NewInstance(ctx, "instance2", &Dcs.InstanceArgs{
//				Engine:        pulumi.String("Redis"),
//				EngineVersion: pulumi.String("5.0"),
//				Capacity:      pulumi.Float64(4),
//				Flavor:        pulumi.String("redis.ha.xu1.large.r2.4"),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("cn-north-1a"),
//					pulumi.String("cn-north-1b"),
//				},
//				Password:     pulumi.String("YourPassword@123"),
//				VpcId:        pulumi.Any(vpcId),
//				SubnetId:     pulumi.Any(subnetId),
//				ChargingMode: pulumi.String("prePaid"),
//				PeriodUnit:   pulumi.String("month"),
//				AutoRenew:    pulumi.String("true"),
//				Period:       pulumi.Int(1),
//				BackupPolicy: &dcs.InstanceBackupPolicyArgs{
//					BackupType: pulumi.String("auto"),
//					SaveDays:   pulumi.Int(3),
//					BackupAts: pulumi.IntArray{
//						pulumi.Int(1),
//						pulumi.Int(3),
//						pulumi.Int(5),
//						pulumi.Int(7),
//					},
//					BeginAt: pulumi.String("02:00-04:00"),
//				},
//				Whitelists: dcs.InstanceWhitelistArray{
//					&dcs.InstanceWhitelistArgs{
//						GroupName: pulumi.String("test-group1"),
//						IpAddresses: pulumi.StringArray{
//							pulumi.String("192.168.10.100"),
//							pulumi.String("192.168.0.0/24"),
//						},
//					},
//					&dcs.InstanceWhitelistArgs{
//						GroupName: pulumi.String("test-group2"),
//						IpAddresses: pulumi.StringArray{
//							pulumi.String("172.16.10.100"),
//							pulumi.String("172.16.0.0/24"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DCS instance can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dcs/instance:Instance instance_1 80e373f9-872e-4046-aae9-ccd9ddc55511
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`password`, `auto_renew`, `period`, `period_unit`, `rename_commands`, `internal_version`, `save_days`, `backup_type`, `begin_at`, `period_type`, `backup_at`. It is generally recommended running `terraform plan` after importing an instance. You can then decide if changes should be applied to the instance, or the resource definition should be updated to align with the instance. Also you can ignore changes as below. resource "huaweicloud_dcs_instance" "instance_1" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	password, rename_commands,
//
//	]
//
//	} }
type Instance struct {
	pulumi.CustomResourceState

	// Specifies the username used for accessing a DCS Memcached instance.
	// If the cache engine is *Redis*, you do not need to set this parameter.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser pulumi.StringOutput    `pulumi:"accessUser"`
	AutoPay    pulumi.StringPtrOutput `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are `true` and `false`, defaults to `false`.
	// Changing this creates a new instance.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Deprecated: Deprecated, please use `availability_zones` instead
	AvailableZones pulumi.StringArrayOutput `pulumi:"availableZones"`
	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupAts pulumi.IntArrayOutput `pulumi:"backupAts"`
	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy InstanceBackupPolicyPtrOutput `pulumi:"backupPolicy"`
	// Backup type. Default value is `auto`. The valid values are as follows:
	// + `auto`: automatic backup.
	// + `manual`: manual backup.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupType pulumi.StringPtrOutput `pulumi:"backupType"`
	// Time at which backup starts.
	// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BeginAt pulumi.StringPtrOutput `pulumi:"beginAt"`
	// Specifies the cache capacity. Unit: GB.
	// + **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
	//   `4`, `8`, `16`, `32` and `64`.
	//   Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
	//   `1024`.
	// + **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	//   Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
	// + **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	Capacity pulumi.Float64Output `pulumi:"capacity"`
	// Specifies the charging mode of the redis instance.
	// The valid values are as follows:
	// + `prePaid`: indicates the yearly/monthly billing mode.
	// + `postPaid`: indicates the pay-per-use billing mode.
	//   Default value is `postPaid`.
	//   Changing this creates a new instance.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Domain name of the instance. Usually, we use domain name and port to connect to the DCS instances.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies a cache engine. Options: *Redis* and *Memcached*.
	// Changing this creates a new instance.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Specifies the version of a cache engine.
	// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
	// Changing this creates a new instance.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// The enterprise project id of the dcs instance.
	// Changing this creates a new instance.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Deprecated: Deprecated, this is a non-public attribute.
	EnterpriseProjectName pulumi.StringOutput `pulumi:"enterpriseProjectName"`
	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the *flavor* as follows:
	// + It can be obtained through this data source `Dcs.getFlavors`.
	// + Query some flavors
	//   in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
	// + Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// Deprecated: Deprecated, please us `engine_version` instead.
	InternalVersion pulumi.StringOutput `pulumi:"internalVersion"`
	// Deprecated: Deprecated, please us `private_ip` instead.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Time at which the maintenance time window starts.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `02:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
	//   In this case, the system automatically allocates the default start time 02:00:00.
	MaintainBegin pulumi.StringPtrOutput `pulumi:"maintainBegin"`
	// Time at which the maintenance time window ends.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `06:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + The end time is four hours later than the start time.
	//   For example, if the start time is 22:00:00, the end time is 02:00:00.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
	//   In this case, the system automatically allocates the default end time 06:00:00.
	MaintainEnd pulumi.StringPtrOutput `pulumi:"maintainEnd"`
	// Total memory size. Unit: MB.
	MaxMemory pulumi.IntOutput `pulumi:"maxMemory"`
	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the order that created the instance.
	OrderId pulumi.StringOutput `pulumi:"orderId"`
	// Specifies the password of a DCS instance.
	// Changing this creates a new instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// + Must be a string of 8 to 32 bits in length.
	// + Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
	//   Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
	// + The new password cannot be the same as the old password.
	//   Redis instance defaults to 6379. Memcached instance does not use this argument.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the charging period of the instance.
	// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
	// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Interval at which backup is performed. Default value is `weekly`.
	// Currently, only weekly backup is supported.
	//
	// Deprecated: Please use `backup_policy` instead
	PeriodType pulumi.StringPtrOutput `pulumi:"periodType"`
	// Specifies the charging period unit of the instance.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	Port pulumi.IntOutput `pulumi:"port"`
	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Deprecated: Deprecated, please use `flavor` instead
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Specifies the region in which to create the DCS instance resource.
	// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
	RenameCommands pulumi.StringMapOutput `pulumi:"renameCommands"`
	// Retention time. Unit: day, the value ranges from 1 to 7.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	SaveDays pulumi.IntPtrOutput `pulumi:"saveDays"`
	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupId pulumi.StringPtrOutput `pulumi:"securityGroupId"`
	// The name of security group which the instance belongs to.
	SecurityGroupName pulumi.StringOutput `pulumi:"securityGroupName"`
	// Cache instance status. The valid values are as follows:
	// + `RUNNING`: The instance is running properly.
	//   Only instances in the Running state can provide in-memory cache service.
	// + `ERROR`: The instance is not running properly.
	// + `RESTARTING`: The instance is being restarted.
	// + `FROZEN`: The instance has been frozen due to low balance.
	//   You can unfreeze the instance by recharging your account in My Order.
	// + `EXTENDING`: The instance is being scaled up.
	// + `RESTORING`: The instance data is being restored.
	// + `FLUSHING`: The DCS instance is being cleared.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The name of subnet which the instance belongs to.
	SubnetName pulumi.StringOutput `pulumi:"subnetName"`
	// The key/value pairs to associate with the dcs instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Size of the used memory. Unit: MB.
	UsedMemory pulumi.IntOutput `pulumi:"usedMemory"`
	// Deprecated: Deprecated
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Deprecated: Deprecated
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The name of VPC which the instance belongs to.
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	WhitelistEnable pulumi.BoolPtrOutput `pulumi:"whitelistEnable"`
	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelists InstanceWhitelistArrayOutput `pulumi:"whitelists"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Instance
	err := ctx.RegisterResource("huaweicloud:Dcs/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("huaweicloud:Dcs/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Specifies the username used for accessing a DCS Memcached instance.
	// If the cache engine is *Redis*, you do not need to set this parameter.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser *string `pulumi:"accessUser"`
	AutoPay    *string `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are `true` and `false`, defaults to `false`.
	// Changing this creates a new instance.
	AutoRenew *string `pulumi:"autoRenew"`
	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Deprecated: Deprecated, please use `availability_zones` instead
	AvailableZones []string `pulumi:"availableZones"`
	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupAts []int `pulumi:"backupAts"`
	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy *InstanceBackupPolicy `pulumi:"backupPolicy"`
	// Backup type. Default value is `auto`. The valid values are as follows:
	// + `auto`: automatic backup.
	// + `manual`: manual backup.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupType *string `pulumi:"backupType"`
	// Time at which backup starts.
	// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BeginAt *string `pulumi:"beginAt"`
	// Specifies the cache capacity. Unit: GB.
	// + **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
	//   `4`, `8`, `16`, `32` and `64`.
	//   Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
	//   `1024`.
	// + **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	//   Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
	// + **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	Capacity *float64 `pulumi:"capacity"`
	// Specifies the charging mode of the redis instance.
	// The valid values are as follows:
	// + `prePaid`: indicates the yearly/monthly billing mode.
	// + `postPaid`: indicates the pay-per-use billing mode.
	//   Default value is `postPaid`.
	//   Changing this creates a new instance.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description *string `pulumi:"description"`
	// Domain name of the instance. Usually, we use domain name and port to connect to the DCS instances.
	DomainName *string `pulumi:"domainName"`
	// Specifies a cache engine. Options: *Redis* and *Memcached*.
	// Changing this creates a new instance.
	Engine *string `pulumi:"engine"`
	// Specifies the version of a cache engine.
	// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
	// Changing this creates a new instance.
	EngineVersion *string `pulumi:"engineVersion"`
	// The enterprise project id of the dcs instance.
	// Changing this creates a new instance.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: Deprecated, this is a non-public attribute.
	EnterpriseProjectName *string `pulumi:"enterpriseProjectName"`
	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the *flavor* as follows:
	// + It can be obtained through this data source `Dcs.getFlavors`.
	// + Query some flavors
	//   in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
	// + Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
	Flavor *string `pulumi:"flavor"`
	// Deprecated: Deprecated, please us `engine_version` instead.
	InternalVersion *string `pulumi:"internalVersion"`
	// Deprecated: Deprecated, please us `private_ip` instead.
	Ip *string `pulumi:"ip"`
	// Time at which the maintenance time window starts.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `02:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
	//   In this case, the system automatically allocates the default start time 02:00:00.
	MaintainBegin *string `pulumi:"maintainBegin"`
	// Time at which the maintenance time window ends.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `06:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + The end time is four hours later than the start time.
	//   For example, if the start time is 22:00:00, the end time is 02:00:00.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
	//   In this case, the system automatically allocates the default end time 06:00:00.
	MaintainEnd *string `pulumi:"maintainEnd"`
	// Total memory size. Unit: MB.
	MaxMemory *int `pulumi:"maxMemory"`
	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// The ID of the order that created the instance.
	OrderId *string `pulumi:"orderId"`
	// Specifies the password of a DCS instance.
	// Changing this creates a new instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// + Must be a string of 8 to 32 bits in length.
	// + Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
	//   Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
	// + The new password cannot be the same as the old password.
	//   Redis instance defaults to 6379. Memcached instance does not use this argument.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the instance.
	// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
	// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	Period *int `pulumi:"period"`
	// Interval at which backup is performed. Default value is `weekly`.
	// Currently, only weekly backup is supported.
	//
	// Deprecated: Please use `backup_policy` instead
	PeriodType *string `pulumi:"periodType"`
	// Specifies the charging period unit of the instance.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	Port *int `pulumi:"port"`
	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIp *string `pulumi:"privateIp"`
	// Deprecated: Deprecated, please use `flavor` instead
	ProductId *string `pulumi:"productId"`
	// Specifies the region in which to create the DCS instance resource.
	// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
	Region *string `pulumi:"region"`
	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
	RenameCommands map[string]string `pulumi:"renameCommands"`
	// Retention time. Unit: day, the value ranges from 1 to 7.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	SaveDays *int `pulumi:"saveDays"`
	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The name of security group which the instance belongs to.
	SecurityGroupName *string `pulumi:"securityGroupName"`
	// Cache instance status. The valid values are as follows:
	// + `RUNNING`: The instance is running properly.
	//   Only instances in the Running state can provide in-memory cache service.
	// + `ERROR`: The instance is not running properly.
	// + `RESTARTING`: The instance is being restarted.
	// + `FROZEN`: The instance has been frozen due to low balance.
	//   You can unfreeze the instance by recharging your account in My Order.
	// + `EXTENDING`: The instance is being scaled up.
	// + `RESTORING`: The instance data is being restored.
	// + `FLUSHING`: The DCS instance is being cleared.
	Status *string `pulumi:"status"`
	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetId *string `pulumi:"subnetId"`
	// The name of subnet which the instance belongs to.
	SubnetName *string `pulumi:"subnetName"`
	// The key/value pairs to associate with the dcs instance.
	Tags map[string]string `pulumi:"tags"`
	// Size of the used memory. Unit: MB.
	UsedMemory *int `pulumi:"usedMemory"`
	// Deprecated: Deprecated
	UserId *string `pulumi:"userId"`
	// Deprecated: Deprecated
	UserName *string `pulumi:"userName"`
	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VpcId *string `pulumi:"vpcId"`
	// The name of VPC which the instance belongs to.
	VpcName *string `pulumi:"vpcName"`
	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	WhitelistEnable *bool `pulumi:"whitelistEnable"`
	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelists []InstanceWhitelist `pulumi:"whitelists"`
}

type InstanceState struct {
	// Specifies the username used for accessing a DCS Memcached instance.
	// If the cache engine is *Redis*, you do not need to set this parameter.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser pulumi.StringPtrInput
	AutoPay    pulumi.StringPtrInput
	// Specifies whether auto renew is enabled.
	// Valid values are `true` and `false`, defaults to `false`.
	// Changing this creates a new instance.
	AutoRenew pulumi.StringPtrInput
	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones pulumi.StringArrayInput
	// Deprecated: Deprecated, please use `availability_zones` instead
	AvailableZones pulumi.StringArrayInput
	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupAts pulumi.IntArrayInput
	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy InstanceBackupPolicyPtrInput
	// Backup type. Default value is `auto`. The valid values are as follows:
	// + `auto`: automatic backup.
	// + `manual`: manual backup.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupType pulumi.StringPtrInput
	// Time at which backup starts.
	// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BeginAt pulumi.StringPtrInput
	// Specifies the cache capacity. Unit: GB.
	// + **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
	//   `4`, `8`, `16`, `32` and `64`.
	//   Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
	//   `1024`.
	// + **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	//   Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
	// + **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	Capacity pulumi.Float64PtrInput
	// Specifies the charging mode of the redis instance.
	// The valid values are as follows:
	// + `prePaid`: indicates the yearly/monthly billing mode.
	// + `postPaid`: indicates the pay-per-use billing mode.
	//   Default value is `postPaid`.
	//   Changing this creates a new instance.
	ChargingMode pulumi.StringPtrInput
	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description pulumi.StringPtrInput
	// Domain name of the instance. Usually, we use domain name and port to connect to the DCS instances.
	DomainName pulumi.StringPtrInput
	// Specifies a cache engine. Options: *Redis* and *Memcached*.
	// Changing this creates a new instance.
	Engine pulumi.StringPtrInput
	// Specifies the version of a cache engine.
	// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
	// Changing this creates a new instance.
	EngineVersion pulumi.StringPtrInput
	// The enterprise project id of the dcs instance.
	// Changing this creates a new instance.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: Deprecated, this is a non-public attribute.
	EnterpriseProjectName pulumi.StringPtrInput
	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the *flavor* as follows:
	// + It can be obtained through this data source `Dcs.getFlavors`.
	// + Query some flavors
	//   in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
	// + Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
	Flavor pulumi.StringPtrInput
	// Deprecated: Deprecated, please us `engine_version` instead.
	InternalVersion pulumi.StringPtrInput
	// Deprecated: Deprecated, please us `private_ip` instead.
	Ip pulumi.StringPtrInput
	// Time at which the maintenance time window starts.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `02:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
	//   In this case, the system automatically allocates the default start time 02:00:00.
	MaintainBegin pulumi.StringPtrInput
	// Time at which the maintenance time window ends.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `06:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + The end time is four hours later than the start time.
	//   For example, if the start time is 22:00:00, the end time is 02:00:00.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
	//   In this case, the system automatically allocates the default end time 06:00:00.
	MaintainEnd pulumi.StringPtrInput
	// Total memory size. Unit: MB.
	MaxMemory pulumi.IntPtrInput
	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// The ID of the order that created the instance.
	OrderId pulumi.StringPtrInput
	// Specifies the password of a DCS instance.
	// Changing this creates a new instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// + Must be a string of 8 to 32 bits in length.
	// + Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
	//   Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
	// + The new password cannot be the same as the old password.
	//   Redis instance defaults to 6379. Memcached instance does not use this argument.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the instance.
	// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
	// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	Period pulumi.IntPtrInput
	// Interval at which backup is performed. Default value is `weekly`.
	// Currently, only weekly backup is supported.
	//
	// Deprecated: Please use `backup_policy` instead
	PeriodType pulumi.StringPtrInput
	// Specifies the charging period unit of the instance.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	PeriodUnit pulumi.StringPtrInput
	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	Port pulumi.IntPtrInput
	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIp pulumi.StringPtrInput
	// Deprecated: Deprecated, please use `flavor` instead
	ProductId pulumi.StringPtrInput
	// Specifies the region in which to create the DCS instance resource.
	// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
	Region pulumi.StringPtrInput
	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
	RenameCommands pulumi.StringMapInput
	// Retention time. Unit: day, the value ranges from 1 to 7.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	SaveDays pulumi.IntPtrInput
	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupId pulumi.StringPtrInput
	// The name of security group which the instance belongs to.
	SecurityGroupName pulumi.StringPtrInput
	// Cache instance status. The valid values are as follows:
	// + `RUNNING`: The instance is running properly.
	//   Only instances in the Running state can provide in-memory cache service.
	// + `ERROR`: The instance is not running properly.
	// + `RESTARTING`: The instance is being restarted.
	// + `FROZEN`: The instance has been frozen due to low balance.
	//   You can unfreeze the instance by recharging your account in My Order.
	// + `EXTENDING`: The instance is being scaled up.
	// + `RESTORING`: The instance data is being restored.
	// + `FLUSHING`: The DCS instance is being cleared.
	Status pulumi.StringPtrInput
	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetId pulumi.StringPtrInput
	// The name of subnet which the instance belongs to.
	SubnetName pulumi.StringPtrInput
	// The key/value pairs to associate with the dcs instance.
	Tags pulumi.StringMapInput
	// Size of the used memory. Unit: MB.
	UsedMemory pulumi.IntPtrInput
	// Deprecated: Deprecated
	UserId pulumi.StringPtrInput
	// Deprecated: Deprecated
	UserName pulumi.StringPtrInput
	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VpcId pulumi.StringPtrInput
	// The name of VPC which the instance belongs to.
	VpcName pulumi.StringPtrInput
	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	WhitelistEnable pulumi.BoolPtrInput
	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelists InstanceWhitelistArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Specifies the username used for accessing a DCS Memcached instance.
	// If the cache engine is *Redis*, you do not need to set this parameter.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser *string `pulumi:"accessUser"`
	AutoPay    *string `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled.
	// Valid values are `true` and `false`, defaults to `false`.
	// Changing this creates a new instance.
	AutoRenew *string `pulumi:"autoRenew"`
	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Deprecated: Deprecated, please use `availability_zones` instead
	AvailableZones []string `pulumi:"availableZones"`
	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupAts []int `pulumi:"backupAts"`
	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy *InstanceBackupPolicy `pulumi:"backupPolicy"`
	// Backup type. Default value is `auto`. The valid values are as follows:
	// + `auto`: automatic backup.
	// + `manual`: manual backup.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupType *string `pulumi:"backupType"`
	// Time at which backup starts.
	// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BeginAt *string `pulumi:"beginAt"`
	// Specifies the cache capacity. Unit: GB.
	// + **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
	//   `4`, `8`, `16`, `32` and `64`.
	//   Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
	//   `1024`.
	// + **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	//   Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
	// + **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	Capacity float64 `pulumi:"capacity"`
	// Specifies the charging mode of the redis instance.
	// The valid values are as follows:
	// + `prePaid`: indicates the yearly/monthly billing mode.
	// + `postPaid`: indicates the pay-per-use billing mode.
	//   Default value is `postPaid`.
	//   Changing this creates a new instance.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description *string `pulumi:"description"`
	// Specifies a cache engine. Options: *Redis* and *Memcached*.
	// Changing this creates a new instance.
	Engine string `pulumi:"engine"`
	// Specifies the version of a cache engine.
	// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
	// Changing this creates a new instance.
	EngineVersion *string `pulumi:"engineVersion"`
	// The enterprise project id of the dcs instance.
	// Changing this creates a new instance.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: Deprecated, this is a non-public attribute.
	EnterpriseProjectName *string `pulumi:"enterpriseProjectName"`
	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the *flavor* as follows:
	// + It can be obtained through this data source `Dcs.getFlavors`.
	// + Query some flavors
	//   in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
	// + Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
	Flavor *string `pulumi:"flavor"`
	// Time at which the maintenance time window starts.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `02:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
	//   In this case, the system automatically allocates the default start time 02:00:00.
	MaintainBegin *string `pulumi:"maintainBegin"`
	// Time at which the maintenance time window ends.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `06:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + The end time is four hours later than the start time.
	//   For example, if the start time is 22:00:00, the end time is 02:00:00.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
	//   In this case, the system automatically allocates the default end time 06:00:00.
	MaintainEnd *string `pulumi:"maintainEnd"`
	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the password of a DCS instance.
	// Changing this creates a new instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// + Must be a string of 8 to 32 bits in length.
	// + Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
	//   Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
	// + The new password cannot be the same as the old password.
	//   Redis instance defaults to 6379. Memcached instance does not use this argument.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the instance.
	// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
	// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	Period *int `pulumi:"period"`
	// Interval at which backup is performed. Default value is `weekly`.
	// Currently, only weekly backup is supported.
	//
	// Deprecated: Please use `backup_policy` instead
	PeriodType *string `pulumi:"periodType"`
	// Specifies the charging period unit of the instance.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	Port *int `pulumi:"port"`
	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIp *string `pulumi:"privateIp"`
	// Deprecated: Deprecated, please use `flavor` instead
	ProductId *string `pulumi:"productId"`
	// Specifies the region in which to create the DCS instance resource.
	// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
	Region *string `pulumi:"region"`
	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
	RenameCommands map[string]string `pulumi:"renameCommands"`
	// Retention time. Unit: day, the value ranges from 1 to 7.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	SaveDays *int `pulumi:"saveDays"`
	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetId string `pulumi:"subnetId"`
	// The key/value pairs to associate with the dcs instance.
	Tags map[string]string `pulumi:"tags"`
	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VpcId string `pulumi:"vpcId"`
	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	WhitelistEnable *bool `pulumi:"whitelistEnable"`
	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelists []InstanceWhitelist `pulumi:"whitelists"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Specifies the username used for accessing a DCS Memcached instance.
	// If the cache engine is *Redis*, you do not need to set this parameter.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser pulumi.StringPtrInput
	AutoPay    pulumi.StringPtrInput
	// Specifies whether auto renew is enabled.
	// Valid values are `true` and `false`, defaults to `false`.
	// Changing this creates a new instance.
	AutoRenew pulumi.StringPtrInput
	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones pulumi.StringArrayInput
	// Deprecated: Deprecated, please use `availability_zones` instead
	AvailableZones pulumi.StringArrayInput
	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupAts pulumi.IntArrayInput
	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy InstanceBackupPolicyPtrInput
	// Backup type. Default value is `auto`. The valid values are as follows:
	// + `auto`: automatic backup.
	// + `manual`: manual backup.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BackupType pulumi.StringPtrInput
	// Time at which backup starts.
	// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	BeginAt pulumi.StringPtrInput
	// Specifies the cache capacity. Unit: GB.
	// + **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
	//   `4`, `8`, `16`, `32` and `64`.
	//   Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
	//   `1024`.
	// + **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	//   Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
	// + **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
	Capacity pulumi.Float64Input
	// Specifies the charging mode of the redis instance.
	// The valid values are as follows:
	// + `prePaid`: indicates the yearly/monthly billing mode.
	// + `postPaid`: indicates the pay-per-use billing mode.
	//   Default value is `postPaid`.
	//   Changing this creates a new instance.
	ChargingMode pulumi.StringPtrInput
	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description pulumi.StringPtrInput
	// Specifies a cache engine. Options: *Redis* and *Memcached*.
	// Changing this creates a new instance.
	Engine pulumi.StringInput
	// Specifies the version of a cache engine.
	// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
	// Changing this creates a new instance.
	EngineVersion pulumi.StringPtrInput
	// The enterprise project id of the dcs instance.
	// Changing this creates a new instance.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: Deprecated, this is a non-public attribute.
	EnterpriseProjectName pulumi.StringPtrInput
	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the *flavor* as follows:
	// + It can be obtained through this data source `Dcs.getFlavors`.
	// + Query some flavors
	//   in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
	// + Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
	Flavor pulumi.StringPtrInput
	// Time at which the maintenance time window starts.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `02:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
	//   In this case, the system automatically allocates the default start time 02:00:00.
	MaintainBegin pulumi.StringPtrInput
	// Time at which the maintenance time window ends.
	// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
	// Default value is `06:00:00`.
	// + The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	//   time window.
	// + The end time is four hours later than the start time.
	//   For example, if the start time is 22:00:00, the end time is 02:00:00.
	// + Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// + If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
	//   In this case, the system automatically allocates the default end time 06:00:00.
	MaintainEnd pulumi.StringPtrInput
	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the password of a DCS instance.
	// Changing this creates a new instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// + Must be a string of 8 to 32 bits in length.
	// + Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
	//   Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
	// + The new password cannot be the same as the old password.
	//   Redis instance defaults to 6379. Memcached instance does not use this argument.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the instance.
	// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
	// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	Period pulumi.IntPtrInput
	// Interval at which backup is performed. Default value is `weekly`.
	// Currently, only weekly backup is supported.
	//
	// Deprecated: Please use `backup_policy` instead
	PeriodType pulumi.StringPtrInput
	// Specifies the charging period unit of the instance.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	// Changing this creates a new instance.
	PeriodUnit pulumi.StringPtrInput
	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	Port pulumi.IntPtrInput
	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIp pulumi.StringPtrInput
	// Deprecated: Deprecated, please use `flavor` instead
	ProductId pulumi.StringPtrInput
	// Specifies the region in which to create the DCS instance resource.
	// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
	Region pulumi.StringPtrInput
	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
	RenameCommands pulumi.StringMapInput
	// Retention time. Unit: day, the value ranges from 1 to 7.
	//
	// Deprecated: Deprecated, please use `backup_policy` instead
	SaveDays pulumi.IntPtrInput
	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupId pulumi.StringPtrInput
	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetId pulumi.StringInput
	// The key/value pairs to associate with the dcs instance.
	Tags pulumi.StringMapInput
	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VpcId pulumi.StringInput
	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	WhitelistEnable pulumi.BoolPtrInput
	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelists InstanceWhitelistArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Specifies the username used for accessing a DCS Memcached instance.
// If the cache engine is *Redis*, you do not need to set this parameter.
// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
// hyphens (-). Changing this creates a new instance.
func (o InstanceOutput) AccessUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AccessUser }).(pulumi.StringOutput)
}

func (o InstanceOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

// Specifies whether auto renew is enabled.
// Valid values are `true` and `false`, defaults to `false`.
// Changing this creates a new instance.
func (o InstanceOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The code of the AZ where the cache node resides.
// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
// Changing this creates a new instance.
func (o InstanceOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Deprecated: Deprecated, please use `availability_zones` instead
func (o InstanceOutput) AvailableZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.AvailableZones }).(pulumi.StringArrayOutput)
}

// Day in a week on which backup starts, the value ranges from 1 to 7.
// Where: 1 indicates Monday; 7 indicates Sunday.
//
// Deprecated: Deprecated, please use `backup_policy` instead
func (o InstanceOutput) BackupAts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntArrayOutput { return v.BackupAts }).(pulumi.IntArrayOutput)
}

// Specifies the backup configuration to be used with the instance.
// The structure is described below.
func (o InstanceOutput) BackupPolicy() InstanceBackupPolicyPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceBackupPolicyPtrOutput { return v.BackupPolicy }).(InstanceBackupPolicyPtrOutput)
}

// Backup type. Default value is `auto`. The valid values are as follows:
// + `auto`: automatic backup.
// + `manual`: manual backup.
//
// Deprecated: Deprecated, please use `backup_policy` instead
func (o InstanceOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Time at which backup starts.
// Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
//
// Deprecated: Deprecated, please use `backup_policy` instead
func (o InstanceOutput) BeginAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.BeginAt }).(pulumi.StringPtrOutput)
}

// Specifies the cache capacity. Unit: GB.
//   - **Redis4.0 and Redis5.0**: Stand-alone and active/standby type instance values: `0.125`, `0.25`, `0.5`, `1`, `2`,
//     `4`, `8`, `16`, `32` and `64`.
//     Cluster instance specifications support `24`, `32`, `48`, `64`, `96`, `128`, `192`, `256`, `384`, `512`, `768` and
//     `1024`.
//   - **Redis3.0**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
//     Proxy cluster instance specifications support `64`, `128`, `256`, `512`, and `1024`.
//   - **Memcached**: Stand-alone and active/standby type instance values: `2`, `4`, `8`, `16`, `32` and `64`.
func (o InstanceOutput) Capacity() pulumi.Float64Output {
	return o.ApplyT(func(v *Instance) pulumi.Float64Output { return v.Capacity }).(pulumi.Float64Output)
}

// Specifies the charging mode of the redis instance.
// The valid values are as follows:
//   - `prePaid`: indicates the yearly/monthly billing mode.
//   - `postPaid`: indicates the pay-per-use billing mode.
//     Default value is `postPaid`.
//     Changing this creates a new instance.
func (o InstanceOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the description of an instance.
// It is a string that contains a maximum of 1024 characters.
func (o InstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Domain name of the instance. Usually, we use domain name and port to connect to the DCS instances.
func (o InstanceOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies a cache engine. Options: *Redis* and *Memcached*.
// Changing this creates a new instance.
func (o InstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Specifies the version of a cache engine.
// It is mandatory when the engine is *Redis*, the value can be 3.0, 4.0, or 5.0.
// Changing this creates a new instance.
func (o InstanceOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// The enterprise project id of the dcs instance.
// Changing this creates a new instance.
func (o InstanceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Deprecated: Deprecated, this is a non-public attribute.
func (o InstanceOutput) EnterpriseProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EnterpriseProjectName }).(pulumi.StringOutput)
}

// The flavor of the cache instance, which including the total memory, available memory,
// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
// It also includes the modes of Redis instances. You can query the *flavor* as follows:
//   - It can be obtained through this data source `Dcs.getFlavors`.
//   - Query some flavors
//     in [DCS Instance Specifications](https://support.huaweicloud.com/intl/en-us/productdesc-dcs/dcs-pd-200713003.html)
//   - Log in to the DCS console, click *Buy DCS Instance*, and find the corresponding instance specification.
func (o InstanceOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// Deprecated: Deprecated, please us `engine_version` instead.
func (o InstanceOutput) InternalVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InternalVersion }).(pulumi.StringOutput)
}

// Deprecated: Deprecated, please us `private_ip` instead.
func (o InstanceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Time at which the maintenance time window starts.
// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
// Default value is `02:00:00`.
//   - The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
//     time window.
//   - Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
//   - If parameter maintainBegin is left blank, parameter maintainEnd is also blank.
//     In this case, the system automatically allocates the default start time 02:00:00.
func (o InstanceOutput) MaintainBegin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.MaintainBegin }).(pulumi.StringPtrOutput)
}

// Time at which the maintenance time window ends.
// The valid values are `22:00:00`, `02:00:00`, `06:00:00`, `10:00:00`, `14:00:00` and `18:00:00`.
// Default value is `06:00:00`.
//   - The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
//     time window.
//   - The end time is four hours later than the start time.
//     For example, if the start time is 22:00:00, the end time is 02:00:00.
//   - Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
//   - If parameter maintainEnd is left blank, parameter maintainBegin is also blank.
//     In this case, the system automatically allocates the default end time 06:00:00.
func (o InstanceOutput) MaintainEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.MaintainEnd }).(pulumi.StringPtrOutput)
}

// Total memory size. Unit: MB.
func (o InstanceOutput) MaxMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MaxMemory }).(pulumi.IntOutput)
}

// Specifies the name of an instance.
// The name must be 4 to 64 characters and start with a letter.
// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the order that created the instance.
func (o InstanceOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OrderId }).(pulumi.StringOutput)
}

// Specifies the password of a DCS instance.
// Changing this creates a new instance.
// The password of a DCS instance must meet the following complexity requirements:
//   - Must be a string of 8 to 32 bits in length.
//   - Must contain three combinations of the following four characters: Lower case letters, uppercase letter, digital,
//     Special characters include (`~!@#$^&*()-_=+\\|{}:,<.>/?).
//   - The new password cannot be the same as the old password.
//     Redis instance defaults to 6379. Memcached instance does not use this argument.
func (o InstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the instance.
// If `periodUnit` is set to *month*, the value ranges from 1 to 9.
// If `periodUnit` is set to *year*, the value ranges from 1 to 3.
// This parameter is mandatory if `chargingMode` is set to *prePaid*.
// Changing this creates a new instance.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Interval at which backup is performed. Default value is `weekly`.
// Currently, only weekly backup is supported.
//
// Deprecated: Please use `backup_policy` instead
func (o InstanceOutput) PeriodType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.PeriodType }).(pulumi.StringPtrOutput)
}

// Specifies the charging period unit of the instance.
// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
// Changing this creates a new instance.
func (o InstanceOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
func (o InstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The IP address of the DCS instance,
// which can only be the currently available IP address the selected subnet.
// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
// If omitted, the system will automatically allocate an available IP address to the Redis instance.
// Changing this creates a new instance resource.
func (o InstanceOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Deprecated: Deprecated, please use `flavor` instead
func (o InstanceOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the DCS instance resource.
// If omitted, the provider-level region will be used. Changing this creates a new DCS instance resource.
func (o InstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Critical command renaming, which is supported only by Redis 4.0 and
// Redis 5.0 instances but not by Redis 3.0 instance.
// The valid commands that can be renamed are: *command*, *keys*, *flushdb*, *flushall* and *hgetall*.
func (o InstanceOutput) RenameCommands() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.RenameCommands }).(pulumi.StringMapOutput)
}

// Retention time. Unit: day, the value ranges from 1 to 7.
//
// Deprecated: Deprecated, please use `backup_policy` instead
func (o InstanceOutput) SaveDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.SaveDays }).(pulumi.IntPtrOutput)
}

// The ID of the security group which the instance belongs to.
// This parameter is mandatory for Memcached and Redis 3.0 version.
func (o InstanceOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

// The name of security group which the instance belongs to.
func (o InstanceOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SecurityGroupName }).(pulumi.StringOutput)
}

// Cache instance status. The valid values are as follows:
//   - `RUNNING`: The instance is running properly.
//     Only instances in the Running state can provide in-memory cache service.
//   - `ERROR`: The instance is not running properly.
//   - `RESTARTING`: The instance is being restarted.
//   - `FROZEN`: The instance has been frozen due to low balance.
//     You can unfreeze the instance by recharging your account in My Order.
//   - `EXTENDING`: The instance is being scaled up.
//   - `RESTORING`: The instance data is being restored.
//   - `FLUSHING`: The DCS instance is being cleared.
func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of subnet which the instance belongs to.
// Changing this creates a new instance resource.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The name of subnet which the instance belongs to.
func (o InstanceOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetName }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the dcs instance.
func (o InstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Size of the used memory. Unit: MB.
func (o InstanceOutput) UsedMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.UsedMemory }).(pulumi.IntOutput)
}

// Deprecated: Deprecated
func (o InstanceOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Deprecated: Deprecated
func (o InstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The ID of VPC which the instance belongs to.
// Changing this creates a new instance resource.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The name of VPC which the instance belongs to.
func (o InstanceOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

// Enable or disable the IP address whitelists. Defaults to true.
// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
func (o InstanceOutput) WhitelistEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.WhitelistEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the IP addresses which can access the instance.
// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
func (o InstanceOutput) Whitelists() InstanceWhitelistArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceWhitelistArrayOutput { return v.Whitelists }).(InstanceWhitelistArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}

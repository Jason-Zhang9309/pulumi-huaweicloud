// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages DLI Table resource within HuaweiCloud
//
// ## Example Usage
// ### Create a Table
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dli"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Dli"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			databaseName := cfg.RequireObject("databaseName")
//			testDatabase, err := Dli.NewDatabase(ctx, "testDatabase", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Dli.NewTable(ctx, "testTable", &Dli.TableArgs{
//				DatabaseName: testDatabase.Name,
//				DataLocation: pulumi.String("DLI"),
//				Description:  pulumi.String("SQL table_1 description"),
//				Columns: dli.TableColumnArray{
//					&dli.TableColumnArgs{
//						Name:        pulumi.String("column_1"),
//						Type:        pulumi.String("string"),
//						Description: pulumi.String("the first column"),
//					},
//					&dli.TableColumnArgs{
//						Name:        pulumi.String("column_2"),
//						Type:        pulumi.String("string"),
//						Description: pulumi.String("the second column"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DLI table can be imported by `id`. It is composed of the name of database which table belongs and the name of table,
//
// separated by a slash. For example, bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Dli/table:Table example <database_name>/<table_name>
//
// ```
type Table struct {
	pulumi.CustomResourceState

	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	BucketLocation pulumi.StringOutput `pulumi:"bucketLocation"`
	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	Columns TableColumnArrayOutput `pulumi:"columns"`
	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	DataFormat pulumi.StringOutput `pulumi:"dataFormat"`
	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// + **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
	// + **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
	//   and analysis.
	DataLocation pulumi.StringOutput `pulumi:"dataLocation"`
	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Specifies date type. `yyyy-MM-dd` is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	DateFormat pulumi.StringOutput `pulumi:"dateFormat"`
	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	Delimiter pulumi.StringOutput `pulumi:"delimiter"`
	// Specifies the description of column. Changing this parameter will
	// create a new resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies escape character. Backslashes (`\\`) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	EscapeChar pulumi.StringOutput `pulumi:"escapeChar"`
	// Specifies the name of column. Changing this parameter will create a new
	// resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies reference character. Double quotation marks (`\`)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	QuoteChar pulumi.StringOutput `pulumi:"quoteChar"`
	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	TimestampFormat pulumi.StringOutput `pulumi:"timestampFormat"`
	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	WithColumnHeader pulumi.BoolOutput `pulumi:"withColumnHeader"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataLocation == nil {
		return nil, errors.New("invalid value for required argument 'DataLocation'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("huaweicloud:Dli/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("huaweicloud:Dli/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	BucketLocation *string `pulumi:"bucketLocation"`
	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	Columns []TableColumn `pulumi:"columns"`
	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// + **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
	// + **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
	//   and analysis.
	DataLocation *string `pulumi:"dataLocation"`
	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	DatabaseName *string `pulumi:"databaseName"`
	// Specifies date type. `yyyy-MM-dd` is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	DateFormat *string `pulumi:"dateFormat"`
	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	Delimiter *string `pulumi:"delimiter"`
	// Specifies the description of column. Changing this parameter will
	// create a new resource.
	Description *string `pulumi:"description"`
	// Specifies escape character. Backslashes (`\\`) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	EscapeChar *string `pulumi:"escapeChar"`
	// Specifies the name of column. Changing this parameter will create a new
	// resource.
	Name *string `pulumi:"name"`
	// Specifies reference character. Double quotation marks (`\`)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	QuoteChar *string `pulumi:"quoteChar"`
	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	WithColumnHeader *bool `pulumi:"withColumnHeader"`
}

type TableState struct {
	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	BucketLocation pulumi.StringPtrInput
	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	Columns TableColumnArrayInput
	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	DataFormat pulumi.StringPtrInput
	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// + **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
	// + **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
	//   and analysis.
	DataLocation pulumi.StringPtrInput
	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	DatabaseName pulumi.StringPtrInput
	// Specifies date type. `yyyy-MM-dd` is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	DateFormat pulumi.StringPtrInput
	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	Delimiter pulumi.StringPtrInput
	// Specifies the description of column. Changing this parameter will
	// create a new resource.
	Description pulumi.StringPtrInput
	// Specifies escape character. Backslashes (`\\`) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	EscapeChar pulumi.StringPtrInput
	// Specifies the name of column. Changing this parameter will create a new
	// resource.
	Name pulumi.StringPtrInput
	// Specifies reference character. Double quotation marks (`\`)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	QuoteChar pulumi.StringPtrInput
	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	TimestampFormat pulumi.StringPtrInput
	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	WithColumnHeader pulumi.BoolPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	BucketLocation *string `pulumi:"bucketLocation"`
	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	Columns []TableColumn `pulumi:"columns"`
	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// + **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
	// + **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
	//   and analysis.
	DataLocation string `pulumi:"dataLocation"`
	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	DatabaseName string `pulumi:"databaseName"`
	// Specifies date type. `yyyy-MM-dd` is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	DateFormat *string `pulumi:"dateFormat"`
	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	Delimiter *string `pulumi:"delimiter"`
	// Specifies the description of column. Changing this parameter will
	// create a new resource.
	Description *string `pulumi:"description"`
	// Specifies escape character. Backslashes (`\\`) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	EscapeChar *string `pulumi:"escapeChar"`
	// Specifies the name of column. Changing this parameter will create a new
	// resource.
	Name *string `pulumi:"name"`
	// Specifies reference character. Double quotation marks (`\`)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	QuoteChar *string `pulumi:"quoteChar"`
	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	WithColumnHeader *bool `pulumi:"withColumnHeader"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	BucketLocation pulumi.StringPtrInput
	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	Columns TableColumnArrayInput
	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	DataFormat pulumi.StringPtrInput
	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// + **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
	// + **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
	//   and analysis.
	DataLocation pulumi.StringInput
	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	DatabaseName pulumi.StringInput
	// Specifies date type. `yyyy-MM-dd` is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	DateFormat pulumi.StringPtrInput
	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	Delimiter pulumi.StringPtrInput
	// Specifies the description of column. Changing this parameter will
	// create a new resource.
	Description pulumi.StringPtrInput
	// Specifies escape character. Backslashes (`\\`) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	EscapeChar pulumi.StringPtrInput
	// Specifies the name of column. Changing this parameter will create a new
	// resource.
	Name pulumi.StringPtrInput
	// Specifies reference character. Double quotation marks (`\`)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	QuoteChar pulumi.StringPtrInput
	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	TimestampFormat pulumi.StringPtrInput
	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	WithColumnHeader pulumi.BoolPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Specifies storage path of data which will be import to the OBS table.
// Changing this parameter will create a new resource.
// > If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
func (o TableOutput) BucketLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.BucketLocation }).(pulumi.StringOutput)
}

// Specifies Columns of the new table. Structure is documented below.
// Changing this parameter will create a new resource.
func (o TableOutput) Columns() TableColumnArrayOutput {
	return o.ApplyT(func(v *Table) TableColumnArrayOutput { return v.Columns }).(TableColumnArrayOutput)
}

// Specifies type of the data to be added to the OBS table.
// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
func (o TableOutput) DataFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DataFormat }).(pulumi.StringOutput)
}

// Specifies data storage location. Changing this parameter will create
// a newresource. The options are as follows:
//   - **DLI**: Data stored in DLI tables is applicable to delay-sensitive services, such as interactive queries.
//   - **OBS**: Data stored in OBS tables is applicable to delay-insensitive services, such as historical data statistics
//     and analysis.
func (o TableOutput) DataLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DataLocation }).(pulumi.StringOutput)
}

// Specifies the database name which the table belongs to.
// Changing this parameter will create a new resource.
func (o TableOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Specifies date type. `yyyy-MM-dd` is used by default. Only
// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
func (o TableOutput) DateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DateFormat }).(pulumi.StringOutput)
}

// Specifies data delimiter. Only data in CSV files has this
// attribute. Changing this parameter will create a new resource.
func (o TableOutput) Delimiter() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Delimiter }).(pulumi.StringOutput)
}

// Specifies the description of column. Changing this parameter will
// create a new resource.
func (o TableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies escape character. Backslashes (`\\`) are used by
// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
func (o TableOutput) EscapeChar() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.EscapeChar }).(pulumi.StringOutput)
}

// Specifies the name of column. Changing this parameter will create a new
// resource.
func (o TableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies reference character. Double quotation marks (`\`)
// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
func (o TableOutput) QuoteChar() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.QuoteChar }).(pulumi.StringOutput)
}

// Specifies the region in which to create the dli table resource. If omitted,
// the provider-level region will be used. Changing this parameter will create a new resource.
func (o TableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies timestamp type. `yyyy-MM-dd HH:mm:ss` is used by default.
// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
func (o TableOutput) TimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TimestampFormat }).(pulumi.StringOutput)
}

// Specifies whether the table header is included in the data file.
// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
func (o TableOutput) WithColumnHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolOutput { return v.WithColumnHeader }).(pulumi.BoolOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the usage permissions of those resources: `Dli.Queue`, `Dli.Database`,
//
//	`Dli.Table`, `Dli.Package`, `Dli.FlinksqlJob`, `Dli.FlinkjarJob`
//	 within HuaweiCloud DLI.
//
// ## Example Usage
// ### Grant a permission of queue
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dli"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			userName := cfg.RequireObject("userName")
//			queueName := cfg.RequireObject("queueName")
//			_, err := Dli.NewPermission(ctx, "test", &Dli.PermissionArgs{
//				UserName: pulumi.Any(userName),
//				Object:   pulumi.String(fmt.Sprintf("queues.%v", queueName)),
//				Privileges: pulumi.StringArray{
//					pulumi.String("SUBMIT_JOB"),
//					pulumi.String("DROP_QUEUE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Grant a permission of database
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dli"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			userName := cfg.RequireObject("userName")
//			databaseName := cfg.RequireObject("databaseName")
//			_, err := Dli.NewPermission(ctx, "test", &Dli.PermissionArgs{
//				UserName: pulumi.Any(userName),
//				Object:   pulumi.String(fmt.Sprintf("databases.%v", databaseName)),
//				Privileges: pulumi.StringArray{
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The permission can be imported by `id`, it is composed of `object` and `user_name`, separated by a slash. e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Dli/permission:Permission test databases.database_name/user_name
//
// ```
type Permission struct {
	pulumi.CustomResourceState

	// Whether this user is an administrator.
	IsAdmin pulumi.BoolOutput `pulumi:"isAdmin"`
	// Specifies which object's data usage permissions will be shared.
	// Its naming format is as follows:
	// + **queues.`queuesName`**: the usage permissions of queue.
	// + **databases.`databaseName`**: the usage permissions of data in the database.
	// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
	// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
	// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
	// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
	// + **resources.`packageName`**: the usage permissions of data in the package.
	Object pulumi.StringOutput `pulumi:"object"`
	// Specifies the usage permissions of data.
	// + **Permissions on Queue, Database and Table**,
	//   please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
	Privileges pulumi.StringArrayOutput `pulumi:"privileges"`
	// The region in which to create the DLI permission resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies name of the user who is granted with usage permission.
	// Changing this parameter will create a new resource.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("huaweicloud:Dli/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("huaweicloud:Dli/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// Whether this user is an administrator.
	IsAdmin *bool `pulumi:"isAdmin"`
	// Specifies which object's data usage permissions will be shared.
	// Its naming format is as follows:
	// + **queues.`queuesName`**: the usage permissions of queue.
	// + **databases.`databaseName`**: the usage permissions of data in the database.
	// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
	// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
	// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
	// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
	// + **resources.`packageName`**: the usage permissions of data in the package.
	Object *string `pulumi:"object"`
	// Specifies the usage permissions of data.
	// + **Permissions on Queue, Database and Table**,
	//   please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
	Privileges []string `pulumi:"privileges"`
	// The region in which to create the DLI permission resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies name of the user who is granted with usage permission.
	// Changing this parameter will create a new resource.
	UserName *string `pulumi:"userName"`
}

type PermissionState struct {
	// Whether this user is an administrator.
	IsAdmin pulumi.BoolPtrInput
	// Specifies which object's data usage permissions will be shared.
	// Its naming format is as follows:
	// + **queues.`queuesName`**: the usage permissions of queue.
	// + **databases.`databaseName`**: the usage permissions of data in the database.
	// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
	// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
	// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
	// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
	// + **resources.`packageName`**: the usage permissions of data in the package.
	Object pulumi.StringPtrInput
	// Specifies the usage permissions of data.
	// + **Permissions on Queue, Database and Table**,
	//   please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
	Privileges pulumi.StringArrayInput
	// The region in which to create the DLI permission resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies name of the user who is granted with usage permission.
	// Changing this parameter will create a new resource.
	UserName pulumi.StringPtrInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// Specifies which object's data usage permissions will be shared.
	// Its naming format is as follows:
	// + **queues.`queuesName`**: the usage permissions of queue.
	// + **databases.`databaseName`**: the usage permissions of data in the database.
	// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
	// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
	// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
	// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
	// + **resources.`packageName`**: the usage permissions of data in the package.
	Object string `pulumi:"object"`
	// Specifies the usage permissions of data.
	// + **Permissions on Queue, Database and Table**,
	//   please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
	Privileges []string `pulumi:"privileges"`
	// The region in which to create the DLI permission resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies name of the user who is granted with usage permission.
	// Changing this parameter will create a new resource.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Specifies which object's data usage permissions will be shared.
	// Its naming format is as follows:
	// + **queues.`queuesName`**: the usage permissions of queue.
	// + **databases.`databaseName`**: the usage permissions of data in the database.
	// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
	// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
	// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
	// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
	// + **resources.`packageName`**: the usage permissions of data in the package.
	Object pulumi.StringInput
	// Specifies the usage permissions of data.
	// + **Permissions on Queue, Database and Table**,
	//   please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
	Privileges pulumi.StringArrayInput
	// The region in which to create the DLI permission resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies name of the user who is granted with usage permission.
	// Changing this parameter will create a new resource.
	UserName pulumi.StringInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// PermissionMapInput is an input type that accepts PermissionMap and PermissionMapOutput values.
// You can construct a concrete instance of `PermissionMapInput` via:
//
//	PermissionMap{ "key": PermissionArgs{...} }
type PermissionMapInput interface {
	pulumi.Input

	ToPermissionMapOutput() PermissionMapOutput
	ToPermissionMapOutputWithContext(context.Context) PermissionMapOutput
}

type PermissionMap map[string]PermissionInput

func (PermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (i PermissionMap) ToPermissionMapOutput() PermissionMapOutput {
	return i.ToPermissionMapOutputWithContext(context.Background())
}

func (i PermissionMap) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionMapOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Whether this user is an administrator.
func (o PermissionOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v *Permission) pulumi.BoolOutput { return v.IsAdmin }).(pulumi.BoolOutput)
}

// Specifies which object's data usage permissions will be shared.
// Its naming format is as follows:
// + **queues.`queuesName`**: the usage permissions of queue.
// + **databases.`databaseName`**: the usage permissions of data in the database.
// + **databases.`databaseName`.tables.`tableName`**: the usage permissions of data in the table.
// + **databases.`databaseName`.tables.`tableName`.columns.`columnName`**: the usage permissions of data in the column.
// + **jobs.flink.`flinkJobId`**: the usage permissions of data in the flink job.
// + **groups.`packageGroupName`**: the usage permissions of data in the package group.
// + **resources.`packageName`**: the usage permissions of data in the package.
func (o PermissionOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// Specifies the usage permissions of data.
//   - **Permissions on Queue, Database and Table**,
//     please see [Permissions Management](https://support.huaweicloud.com/intl/en-us/productdesc-dli/dli_07_0006.html)
func (o PermissionOutput) Privileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringArrayOutput { return v.Privileges }).(pulumi.StringArrayOutput)
}

// The region in which to create the DLI permission resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o PermissionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies name of the user who is granted with usage permission.
// Changing this parameter will create a new resource.
func (o PermissionOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].([]*Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

type PermissionMapOutput struct{ *pulumi.OutputState }

func (PermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (o PermissionMapOutput) ToPermissionMapOutput() PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) MapIndex(k pulumi.StringInput) PermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].(map[string]*Permission)[vs[1].(string)]
	}).(PermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionArrayInput)(nil)).Elem(), PermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionMapInput)(nil)).Elem(), PermissionMap{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionMapOutput{})
}

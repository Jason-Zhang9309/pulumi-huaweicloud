// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a flink sql job resource within HuaweiCloud DLI.
//
// ## Example Usage
// ### Create a flink job
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dli"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sql := cfg.RequireObject("sql")
//			jobName := cfg.RequireObject("jobName")
//			_, err := Dli.NewFlinksqlJob(ctx, "test", &Dli.FlinksqlJobArgs{
//				Type: pulumi.String("flink_sql_job"),
//				Sql:  pulumi.Any(sql),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Clusters can be imported by their `id`. For example,
//
// ```sh
//
//	$ pulumi import huaweicloud:Dli/flinksqlJob:FlinksqlJob test 12345
//
// ```
type FlinksqlJob struct {
	pulumi.CustomResourceState

	// Specifies whether to enable the automatic job snapshot function.
	// + **true**: indicates to enable the automatic job snapshot function.
	// + **false**: indicates to disable the automatic job snapshot function.
	CheckpointEnabled pulumi.BoolPtrOutput `pulumi:"checkpointEnabled"`
	// Specifies snapshot interval. The unit is second.
	// The default value is 10.
	CheckpointInterval pulumi.IntPtrOutput `pulumi:"checkpointInterval"`
	// Specifies snapshot mode. There are two options:
	// + **exactly_once**: indicates that data is processed only once.
	// + **at_least_once**: indicates that data is processed at least once.
	CheckpointMode pulumi.StringPtrOutput `pulumi:"checkpointMode"`
	// Specifies number of CUs selected for a job. The default value is 2.
	CuNumber pulumi.IntPtrOutput `pulumi:"cuNumber"`
	// Specifies job description. Length range: 1 to 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies dirty data policy of a job.
	// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
	// + **1**: Trigger a job exception
	// + **0**: Ignore
	DirtyDataStrategy pulumi.StringPtrOutput `pulumi:"dirtyDataStrategy"`
	// Specifies edge computing group IDs.
	EdgeGroupIds pulumi.StringArrayOutput `pulumi:"edgeGroupIds"`
	// Specifies retention time of the idle state. The unit is hour.
	// The default value is 1.
	IdleStateRetention pulumi.IntPtrOutput `pulumi:"idleStateRetention"`
	// Specifies whether to enable the function of uploading job logs to
	// users' OBS buckets. The default value is false.
	LogEnabled pulumi.BoolPtrOutput `pulumi:"logEnabled"`
	// Specifies number of CUs in the JobManager selected for a job.
	// The default value is 1.
	ManagerCuNumber pulumi.IntPtrOutput `pulumi:"managerCuNumber"`
	// Specifies the name of the job. Length range: 1 to 57 characters.
	// which may consist of letters, digits, underscores (_) and hyphens (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies OBS path. OBS path where users are authorized to save the
	// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
	// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
	ObsBucket pulumi.StringPtrOutput `pulumi:"obsBucket"`
	// Specifies number of parallel for a job. The default value is 1.
	ParallelNumber pulumi.IntPtrOutput `pulumi:"parallelNumber"`
	// Specifies name of a queue.
	QueueName pulumi.StringOutput `pulumi:"queueName"`
	// The region in which to create the DLI flink job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether to enable the function of automatically
	// restarting a job upon job exceptions. The default value is false.
	RestartWhenException pulumi.BoolPtrOutput `pulumi:"restartWhenException"`
	// Specifies whether the abnormal restart is recovered from the
	// checkpoint.
	ResumeCheckpoint pulumi.BoolPtrOutput `pulumi:"resumeCheckpoint"`
	// Specifies maximum number of retry times upon exceptions. The unit is
	// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
	// unlimited.
	ResumeMaxNum pulumi.IntPtrOutput `pulumi:"resumeMaxNum"`
	// Specifies job running mode. The options are as follows:
	RunMode pulumi.StringPtrOutput `pulumi:"runMode"`
	// Specifies customizes optimization parameters when a Flink job is
	// running.
	RuntimeConfig pulumi.StringMapOutput `pulumi:"runtimeConfig"`
	// Specifies SMN topic. If a job fails, the system will send a message to
	// users subscribed to the SMN topic.
	SmnTopic pulumi.StringPtrOutput `pulumi:"smnTopic"`
	// Specifies stream SQL statement, which includes at least the following
	// three parts: source, query, and sink. Length range: 1024x1024 characters.
	Sql pulumi.StringPtrOutput `pulumi:"sql"`
	// The Job status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies number of CUs for each Task Manager. The default value is 1.
	TmCus pulumi.IntPtrOutput `pulumi:"tmCus"`
	// Specifies number of slots in each Task Manager.
	// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
	TmSlotNum pulumi.IntOutput `pulumi:"tmSlotNum"`
	// Specifies the type of the job. The valid values are `flinkSqlJob`,
	// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
	// Changing this parameter will create a new resource.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Specifies name of the resource package that has been uploaded to the
	// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
	UdfJarUrl pulumi.StringOutput `pulumi:"udfJarUrl"`
}

// NewFlinksqlJob registers a new resource with the given unique name, arguments, and options.
func NewFlinksqlJob(ctx *pulumi.Context,
	name string, args *FlinksqlJobArgs, opts ...pulumi.ResourceOption) (*FlinksqlJob, error) {
	if args == nil {
		args = &FlinksqlJobArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FlinksqlJob
	err := ctx.RegisterResource("huaweicloud:Dli/flinksqlJob:FlinksqlJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlinksqlJob gets an existing FlinksqlJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlinksqlJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlinksqlJobState, opts ...pulumi.ResourceOption) (*FlinksqlJob, error) {
	var resource FlinksqlJob
	err := ctx.ReadResource("huaweicloud:Dli/flinksqlJob:FlinksqlJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlinksqlJob resources.
type flinksqlJobState struct {
	// Specifies whether to enable the automatic job snapshot function.
	// + **true**: indicates to enable the automatic job snapshot function.
	// + **false**: indicates to disable the automatic job snapshot function.
	CheckpointEnabled *bool `pulumi:"checkpointEnabled"`
	// Specifies snapshot interval. The unit is second.
	// The default value is 10.
	CheckpointInterval *int `pulumi:"checkpointInterval"`
	// Specifies snapshot mode. There are two options:
	// + **exactly_once**: indicates that data is processed only once.
	// + **at_least_once**: indicates that data is processed at least once.
	CheckpointMode *string `pulumi:"checkpointMode"`
	// Specifies number of CUs selected for a job. The default value is 2.
	CuNumber *int `pulumi:"cuNumber"`
	// Specifies job description. Length range: 1 to 512 characters.
	Description *string `pulumi:"description"`
	// Specifies dirty data policy of a job.
	// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
	// + **1**: Trigger a job exception
	// + **0**: Ignore
	DirtyDataStrategy *string `pulumi:"dirtyDataStrategy"`
	// Specifies edge computing group IDs.
	EdgeGroupIds []string `pulumi:"edgeGroupIds"`
	// Specifies retention time of the idle state. The unit is hour.
	// The default value is 1.
	IdleStateRetention *int `pulumi:"idleStateRetention"`
	// Specifies whether to enable the function of uploading job logs to
	// users' OBS buckets. The default value is false.
	LogEnabled *bool `pulumi:"logEnabled"`
	// Specifies number of CUs in the JobManager selected for a job.
	// The default value is 1.
	ManagerCuNumber *int `pulumi:"managerCuNumber"`
	// Specifies the name of the job. Length range: 1 to 57 characters.
	// which may consist of letters, digits, underscores (_) and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies OBS path. OBS path where users are authorized to save the
	// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
	// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
	ObsBucket *string `pulumi:"obsBucket"`
	// Specifies number of parallel for a job. The default value is 1.
	ParallelNumber *int `pulumi:"parallelNumber"`
	// Specifies name of a queue.
	QueueName *string `pulumi:"queueName"`
	// The region in which to create the DLI flink job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies whether to enable the function of automatically
	// restarting a job upon job exceptions. The default value is false.
	RestartWhenException *bool `pulumi:"restartWhenException"`
	// Specifies whether the abnormal restart is recovered from the
	// checkpoint.
	ResumeCheckpoint *bool `pulumi:"resumeCheckpoint"`
	// Specifies maximum number of retry times upon exceptions. The unit is
	// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
	// unlimited.
	ResumeMaxNum *int `pulumi:"resumeMaxNum"`
	// Specifies job running mode. The options are as follows:
	RunMode *string `pulumi:"runMode"`
	// Specifies customizes optimization parameters when a Flink job is
	// running.
	RuntimeConfig map[string]string `pulumi:"runtimeConfig"`
	// Specifies SMN topic. If a job fails, the system will send a message to
	// users subscribed to the SMN topic.
	SmnTopic *string `pulumi:"smnTopic"`
	// Specifies stream SQL statement, which includes at least the following
	// three parts: source, query, and sink. Length range: 1024x1024 characters.
	Sql *string `pulumi:"sql"`
	// The Job status.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies number of CUs for each Task Manager. The default value is 1.
	TmCus *int `pulumi:"tmCus"`
	// Specifies number of slots in each Task Manager.
	// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
	TmSlotNum *int `pulumi:"tmSlotNum"`
	// Specifies the type of the job. The valid values are `flinkSqlJob`,
	// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
	// Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
	// Specifies name of the resource package that has been uploaded to the
	// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
	UdfJarUrl *string `pulumi:"udfJarUrl"`
}

type FlinksqlJobState struct {
	// Specifies whether to enable the automatic job snapshot function.
	// + **true**: indicates to enable the automatic job snapshot function.
	// + **false**: indicates to disable the automatic job snapshot function.
	CheckpointEnabled pulumi.BoolPtrInput
	// Specifies snapshot interval. The unit is second.
	// The default value is 10.
	CheckpointInterval pulumi.IntPtrInput
	// Specifies snapshot mode. There are two options:
	// + **exactly_once**: indicates that data is processed only once.
	// + **at_least_once**: indicates that data is processed at least once.
	CheckpointMode pulumi.StringPtrInput
	// Specifies number of CUs selected for a job. The default value is 2.
	CuNumber pulumi.IntPtrInput
	// Specifies job description. Length range: 1 to 512 characters.
	Description pulumi.StringPtrInput
	// Specifies dirty data policy of a job.
	// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
	// + **1**: Trigger a job exception
	// + **0**: Ignore
	DirtyDataStrategy pulumi.StringPtrInput
	// Specifies edge computing group IDs.
	EdgeGroupIds pulumi.StringArrayInput
	// Specifies retention time of the idle state. The unit is hour.
	// The default value is 1.
	IdleStateRetention pulumi.IntPtrInput
	// Specifies whether to enable the function of uploading job logs to
	// users' OBS buckets. The default value is false.
	LogEnabled pulumi.BoolPtrInput
	// Specifies number of CUs in the JobManager selected for a job.
	// The default value is 1.
	ManagerCuNumber pulumi.IntPtrInput
	// Specifies the name of the job. Length range: 1 to 57 characters.
	// which may consist of letters, digits, underscores (_) and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies OBS path. OBS path where users are authorized to save the
	// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
	// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
	ObsBucket pulumi.StringPtrInput
	// Specifies number of parallel for a job. The default value is 1.
	ParallelNumber pulumi.IntPtrInput
	// Specifies name of a queue.
	QueueName pulumi.StringPtrInput
	// The region in which to create the DLI flink job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies whether to enable the function of automatically
	// restarting a job upon job exceptions. The default value is false.
	RestartWhenException pulumi.BoolPtrInput
	// Specifies whether the abnormal restart is recovered from the
	// checkpoint.
	ResumeCheckpoint pulumi.BoolPtrInput
	// Specifies maximum number of retry times upon exceptions. The unit is
	// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
	// unlimited.
	ResumeMaxNum pulumi.IntPtrInput
	// Specifies job running mode. The options are as follows:
	RunMode pulumi.StringPtrInput
	// Specifies customizes optimization parameters when a Flink job is
	// running.
	RuntimeConfig pulumi.StringMapInput
	// Specifies SMN topic. If a job fails, the system will send a message to
	// users subscribed to the SMN topic.
	SmnTopic pulumi.StringPtrInput
	// Specifies stream SQL statement, which includes at least the following
	// three parts: source, query, and sink. Length range: 1024x1024 characters.
	Sql pulumi.StringPtrInput
	// The Job status.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the resource.
	Tags pulumi.StringMapInput
	// Specifies number of CUs for each Task Manager. The default value is 1.
	TmCus pulumi.IntPtrInput
	// Specifies number of slots in each Task Manager.
	// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
	TmSlotNum pulumi.IntPtrInput
	// Specifies the type of the job. The valid values are `flinkSqlJob`,
	// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
	// Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
	// Specifies name of the resource package that has been uploaded to the
	// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
	UdfJarUrl pulumi.StringPtrInput
}

func (FlinksqlJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*flinksqlJobState)(nil)).Elem()
}

type flinksqlJobArgs struct {
	// Specifies whether to enable the automatic job snapshot function.
	// + **true**: indicates to enable the automatic job snapshot function.
	// + **false**: indicates to disable the automatic job snapshot function.
	CheckpointEnabled *bool `pulumi:"checkpointEnabled"`
	// Specifies snapshot interval. The unit is second.
	// The default value is 10.
	CheckpointInterval *int `pulumi:"checkpointInterval"`
	// Specifies snapshot mode. There are two options:
	// + **exactly_once**: indicates that data is processed only once.
	// + **at_least_once**: indicates that data is processed at least once.
	CheckpointMode *string `pulumi:"checkpointMode"`
	// Specifies number of CUs selected for a job. The default value is 2.
	CuNumber *int `pulumi:"cuNumber"`
	// Specifies job description. Length range: 1 to 512 characters.
	Description *string `pulumi:"description"`
	// Specifies dirty data policy of a job.
	// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
	// + **1**: Trigger a job exception
	// + **0**: Ignore
	DirtyDataStrategy *string `pulumi:"dirtyDataStrategy"`
	// Specifies edge computing group IDs.
	EdgeGroupIds []string `pulumi:"edgeGroupIds"`
	// Specifies retention time of the idle state. The unit is hour.
	// The default value is 1.
	IdleStateRetention *int `pulumi:"idleStateRetention"`
	// Specifies whether to enable the function of uploading job logs to
	// users' OBS buckets. The default value is false.
	LogEnabled *bool `pulumi:"logEnabled"`
	// Specifies number of CUs in the JobManager selected for a job.
	// The default value is 1.
	ManagerCuNumber *int `pulumi:"managerCuNumber"`
	// Specifies the name of the job. Length range: 1 to 57 characters.
	// which may consist of letters, digits, underscores (_) and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies OBS path. OBS path where users are authorized to save the
	// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
	// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
	ObsBucket *string `pulumi:"obsBucket"`
	// Specifies number of parallel for a job. The default value is 1.
	ParallelNumber *int `pulumi:"parallelNumber"`
	// Specifies name of a queue.
	QueueName *string `pulumi:"queueName"`
	// The region in which to create the DLI flink job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies whether to enable the function of automatically
	// restarting a job upon job exceptions. The default value is false.
	RestartWhenException *bool `pulumi:"restartWhenException"`
	// Specifies whether the abnormal restart is recovered from the
	// checkpoint.
	ResumeCheckpoint *bool `pulumi:"resumeCheckpoint"`
	// Specifies maximum number of retry times upon exceptions. The unit is
	// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
	// unlimited.
	ResumeMaxNum *int `pulumi:"resumeMaxNum"`
	// Specifies job running mode. The options are as follows:
	RunMode *string `pulumi:"runMode"`
	// Specifies customizes optimization parameters when a Flink job is
	// running.
	RuntimeConfig map[string]string `pulumi:"runtimeConfig"`
	// Specifies SMN topic. If a job fails, the system will send a message to
	// users subscribed to the SMN topic.
	SmnTopic *string `pulumi:"smnTopic"`
	// Specifies stream SQL statement, which includes at least the following
	// three parts: source, query, and sink. Length range: 1024x1024 characters.
	Sql *string `pulumi:"sql"`
	// Specifies the key/value pairs to associate with the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies number of CUs for each Task Manager. The default value is 1.
	TmCus *int `pulumi:"tmCus"`
	// Specifies number of slots in each Task Manager.
	// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
	TmSlotNum *int `pulumi:"tmSlotNum"`
	// Specifies the type of the job. The valid values are `flinkSqlJob`,
	// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
	// Changing this parameter will create a new resource.
	Type *string `pulumi:"type"`
	// Specifies name of the resource package that has been uploaded to the
	// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
	UdfJarUrl *string `pulumi:"udfJarUrl"`
}

// The set of arguments for constructing a FlinksqlJob resource.
type FlinksqlJobArgs struct {
	// Specifies whether to enable the automatic job snapshot function.
	// + **true**: indicates to enable the automatic job snapshot function.
	// + **false**: indicates to disable the automatic job snapshot function.
	CheckpointEnabled pulumi.BoolPtrInput
	// Specifies snapshot interval. The unit is second.
	// The default value is 10.
	CheckpointInterval pulumi.IntPtrInput
	// Specifies snapshot mode. There are two options:
	// + **exactly_once**: indicates that data is processed only once.
	// + **at_least_once**: indicates that data is processed at least once.
	CheckpointMode pulumi.StringPtrInput
	// Specifies number of CUs selected for a job. The default value is 2.
	CuNumber pulumi.IntPtrInput
	// Specifies job description. Length range: 1 to 512 characters.
	Description pulumi.StringPtrInput
	// Specifies dirty data policy of a job.
	// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
	// + **1**: Trigger a job exception
	// + **0**: Ignore
	DirtyDataStrategy pulumi.StringPtrInput
	// Specifies edge computing group IDs.
	EdgeGroupIds pulumi.StringArrayInput
	// Specifies retention time of the idle state. The unit is hour.
	// The default value is 1.
	IdleStateRetention pulumi.IntPtrInput
	// Specifies whether to enable the function of uploading job logs to
	// users' OBS buckets. The default value is false.
	LogEnabled pulumi.BoolPtrInput
	// Specifies number of CUs in the JobManager selected for a job.
	// The default value is 1.
	ManagerCuNumber pulumi.IntPtrInput
	// Specifies the name of the job. Length range: 1 to 57 characters.
	// which may consist of letters, digits, underscores (_) and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies OBS path. OBS path where users are authorized to save the
	// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
	// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
	ObsBucket pulumi.StringPtrInput
	// Specifies number of parallel for a job. The default value is 1.
	ParallelNumber pulumi.IntPtrInput
	// Specifies name of a queue.
	QueueName pulumi.StringPtrInput
	// The region in which to create the DLI flink job resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies whether to enable the function of automatically
	// restarting a job upon job exceptions. The default value is false.
	RestartWhenException pulumi.BoolPtrInput
	// Specifies whether the abnormal restart is recovered from the
	// checkpoint.
	ResumeCheckpoint pulumi.BoolPtrInput
	// Specifies maximum number of retry times upon exceptions. The unit is
	// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
	// unlimited.
	ResumeMaxNum pulumi.IntPtrInput
	// Specifies job running mode. The options are as follows:
	RunMode pulumi.StringPtrInput
	// Specifies customizes optimization parameters when a Flink job is
	// running.
	RuntimeConfig pulumi.StringMapInput
	// Specifies SMN topic. If a job fails, the system will send a message to
	// users subscribed to the SMN topic.
	SmnTopic pulumi.StringPtrInput
	// Specifies stream SQL statement, which includes at least the following
	// three parts: source, query, and sink. Length range: 1024x1024 characters.
	Sql pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the resource.
	Tags pulumi.StringMapInput
	// Specifies number of CUs for each Task Manager. The default value is 1.
	TmCus pulumi.IntPtrInput
	// Specifies number of slots in each Task Manager.
	// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
	TmSlotNum pulumi.IntPtrInput
	// Specifies the type of the job. The valid values are `flinkSqlJob`,
	// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
	// Changing this parameter will create a new resource.
	Type pulumi.StringPtrInput
	// Specifies name of the resource package that has been uploaded to the
	// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
	UdfJarUrl pulumi.StringPtrInput
}

func (FlinksqlJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flinksqlJobArgs)(nil)).Elem()
}

type FlinksqlJobInput interface {
	pulumi.Input

	ToFlinksqlJobOutput() FlinksqlJobOutput
	ToFlinksqlJobOutputWithContext(ctx context.Context) FlinksqlJobOutput
}

func (*FlinksqlJob) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinksqlJob)(nil)).Elem()
}

func (i *FlinksqlJob) ToFlinksqlJobOutput() FlinksqlJobOutput {
	return i.ToFlinksqlJobOutputWithContext(context.Background())
}

func (i *FlinksqlJob) ToFlinksqlJobOutputWithContext(ctx context.Context) FlinksqlJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinksqlJobOutput)
}

// FlinksqlJobArrayInput is an input type that accepts FlinksqlJobArray and FlinksqlJobArrayOutput values.
// You can construct a concrete instance of `FlinksqlJobArrayInput` via:
//
//	FlinksqlJobArray{ FlinksqlJobArgs{...} }
type FlinksqlJobArrayInput interface {
	pulumi.Input

	ToFlinksqlJobArrayOutput() FlinksqlJobArrayOutput
	ToFlinksqlJobArrayOutputWithContext(context.Context) FlinksqlJobArrayOutput
}

type FlinksqlJobArray []FlinksqlJobInput

func (FlinksqlJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlinksqlJob)(nil)).Elem()
}

func (i FlinksqlJobArray) ToFlinksqlJobArrayOutput() FlinksqlJobArrayOutput {
	return i.ToFlinksqlJobArrayOutputWithContext(context.Background())
}

func (i FlinksqlJobArray) ToFlinksqlJobArrayOutputWithContext(ctx context.Context) FlinksqlJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinksqlJobArrayOutput)
}

// FlinksqlJobMapInput is an input type that accepts FlinksqlJobMap and FlinksqlJobMapOutput values.
// You can construct a concrete instance of `FlinksqlJobMapInput` via:
//
//	FlinksqlJobMap{ "key": FlinksqlJobArgs{...} }
type FlinksqlJobMapInput interface {
	pulumi.Input

	ToFlinksqlJobMapOutput() FlinksqlJobMapOutput
	ToFlinksqlJobMapOutputWithContext(context.Context) FlinksqlJobMapOutput
}

type FlinksqlJobMap map[string]FlinksqlJobInput

func (FlinksqlJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlinksqlJob)(nil)).Elem()
}

func (i FlinksqlJobMap) ToFlinksqlJobMapOutput() FlinksqlJobMapOutput {
	return i.ToFlinksqlJobMapOutputWithContext(context.Background())
}

func (i FlinksqlJobMap) ToFlinksqlJobMapOutputWithContext(ctx context.Context) FlinksqlJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinksqlJobMapOutput)
}

type FlinksqlJobOutput struct{ *pulumi.OutputState }

func (FlinksqlJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinksqlJob)(nil)).Elem()
}

func (o FlinksqlJobOutput) ToFlinksqlJobOutput() FlinksqlJobOutput {
	return o
}

func (o FlinksqlJobOutput) ToFlinksqlJobOutputWithContext(ctx context.Context) FlinksqlJobOutput {
	return o
}

// Specifies whether to enable the automatic job snapshot function.
// + **true**: indicates to enable the automatic job snapshot function.
// + **false**: indicates to disable the automatic job snapshot function.
func (o FlinksqlJobOutput) CheckpointEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.BoolPtrOutput { return v.CheckpointEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies snapshot interval. The unit is second.
// The default value is 10.
func (o FlinksqlJobOutput) CheckpointInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.CheckpointInterval }).(pulumi.IntPtrOutput)
}

// Specifies snapshot mode. There are two options:
// + **exactly_once**: indicates that data is processed only once.
// + **at_least_once**: indicates that data is processed at least once.
func (o FlinksqlJobOutput) CheckpointMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.CheckpointMode }).(pulumi.StringPtrOutput)
}

// Specifies number of CUs selected for a job. The default value is 2.
func (o FlinksqlJobOutput) CuNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.CuNumber }).(pulumi.IntPtrOutput)
}

// Specifies job description. Length range: 1 to 512 characters.
func (o FlinksqlJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies dirty data policy of a job.
// + **2:obsDir**: Save the dirty data to the obs path `obsDir`. For example: `2:yourBucket/output_path`
// + **1**: Trigger a job exception
// + **0**: Ignore
func (o FlinksqlJobOutput) DirtyDataStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.DirtyDataStrategy }).(pulumi.StringPtrOutput)
}

// Specifies edge computing group IDs.
func (o FlinksqlJobOutput) EdgeGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringArrayOutput { return v.EdgeGroupIds }).(pulumi.StringArrayOutput)
}

// Specifies retention time of the idle state. The unit is hour.
// The default value is 1.
func (o FlinksqlJobOutput) IdleStateRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.IdleStateRetention }).(pulumi.IntPtrOutput)
}

// Specifies whether to enable the function of uploading job logs to
// users' OBS buckets. The default value is false.
func (o FlinksqlJobOutput) LogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.BoolPtrOutput { return v.LogEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies number of CUs in the JobManager selected for a job.
// The default value is 1.
func (o FlinksqlJobOutput) ManagerCuNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.ManagerCuNumber }).(pulumi.IntPtrOutput)
}

// Specifies the name of the job. Length range: 1 to 57 characters.
// which may consist of letters, digits, underscores (_) and hyphens (-).
func (o FlinksqlJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies OBS path. OBS path where users are authorized to save the
// snapshot. This parameter is valid only when `checkpointEnabled` is set to `true`. OBS path where users are authorized
// to save the snapshot. This parameter is valid only when `logEnabled` is set to `true`.
func (o FlinksqlJobOutput) ObsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.ObsBucket }).(pulumi.StringPtrOutput)
}

// Specifies number of parallel for a job. The default value is 1.
func (o FlinksqlJobOutput) ParallelNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.ParallelNumber }).(pulumi.IntPtrOutput)
}

// Specifies name of a queue.
func (o FlinksqlJobOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringOutput { return v.QueueName }).(pulumi.StringOutput)
}

// The region in which to create the DLI flink job resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o FlinksqlJobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether to enable the function of automatically
// restarting a job upon job exceptions. The default value is false.
func (o FlinksqlJobOutput) RestartWhenException() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.BoolPtrOutput { return v.RestartWhenException }).(pulumi.BoolPtrOutput)
}

// Specifies whether the abnormal restart is recovered from the
// checkpoint.
func (o FlinksqlJobOutput) ResumeCheckpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.BoolPtrOutput { return v.ResumeCheckpoint }).(pulumi.BoolPtrOutput)
}

// Specifies maximum number of retry times upon exceptions. The unit is
// `times/hour`. Value range: `-1` or greater than `0`. The default value is `-1`, indicating that the number of times is
// unlimited.
func (o FlinksqlJobOutput) ResumeMaxNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.ResumeMaxNum }).(pulumi.IntPtrOutput)
}

// Specifies job running mode. The options are as follows:
func (o FlinksqlJobOutput) RunMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.RunMode }).(pulumi.StringPtrOutput)
}

// Specifies customizes optimization parameters when a Flink job is
// running.
func (o FlinksqlJobOutput) RuntimeConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringMapOutput { return v.RuntimeConfig }).(pulumi.StringMapOutput)
}

// Specifies SMN topic. If a job fails, the system will send a message to
// users subscribed to the SMN topic.
func (o FlinksqlJobOutput) SmnTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.SmnTopic }).(pulumi.StringPtrOutput)
}

// Specifies stream SQL statement, which includes at least the following
// three parts: source, query, and sink. Length range: 1024x1024 characters.
func (o FlinksqlJobOutput) Sql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.Sql }).(pulumi.StringPtrOutput)
}

// The Job status.
func (o FlinksqlJobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the resource.
func (o FlinksqlJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies number of CUs for each Task Manager. The default value is 1.
func (o FlinksqlJobOutput) TmCus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntPtrOutput { return v.TmCus }).(pulumi.IntPtrOutput)
}

// Specifies number of slots in each Task Manager.
// The default value is (**parallel_number** * **tm_cus**)/(**cu_number** - **manager_cu_number**).
func (o FlinksqlJobOutput) TmSlotNum() pulumi.IntOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.IntOutput { return v.TmSlotNum }).(pulumi.IntOutput)
}

// Specifies the type of the job. The valid values are `flinkSqlJob`,
// `flinkOpensourceSqlJob` and `flinkSqlEdgeJob`. Default value is `flinkSqlJob`.
// Changing this parameter will create a new resource.
func (o FlinksqlJobOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies name of the resource package that has been uploaded to the
// DLI resource management system. The UDF Jar file of the SQL job is specified by this parameter.
func (o FlinksqlJobOutput) UdfJarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FlinksqlJob) pulumi.StringOutput { return v.UdfJarUrl }).(pulumi.StringOutput)
}

type FlinksqlJobArrayOutput struct{ *pulumi.OutputState }

func (FlinksqlJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlinksqlJob)(nil)).Elem()
}

func (o FlinksqlJobArrayOutput) ToFlinksqlJobArrayOutput() FlinksqlJobArrayOutput {
	return o
}

func (o FlinksqlJobArrayOutput) ToFlinksqlJobArrayOutputWithContext(ctx context.Context) FlinksqlJobArrayOutput {
	return o
}

func (o FlinksqlJobArrayOutput) Index(i pulumi.IntInput) FlinksqlJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlinksqlJob {
		return vs[0].([]*FlinksqlJob)[vs[1].(int)]
	}).(FlinksqlJobOutput)
}

type FlinksqlJobMapOutput struct{ *pulumi.OutputState }

func (FlinksqlJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlinksqlJob)(nil)).Elem()
}

func (o FlinksqlJobMapOutput) ToFlinksqlJobMapOutput() FlinksqlJobMapOutput {
	return o
}

func (o FlinksqlJobMapOutput) ToFlinksqlJobMapOutputWithContext(ctx context.Context) FlinksqlJobMapOutput {
	return o
}

func (o FlinksqlJobMapOutput) MapIndex(k pulumi.StringInput) FlinksqlJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlinksqlJob {
		return vs[0].(map[string]*FlinksqlJob)[vs[1].(string)]
	}).(FlinksqlJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlinksqlJobInput)(nil)).Elem(), &FlinksqlJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlinksqlJobArrayInput)(nil)).Elem(), FlinksqlJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlinksqlJobMapInput)(nil)).Elem(), FlinksqlJobMap{})
	pulumi.RegisterOutputType(FlinksqlJobOutput{})
	pulumi.RegisterOutputType(FlinksqlJobArrayOutput{})
	pulumi.RegisterOutputType(FlinksqlJobMapOutput{})
}

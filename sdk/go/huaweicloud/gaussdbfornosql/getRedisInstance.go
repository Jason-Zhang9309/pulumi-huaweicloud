// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaussdbfornosql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get available HuaweiCloud gaussdb redis instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/GaussDBforNoSQL"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/GaussDBforNoSQL"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := GaussDBforNoSQL.GetRedisInstance(ctx, &gaussdbfornosql.GetRedisInstanceArgs{
//				Name: pulumi.StringRef("gaussdb-instance"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRedisInstance(ctx *pulumi.Context, args *LookupRedisInstanceArgs, opts ...pulumi.InvokeOption) (*LookupRedisInstanceResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupRedisInstanceResult
	err := ctx.Invoke("huaweicloud:GaussDBforNoSQL/getRedisInstance:getRedisInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRedisInstance.
type LookupRedisInstanceArgs struct {
	// Specifies the name of the instance.
	Name *string `pulumi:"name"`
	// The region in which to obtain the instance. If omitted, the provider-level region will
	// be used.
	Region *string `pulumi:"region"`
	// Specifies the network ID of a subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getRedisInstance.
type LookupRedisInstanceResult struct {
	// Indicates the availability zone where the node resides.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Indicates the advanced backup policy. Structure is documented below.
	BackupStrategies []GetRedisInstanceBackupStrategy `pulumi:"backupStrategies"`
	// Indicates the database information. Structure is documented below.
	Datastores []GetRedisInstanceDatastore `pulumi:"datastores"`
	// Indicates the default username.
	DbUserName string `pulumi:"dbUserName"`
	// Indicates the enterprise project id.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Indicates the instance specifications.
	Flavor string `pulumi:"flavor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates the instance mode.
	Mode string `pulumi:"mode"`
	// Indicates the node name.
	Name string `pulumi:"name"`
	// Indicates the count of the nodes.
	NodeNum int `pulumi:"nodeNum"`
	// Indicates the instance nodes information. Structure is documented below.
	Nodes []GetRedisInstanceNode `pulumi:"nodes"`
	// Indicates the database port.
	Port int `pulumi:"port"`
	// Indicates the list of private IP address of the nodes.
	PrivateIps []string `pulumi:"privateIps"`
	Region     string   `pulumi:"region"`
	// Indicates the security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Indicates the node status.
	Status   string `pulumi:"status"`
	SubnetId string `pulumi:"subnetId"`
	// Indicates the key/value tags of the instance.
	Tags map[string]string `pulumi:"tags"`
	// Indicates the size of the volume.
	VolumeSize int    `pulumi:"volumeSize"`
	VpcId      string `pulumi:"vpcId"`
}

func LookupRedisInstanceOutput(ctx *pulumi.Context, args LookupRedisInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupRedisInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRedisInstanceResult, error) {
			args := v.(LookupRedisInstanceArgs)
			r, err := LookupRedisInstance(ctx, &args, opts...)
			var s LookupRedisInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRedisInstanceResultOutput)
}

// A collection of arguments for invoking getRedisInstance.
type LookupRedisInstanceOutputArgs struct {
	// Specifies the name of the instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to obtain the instance. If omitted, the provider-level region will
	// be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the network ID of a subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Specifies the VPC ID.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupRedisInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getRedisInstance.
type LookupRedisInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupRedisInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisInstanceResult)(nil)).Elem()
}

func (o LookupRedisInstanceResultOutput) ToLookupRedisInstanceResultOutput() LookupRedisInstanceResultOutput {
	return o
}

func (o LookupRedisInstanceResultOutput) ToLookupRedisInstanceResultOutputWithContext(ctx context.Context) LookupRedisInstanceResultOutput {
	return o
}

// Indicates the availability zone where the node resides.
func (o LookupRedisInstanceResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Indicates the advanced backup policy. Structure is documented below.
func (o LookupRedisInstanceResultOutput) BackupStrategies() GetRedisInstanceBackupStrategyArrayOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) []GetRedisInstanceBackupStrategy { return v.BackupStrategies }).(GetRedisInstanceBackupStrategyArrayOutput)
}

// Indicates the database information. Structure is documented below.
func (o LookupRedisInstanceResultOutput) Datastores() GetRedisInstanceDatastoreArrayOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) []GetRedisInstanceDatastore { return v.Datastores }).(GetRedisInstanceDatastoreArrayOutput)
}

// Indicates the default username.
func (o LookupRedisInstanceResultOutput) DbUserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.DbUserName }).(pulumi.StringOutput)
}

// Indicates the enterprise project id.
func (o LookupRedisInstanceResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Indicates the instance specifications.
func (o LookupRedisInstanceResultOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Flavor }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRedisInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the instance mode.
func (o LookupRedisInstanceResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Indicates the node name.
func (o LookupRedisInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the count of the nodes.
func (o LookupRedisInstanceResultOutput) NodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) int { return v.NodeNum }).(pulumi.IntOutput)
}

// Indicates the instance nodes information. Structure is documented below.
func (o LookupRedisInstanceResultOutput) Nodes() GetRedisInstanceNodeArrayOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) []GetRedisInstanceNode { return v.Nodes }).(GetRedisInstanceNodeArrayOutput)
}

// Indicates the database port.
func (o LookupRedisInstanceResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) int { return v.Port }).(pulumi.IntOutput)
}

// Indicates the list of private IP address of the nodes.
func (o LookupRedisInstanceResultOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) []string { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

func (o LookupRedisInstanceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the security group ID.
func (o LookupRedisInstanceResultOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Indicates the node status.
func (o LookupRedisInstanceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupRedisInstanceResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Indicates the key/value tags of the instance.
func (o LookupRedisInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Indicates the size of the volume.
func (o LookupRedisInstanceResultOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) int { return v.VolumeSize }).(pulumi.IntOutput)
}

func (o LookupRedisInstanceResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisInstanceResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRedisInstanceResultOutput{})
}

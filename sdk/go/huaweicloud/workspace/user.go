// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Workspace user resource within HuaweiCloud.
//
// ## Example Usage
// ### Create a user that never expires
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Workspace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			userName := cfg.RequireObject("userName")
//			emailAddress := cfg.RequireObject("emailAddress")
//			_, err := Workspace.NewUser(ctx, "test", &Workspace.UserArgs{
//				Email:                   pulumi.Any(emailAddress),
//				AccountExpires:          pulumi.String("0"),
//				PasswordNeverExpires:    pulumi.Bool(false),
//				EnableChangePassword:    pulumi.Bool(true),
//				NextLoginChangePassword: pulumi.Bool(true),
//				Disabled:                pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Users can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Workspace/user:User test a96e632a399d452eb29e5091e0af806a
//
// ```
type User struct {
	pulumi.CustomResourceState

	// Specifies the user's valid period configuration.
	// + Never expires: **0**.
	// + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
	//   The times is in local time, depending on the timezone.
	AccountExpires pulumi.StringPtrOutput `pulumi:"accountExpires"`
	// Specifies the description of user. The maximum length is `255` characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether the user is disabled.
	// Defaults to **false**.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Specifies the email address of user. The value can contain `1` to `64` characters.
	Email pulumi.StringOutput `pulumi:"email"`
	// Specifies whether to allow password modification.
	// Defaults to **true**.
	EnableChangePassword pulumi.BoolPtrOutput `pulumi:"enableChangePassword"`
	// Whether the user is locked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// Specifies the user name.
	// + Pure numeric: the valid length is between `1` and `20`.
	// + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
	//   dots (.) are allowed. The name must start with a letter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the next login requires a password reset.
	// Defaults to **true**.
	NextLoginChangePassword pulumi.BoolPtrOutput `pulumi:"nextLoginChangePassword"`
	// Specifies whether the password will never expires.
	// Defaults to **false**.
	PasswordNeverExpires pulumi.BoolPtrOutput `pulumi:"passwordNeverExpires"`
	// The region in which to create the Workspace user resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The number of desktops the user has.
	TotalDesktops pulumi.IntOutput `pulumi:"totalDesktops"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("huaweicloud:Workspace/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("huaweicloud:Workspace/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Specifies the user's valid period configuration.
	// + Never expires: **0**.
	// + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
	//   The times is in local time, depending on the timezone.
	AccountExpires *string `pulumi:"accountExpires"`
	// Specifies the description of user. The maximum length is `255` characters.
	Description *string `pulumi:"description"`
	// Specifies whether the user is disabled.
	// Defaults to **false**.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the email address of user. The value can contain `1` to `64` characters.
	Email *string `pulumi:"email"`
	// Specifies whether to allow password modification.
	// Defaults to **true**.
	EnableChangePassword *bool `pulumi:"enableChangePassword"`
	// Whether the user is locked.
	Locked *bool `pulumi:"locked"`
	// Specifies the user name.
	// + Pure numeric: the valid length is between `1` and `20`.
	// + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
	//   dots (.) are allowed. The name must start with a letter.
	Name *string `pulumi:"name"`
	// Specifies whether the next login requires a password reset.
	// Defaults to **true**.
	NextLoginChangePassword *bool `pulumi:"nextLoginChangePassword"`
	// Specifies whether the password will never expires.
	// Defaults to **false**.
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
	// The region in which to create the Workspace user resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
	// The number of desktops the user has.
	TotalDesktops *int `pulumi:"totalDesktops"`
}

type UserState struct {
	// Specifies the user's valid period configuration.
	// + Never expires: **0**.
	// + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
	//   The times is in local time, depending on the timezone.
	AccountExpires pulumi.StringPtrInput
	// Specifies the description of user. The maximum length is `255` characters.
	Description pulumi.StringPtrInput
	// Specifies whether the user is disabled.
	// Defaults to **false**.
	Disabled pulumi.BoolPtrInput
	// Specifies the email address of user. The value can contain `1` to `64` characters.
	Email pulumi.StringPtrInput
	// Specifies whether to allow password modification.
	// Defaults to **true**.
	EnableChangePassword pulumi.BoolPtrInput
	// Whether the user is locked.
	Locked pulumi.BoolPtrInput
	// Specifies the user name.
	// + Pure numeric: the valid length is between `1` and `20`.
	// + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
	//   dots (.) are allowed. The name must start with a letter.
	Name pulumi.StringPtrInput
	// Specifies whether the next login requires a password reset.
	// Defaults to **true**.
	NextLoginChangePassword pulumi.BoolPtrInput
	// Specifies whether the password will never expires.
	// Defaults to **false**.
	PasswordNeverExpires pulumi.BoolPtrInput
	// The region in which to create the Workspace user resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
	// The number of desktops the user has.
	TotalDesktops pulumi.IntPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Specifies the user's valid period configuration.
	// + Never expires: **0**.
	// + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
	//   The times is in local time, depending on the timezone.
	AccountExpires *string `pulumi:"accountExpires"`
	// Specifies the description of user. The maximum length is `255` characters.
	Description *string `pulumi:"description"`
	// Specifies whether the user is disabled.
	// Defaults to **false**.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the email address of user. The value can contain `1` to `64` characters.
	Email string `pulumi:"email"`
	// Specifies whether to allow password modification.
	// Defaults to **true**.
	EnableChangePassword *bool `pulumi:"enableChangePassword"`
	// Specifies the user name.
	// + Pure numeric: the valid length is between `1` and `20`.
	// + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
	//   dots (.) are allowed. The name must start with a letter.
	Name *string `pulumi:"name"`
	// Specifies whether the next login requires a password reset.
	// Defaults to **true**.
	NextLoginChangePassword *bool `pulumi:"nextLoginChangePassword"`
	// Specifies whether the password will never expires.
	// Defaults to **false**.
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
	// The region in which to create the Workspace user resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Specifies the user's valid period configuration.
	// + Never expires: **0**.
	// + Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
	//   The times is in local time, depending on the timezone.
	AccountExpires pulumi.StringPtrInput
	// Specifies the description of user. The maximum length is `255` characters.
	Description pulumi.StringPtrInput
	// Specifies whether the user is disabled.
	// Defaults to **false**.
	Disabled pulumi.BoolPtrInput
	// Specifies the email address of user. The value can contain `1` to `64` characters.
	Email pulumi.StringInput
	// Specifies whether to allow password modification.
	// Defaults to **true**.
	EnableChangePassword pulumi.BoolPtrInput
	// Specifies the user name.
	// + Pure numeric: the valid length is between `1` and `20`.
	// + Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
	//   dots (.) are allowed. The name must start with a letter.
	Name pulumi.StringPtrInput
	// Specifies whether the next login requires a password reset.
	// Defaults to **true**.
	NextLoginChangePassword pulumi.BoolPtrInput
	// Specifies whether the password will never expires.
	// Defaults to **false**.
	PasswordNeverExpires pulumi.BoolPtrInput
	// The region in which to create the Workspace user resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Specifies the user's valid period configuration.
//   - Never expires: **0**.
//   - Expires at a certain time: account expires must in RFC3339 format like `yyyy-MM-ddTHH:mm:ssZ`.
//     The times is in local time, depending on the timezone.
func (o UserOutput) AccountExpires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.AccountExpires }).(pulumi.StringPtrOutput)
}

// Specifies the description of user. The maximum length is `255` characters.
func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the user is disabled.
// Defaults to **false**.
func (o UserOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the email address of user. The value can contain `1` to `64` characters.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Specifies whether to allow password modification.
// Defaults to **true**.
func (o UserOutput) EnableChangePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.EnableChangePassword }).(pulumi.BoolPtrOutput)
}

// Whether the user is locked.
func (o UserOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// Specifies the user name.
//   - Pure numeric: the valid length is between `1` and `20`.
//   - Non-pure numeric: the name can contain `1` to `20` characters, only letters, digits, hyphens (-), underscore (_) and
//     dots (.) are allowed. The name must start with a letter.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the next login requires a password reset.
// Defaults to **true**.
func (o UserOutput) NextLoginChangePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.NextLoginChangePassword }).(pulumi.BoolPtrOutput)
}

// Specifies whether the password will never expires.
// Defaults to **false**.
func (o UserOutput) PasswordNeverExpires() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.PasswordNeverExpires }).(pulumi.BoolPtrOutput)
}

// The region in which to create the Workspace user resource.
// If omitted, the provider-level region will be used. Changing this will create a new resource.
func (o UserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The number of desktops the user has.
func (o UserOutput) TotalDesktops() pulumi.IntOutput {
	return o.ApplyT(func(v *User) pulumi.IntOutput { return v.TotalDesktops }).(pulumi.IntOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DesktopDataVolume struct {
	// The time that the volume was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The device location to which the volume is attached.
	Device *string `pulumi:"device"`
	// The volume ID.
	Id *string `pulumi:"id"`
	// Specifies the desktop name.
	// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter or digit and cannot end with a hyphen.
	// Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the size of system volume, in GB.
	// + For root volume, the valid value is range from `80` to `1,020`.
	// + For data volume, the valid value is range from `10` to `8,200`.
	Size int `pulumi:"size"`
	// Specifies the type of system volume.
	// The valid values are as follows:
	// + **SAS**: High I/O disk type.
	// + **SSD**: Ultra-high I/O disk type.
	Type string `pulumi:"type"`
}

// DesktopDataVolumeInput is an input type that accepts DesktopDataVolumeArgs and DesktopDataVolumeOutput values.
// You can construct a concrete instance of `DesktopDataVolumeInput` via:
//
//	DesktopDataVolumeArgs{...}
type DesktopDataVolumeInput interface {
	pulumi.Input

	ToDesktopDataVolumeOutput() DesktopDataVolumeOutput
	ToDesktopDataVolumeOutputWithContext(context.Context) DesktopDataVolumeOutput
}

type DesktopDataVolumeArgs struct {
	// The time that the volume was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The device location to which the volume is attached.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The volume ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the desktop name.
	// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter or digit and cannot end with a hyphen.
	// Changing this will create a new resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the size of system volume, in GB.
	// + For root volume, the valid value is range from `80` to `1,020`.
	// + For data volume, the valid value is range from `10` to `8,200`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the type of system volume.
	// The valid values are as follows:
	// + **SAS**: High I/O disk type.
	// + **SSD**: Ultra-high I/O disk type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DesktopDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopDataVolume)(nil)).Elem()
}

func (i DesktopDataVolumeArgs) ToDesktopDataVolumeOutput() DesktopDataVolumeOutput {
	return i.ToDesktopDataVolumeOutputWithContext(context.Background())
}

func (i DesktopDataVolumeArgs) ToDesktopDataVolumeOutputWithContext(ctx context.Context) DesktopDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopDataVolumeOutput)
}

// DesktopDataVolumeArrayInput is an input type that accepts DesktopDataVolumeArray and DesktopDataVolumeArrayOutput values.
// You can construct a concrete instance of `DesktopDataVolumeArrayInput` via:
//
//	DesktopDataVolumeArray{ DesktopDataVolumeArgs{...} }
type DesktopDataVolumeArrayInput interface {
	pulumi.Input

	ToDesktopDataVolumeArrayOutput() DesktopDataVolumeArrayOutput
	ToDesktopDataVolumeArrayOutputWithContext(context.Context) DesktopDataVolumeArrayOutput
}

type DesktopDataVolumeArray []DesktopDataVolumeInput

func (DesktopDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DesktopDataVolume)(nil)).Elem()
}

func (i DesktopDataVolumeArray) ToDesktopDataVolumeArrayOutput() DesktopDataVolumeArrayOutput {
	return i.ToDesktopDataVolumeArrayOutputWithContext(context.Background())
}

func (i DesktopDataVolumeArray) ToDesktopDataVolumeArrayOutputWithContext(ctx context.Context) DesktopDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopDataVolumeArrayOutput)
}

type DesktopDataVolumeOutput struct{ *pulumi.OutputState }

func (DesktopDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopDataVolume)(nil)).Elem()
}

func (o DesktopDataVolumeOutput) ToDesktopDataVolumeOutput() DesktopDataVolumeOutput {
	return o
}

func (o DesktopDataVolumeOutput) ToDesktopDataVolumeOutputWithContext(ctx context.Context) DesktopDataVolumeOutput {
	return o
}

// The time that the volume was created.
func (o DesktopDataVolumeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopDataVolume) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The device location to which the volume is attached.
func (o DesktopDataVolumeOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopDataVolume) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The volume ID.
func (o DesktopDataVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopDataVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the desktop name.
// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
// The name must start with a letter or digit and cannot end with a hyphen.
// Changing this will create a new resource.
func (o DesktopDataVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopDataVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the size of system volume, in GB.
// + For root volume, the valid value is range from `80` to `1,020`.
// + For data volume, the valid value is range from `10` to `8,200`.
func (o DesktopDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v DesktopDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the type of system volume.
// The valid values are as follows:
// + **SAS**: High I/O disk type.
// + **SSD**: Ultra-high I/O disk type.
func (o DesktopDataVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DesktopDataVolume) string { return v.Type }).(pulumi.StringOutput)
}

type DesktopDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (DesktopDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DesktopDataVolume)(nil)).Elem()
}

func (o DesktopDataVolumeArrayOutput) ToDesktopDataVolumeArrayOutput() DesktopDataVolumeArrayOutput {
	return o
}

func (o DesktopDataVolumeArrayOutput) ToDesktopDataVolumeArrayOutputWithContext(ctx context.Context) DesktopDataVolumeArrayOutput {
	return o
}

func (o DesktopDataVolumeArrayOutput) Index(i pulumi.IntInput) DesktopDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DesktopDataVolume {
		return vs[0].([]DesktopDataVolume)[vs[1].(int)]
	}).(DesktopDataVolumeOutput)
}

type DesktopNic struct {
	// Specifies the network ID of subnet resource.
	// Changing this will create a new resource.
	NetworkId string `pulumi:"networkId"`
}

// DesktopNicInput is an input type that accepts DesktopNicArgs and DesktopNicOutput values.
// You can construct a concrete instance of `DesktopNicInput` via:
//
//	DesktopNicArgs{...}
type DesktopNicInput interface {
	pulumi.Input

	ToDesktopNicOutput() DesktopNicOutput
	ToDesktopNicOutputWithContext(context.Context) DesktopNicOutput
}

type DesktopNicArgs struct {
	// Specifies the network ID of subnet resource.
	// Changing this will create a new resource.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
}

func (DesktopNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopNic)(nil)).Elem()
}

func (i DesktopNicArgs) ToDesktopNicOutput() DesktopNicOutput {
	return i.ToDesktopNicOutputWithContext(context.Background())
}

func (i DesktopNicArgs) ToDesktopNicOutputWithContext(ctx context.Context) DesktopNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopNicOutput)
}

// DesktopNicArrayInput is an input type that accepts DesktopNicArray and DesktopNicArrayOutput values.
// You can construct a concrete instance of `DesktopNicArrayInput` via:
//
//	DesktopNicArray{ DesktopNicArgs{...} }
type DesktopNicArrayInput interface {
	pulumi.Input

	ToDesktopNicArrayOutput() DesktopNicArrayOutput
	ToDesktopNicArrayOutputWithContext(context.Context) DesktopNicArrayOutput
}

type DesktopNicArray []DesktopNicInput

func (DesktopNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DesktopNic)(nil)).Elem()
}

func (i DesktopNicArray) ToDesktopNicArrayOutput() DesktopNicArrayOutput {
	return i.ToDesktopNicArrayOutputWithContext(context.Background())
}

func (i DesktopNicArray) ToDesktopNicArrayOutputWithContext(ctx context.Context) DesktopNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopNicArrayOutput)
}

type DesktopNicOutput struct{ *pulumi.OutputState }

func (DesktopNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopNic)(nil)).Elem()
}

func (o DesktopNicOutput) ToDesktopNicOutput() DesktopNicOutput {
	return o
}

func (o DesktopNicOutput) ToDesktopNicOutputWithContext(ctx context.Context) DesktopNicOutput {
	return o
}

// Specifies the network ID of subnet resource.
// Changing this will create a new resource.
func (o DesktopNicOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v DesktopNic) string { return v.NetworkId }).(pulumi.StringOutput)
}

type DesktopNicArrayOutput struct{ *pulumi.OutputState }

func (DesktopNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DesktopNic)(nil)).Elem()
}

func (o DesktopNicArrayOutput) ToDesktopNicArrayOutput() DesktopNicArrayOutput {
	return o
}

func (o DesktopNicArrayOutput) ToDesktopNicArrayOutputWithContext(ctx context.Context) DesktopNicArrayOutput {
	return o
}

func (o DesktopNicArrayOutput) Index(i pulumi.IntInput) DesktopNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DesktopNic {
		return vs[0].([]DesktopNic)[vs[1].(int)]
	}).(DesktopNicOutput)
}

type DesktopRootVolume struct {
	// The time that the volume was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The device location to which the volume is attached.
	Device *string `pulumi:"device"`
	// The volume ID.
	Id *string `pulumi:"id"`
	// Specifies the desktop name.
	// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter or digit and cannot end with a hyphen.
	// Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the size of system volume, in GB.
	// + For root volume, the valid value is range from `80` to `1,020`.
	// + For data volume, the valid value is range from `10` to `8,200`.
	Size int `pulumi:"size"`
	// Specifies the type of system volume.
	// The valid values are as follows:
	// + **SAS**: High I/O disk type.
	// + **SSD**: Ultra-high I/O disk type.
	Type string `pulumi:"type"`
}

// DesktopRootVolumeInput is an input type that accepts DesktopRootVolumeArgs and DesktopRootVolumeOutput values.
// You can construct a concrete instance of `DesktopRootVolumeInput` via:
//
//	DesktopRootVolumeArgs{...}
type DesktopRootVolumeInput interface {
	pulumi.Input

	ToDesktopRootVolumeOutput() DesktopRootVolumeOutput
	ToDesktopRootVolumeOutputWithContext(context.Context) DesktopRootVolumeOutput
}

type DesktopRootVolumeArgs struct {
	// The time that the volume was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The device location to which the volume is attached.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The volume ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the desktop name.
	// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter or digit and cannot end with a hyphen.
	// Changing this will create a new resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the size of system volume, in GB.
	// + For root volume, the valid value is range from `80` to `1,020`.
	// + For data volume, the valid value is range from `10` to `8,200`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the type of system volume.
	// The valid values are as follows:
	// + **SAS**: High I/O disk type.
	// + **SSD**: Ultra-high I/O disk type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DesktopRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopRootVolume)(nil)).Elem()
}

func (i DesktopRootVolumeArgs) ToDesktopRootVolumeOutput() DesktopRootVolumeOutput {
	return i.ToDesktopRootVolumeOutputWithContext(context.Background())
}

func (i DesktopRootVolumeArgs) ToDesktopRootVolumeOutputWithContext(ctx context.Context) DesktopRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopRootVolumeOutput)
}

func (i DesktopRootVolumeArgs) ToDesktopRootVolumePtrOutput() DesktopRootVolumePtrOutput {
	return i.ToDesktopRootVolumePtrOutputWithContext(context.Background())
}

func (i DesktopRootVolumeArgs) ToDesktopRootVolumePtrOutputWithContext(ctx context.Context) DesktopRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopRootVolumeOutput).ToDesktopRootVolumePtrOutputWithContext(ctx)
}

// DesktopRootVolumePtrInput is an input type that accepts DesktopRootVolumeArgs, DesktopRootVolumePtr and DesktopRootVolumePtrOutput values.
// You can construct a concrete instance of `DesktopRootVolumePtrInput` via:
//
//	        DesktopRootVolumeArgs{...}
//
//	or:
//
//	        nil
type DesktopRootVolumePtrInput interface {
	pulumi.Input

	ToDesktopRootVolumePtrOutput() DesktopRootVolumePtrOutput
	ToDesktopRootVolumePtrOutputWithContext(context.Context) DesktopRootVolumePtrOutput
}

type desktopRootVolumePtrType DesktopRootVolumeArgs

func DesktopRootVolumePtr(v *DesktopRootVolumeArgs) DesktopRootVolumePtrInput {
	return (*desktopRootVolumePtrType)(v)
}

func (*desktopRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DesktopRootVolume)(nil)).Elem()
}

func (i *desktopRootVolumePtrType) ToDesktopRootVolumePtrOutput() DesktopRootVolumePtrOutput {
	return i.ToDesktopRootVolumePtrOutputWithContext(context.Background())
}

func (i *desktopRootVolumePtrType) ToDesktopRootVolumePtrOutputWithContext(ctx context.Context) DesktopRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopRootVolumePtrOutput)
}

type DesktopRootVolumeOutput struct{ *pulumi.OutputState }

func (DesktopRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopRootVolume)(nil)).Elem()
}

func (o DesktopRootVolumeOutput) ToDesktopRootVolumeOutput() DesktopRootVolumeOutput {
	return o
}

func (o DesktopRootVolumeOutput) ToDesktopRootVolumeOutputWithContext(ctx context.Context) DesktopRootVolumeOutput {
	return o
}

func (o DesktopRootVolumeOutput) ToDesktopRootVolumePtrOutput() DesktopRootVolumePtrOutput {
	return o.ToDesktopRootVolumePtrOutputWithContext(context.Background())
}

func (o DesktopRootVolumeOutput) ToDesktopRootVolumePtrOutputWithContext(ctx context.Context) DesktopRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DesktopRootVolume) *DesktopRootVolume {
		return &v
	}).(DesktopRootVolumePtrOutput)
}

// The time that the volume was created.
func (o DesktopRootVolumeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopRootVolume) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The device location to which the volume is attached.
func (o DesktopRootVolumeOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopRootVolume) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The volume ID.
func (o DesktopRootVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopRootVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the desktop name.
// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
// The name must start with a letter or digit and cannot end with a hyphen.
// Changing this will create a new resource.
func (o DesktopRootVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopRootVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the size of system volume, in GB.
// + For root volume, the valid value is range from `80` to `1,020`.
// + For data volume, the valid value is range from `10` to `8,200`.
func (o DesktopRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v DesktopRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the type of system volume.
// The valid values are as follows:
// + **SAS**: High I/O disk type.
// + **SSD**: Ultra-high I/O disk type.
func (o DesktopRootVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DesktopRootVolume) string { return v.Type }).(pulumi.StringOutput)
}

type DesktopRootVolumePtrOutput struct{ *pulumi.OutputState }

func (DesktopRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DesktopRootVolume)(nil)).Elem()
}

func (o DesktopRootVolumePtrOutput) ToDesktopRootVolumePtrOutput() DesktopRootVolumePtrOutput {
	return o
}

func (o DesktopRootVolumePtrOutput) ToDesktopRootVolumePtrOutputWithContext(ctx context.Context) DesktopRootVolumePtrOutput {
	return o
}

func (o DesktopRootVolumePtrOutput) Elem() DesktopRootVolumeOutput {
	return o.ApplyT(func(v *DesktopRootVolume) DesktopRootVolume {
		if v != nil {
			return *v
		}
		var ret DesktopRootVolume
		return ret
	}).(DesktopRootVolumeOutput)
}

// The time that the volume was created.
func (o DesktopRootVolumePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The device location to which the volume is attached.
func (o DesktopRootVolumePtrOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Device
	}).(pulumi.StringPtrOutput)
}

// The volume ID.
func (o DesktopRootVolumePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the desktop name.
// The name can contain `1` to `15` characters, only letters, digits and hyphens (-) are allowed.
// The name must start with a letter or digit and cannot end with a hyphen.
// Changing this will create a new resource.
func (o DesktopRootVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the size of system volume, in GB.
// + For root volume, the valid value is range from `80` to `1,020`.
// + For data volume, the valid value is range from `10` to `8,200`.
func (o DesktopRootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the type of system volume.
// The valid values are as follows:
// + **SAS**: High I/O disk type.
// + **SSD**: Ultra-high I/O disk type.
func (o DesktopRootVolumePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopRootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceAdDomain struct {
	// Specifies the primary DNS IP address.
	ActiveDnsIp *string `pulumi:"activeDnsIp"`
	// Specifies the IP address of primary domain controller.
	ActiveDomainIp string `pulumi:"activeDomainIp"`
	// Specifies the name of primary domain controller.
	ActiveDomainName string `pulumi:"activeDomainName"`
	// Specifies the domain administrator account.
	// It must be an existing domain administrator account on the AD server.
	AdminAccount string `pulumi:"adminAccount"`
	// Specifies whether to delete the corresponding computer object on AD
	// while deleting the desktop.
	DeleteComputerObject *bool `pulumi:"deleteComputerObject"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name string `pulumi:"name"`
	// Specifies the account password of domain administrator.
	Password string `pulumi:"password"`
	// Specifies the standby DNS IP address.
	StandbyDnsIp *string `pulumi:"standbyDnsIp"`
	// Specifies the IP address of the standby domain controller.
	StandbyDomainIp *string `pulumi:"standbyDomainIp"`
	// Specifies the name of the standby domain controller.
	StandbyDomainName *string `pulumi:"standbyDomainName"`
}

// ServiceAdDomainInput is an input type that accepts ServiceAdDomainArgs and ServiceAdDomainOutput values.
// You can construct a concrete instance of `ServiceAdDomainInput` via:
//
//	ServiceAdDomainArgs{...}
type ServiceAdDomainInput interface {
	pulumi.Input

	ToServiceAdDomainOutput() ServiceAdDomainOutput
	ToServiceAdDomainOutputWithContext(context.Context) ServiceAdDomainOutput
}

type ServiceAdDomainArgs struct {
	// Specifies the primary DNS IP address.
	ActiveDnsIp pulumi.StringPtrInput `pulumi:"activeDnsIp"`
	// Specifies the IP address of primary domain controller.
	ActiveDomainIp pulumi.StringInput `pulumi:"activeDomainIp"`
	// Specifies the name of primary domain controller.
	ActiveDomainName pulumi.StringInput `pulumi:"activeDomainName"`
	// Specifies the domain administrator account.
	// It must be an existing domain administrator account on the AD server.
	AdminAccount pulumi.StringInput `pulumi:"adminAccount"`
	// Specifies whether to delete the corresponding computer object on AD
	// while deleting the desktop.
	DeleteComputerObject pulumi.BoolPtrInput `pulumi:"deleteComputerObject"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the account password of domain administrator.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the standby DNS IP address.
	StandbyDnsIp pulumi.StringPtrInput `pulumi:"standbyDnsIp"`
	// Specifies the IP address of the standby domain controller.
	StandbyDomainIp pulumi.StringPtrInput `pulumi:"standbyDomainIp"`
	// Specifies the name of the standby domain controller.
	StandbyDomainName pulumi.StringPtrInput `pulumi:"standbyDomainName"`
}

func (ServiceAdDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAdDomain)(nil)).Elem()
}

func (i ServiceAdDomainArgs) ToServiceAdDomainOutput() ServiceAdDomainOutput {
	return i.ToServiceAdDomainOutputWithContext(context.Background())
}

func (i ServiceAdDomainArgs) ToServiceAdDomainOutputWithContext(ctx context.Context) ServiceAdDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdDomainOutput)
}

func (i ServiceAdDomainArgs) ToServiceAdDomainPtrOutput() ServiceAdDomainPtrOutput {
	return i.ToServiceAdDomainPtrOutputWithContext(context.Background())
}

func (i ServiceAdDomainArgs) ToServiceAdDomainPtrOutputWithContext(ctx context.Context) ServiceAdDomainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdDomainOutput).ToServiceAdDomainPtrOutputWithContext(ctx)
}

// ServiceAdDomainPtrInput is an input type that accepts ServiceAdDomainArgs, ServiceAdDomainPtr and ServiceAdDomainPtrOutput values.
// You can construct a concrete instance of `ServiceAdDomainPtrInput` via:
//
//	        ServiceAdDomainArgs{...}
//
//	or:
//
//	        nil
type ServiceAdDomainPtrInput interface {
	pulumi.Input

	ToServiceAdDomainPtrOutput() ServiceAdDomainPtrOutput
	ToServiceAdDomainPtrOutputWithContext(context.Context) ServiceAdDomainPtrOutput
}

type serviceAdDomainPtrType ServiceAdDomainArgs

func ServiceAdDomainPtr(v *ServiceAdDomainArgs) ServiceAdDomainPtrInput {
	return (*serviceAdDomainPtrType)(v)
}

func (*serviceAdDomainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAdDomain)(nil)).Elem()
}

func (i *serviceAdDomainPtrType) ToServiceAdDomainPtrOutput() ServiceAdDomainPtrOutput {
	return i.ToServiceAdDomainPtrOutputWithContext(context.Background())
}

func (i *serviceAdDomainPtrType) ToServiceAdDomainPtrOutputWithContext(ctx context.Context) ServiceAdDomainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdDomainPtrOutput)
}

type ServiceAdDomainOutput struct{ *pulumi.OutputState }

func (ServiceAdDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAdDomain)(nil)).Elem()
}

func (o ServiceAdDomainOutput) ToServiceAdDomainOutput() ServiceAdDomainOutput {
	return o
}

func (o ServiceAdDomainOutput) ToServiceAdDomainOutputWithContext(ctx context.Context) ServiceAdDomainOutput {
	return o
}

func (o ServiceAdDomainOutput) ToServiceAdDomainPtrOutput() ServiceAdDomainPtrOutput {
	return o.ToServiceAdDomainPtrOutputWithContext(context.Background())
}

func (o ServiceAdDomainOutput) ToServiceAdDomainPtrOutputWithContext(ctx context.Context) ServiceAdDomainPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAdDomain) *ServiceAdDomain {
		return &v
	}).(ServiceAdDomainPtrOutput)
}

// Specifies the primary DNS IP address.
func (o ServiceAdDomainOutput) ActiveDnsIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdDomain) *string { return v.ActiveDnsIp }).(pulumi.StringPtrOutput)
}

// Specifies the IP address of primary domain controller.
func (o ServiceAdDomainOutput) ActiveDomainIp() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdDomain) string { return v.ActiveDomainIp }).(pulumi.StringOutput)
}

// Specifies the name of primary domain controller.
func (o ServiceAdDomainOutput) ActiveDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdDomain) string { return v.ActiveDomainName }).(pulumi.StringOutput)
}

// Specifies the domain administrator account.
// It must be an existing domain administrator account on the AD server.
func (o ServiceAdDomainOutput) AdminAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdDomain) string { return v.AdminAccount }).(pulumi.StringOutput)
}

// Specifies whether to delete the corresponding computer object on AD
// while deleting the desktop.
func (o ServiceAdDomainOutput) DeleteComputerObject() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAdDomain) *bool { return v.DeleteComputerObject }).(pulumi.BoolPtrOutput)
}

// Specifies the domain name.
// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
func (o ServiceAdDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdDomain) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the account password of domain administrator.
func (o ServiceAdDomainOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdDomain) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the standby DNS IP address.
func (o ServiceAdDomainOutput) StandbyDnsIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdDomain) *string { return v.StandbyDnsIp }).(pulumi.StringPtrOutput)
}

// Specifies the IP address of the standby domain controller.
func (o ServiceAdDomainOutput) StandbyDomainIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdDomain) *string { return v.StandbyDomainIp }).(pulumi.StringPtrOutput)
}

// Specifies the name of the standby domain controller.
func (o ServiceAdDomainOutput) StandbyDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdDomain) *string { return v.StandbyDomainName }).(pulumi.StringPtrOutput)
}

type ServiceAdDomainPtrOutput struct{ *pulumi.OutputState }

func (ServiceAdDomainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAdDomain)(nil)).Elem()
}

func (o ServiceAdDomainPtrOutput) ToServiceAdDomainPtrOutput() ServiceAdDomainPtrOutput {
	return o
}

func (o ServiceAdDomainPtrOutput) ToServiceAdDomainPtrOutputWithContext(ctx context.Context) ServiceAdDomainPtrOutput {
	return o
}

func (o ServiceAdDomainPtrOutput) Elem() ServiceAdDomainOutput {
	return o.ApplyT(func(v *ServiceAdDomain) ServiceAdDomain {
		if v != nil {
			return *v
		}
		var ret ServiceAdDomain
		return ret
	}).(ServiceAdDomainOutput)
}

// Specifies the primary DNS IP address.
func (o ServiceAdDomainPtrOutput) ActiveDnsIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDnsIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the IP address of primary domain controller.
func (o ServiceAdDomainPtrOutput) ActiveDomainIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return &v.ActiveDomainIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of primary domain controller.
func (o ServiceAdDomainPtrOutput) ActiveDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return &v.ActiveDomainName
	}).(pulumi.StringPtrOutput)
}

// Specifies the domain administrator account.
// It must be an existing domain administrator account on the AD server.
func (o ServiceAdDomainPtrOutput) AdminAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return &v.AdminAccount
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to delete the corresponding computer object on AD
// while deleting the desktop.
func (o ServiceAdDomainPtrOutput) DeleteComputerObject() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteComputerObject
	}).(pulumi.BoolPtrOutput)
}

// Specifies the domain name.
// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
func (o ServiceAdDomainPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the account password of domain administrator.
func (o ServiceAdDomainPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies the standby DNS IP address.
func (o ServiceAdDomainPtrOutput) StandbyDnsIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return v.StandbyDnsIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the IP address of the standby domain controller.
func (o ServiceAdDomainPtrOutput) StandbyDomainIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return v.StandbyDomainIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the standby domain controller.
func (o ServiceAdDomainPtrOutput) StandbyDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdDomain) *string {
		if v == nil {
			return nil
		}
		return v.StandbyDomainName
	}).(pulumi.StringPtrOutput)
}

type ServiceDesktopSecurityGroup struct {
	// Security group ID.
	Id *string `pulumi:"id"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name *string `pulumi:"name"`
}

// ServiceDesktopSecurityGroupInput is an input type that accepts ServiceDesktopSecurityGroupArgs and ServiceDesktopSecurityGroupOutput values.
// You can construct a concrete instance of `ServiceDesktopSecurityGroupInput` via:
//
//	ServiceDesktopSecurityGroupArgs{...}
type ServiceDesktopSecurityGroupInput interface {
	pulumi.Input

	ToServiceDesktopSecurityGroupOutput() ServiceDesktopSecurityGroupOutput
	ToServiceDesktopSecurityGroupOutputWithContext(context.Context) ServiceDesktopSecurityGroupOutput
}

type ServiceDesktopSecurityGroupArgs struct {
	// Security group ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ServiceDesktopSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDesktopSecurityGroup)(nil)).Elem()
}

func (i ServiceDesktopSecurityGroupArgs) ToServiceDesktopSecurityGroupOutput() ServiceDesktopSecurityGroupOutput {
	return i.ToServiceDesktopSecurityGroupOutputWithContext(context.Background())
}

func (i ServiceDesktopSecurityGroupArgs) ToServiceDesktopSecurityGroupOutputWithContext(ctx context.Context) ServiceDesktopSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDesktopSecurityGroupOutput)
}

// ServiceDesktopSecurityGroupArrayInput is an input type that accepts ServiceDesktopSecurityGroupArray and ServiceDesktopSecurityGroupArrayOutput values.
// You can construct a concrete instance of `ServiceDesktopSecurityGroupArrayInput` via:
//
//	ServiceDesktopSecurityGroupArray{ ServiceDesktopSecurityGroupArgs{...} }
type ServiceDesktopSecurityGroupArrayInput interface {
	pulumi.Input

	ToServiceDesktopSecurityGroupArrayOutput() ServiceDesktopSecurityGroupArrayOutput
	ToServiceDesktopSecurityGroupArrayOutputWithContext(context.Context) ServiceDesktopSecurityGroupArrayOutput
}

type ServiceDesktopSecurityGroupArray []ServiceDesktopSecurityGroupInput

func (ServiceDesktopSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDesktopSecurityGroup)(nil)).Elem()
}

func (i ServiceDesktopSecurityGroupArray) ToServiceDesktopSecurityGroupArrayOutput() ServiceDesktopSecurityGroupArrayOutput {
	return i.ToServiceDesktopSecurityGroupArrayOutputWithContext(context.Background())
}

func (i ServiceDesktopSecurityGroupArray) ToServiceDesktopSecurityGroupArrayOutputWithContext(ctx context.Context) ServiceDesktopSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDesktopSecurityGroupArrayOutput)
}

type ServiceDesktopSecurityGroupOutput struct{ *pulumi.OutputState }

func (ServiceDesktopSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDesktopSecurityGroup)(nil)).Elem()
}

func (o ServiceDesktopSecurityGroupOutput) ToServiceDesktopSecurityGroupOutput() ServiceDesktopSecurityGroupOutput {
	return o
}

func (o ServiceDesktopSecurityGroupOutput) ToServiceDesktopSecurityGroupOutputWithContext(ctx context.Context) ServiceDesktopSecurityGroupOutput {
	return o
}

// Security group ID.
func (o ServiceDesktopSecurityGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDesktopSecurityGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the domain name.
// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
func (o ServiceDesktopSecurityGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDesktopSecurityGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ServiceDesktopSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (ServiceDesktopSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDesktopSecurityGroup)(nil)).Elem()
}

func (o ServiceDesktopSecurityGroupArrayOutput) ToServiceDesktopSecurityGroupArrayOutput() ServiceDesktopSecurityGroupArrayOutput {
	return o
}

func (o ServiceDesktopSecurityGroupArrayOutput) ToServiceDesktopSecurityGroupArrayOutputWithContext(ctx context.Context) ServiceDesktopSecurityGroupArrayOutput {
	return o
}

func (o ServiceDesktopSecurityGroupArrayOutput) Index(i pulumi.IntInput) ServiceDesktopSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDesktopSecurityGroup {
		return vs[0].([]ServiceDesktopSecurityGroup)[vs[1].(int)]
	}).(ServiceDesktopSecurityGroupOutput)
}

type ServiceInfrastructureSecurityGroup struct {
	// Security group ID.
	Id *string `pulumi:"id"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name *string `pulumi:"name"`
}

// ServiceInfrastructureSecurityGroupInput is an input type that accepts ServiceInfrastructureSecurityGroupArgs and ServiceInfrastructureSecurityGroupOutput values.
// You can construct a concrete instance of `ServiceInfrastructureSecurityGroupInput` via:
//
//	ServiceInfrastructureSecurityGroupArgs{...}
type ServiceInfrastructureSecurityGroupInput interface {
	pulumi.Input

	ToServiceInfrastructureSecurityGroupOutput() ServiceInfrastructureSecurityGroupOutput
	ToServiceInfrastructureSecurityGroupOutputWithContext(context.Context) ServiceInfrastructureSecurityGroupOutput
}

type ServiceInfrastructureSecurityGroupArgs struct {
	// Security group ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the domain name.
	// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ServiceInfrastructureSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInfrastructureSecurityGroup)(nil)).Elem()
}

func (i ServiceInfrastructureSecurityGroupArgs) ToServiceInfrastructureSecurityGroupOutput() ServiceInfrastructureSecurityGroupOutput {
	return i.ToServiceInfrastructureSecurityGroupOutputWithContext(context.Background())
}

func (i ServiceInfrastructureSecurityGroupArgs) ToServiceInfrastructureSecurityGroupOutputWithContext(ctx context.Context) ServiceInfrastructureSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInfrastructureSecurityGroupOutput)
}

// ServiceInfrastructureSecurityGroupArrayInput is an input type that accepts ServiceInfrastructureSecurityGroupArray and ServiceInfrastructureSecurityGroupArrayOutput values.
// You can construct a concrete instance of `ServiceInfrastructureSecurityGroupArrayInput` via:
//
//	ServiceInfrastructureSecurityGroupArray{ ServiceInfrastructureSecurityGroupArgs{...} }
type ServiceInfrastructureSecurityGroupArrayInput interface {
	pulumi.Input

	ToServiceInfrastructureSecurityGroupArrayOutput() ServiceInfrastructureSecurityGroupArrayOutput
	ToServiceInfrastructureSecurityGroupArrayOutputWithContext(context.Context) ServiceInfrastructureSecurityGroupArrayOutput
}

type ServiceInfrastructureSecurityGroupArray []ServiceInfrastructureSecurityGroupInput

func (ServiceInfrastructureSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceInfrastructureSecurityGroup)(nil)).Elem()
}

func (i ServiceInfrastructureSecurityGroupArray) ToServiceInfrastructureSecurityGroupArrayOutput() ServiceInfrastructureSecurityGroupArrayOutput {
	return i.ToServiceInfrastructureSecurityGroupArrayOutputWithContext(context.Background())
}

func (i ServiceInfrastructureSecurityGroupArray) ToServiceInfrastructureSecurityGroupArrayOutputWithContext(ctx context.Context) ServiceInfrastructureSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInfrastructureSecurityGroupArrayOutput)
}

type ServiceInfrastructureSecurityGroupOutput struct{ *pulumi.OutputState }

func (ServiceInfrastructureSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInfrastructureSecurityGroup)(nil)).Elem()
}

func (o ServiceInfrastructureSecurityGroupOutput) ToServiceInfrastructureSecurityGroupOutput() ServiceInfrastructureSecurityGroupOutput {
	return o
}

func (o ServiceInfrastructureSecurityGroupOutput) ToServiceInfrastructureSecurityGroupOutputWithContext(ctx context.Context) ServiceInfrastructureSecurityGroupOutput {
	return o
}

// Security group ID.
func (o ServiceInfrastructureSecurityGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceInfrastructureSecurityGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the domain name.
// The domain name must be an existing domain name on the AD server, and the length cannot exceed `55`.
func (o ServiceInfrastructureSecurityGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceInfrastructureSecurityGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ServiceInfrastructureSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (ServiceInfrastructureSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceInfrastructureSecurityGroup)(nil)).Elem()
}

func (o ServiceInfrastructureSecurityGroupArrayOutput) ToServiceInfrastructureSecurityGroupArrayOutput() ServiceInfrastructureSecurityGroupArrayOutput {
	return o
}

func (o ServiceInfrastructureSecurityGroupArrayOutput) ToServiceInfrastructureSecurityGroupArrayOutputWithContext(ctx context.Context) ServiceInfrastructureSecurityGroupArrayOutput {
	return o
}

func (o ServiceInfrastructureSecurityGroupArrayOutput) Index(i pulumi.IntInput) ServiceInfrastructureSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceInfrastructureSecurityGroup {
		return vs[0].([]ServiceInfrastructureSecurityGroup)[vs[1].(int)]
	}).(ServiceInfrastructureSecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopDataVolumeInput)(nil)).Elem(), DesktopDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopDataVolumeArrayInput)(nil)).Elem(), DesktopDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopNicInput)(nil)).Elem(), DesktopNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopNicArrayInput)(nil)).Elem(), DesktopNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopRootVolumeInput)(nil)).Elem(), DesktopRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopRootVolumePtrInput)(nil)).Elem(), DesktopRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAdDomainInput)(nil)).Elem(), ServiceAdDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAdDomainPtrInput)(nil)).Elem(), ServiceAdDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDesktopSecurityGroupInput)(nil)).Elem(), ServiceDesktopSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDesktopSecurityGroupArrayInput)(nil)).Elem(), ServiceDesktopSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInfrastructureSecurityGroupInput)(nil)).Elem(), ServiceInfrastructureSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInfrastructureSecurityGroupArrayInput)(nil)).Elem(), ServiceInfrastructureSecurityGroupArray{})
	pulumi.RegisterOutputType(DesktopDataVolumeOutput{})
	pulumi.RegisterOutputType(DesktopDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(DesktopNicOutput{})
	pulumi.RegisterOutputType(DesktopNicArrayOutput{})
	pulumi.RegisterOutputType(DesktopRootVolumeOutput{})
	pulumi.RegisterOutputType(DesktopRootVolumePtrOutput{})
	pulumi.RegisterOutputType(ServiceAdDomainOutput{})
	pulumi.RegisterOutputType(ServiceAdDomainPtrOutput{})
	pulumi.RegisterOutputType(ServiceDesktopSecurityGroupOutput{})
	pulumi.RegisterOutputType(ServiceDesktopSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(ServiceInfrastructureSecurityGroupOutput{})
	pulumi.RegisterOutputType(ServiceInfrastructureSecurityGroupArrayOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CDN domain resource within HuaweiCloud.
//
// ## Example Usage
// ### Create a CDN domain
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.RequireObject("domainName")
//			originServer := cfg.RequireObject("originServer")
//			_, err := Cdn.NewDomain(ctx, "test", &Cdn.DomainArgs{
//				Type:        pulumi.String("web"),
//				ServiceArea: pulumi.String("mainland_china"),
//				Sources: cdn.DomainSourceArray{
//					&cdn.DomainSourceArgs{
//						Origin:     pulumi.Any(originServer),
//						OriginType: pulumi.String("ipaddr"),
//						Active:     pulumi.Int(1),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("val"),
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a CDN domain with cache rules
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.RequireObject("domainName")
//			originServer := cfg.RequireObject("originServer")
//			_, err := Cdn.NewDomain(ctx, "test", &Cdn.DomainArgs{
//				Type:        pulumi.String("web"),
//				ServiceArea: pulumi.String("mainland_china"),
//				Sources: cdn.DomainSourceArray{
//					&cdn.DomainSourceArgs{
//						Origin:     pulumi.Any(originServer),
//						OriginType: pulumi.String("ipaddr"),
//						Active:     pulumi.Int(1),
//					},
//				},
//				CacheSettings: &cdn.DomainCacheSettingsArgs{
//					Rules: cdn.DomainCacheSettingsRuleArray{
//						&cdn.DomainCacheSettingsRuleArgs{
//							RuleType:         pulumi.String("all"),
//							Ttl:              pulumi.Int(180),
//							TtlType:          pulumi.String("d"),
//							Priority:         pulumi.Int(2),
//							UrlParameterType: pulumi.String("ignore_url_params"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a CDN domain with configs
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"io/ioutil"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.RequireObject("domainName")
//			originServer := cfg.RequireObject("originServer")
//			ipOrDomain := cfg.RequireObject("ipOrDomain")
//			caCertificateBody := cfg.RequireObject("caCertificateBody")
//			_, err := Cdn.NewDomain(ctx, "test", &Cdn.DomainArgs{
//				Type:        pulumi.String("web"),
//				ServiceArea: pulumi.String("mainland_china"),
//				Sources: cdn.DomainSourceArray{
//					&cdn.DomainSourceArgs{
//						Origin:     pulumi.Any(originServer),
//						OriginType: pulumi.String("ipaddr"),
//						Active:     pulumi.Int(1),
//					},
//				},
//				Configs: &cdn.DomainConfigsArgs{
//					OriginProtocol:             pulumi.String("http"),
//					Ipv6Enable:                 pulumi.Bool(true),
//					RangeBasedRetrievalEnabled: pulumi.Bool(true),
//					Description:                pulumi.String("test description"),
//					HttpsSettings: &cdn.DomainConfigsHttpsSettingsArgs{
//						CertificateName:    pulumi.String("terraform-test"),
//						CertificateBody:    readFileOrPanic("your_directory/chain.cer"),
//						Http2Enabled:       pulumi.Bool(true),
//						HttpsEnabled:       pulumi.Bool(true),
//						PrivateKey:         readFileOrPanic("your_directory/server_private.key"),
//						OcspStaplingStatus: pulumi.String("on"),
//					},
//					RetrievalRequestHeaders: cdn.DomainConfigsRetrievalRequestHeaderArray{
//						&cdn.DomainConfigsRetrievalRequestHeaderArgs{
//							Name:   pulumi.String("test-name"),
//							Value:  pulumi.String("test-val"),
//							Action: pulumi.String("set"),
//						},
//					},
//					HttpResponseHeaders: cdn.DomainConfigsHttpResponseHeaderArray{
//						&cdn.DomainConfigsHttpResponseHeaderArgs{
//							Name:   pulumi.String("test-name"),
//							Value:  pulumi.String("test-val"),
//							Action: pulumi.String("set"),
//						},
//					},
//					UrlSigning: &cdn.DomainConfigsUrlSigningArgs{
//						Enabled:    pulumi.Bool(true),
//						Type:       pulumi.String("type_a"),
//						SignMethod: pulumi.String("md5"),
//						MatchType:  pulumi.String("all"),
//						SignArg:    pulumi.String("Psd_123"),
//						Key:        pulumi.String("A27jtfSTy13q7A0UnTA9vpxYXEb"),
//						BackupKey:  pulumi.String("S36klgTFa60q3V8DmSK2hwfBOYp"),
//						TimeFormat: pulumi.String("dec"),
//						ExpireTime: pulumi.Int(30),
//						InheritConfig: &cdn.DomainConfigsUrlSigningInheritConfigArgs{
//							Enabled:         pulumi.Bool(true),
//							InheritType:     pulumi.String("m3u8"),
//							InheritTimeType: pulumi.String("sys_time"),
//						},
//					},
//					FlexibleOrigins: cdn.DomainConfigsFlexibleOriginArray{
//						&cdn.DomainConfigsFlexibleOriginArgs{
//							MatchType: pulumi.String("all"),
//							Priority:  pulumi.Int(1),
//							BackSources: &cdn.DomainConfigsFlexibleOriginBackSourcesArgs{
//								HttpPort:    pulumi.Int(80),
//								HttpsPort:   pulumi.Int(443),
//								IpOrDomain:  pulumi.Any(ipOrDomain),
//								SourcesType: pulumi.String("ipaddr"),
//							},
//						},
//					},
//					RequestLimitRules: cdn.DomainConfigsRequestLimitRuleArray{
//						&cdn.DomainConfigsRequestLimitRuleArgs{
//							LimitRateAfter: pulumi.Int(50),
//							LimitRateValue: pulumi.Int(1048576),
//							MatchType:      pulumi.String("catalog"),
//							MatchValue:     pulumi.String("/test/ff"),
//							Priority:       pulumi.Int(4),
//							Type:           pulumi.String("size"),
//						},
//					},
//					ErrorCodeCaches: cdn.DomainConfigsErrorCodeCachArray{
//						&cdn.DomainConfigsErrorCodeCachArgs{
//							Code: pulumi.Int(403),
//							Ttl:  pulumi.Int(70),
//						},
//					},
//					OriginRequestUrlRewrites: cdn.DomainConfigsOriginRequestUrlRewriteArray{
//						&cdn.DomainConfigsOriginRequestUrlRewriteArgs{
//							MatchType: pulumi.String("file_path"),
//							Priority:  pulumi.Int(10),
//							SourceUrl: pulumi.String("/tt/abc.txt"),
//							TargetUrl: pulumi.String(fmt.Sprintf("/new/$1/$2.html")),
//						},
//					},
//					UserAgentFilter: &cdn.DomainConfigsUserAgentFilterArgs{
//						Type:         pulumi.String("black"),
//						IncludeEmpty: pulumi.String("false"),
//						UaLists: pulumi.StringArray{
//							pulumi.String("t1*"),
//						},
//					},
//					Sni: &cdn.DomainConfigsSniArgs{
//						Enabled:    pulumi.Bool(true),
//						ServerName: pulumi.String("backup.all.cn.com"),
//					},
//					RequestUrlRewrites: cdn.DomainConfigsRequestUrlRewriteArray{
//						&cdn.DomainConfigsRequestUrlRewriteArgs{
//							ExecutionMode: pulumi.String("break"),
//							RedirectUrl:   pulumi.String("/test/index.html"),
//							Condition: &cdn.DomainConfigsRequestUrlRewriteConditionArgs{
//								MatchType:  pulumi.String("catalog"),
//								MatchValue: pulumi.String("/test/folder/1"),
//								Priority:   pulumi.Int(10),
//							},
//						},
//					},
//					BrowserCacheRules: cdn.DomainConfigsBrowserCacheRuleArray{
//						&cdn.DomainConfigsBrowserCacheRuleArgs{
//							CacheType: pulumi.String("ttl"),
//							Ttl:       pulumi.Int(30),
//							TtlUnit:   pulumi.String("m"),
//							Condition: &cdn.DomainConfigsBrowserCacheRuleConditionArgs{
//								MatchType:  pulumi.String("file_extension"),
//								MatchValue: pulumi.String(".jpg,.zip,.gz"),
//								Priority:   pulumi.Int(2),
//							},
//						},
//					},
//					ClientCert: &cdn.DomainConfigsClientCertArgs{
//						Enabled:     pulumi.Bool(true),
//						Hosts:       pulumi.String("demo1.com.cn|demo2.com.cn|demo3.com.cn"),
//						TrustedCert: pulumi.Any(caCertificateBody),
//					},
//					RemoteAuth: &cdn.DomainConfigsRemoteAuthArgs{
//						Enabled: pulumi.Bool(true),
//						RemoteAuthRules: &cdn.DomainConfigsRemoteAuthRemoteAuthRulesArgs{
//							AuthFailedStatus:      pulumi.String("503"),
//							AuthServer:            pulumi.String("https://testdomain-update.com"),
//							AuthSuccessStatus:     pulumi.String("302"),
//							FileTypeSetting:       pulumi.String("all"),
//							RequestMethod:         pulumi.String("POST"),
//							ReserveArgsSetting:    pulumi.String("reserve_all_args"),
//							ReserveHeadersSetting: pulumi.String("reserve_all_headers"),
//							ResponseStatus:        pulumi.String("206"),
//							Timeout:               pulumi.Int(3000),
//							TimeoutAction:         pulumi.String("forbid"),
//							AddCustomArgsRules: cdn.DomainConfigsRemoteAuthRemoteAuthRulesAddCustomArgsRuleArray{
//								&cdn.DomainConfigsRemoteAuthRemoteAuthRulesAddCustomArgsRuleArgs{
//									Key:   pulumi.String("http_user_agent"),
//									Type:  pulumi.String("nginx_preset_var"),
//									Value: pulumi.String(fmt.Sprintf("$server_protocol")),
//								},
//							},
//						},
//					},
//					Compress: &cdn.DomainConfigsCompressArgs{
//						Enabled: pulumi.Bool(false),
//					},
//					ForceRedirect: &cdn.DomainConfigsForceRedirectArgs{
//						Enabled: pulumi.Bool(true),
//						Type:    pulumi.String("http"),
//					},
//					Referer: &cdn.DomainConfigsRefererArgs{
//						Type:         pulumi.String("white"),
//						Value:        pulumi.String("*.common.com,192.187.2.43,www.test.top:4990"),
//						IncludeEmpty: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a CDN domain with SCM certificate HTTPS configs
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.RequireObject("domainName")
//			originServer := cfg.RequireObject("originServer")
//			certificateName := cfg.RequireObject("certificateName")
//			scmCertificateId := cfg.RequireObject("scmCertificateId")
//			_, err := Cdn.NewDomain(ctx, "test", &Cdn.DomainArgs{
//				Type:        pulumi.String("web"),
//				ServiceArea: pulumi.String("mainland_china"),
//				Sources: cdn.DomainSourceArray{
//					&cdn.DomainSourceArgs{
//						Origin:     pulumi.Any(originServer),
//						OriginType: pulumi.String("ipaddr"),
//						Active:     pulumi.Int(1),
//					},
//				},
//				Configs: &cdn.DomainConfigsArgs{
//					HttpsSettings: &cdn.DomainConfigsHttpsSettingsArgs{
//						CertificateSource: pulumi.Int(2),
//						CertificateName:   pulumi.Any(certificateName),
//						ScmCertificateId:  pulumi.Any(scmCertificateId),
//						CertificateType:   pulumi.String("server"),
//						Http2Enabled:      pulumi.Bool(true),
//						HttpsEnabled:      pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The CDN domain resource can be imported using the domain `name`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cdn/domain:Domain test <name>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`enterprise_project_id`, `configs.0.url_signing.0.key`, `configs.0.url_signing.0.backup_key`, `configs.0.https_settings.0.certificate_body`, `configs.0.https_settings.0.private_key`, `cache_settings`. It is generally recommended running `terraform plan` after importing a resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also, you can ignore changes as below. hcl resource "huaweicloud_cdn_domain" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	enterprise_project_id, configs.0.url_signing.0.key, configs.0.url_signing.0.backup_key,
//
//	configs.0.https_settings.0.certificate_body, configs.0.https_settings.0.private_key, cache_settings,
//
//	]
//
//	} }
type Domain struct {
	pulumi.CustomResourceState

	// Specifies the cache configuration. The cacheSettings structure
	// is documented below.
	CacheSettings DomainCacheSettingsOutput `pulumi:"cacheSettings"`
	// The CNAME of the acceleration domain name.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// Specifies the domain configuration items. The configs structure is
	// documented below.
	Configs DomainConfigsOutput `pulumi:"configs"`
	// schema: Internal
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The status of the acceleration domain name. The available values are
	// **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
	DomainStatus   pulumi.StringOutput    `pulumi:"domainStatus"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
	// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
	// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
	// and hyphens (-), and starts with a letter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the area covered by the acceleration service.
	// Valid values are as follows:
	// + **mainland_china**: Indicates that the service scope is mainland China.
	// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
	// + **global**: Indicates that the service scope is global.
	ServiceArea pulumi.StringOutput `pulumi:"serviceArea"`
	// Specifies an array of one or more objects specifying origin server settings.
	// A maximum of `50` origin site configurations can be configured.
	// The sources structure is documented below.
	Sources DomainSourceArrayOutput `pulumi:"sources"`
	// Specifies the key/value pairs to associate with the domain.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the blacklist and whitelist rule type. Valid values are:
	// + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
	//   returned.
	// + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
	//   returned for other users.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("huaweicloud:Cdn/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("huaweicloud:Cdn/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// Specifies the cache configuration. The cacheSettings structure
	// is documented below.
	CacheSettings *DomainCacheSettings `pulumi:"cacheSettings"`
	// The CNAME of the acceleration domain name.
	Cname *string `pulumi:"cname"`
	// Specifies the domain configuration items. The configs structure is
	// documented below.
	Configs *DomainConfigs `pulumi:"configs"`
	// schema: Internal
	DomainName *string `pulumi:"domainName"`
	// The status of the acceleration domain name. The available values are
	// **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
	DomainStatus   *string `pulumi:"domainStatus"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
	// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
	// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
	// and hyphens (-), and starts with a letter.
	Name *string `pulumi:"name"`
	// Specifies the area covered by the acceleration service.
	// Valid values are as follows:
	// + **mainland_china**: Indicates that the service scope is mainland China.
	// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
	// + **global**: Indicates that the service scope is global.
	ServiceArea *string `pulumi:"serviceArea"`
	// Specifies an array of one or more objects specifying origin server settings.
	// A maximum of `50` origin site configurations can be configured.
	// The sources structure is documented below.
	Sources []DomainSource `pulumi:"sources"`
	// Specifies the key/value pairs to associate with the domain.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the blacklist and whitelist rule type. Valid values are:
	// + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
	//   returned.
	// + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
	//   returned for other users.
	Type *string `pulumi:"type"`
}

type DomainState struct {
	// Specifies the cache configuration. The cacheSettings structure
	// is documented below.
	CacheSettings DomainCacheSettingsPtrInput
	// The CNAME of the acceleration domain name.
	Cname pulumi.StringPtrInput
	// Specifies the domain configuration items. The configs structure is
	// documented below.
	Configs DomainConfigsPtrInput
	// schema: Internal
	DomainName pulumi.StringPtrInput
	// The status of the acceleration domain name. The available values are
	// **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
	DomainStatus   pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
	// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
	// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
	// and hyphens (-), and starts with a letter.
	Name pulumi.StringPtrInput
	// Specifies the area covered by the acceleration service.
	// Valid values are as follows:
	// + **mainland_china**: Indicates that the service scope is mainland China.
	// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
	// + **global**: Indicates that the service scope is global.
	ServiceArea pulumi.StringPtrInput
	// Specifies an array of one or more objects specifying origin server settings.
	// A maximum of `50` origin site configurations can be configured.
	// The sources structure is documented below.
	Sources DomainSourceArrayInput
	// Specifies the key/value pairs to associate with the domain.
	Tags pulumi.StringMapInput
	// Specifies the blacklist and whitelist rule type. Valid values are:
	// + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
	//   returned.
	// + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
	//   returned for other users.
	Type pulumi.StringPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Specifies the cache configuration. The cacheSettings structure
	// is documented below.
	CacheSettings *DomainCacheSettings `pulumi:"cacheSettings"`
	// Specifies the domain configuration items. The configs structure is
	// documented below.
	Configs        *DomainConfigs `pulumi:"configs"`
	EnableForceNew *string        `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
	// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
	// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
	// and hyphens (-), and starts with a letter.
	Name *string `pulumi:"name"`
	// Specifies the area covered by the acceleration service.
	// Valid values are as follows:
	// + **mainland_china**: Indicates that the service scope is mainland China.
	// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
	// + **global**: Indicates that the service scope is global.
	ServiceArea *string `pulumi:"serviceArea"`
	// Specifies an array of one or more objects specifying origin server settings.
	// A maximum of `50` origin site configurations can be configured.
	// The sources structure is documented below.
	Sources []DomainSource `pulumi:"sources"`
	// Specifies the key/value pairs to associate with the domain.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the blacklist and whitelist rule type. Valid values are:
	// + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
	//   returned.
	// + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
	//   returned for other users.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Specifies the cache configuration. The cacheSettings structure
	// is documented below.
	CacheSettings DomainCacheSettingsPtrInput
	// Specifies the domain configuration items. The configs structure is
	// documented below.
	Configs        DomainConfigsPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
	// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
	// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
	// and hyphens (-), and starts with a letter.
	Name pulumi.StringPtrInput
	// Specifies the area covered by the acceleration service.
	// Valid values are as follows:
	// + **mainland_china**: Indicates that the service scope is mainland China.
	// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
	// + **global**: Indicates that the service scope is global.
	ServiceArea pulumi.StringPtrInput
	// Specifies an array of one or more objects specifying origin server settings.
	// A maximum of `50` origin site configurations can be configured.
	// The sources structure is documented below.
	Sources DomainSourceArrayInput
	// Specifies the key/value pairs to associate with the domain.
	Tags pulumi.StringMapInput
	// Specifies the blacklist and whitelist rule type. Valid values are:
	// + **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
	//   returned.
	// + **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
	//   returned for other users.
	Type pulumi.StringInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// Specifies the cache configuration. The cacheSettings structure
// is documented below.
func (o DomainOutput) CacheSettings() DomainCacheSettingsOutput {
	return o.ApplyT(func(v *Domain) DomainCacheSettingsOutput { return v.CacheSettings }).(DomainCacheSettingsOutput)
}

// The CNAME of the acceleration domain name.
func (o DomainOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// Specifies the domain configuration items. The configs structure is
// documented below.
func (o DomainOutput) Configs() DomainConfigsOutput {
	return o.ApplyT(func(v *Domain) DomainConfigsOutput { return v.Configs }).(DomainConfigsOutput)
}

// schema: Internal
func (o DomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The status of the acceleration domain name. The available values are
// **online**, **offline**, **configuring**, **configure_failed**, **checking**, **check_failed** and **deleting**.
func (o DomainOutput) DomainStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainStatus }).(pulumi.StringOutput)
}

func (o DomainOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID.
func (o DomainOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the HTTP response header. Valid values are **Content-Disposition**, **Content-Language**,
// **Access-Control-Allow-Origin**, **Access-Control-Allow-Methods**, **Access-Control-Max-Age**, **Access-Control-Expose-Headers**,
// **Access-Control-Allow-Headers** or custom headers. A header contains `1` to `100` characters, including letters, digits,
// and hyphens (-), and starts with a letter.
func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the area covered by the acceleration service.
// Valid values are as follows:
// + **mainland_china**: Indicates that the service scope is mainland China.
// + **outside_mainland_china**: Indicates that the service scope is outside mainland China.
// + **global**: Indicates that the service scope is global.
func (o DomainOutput) ServiceArea() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.ServiceArea }).(pulumi.StringOutput)
}

// Specifies an array of one or more objects specifying origin server settings.
// A maximum of `50` origin site configurations can be configured.
// The sources structure is documented below.
func (o DomainOutput) Sources() DomainSourceArrayOutput {
	return o.ApplyT(func(v *Domain) DomainSourceArrayOutput { return v.Sources }).(DomainSourceArrayOutput)
}

// Specifies the key/value pairs to associate with the domain.
func (o DomainOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the blacklist and whitelist rule type. Valid values are:
//   - **black**: Blacklist. Users in regions specified in the blacklist cannot access resources and status code `403` is
//     returned.
//   - **white**: Whitelist. Only users in regions specified in the whitelist can access resources. Status code `403` is
//     returned for other users.
func (o DomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}

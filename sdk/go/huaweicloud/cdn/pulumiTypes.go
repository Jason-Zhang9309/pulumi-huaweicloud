// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainCacheSettings struct {
	// Specifies whether to enable origin cache control.
	FollowOrigin *bool `pulumi:"followOrigin"`
	// Specifies the cache rules, which overwrite the previous rule configurations.
	// Blank rules are reset to default rules. The object structure is documented below.
	Rules []DomainCacheSettingsRule `pulumi:"rules"`
}

// DomainCacheSettingsInput is an input type that accepts DomainCacheSettingsArgs and DomainCacheSettingsOutput values.
// You can construct a concrete instance of `DomainCacheSettingsInput` via:
//
//	DomainCacheSettingsArgs{...}
type DomainCacheSettingsInput interface {
	pulumi.Input

	ToDomainCacheSettingsOutput() DomainCacheSettingsOutput
	ToDomainCacheSettingsOutputWithContext(context.Context) DomainCacheSettingsOutput
}

type DomainCacheSettingsArgs struct {
	// Specifies whether to enable origin cache control.
	FollowOrigin pulumi.BoolPtrInput `pulumi:"followOrigin"`
	// Specifies the cache rules, which overwrite the previous rule configurations.
	// Blank rules are reset to default rules. The object structure is documented below.
	Rules DomainCacheSettingsRuleArrayInput `pulumi:"rules"`
}

func (DomainCacheSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheSettings)(nil)).Elem()
}

func (i DomainCacheSettingsArgs) ToDomainCacheSettingsOutput() DomainCacheSettingsOutput {
	return i.ToDomainCacheSettingsOutputWithContext(context.Background())
}

func (i DomainCacheSettingsArgs) ToDomainCacheSettingsOutputWithContext(ctx context.Context) DomainCacheSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheSettingsOutput)
}

func (i DomainCacheSettingsArgs) ToDomainCacheSettingsPtrOutput() DomainCacheSettingsPtrOutput {
	return i.ToDomainCacheSettingsPtrOutputWithContext(context.Background())
}

func (i DomainCacheSettingsArgs) ToDomainCacheSettingsPtrOutputWithContext(ctx context.Context) DomainCacheSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheSettingsOutput).ToDomainCacheSettingsPtrOutputWithContext(ctx)
}

// DomainCacheSettingsPtrInput is an input type that accepts DomainCacheSettingsArgs, DomainCacheSettingsPtr and DomainCacheSettingsPtrOutput values.
// You can construct a concrete instance of `DomainCacheSettingsPtrInput` via:
//
//	        DomainCacheSettingsArgs{...}
//
//	or:
//
//	        nil
type DomainCacheSettingsPtrInput interface {
	pulumi.Input

	ToDomainCacheSettingsPtrOutput() DomainCacheSettingsPtrOutput
	ToDomainCacheSettingsPtrOutputWithContext(context.Context) DomainCacheSettingsPtrOutput
}

type domainCacheSettingsPtrType DomainCacheSettingsArgs

func DomainCacheSettingsPtr(v *DomainCacheSettingsArgs) DomainCacheSettingsPtrInput {
	return (*domainCacheSettingsPtrType)(v)
}

func (*domainCacheSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCacheSettings)(nil)).Elem()
}

func (i *domainCacheSettingsPtrType) ToDomainCacheSettingsPtrOutput() DomainCacheSettingsPtrOutput {
	return i.ToDomainCacheSettingsPtrOutputWithContext(context.Background())
}

func (i *domainCacheSettingsPtrType) ToDomainCacheSettingsPtrOutputWithContext(ctx context.Context) DomainCacheSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheSettingsPtrOutput)
}

type DomainCacheSettingsOutput struct{ *pulumi.OutputState }

func (DomainCacheSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheSettings)(nil)).Elem()
}

func (o DomainCacheSettingsOutput) ToDomainCacheSettingsOutput() DomainCacheSettingsOutput {
	return o
}

func (o DomainCacheSettingsOutput) ToDomainCacheSettingsOutputWithContext(ctx context.Context) DomainCacheSettingsOutput {
	return o
}

func (o DomainCacheSettingsOutput) ToDomainCacheSettingsPtrOutput() DomainCacheSettingsPtrOutput {
	return o.ToDomainCacheSettingsPtrOutputWithContext(context.Background())
}

func (o DomainCacheSettingsOutput) ToDomainCacheSettingsPtrOutputWithContext(ctx context.Context) DomainCacheSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainCacheSettings) *DomainCacheSettings {
		return &v
	}).(DomainCacheSettingsPtrOutput)
}

// Specifies whether to enable origin cache control.
func (o DomainCacheSettingsOutput) FollowOrigin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCacheSettings) *bool { return v.FollowOrigin }).(pulumi.BoolPtrOutput)
}

// Specifies the cache rules, which overwrite the previous rule configurations.
// Blank rules are reset to default rules. The object structure is documented below.
func (o DomainCacheSettingsOutput) Rules() DomainCacheSettingsRuleArrayOutput {
	return o.ApplyT(func(v DomainCacheSettings) []DomainCacheSettingsRule { return v.Rules }).(DomainCacheSettingsRuleArrayOutput)
}

type DomainCacheSettingsPtrOutput struct{ *pulumi.OutputState }

func (DomainCacheSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCacheSettings)(nil)).Elem()
}

func (o DomainCacheSettingsPtrOutput) ToDomainCacheSettingsPtrOutput() DomainCacheSettingsPtrOutput {
	return o
}

func (o DomainCacheSettingsPtrOutput) ToDomainCacheSettingsPtrOutputWithContext(ctx context.Context) DomainCacheSettingsPtrOutput {
	return o
}

func (o DomainCacheSettingsPtrOutput) Elem() DomainCacheSettingsOutput {
	return o.ApplyT(func(v *DomainCacheSettings) DomainCacheSettings {
		if v != nil {
			return *v
		}
		var ret DomainCacheSettings
		return ret
	}).(DomainCacheSettingsOutput)
}

// Specifies whether to enable origin cache control.
func (o DomainCacheSettingsPtrOutput) FollowOrigin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainCacheSettings) *bool {
		if v == nil {
			return nil
		}
		return v.FollowOrigin
	}).(pulumi.BoolPtrOutput)
}

// Specifies the cache rules, which overwrite the previous rule configurations.
// Blank rules are reset to default rules. The object structure is documented below.
func (o DomainCacheSettingsPtrOutput) Rules() DomainCacheSettingsRuleArrayOutput {
	return o.ApplyT(func(v *DomainCacheSettings) []DomainCacheSettingsRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(DomainCacheSettingsRuleArrayOutput)
}

type DomainCacheSettingsRule struct {
	// Specifies the content that matches `ruleType`. If `ruleType` is set to **0**,
	// this parameter is empty. If `ruleType` is set to **1**, the value of this parameter is a list of file name
	// extensions. A file name extension starts with a period (.). File name extensions are separated by semicolons (;),
	// for example, .jpg;.zip;.exe. If `ruleType` is set to **2**, the value of this parameter is a list of directories.
	// A directory starts with a slash (/). Directories are separated by semicolons (;), for example,
	// /test/folder01;/test/folder02.
	Content *string `pulumi:"content"`
	// Specifies the priority weight of this rule. The default value is 1.
	// A larger value indicates a higher priority. The value ranges from 1 to 100. The weight values must be unique.
	Priority *int `pulumi:"priority"`
	// Specifies the rule type. Possible value are:
	// **0**: All types of files are matched. It is the default value.
	// **1**: Files are matched based on their suffixes.
	// **2**: Files are matched based on their directories.
	// **3**: Files are matched based on their full paths.
	RuleType int `pulumi:"ruleType"`
	// Specifies the cache age. The maximum cache age is 365 days.
	Ttl *int `pulumi:"ttl"`
	// Specifies the unit of the cache age. Possible values: **1** (second), **2** (minute),
	// **3** (hour), and **4** (day).
	TtlType *int `pulumi:"ttlType"`
}

// DomainCacheSettingsRuleInput is an input type that accepts DomainCacheSettingsRuleArgs and DomainCacheSettingsRuleOutput values.
// You can construct a concrete instance of `DomainCacheSettingsRuleInput` via:
//
//	DomainCacheSettingsRuleArgs{...}
type DomainCacheSettingsRuleInput interface {
	pulumi.Input

	ToDomainCacheSettingsRuleOutput() DomainCacheSettingsRuleOutput
	ToDomainCacheSettingsRuleOutputWithContext(context.Context) DomainCacheSettingsRuleOutput
}

type DomainCacheSettingsRuleArgs struct {
	// Specifies the content that matches `ruleType`. If `ruleType` is set to **0**,
	// this parameter is empty. If `ruleType` is set to **1**, the value of this parameter is a list of file name
	// extensions. A file name extension starts with a period (.). File name extensions are separated by semicolons (;),
	// for example, .jpg;.zip;.exe. If `ruleType` is set to **2**, the value of this parameter is a list of directories.
	// A directory starts with a slash (/). Directories are separated by semicolons (;), for example,
	// /test/folder01;/test/folder02.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Specifies the priority weight of this rule. The default value is 1.
	// A larger value indicates a higher priority. The value ranges from 1 to 100. The weight values must be unique.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Specifies the rule type. Possible value are:
	// **0**: All types of files are matched. It is the default value.
	// **1**: Files are matched based on their suffixes.
	// **2**: Files are matched based on their directories.
	// **3**: Files are matched based on their full paths.
	RuleType pulumi.IntInput `pulumi:"ruleType"`
	// Specifies the cache age. The maximum cache age is 365 days.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
	// Specifies the unit of the cache age. Possible values: **1** (second), **2** (minute),
	// **3** (hour), and **4** (day).
	TtlType pulumi.IntPtrInput `pulumi:"ttlType"`
}

func (DomainCacheSettingsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheSettingsRule)(nil)).Elem()
}

func (i DomainCacheSettingsRuleArgs) ToDomainCacheSettingsRuleOutput() DomainCacheSettingsRuleOutput {
	return i.ToDomainCacheSettingsRuleOutputWithContext(context.Background())
}

func (i DomainCacheSettingsRuleArgs) ToDomainCacheSettingsRuleOutputWithContext(ctx context.Context) DomainCacheSettingsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheSettingsRuleOutput)
}

// DomainCacheSettingsRuleArrayInput is an input type that accepts DomainCacheSettingsRuleArray and DomainCacheSettingsRuleArrayOutput values.
// You can construct a concrete instance of `DomainCacheSettingsRuleArrayInput` via:
//
//	DomainCacheSettingsRuleArray{ DomainCacheSettingsRuleArgs{...} }
type DomainCacheSettingsRuleArrayInput interface {
	pulumi.Input

	ToDomainCacheSettingsRuleArrayOutput() DomainCacheSettingsRuleArrayOutput
	ToDomainCacheSettingsRuleArrayOutputWithContext(context.Context) DomainCacheSettingsRuleArrayOutput
}

type DomainCacheSettingsRuleArray []DomainCacheSettingsRuleInput

func (DomainCacheSettingsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainCacheSettingsRule)(nil)).Elem()
}

func (i DomainCacheSettingsRuleArray) ToDomainCacheSettingsRuleArrayOutput() DomainCacheSettingsRuleArrayOutput {
	return i.ToDomainCacheSettingsRuleArrayOutputWithContext(context.Background())
}

func (i DomainCacheSettingsRuleArray) ToDomainCacheSettingsRuleArrayOutputWithContext(ctx context.Context) DomainCacheSettingsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheSettingsRuleArrayOutput)
}

type DomainCacheSettingsRuleOutput struct{ *pulumi.OutputState }

func (DomainCacheSettingsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheSettingsRule)(nil)).Elem()
}

func (o DomainCacheSettingsRuleOutput) ToDomainCacheSettingsRuleOutput() DomainCacheSettingsRuleOutput {
	return o
}

func (o DomainCacheSettingsRuleOutput) ToDomainCacheSettingsRuleOutputWithContext(ctx context.Context) DomainCacheSettingsRuleOutput {
	return o
}

// Specifies the content that matches `ruleType`. If `ruleType` is set to **0**,
// this parameter is empty. If `ruleType` is set to **1**, the value of this parameter is a list of file name
// extensions. A file name extension starts with a period (.). File name extensions are separated by semicolons (;),
// for example, .jpg;.zip;.exe. If `ruleType` is set to **2**, the value of this parameter is a list of directories.
// A directory starts with a slash (/). Directories are separated by semicolons (;), for example,
// /test/folder01;/test/folder02.
func (o DomainCacheSettingsRuleOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainCacheSettingsRule) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Specifies the priority weight of this rule. The default value is 1.
// A larger value indicates a higher priority. The value ranges from 1 to 100. The weight values must be unique.
func (o DomainCacheSettingsRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainCacheSettingsRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Specifies the rule type. Possible value are:
// **0**: All types of files are matched. It is the default value.
// **1**: Files are matched based on their suffixes.
// **2**: Files are matched based on their directories.
// **3**: Files are matched based on their full paths.
func (o DomainCacheSettingsRuleOutput) RuleType() pulumi.IntOutput {
	return o.ApplyT(func(v DomainCacheSettingsRule) int { return v.RuleType }).(pulumi.IntOutput)
}

// Specifies the cache age. The maximum cache age is 365 days.
func (o DomainCacheSettingsRuleOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainCacheSettingsRule) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

// Specifies the unit of the cache age. Possible values: **1** (second), **2** (minute),
// **3** (hour), and **4** (day).
func (o DomainCacheSettingsRuleOutput) TtlType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainCacheSettingsRule) *int { return v.TtlType }).(pulumi.IntPtrOutput)
}

type DomainCacheSettingsRuleArrayOutput struct{ *pulumi.OutputState }

func (DomainCacheSettingsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainCacheSettingsRule)(nil)).Elem()
}

func (o DomainCacheSettingsRuleArrayOutput) ToDomainCacheSettingsRuleArrayOutput() DomainCacheSettingsRuleArrayOutput {
	return o
}

func (o DomainCacheSettingsRuleArrayOutput) ToDomainCacheSettingsRuleArrayOutputWithContext(ctx context.Context) DomainCacheSettingsRuleArrayOutput {
	return o
}

func (o DomainCacheSettingsRuleArrayOutput) Index(i pulumi.IntInput) DomainCacheSettingsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainCacheSettingsRule {
		return vs[0].([]DomainCacheSettingsRule)[vs[1].(int)]
	}).(DomainCacheSettingsRuleOutput)
}

type DomainConfigs struct {
	// Specifies the settings for caching URL parameters.
	// The object structure is documented below.
	CacheUrlParameterFilter *DomainConfigsCacheUrlParameterFilter `pulumi:"cacheUrlParameterFilter"`
	// Specifies the smart compression. The object structure
	// is documented below.
	Compress *DomainConfigsCompress `pulumi:"compress"`
	// Specifies the force redirect.
	// The object structure is documented below.
	ForceRedirect *DomainConfigsForceRedirect `pulumi:"forceRedirect"`
	// Specifies the HTTP response header settings.
	// The object structure is documented below.
	HttpResponseHeaders []DomainConfigsHttpResponseHeader `pulumi:"httpResponseHeaders"`
	// Specifies the certificate configuration. The object
	// structure is documented below.
	HttpsSettings *DomainConfigsHttpsSettings `pulumi:"httpsSettings"`
	// Specifies whether to enable IPv6.
	Ipv6Enable *bool `pulumi:"ipv6Enable"`
	// Specifies the content retrieval protocol. Possible values:
	// + **follow**: same as user requests.
	// + **http**: HTTP, which is the default value.
	// + **https**: HTTPS.
	OriginProtocol *string `pulumi:"originProtocol"`
	// Specifies whether to enable range-based retrieval.
	RangeBasedRetrievalEnabled *bool `pulumi:"rangeBasedRetrievalEnabled"`
	// Specifies the retrieval request header settings.
	// The object structure is documented below.
	RetrievalRequestHeaders []DomainConfigsRetrievalRequestHeader `pulumi:"retrievalRequestHeaders"`
	// Specifies the URL signing.
	// The object structure is documented below.
	UrlSigning *DomainConfigsUrlSigning `pulumi:"urlSigning"`
}

// DomainConfigsInput is an input type that accepts DomainConfigsArgs and DomainConfigsOutput values.
// You can construct a concrete instance of `DomainConfigsInput` via:
//
//	DomainConfigsArgs{...}
type DomainConfigsInput interface {
	pulumi.Input

	ToDomainConfigsOutput() DomainConfigsOutput
	ToDomainConfigsOutputWithContext(context.Context) DomainConfigsOutput
}

type DomainConfigsArgs struct {
	// Specifies the settings for caching URL parameters.
	// The object structure is documented below.
	CacheUrlParameterFilter DomainConfigsCacheUrlParameterFilterPtrInput `pulumi:"cacheUrlParameterFilter"`
	// Specifies the smart compression. The object structure
	// is documented below.
	Compress DomainConfigsCompressPtrInput `pulumi:"compress"`
	// Specifies the force redirect.
	// The object structure is documented below.
	ForceRedirect DomainConfigsForceRedirectPtrInput `pulumi:"forceRedirect"`
	// Specifies the HTTP response header settings.
	// The object structure is documented below.
	HttpResponseHeaders DomainConfigsHttpResponseHeaderArrayInput `pulumi:"httpResponseHeaders"`
	// Specifies the certificate configuration. The object
	// structure is documented below.
	HttpsSettings DomainConfigsHttpsSettingsPtrInput `pulumi:"httpsSettings"`
	// Specifies whether to enable IPv6.
	Ipv6Enable pulumi.BoolPtrInput `pulumi:"ipv6Enable"`
	// Specifies the content retrieval protocol. Possible values:
	// + **follow**: same as user requests.
	// + **http**: HTTP, which is the default value.
	// + **https**: HTTPS.
	OriginProtocol pulumi.StringPtrInput `pulumi:"originProtocol"`
	// Specifies whether to enable range-based retrieval.
	RangeBasedRetrievalEnabled pulumi.BoolPtrInput `pulumi:"rangeBasedRetrievalEnabled"`
	// Specifies the retrieval request header settings.
	// The object structure is documented below.
	RetrievalRequestHeaders DomainConfigsRetrievalRequestHeaderArrayInput `pulumi:"retrievalRequestHeaders"`
	// Specifies the URL signing.
	// The object structure is documented below.
	UrlSigning DomainConfigsUrlSigningPtrInput `pulumi:"urlSigning"`
}

func (DomainConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigs)(nil)).Elem()
}

func (i DomainConfigsArgs) ToDomainConfigsOutput() DomainConfigsOutput {
	return i.ToDomainConfigsOutputWithContext(context.Background())
}

func (i DomainConfigsArgs) ToDomainConfigsOutputWithContext(ctx context.Context) DomainConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsOutput)
}

func (i DomainConfigsArgs) ToDomainConfigsPtrOutput() DomainConfigsPtrOutput {
	return i.ToDomainConfigsPtrOutputWithContext(context.Background())
}

func (i DomainConfigsArgs) ToDomainConfigsPtrOutputWithContext(ctx context.Context) DomainConfigsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsOutput).ToDomainConfigsPtrOutputWithContext(ctx)
}

// DomainConfigsPtrInput is an input type that accepts DomainConfigsArgs, DomainConfigsPtr and DomainConfigsPtrOutput values.
// You can construct a concrete instance of `DomainConfigsPtrInput` via:
//
//	        DomainConfigsArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsPtrInput interface {
	pulumi.Input

	ToDomainConfigsPtrOutput() DomainConfigsPtrOutput
	ToDomainConfigsPtrOutputWithContext(context.Context) DomainConfigsPtrOutput
}

type domainConfigsPtrType DomainConfigsArgs

func DomainConfigsPtr(v *DomainConfigsArgs) DomainConfigsPtrInput {
	return (*domainConfigsPtrType)(v)
}

func (*domainConfigsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigs)(nil)).Elem()
}

func (i *domainConfigsPtrType) ToDomainConfigsPtrOutput() DomainConfigsPtrOutput {
	return i.ToDomainConfigsPtrOutputWithContext(context.Background())
}

func (i *domainConfigsPtrType) ToDomainConfigsPtrOutputWithContext(ctx context.Context) DomainConfigsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsPtrOutput)
}

type DomainConfigsOutput struct{ *pulumi.OutputState }

func (DomainConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigs)(nil)).Elem()
}

func (o DomainConfigsOutput) ToDomainConfigsOutput() DomainConfigsOutput {
	return o
}

func (o DomainConfigsOutput) ToDomainConfigsOutputWithContext(ctx context.Context) DomainConfigsOutput {
	return o
}

func (o DomainConfigsOutput) ToDomainConfigsPtrOutput() DomainConfigsPtrOutput {
	return o.ToDomainConfigsPtrOutputWithContext(context.Background())
}

func (o DomainConfigsOutput) ToDomainConfigsPtrOutputWithContext(ctx context.Context) DomainConfigsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigs) *DomainConfigs {
		return &v
	}).(DomainConfigsPtrOutput)
}

// Specifies the settings for caching URL parameters.
// The object structure is documented below.
func (o DomainConfigsOutput) CacheUrlParameterFilter() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *DomainConfigsCacheUrlParameterFilter { return v.CacheUrlParameterFilter }).(DomainConfigsCacheUrlParameterFilterPtrOutput)
}

// Specifies the smart compression. The object structure
// is documented below.
func (o DomainConfigsOutput) Compress() DomainConfigsCompressPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *DomainConfigsCompress { return v.Compress }).(DomainConfigsCompressPtrOutput)
}

// Specifies the force redirect.
// The object structure is documented below.
func (o DomainConfigsOutput) ForceRedirect() DomainConfigsForceRedirectPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *DomainConfigsForceRedirect { return v.ForceRedirect }).(DomainConfigsForceRedirectPtrOutput)
}

// Specifies the HTTP response header settings.
// The object structure is documented below.
func (o DomainConfigsOutput) HttpResponseHeaders() DomainConfigsHttpResponseHeaderArrayOutput {
	return o.ApplyT(func(v DomainConfigs) []DomainConfigsHttpResponseHeader { return v.HttpResponseHeaders }).(DomainConfigsHttpResponseHeaderArrayOutput)
}

// Specifies the certificate configuration. The object
// structure is documented below.
func (o DomainConfigsOutput) HttpsSettings() DomainConfigsHttpsSettingsPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *DomainConfigsHttpsSettings { return v.HttpsSettings }).(DomainConfigsHttpsSettingsPtrOutput)
}

// Specifies whether to enable IPv6.
func (o DomainConfigsOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *bool { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

// Specifies the content retrieval protocol. Possible values:
// + **follow**: same as user requests.
// + **http**: HTTP, which is the default value.
// + **https**: HTTPS.
func (o DomainConfigsOutput) OriginProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *string { return v.OriginProtocol }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable range-based retrieval.
func (o DomainConfigsOutput) RangeBasedRetrievalEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *bool { return v.RangeBasedRetrievalEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the retrieval request header settings.
// The object structure is documented below.
func (o DomainConfigsOutput) RetrievalRequestHeaders() DomainConfigsRetrievalRequestHeaderArrayOutput {
	return o.ApplyT(func(v DomainConfigs) []DomainConfigsRetrievalRequestHeader { return v.RetrievalRequestHeaders }).(DomainConfigsRetrievalRequestHeaderArrayOutput)
}

// Specifies the URL signing.
// The object structure is documented below.
func (o DomainConfigsOutput) UrlSigning() DomainConfigsUrlSigningPtrOutput {
	return o.ApplyT(func(v DomainConfigs) *DomainConfigsUrlSigning { return v.UrlSigning }).(DomainConfigsUrlSigningPtrOutput)
}

type DomainConfigsPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigs)(nil)).Elem()
}

func (o DomainConfigsPtrOutput) ToDomainConfigsPtrOutput() DomainConfigsPtrOutput {
	return o
}

func (o DomainConfigsPtrOutput) ToDomainConfigsPtrOutputWithContext(ctx context.Context) DomainConfigsPtrOutput {
	return o
}

func (o DomainConfigsPtrOutput) Elem() DomainConfigsOutput {
	return o.ApplyT(func(v *DomainConfigs) DomainConfigs {
		if v != nil {
			return *v
		}
		var ret DomainConfigs
		return ret
	}).(DomainConfigsOutput)
}

// Specifies the settings for caching URL parameters.
// The object structure is documented below.
func (o DomainConfigsPtrOutput) CacheUrlParameterFilter() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *DomainConfigsCacheUrlParameterFilter {
		if v == nil {
			return nil
		}
		return v.CacheUrlParameterFilter
	}).(DomainConfigsCacheUrlParameterFilterPtrOutput)
}

// Specifies the smart compression. The object structure
// is documented below.
func (o DomainConfigsPtrOutput) Compress() DomainConfigsCompressPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *DomainConfigsCompress {
		if v == nil {
			return nil
		}
		return v.Compress
	}).(DomainConfigsCompressPtrOutput)
}

// Specifies the force redirect.
// The object structure is documented below.
func (o DomainConfigsPtrOutput) ForceRedirect() DomainConfigsForceRedirectPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *DomainConfigsForceRedirect {
		if v == nil {
			return nil
		}
		return v.ForceRedirect
	}).(DomainConfigsForceRedirectPtrOutput)
}

// Specifies the HTTP response header settings.
// The object structure is documented below.
func (o DomainConfigsPtrOutput) HttpResponseHeaders() DomainConfigsHttpResponseHeaderArrayOutput {
	return o.ApplyT(func(v *DomainConfigs) []DomainConfigsHttpResponseHeader {
		if v == nil {
			return nil
		}
		return v.HttpResponseHeaders
	}).(DomainConfigsHttpResponseHeaderArrayOutput)
}

// Specifies the certificate configuration. The object
// structure is documented below.
func (o DomainConfigsPtrOutput) HttpsSettings() DomainConfigsHttpsSettingsPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *DomainConfigsHttpsSettings {
		if v == nil {
			return nil
		}
		return v.HttpsSettings
	}).(DomainConfigsHttpsSettingsPtrOutput)
}

// Specifies whether to enable IPv6.
func (o DomainConfigsPtrOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv6Enable
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content retrieval protocol. Possible values:
// + **follow**: same as user requests.
// + **http**: HTTP, which is the default value.
// + **https**: HTTPS.
func (o DomainConfigsPtrOutput) OriginProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *string {
		if v == nil {
			return nil
		}
		return v.OriginProtocol
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable range-based retrieval.
func (o DomainConfigsPtrOutput) RangeBasedRetrievalEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *bool {
		if v == nil {
			return nil
		}
		return v.RangeBasedRetrievalEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the retrieval request header settings.
// The object structure is documented below.
func (o DomainConfigsPtrOutput) RetrievalRequestHeaders() DomainConfigsRetrievalRequestHeaderArrayOutput {
	return o.ApplyT(func(v *DomainConfigs) []DomainConfigsRetrievalRequestHeader {
		if v == nil {
			return nil
		}
		return v.RetrievalRequestHeaders
	}).(DomainConfigsRetrievalRequestHeaderArrayOutput)
}

// Specifies the URL signing.
// The object structure is documented below.
func (o DomainConfigsPtrOutput) UrlSigning() DomainConfigsUrlSigningPtrOutput {
	return o.ApplyT(func(v *DomainConfigs) *DomainConfigsUrlSigning {
		if v == nil {
			return nil
		}
		return v.UrlSigning
	}).(DomainConfigsUrlSigningPtrOutput)
}

type DomainConfigsCacheUrlParameterFilter struct {
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type *string `pulumi:"type"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value *string `pulumi:"value"`
}

// DomainConfigsCacheUrlParameterFilterInput is an input type that accepts DomainConfigsCacheUrlParameterFilterArgs and DomainConfigsCacheUrlParameterFilterOutput values.
// You can construct a concrete instance of `DomainConfigsCacheUrlParameterFilterInput` via:
//
//	DomainConfigsCacheUrlParameterFilterArgs{...}
type DomainConfigsCacheUrlParameterFilterInput interface {
	pulumi.Input

	ToDomainConfigsCacheUrlParameterFilterOutput() DomainConfigsCacheUrlParameterFilterOutput
	ToDomainConfigsCacheUrlParameterFilterOutputWithContext(context.Context) DomainConfigsCacheUrlParameterFilterOutput
}

type DomainConfigsCacheUrlParameterFilterArgs struct {
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainConfigsCacheUrlParameterFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsCacheUrlParameterFilter)(nil)).Elem()
}

func (i DomainConfigsCacheUrlParameterFilterArgs) ToDomainConfigsCacheUrlParameterFilterOutput() DomainConfigsCacheUrlParameterFilterOutput {
	return i.ToDomainConfigsCacheUrlParameterFilterOutputWithContext(context.Background())
}

func (i DomainConfigsCacheUrlParameterFilterArgs) ToDomainConfigsCacheUrlParameterFilterOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCacheUrlParameterFilterOutput)
}

func (i DomainConfigsCacheUrlParameterFilterArgs) ToDomainConfigsCacheUrlParameterFilterPtrOutput() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return i.ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(context.Background())
}

func (i DomainConfigsCacheUrlParameterFilterArgs) ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCacheUrlParameterFilterOutput).ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(ctx)
}

// DomainConfigsCacheUrlParameterFilterPtrInput is an input type that accepts DomainConfigsCacheUrlParameterFilterArgs, DomainConfigsCacheUrlParameterFilterPtr and DomainConfigsCacheUrlParameterFilterPtrOutput values.
// You can construct a concrete instance of `DomainConfigsCacheUrlParameterFilterPtrInput` via:
//
//	        DomainConfigsCacheUrlParameterFilterArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsCacheUrlParameterFilterPtrInput interface {
	pulumi.Input

	ToDomainConfigsCacheUrlParameterFilterPtrOutput() DomainConfigsCacheUrlParameterFilterPtrOutput
	ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(context.Context) DomainConfigsCacheUrlParameterFilterPtrOutput
}

type domainConfigsCacheUrlParameterFilterPtrType DomainConfigsCacheUrlParameterFilterArgs

func DomainConfigsCacheUrlParameterFilterPtr(v *DomainConfigsCacheUrlParameterFilterArgs) DomainConfigsCacheUrlParameterFilterPtrInput {
	return (*domainConfigsCacheUrlParameterFilterPtrType)(v)
}

func (*domainConfigsCacheUrlParameterFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsCacheUrlParameterFilter)(nil)).Elem()
}

func (i *domainConfigsCacheUrlParameterFilterPtrType) ToDomainConfigsCacheUrlParameterFilterPtrOutput() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return i.ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(context.Background())
}

func (i *domainConfigsCacheUrlParameterFilterPtrType) ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCacheUrlParameterFilterPtrOutput)
}

type DomainConfigsCacheUrlParameterFilterOutput struct{ *pulumi.OutputState }

func (DomainConfigsCacheUrlParameterFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsCacheUrlParameterFilter)(nil)).Elem()
}

func (o DomainConfigsCacheUrlParameterFilterOutput) ToDomainConfigsCacheUrlParameterFilterOutput() DomainConfigsCacheUrlParameterFilterOutput {
	return o
}

func (o DomainConfigsCacheUrlParameterFilterOutput) ToDomainConfigsCacheUrlParameterFilterOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterOutput {
	return o
}

func (o DomainConfigsCacheUrlParameterFilterOutput) ToDomainConfigsCacheUrlParameterFilterPtrOutput() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o.ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(context.Background())
}

func (o DomainConfigsCacheUrlParameterFilterOutput) ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigsCacheUrlParameterFilter) *DomainConfigsCacheUrlParameterFilter {
		return &v
	}).(DomainConfigsCacheUrlParameterFilterPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsCacheUrlParameterFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsCacheUrlParameterFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the parameter values. Multiple values are separated by semicolons (;).
func (o DomainConfigsCacheUrlParameterFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsCacheUrlParameterFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainConfigsCacheUrlParameterFilterPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsCacheUrlParameterFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsCacheUrlParameterFilter)(nil)).Elem()
}

func (o DomainConfigsCacheUrlParameterFilterPtrOutput) ToDomainConfigsCacheUrlParameterFilterPtrOutput() DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o
}

func (o DomainConfigsCacheUrlParameterFilterPtrOutput) ToDomainConfigsCacheUrlParameterFilterPtrOutputWithContext(ctx context.Context) DomainConfigsCacheUrlParameterFilterPtrOutput {
	return o
}

func (o DomainConfigsCacheUrlParameterFilterPtrOutput) Elem() DomainConfigsCacheUrlParameterFilterOutput {
	return o.ApplyT(func(v *DomainConfigsCacheUrlParameterFilter) DomainConfigsCacheUrlParameterFilter {
		if v != nil {
			return *v
		}
		var ret DomainConfigsCacheUrlParameterFilter
		return ret
	}).(DomainConfigsCacheUrlParameterFilterOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsCacheUrlParameterFilterPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsCacheUrlParameterFilter) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the parameter values. Multiple values are separated by semicolons (;).
func (o DomainConfigsCacheUrlParameterFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsCacheUrlParameterFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type DomainConfigsCompress struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled bool    `pulumi:"enabled"`
	Status  *string `pulumi:"status"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type *string `pulumi:"type"`
}

// DomainConfigsCompressInput is an input type that accepts DomainConfigsCompressArgs and DomainConfigsCompressOutput values.
// You can construct a concrete instance of `DomainConfigsCompressInput` via:
//
//	DomainConfigsCompressArgs{...}
type DomainConfigsCompressInput interface {
	pulumi.Input

	ToDomainConfigsCompressOutput() DomainConfigsCompressOutput
	ToDomainConfigsCompressOutputWithContext(context.Context) DomainConfigsCompressOutput
}

type DomainConfigsCompressArgs struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled pulumi.BoolInput      `pulumi:"enabled"`
	Status  pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DomainConfigsCompressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsCompress)(nil)).Elem()
}

func (i DomainConfigsCompressArgs) ToDomainConfigsCompressOutput() DomainConfigsCompressOutput {
	return i.ToDomainConfigsCompressOutputWithContext(context.Background())
}

func (i DomainConfigsCompressArgs) ToDomainConfigsCompressOutputWithContext(ctx context.Context) DomainConfigsCompressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCompressOutput)
}

func (i DomainConfigsCompressArgs) ToDomainConfigsCompressPtrOutput() DomainConfigsCompressPtrOutput {
	return i.ToDomainConfigsCompressPtrOutputWithContext(context.Background())
}

func (i DomainConfigsCompressArgs) ToDomainConfigsCompressPtrOutputWithContext(ctx context.Context) DomainConfigsCompressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCompressOutput).ToDomainConfigsCompressPtrOutputWithContext(ctx)
}

// DomainConfigsCompressPtrInput is an input type that accepts DomainConfigsCompressArgs, DomainConfigsCompressPtr and DomainConfigsCompressPtrOutput values.
// You can construct a concrete instance of `DomainConfigsCompressPtrInput` via:
//
//	        DomainConfigsCompressArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsCompressPtrInput interface {
	pulumi.Input

	ToDomainConfigsCompressPtrOutput() DomainConfigsCompressPtrOutput
	ToDomainConfigsCompressPtrOutputWithContext(context.Context) DomainConfigsCompressPtrOutput
}

type domainConfigsCompressPtrType DomainConfigsCompressArgs

func DomainConfigsCompressPtr(v *DomainConfigsCompressArgs) DomainConfigsCompressPtrInput {
	return (*domainConfigsCompressPtrType)(v)
}

func (*domainConfigsCompressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsCompress)(nil)).Elem()
}

func (i *domainConfigsCompressPtrType) ToDomainConfigsCompressPtrOutput() DomainConfigsCompressPtrOutput {
	return i.ToDomainConfigsCompressPtrOutputWithContext(context.Background())
}

func (i *domainConfigsCompressPtrType) ToDomainConfigsCompressPtrOutputWithContext(ctx context.Context) DomainConfigsCompressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsCompressPtrOutput)
}

type DomainConfigsCompressOutput struct{ *pulumi.OutputState }

func (DomainConfigsCompressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsCompress)(nil)).Elem()
}

func (o DomainConfigsCompressOutput) ToDomainConfigsCompressOutput() DomainConfigsCompressOutput {
	return o
}

func (o DomainConfigsCompressOutput) ToDomainConfigsCompressOutputWithContext(ctx context.Context) DomainConfigsCompressOutput {
	return o
}

func (o DomainConfigsCompressOutput) ToDomainConfigsCompressPtrOutput() DomainConfigsCompressPtrOutput {
	return o.ToDomainConfigsCompressPtrOutputWithContext(context.Background())
}

func (o DomainConfigsCompressOutput) ToDomainConfigsCompressPtrOutputWithContext(ctx context.Context) DomainConfigsCompressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigsCompress) *DomainConfigsCompress {
		return &v
	}).(DomainConfigsCompressPtrOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsCompressOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainConfigsCompress) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o DomainConfigsCompressOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsCompress) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsCompressOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsCompress) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DomainConfigsCompressPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsCompressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsCompress)(nil)).Elem()
}

func (o DomainConfigsCompressPtrOutput) ToDomainConfigsCompressPtrOutput() DomainConfigsCompressPtrOutput {
	return o
}

func (o DomainConfigsCompressPtrOutput) ToDomainConfigsCompressPtrOutputWithContext(ctx context.Context) DomainConfigsCompressPtrOutput {
	return o
}

func (o DomainConfigsCompressPtrOutput) Elem() DomainConfigsCompressOutput {
	return o.ApplyT(func(v *DomainConfigsCompress) DomainConfigsCompress {
		if v != nil {
			return *v
		}
		var ret DomainConfigsCompress
		return ret
	}).(DomainConfigsCompressOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsCompressPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigsCompress) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsCompressPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsCompress) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsCompressPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsCompress) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DomainConfigsForceRedirect struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled bool    `pulumi:"enabled"`
	Status  *string `pulumi:"status"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type *string `pulumi:"type"`
}

// DomainConfigsForceRedirectInput is an input type that accepts DomainConfigsForceRedirectArgs and DomainConfigsForceRedirectOutput values.
// You can construct a concrete instance of `DomainConfigsForceRedirectInput` via:
//
//	DomainConfigsForceRedirectArgs{...}
type DomainConfigsForceRedirectInput interface {
	pulumi.Input

	ToDomainConfigsForceRedirectOutput() DomainConfigsForceRedirectOutput
	ToDomainConfigsForceRedirectOutputWithContext(context.Context) DomainConfigsForceRedirectOutput
}

type DomainConfigsForceRedirectArgs struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled pulumi.BoolInput      `pulumi:"enabled"`
	Status  pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DomainConfigsForceRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsForceRedirect)(nil)).Elem()
}

func (i DomainConfigsForceRedirectArgs) ToDomainConfigsForceRedirectOutput() DomainConfigsForceRedirectOutput {
	return i.ToDomainConfigsForceRedirectOutputWithContext(context.Background())
}

func (i DomainConfigsForceRedirectArgs) ToDomainConfigsForceRedirectOutputWithContext(ctx context.Context) DomainConfigsForceRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsForceRedirectOutput)
}

func (i DomainConfigsForceRedirectArgs) ToDomainConfigsForceRedirectPtrOutput() DomainConfigsForceRedirectPtrOutput {
	return i.ToDomainConfigsForceRedirectPtrOutputWithContext(context.Background())
}

func (i DomainConfigsForceRedirectArgs) ToDomainConfigsForceRedirectPtrOutputWithContext(ctx context.Context) DomainConfigsForceRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsForceRedirectOutput).ToDomainConfigsForceRedirectPtrOutputWithContext(ctx)
}

// DomainConfigsForceRedirectPtrInput is an input type that accepts DomainConfigsForceRedirectArgs, DomainConfigsForceRedirectPtr and DomainConfigsForceRedirectPtrOutput values.
// You can construct a concrete instance of `DomainConfigsForceRedirectPtrInput` via:
//
//	        DomainConfigsForceRedirectArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsForceRedirectPtrInput interface {
	pulumi.Input

	ToDomainConfigsForceRedirectPtrOutput() DomainConfigsForceRedirectPtrOutput
	ToDomainConfigsForceRedirectPtrOutputWithContext(context.Context) DomainConfigsForceRedirectPtrOutput
}

type domainConfigsForceRedirectPtrType DomainConfigsForceRedirectArgs

func DomainConfigsForceRedirectPtr(v *DomainConfigsForceRedirectArgs) DomainConfigsForceRedirectPtrInput {
	return (*domainConfigsForceRedirectPtrType)(v)
}

func (*domainConfigsForceRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsForceRedirect)(nil)).Elem()
}

func (i *domainConfigsForceRedirectPtrType) ToDomainConfigsForceRedirectPtrOutput() DomainConfigsForceRedirectPtrOutput {
	return i.ToDomainConfigsForceRedirectPtrOutputWithContext(context.Background())
}

func (i *domainConfigsForceRedirectPtrType) ToDomainConfigsForceRedirectPtrOutputWithContext(ctx context.Context) DomainConfigsForceRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsForceRedirectPtrOutput)
}

type DomainConfigsForceRedirectOutput struct{ *pulumi.OutputState }

func (DomainConfigsForceRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsForceRedirect)(nil)).Elem()
}

func (o DomainConfigsForceRedirectOutput) ToDomainConfigsForceRedirectOutput() DomainConfigsForceRedirectOutput {
	return o
}

func (o DomainConfigsForceRedirectOutput) ToDomainConfigsForceRedirectOutputWithContext(ctx context.Context) DomainConfigsForceRedirectOutput {
	return o
}

func (o DomainConfigsForceRedirectOutput) ToDomainConfigsForceRedirectPtrOutput() DomainConfigsForceRedirectPtrOutput {
	return o.ToDomainConfigsForceRedirectPtrOutputWithContext(context.Background())
}

func (o DomainConfigsForceRedirectOutput) ToDomainConfigsForceRedirectPtrOutputWithContext(ctx context.Context) DomainConfigsForceRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigsForceRedirect) *DomainConfigsForceRedirect {
		return &v
	}).(DomainConfigsForceRedirectPtrOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsForceRedirectOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainConfigsForceRedirect) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o DomainConfigsForceRedirectOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsForceRedirect) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsForceRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsForceRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DomainConfigsForceRedirectPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsForceRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsForceRedirect)(nil)).Elem()
}

func (o DomainConfigsForceRedirectPtrOutput) ToDomainConfigsForceRedirectPtrOutput() DomainConfigsForceRedirectPtrOutput {
	return o
}

func (o DomainConfigsForceRedirectPtrOutput) ToDomainConfigsForceRedirectPtrOutputWithContext(ctx context.Context) DomainConfigsForceRedirectPtrOutput {
	return o
}

func (o DomainConfigsForceRedirectPtrOutput) Elem() DomainConfigsForceRedirectOutput {
	return o.ApplyT(func(v *DomainConfigsForceRedirect) DomainConfigsForceRedirect {
		if v != nil {
			return *v
		}
		var ret DomainConfigsForceRedirect
		return ret
	}).(DomainConfigsForceRedirectOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsForceRedirectPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigsForceRedirect) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsForceRedirectPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsForceRedirect) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsForceRedirectPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsForceRedirect) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DomainConfigsHttpResponseHeader struct {
	// Specifies the operation type of request or response
	Action string `pulumi:"action"`
	// Specifies the request or response header.
	Name string `pulumi:"name"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value *string `pulumi:"value"`
}

// DomainConfigsHttpResponseHeaderInput is an input type that accepts DomainConfigsHttpResponseHeaderArgs and DomainConfigsHttpResponseHeaderOutput values.
// You can construct a concrete instance of `DomainConfigsHttpResponseHeaderInput` via:
//
//	DomainConfigsHttpResponseHeaderArgs{...}
type DomainConfigsHttpResponseHeaderInput interface {
	pulumi.Input

	ToDomainConfigsHttpResponseHeaderOutput() DomainConfigsHttpResponseHeaderOutput
	ToDomainConfigsHttpResponseHeaderOutputWithContext(context.Context) DomainConfigsHttpResponseHeaderOutput
}

type DomainConfigsHttpResponseHeaderArgs struct {
	// Specifies the operation type of request or response
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies the request or response header.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainConfigsHttpResponseHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsHttpResponseHeader)(nil)).Elem()
}

func (i DomainConfigsHttpResponseHeaderArgs) ToDomainConfigsHttpResponseHeaderOutput() DomainConfigsHttpResponseHeaderOutput {
	return i.ToDomainConfigsHttpResponseHeaderOutputWithContext(context.Background())
}

func (i DomainConfigsHttpResponseHeaderArgs) ToDomainConfigsHttpResponseHeaderOutputWithContext(ctx context.Context) DomainConfigsHttpResponseHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsHttpResponseHeaderOutput)
}

// DomainConfigsHttpResponseHeaderArrayInput is an input type that accepts DomainConfigsHttpResponseHeaderArray and DomainConfigsHttpResponseHeaderArrayOutput values.
// You can construct a concrete instance of `DomainConfigsHttpResponseHeaderArrayInput` via:
//
//	DomainConfigsHttpResponseHeaderArray{ DomainConfigsHttpResponseHeaderArgs{...} }
type DomainConfigsHttpResponseHeaderArrayInput interface {
	pulumi.Input

	ToDomainConfigsHttpResponseHeaderArrayOutput() DomainConfigsHttpResponseHeaderArrayOutput
	ToDomainConfigsHttpResponseHeaderArrayOutputWithContext(context.Context) DomainConfigsHttpResponseHeaderArrayOutput
}

type DomainConfigsHttpResponseHeaderArray []DomainConfigsHttpResponseHeaderInput

func (DomainConfigsHttpResponseHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigsHttpResponseHeader)(nil)).Elem()
}

func (i DomainConfigsHttpResponseHeaderArray) ToDomainConfigsHttpResponseHeaderArrayOutput() DomainConfigsHttpResponseHeaderArrayOutput {
	return i.ToDomainConfigsHttpResponseHeaderArrayOutputWithContext(context.Background())
}

func (i DomainConfigsHttpResponseHeaderArray) ToDomainConfigsHttpResponseHeaderArrayOutputWithContext(ctx context.Context) DomainConfigsHttpResponseHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsHttpResponseHeaderArrayOutput)
}

type DomainConfigsHttpResponseHeaderOutput struct{ *pulumi.OutputState }

func (DomainConfigsHttpResponseHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsHttpResponseHeader)(nil)).Elem()
}

func (o DomainConfigsHttpResponseHeaderOutput) ToDomainConfigsHttpResponseHeaderOutput() DomainConfigsHttpResponseHeaderOutput {
	return o
}

func (o DomainConfigsHttpResponseHeaderOutput) ToDomainConfigsHttpResponseHeaderOutputWithContext(ctx context.Context) DomainConfigsHttpResponseHeaderOutput {
	return o
}

// Specifies the operation type of request or response
func (o DomainConfigsHttpResponseHeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigsHttpResponseHeader) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies the request or response header.
func (o DomainConfigsHttpResponseHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigsHttpResponseHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parameter values. Multiple values are separated by semicolons (;).
func (o DomainConfigsHttpResponseHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpResponseHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainConfigsHttpResponseHeaderArrayOutput struct{ *pulumi.OutputState }

func (DomainConfigsHttpResponseHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigsHttpResponseHeader)(nil)).Elem()
}

func (o DomainConfigsHttpResponseHeaderArrayOutput) ToDomainConfigsHttpResponseHeaderArrayOutput() DomainConfigsHttpResponseHeaderArrayOutput {
	return o
}

func (o DomainConfigsHttpResponseHeaderArrayOutput) ToDomainConfigsHttpResponseHeaderArrayOutputWithContext(ctx context.Context) DomainConfigsHttpResponseHeaderArrayOutput {
	return o
}

func (o DomainConfigsHttpResponseHeaderArrayOutput) Index(i pulumi.IntInput) DomainConfigsHttpResponseHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainConfigsHttpResponseHeader {
		return vs[0].([]DomainConfigsHttpResponseHeader)[vs[1].(int)]
	}).(DomainConfigsHttpResponseHeaderOutput)
}

type DomainConfigsHttpsSettings struct {
	// Specifies the content of the certificate used by the HTTPS protocol.
	// This parameter is mandatory when a certificate is configured. The value is in PEM format.
	CertificateBody *string `pulumi:"certificateBody"`
	// Specifies the certificate name. The value contains 3 to 32 characters.
	// This parameter is mandatory when a certificate is configured.
	CertificateName *string `pulumi:"certificateName"`
	// Specifies the certificate type. Possible values are:
	// + **1**: Huawei-managed certificate.
	// + **0**: your own certificate.
	CertificateSource *int `pulumi:"certificateSource"`
	// Specifies whether HTTP/2 is used.
	Http2Enabled *bool   `pulumi:"http2Enabled"`
	Http2Status  *string `pulumi:"http2Status"`
	// Specifies whether to enable HTTPS.
	HttpsEnabled *bool   `pulumi:"httpsEnabled"`
	HttpsStatus  *string `pulumi:"httpsStatus"`
	// Specifies the private key used by the HTTPS protocol. This parameter is mandatory
	// when a certificate is configured. The value is in PEM format.
	PrivateKey *string `pulumi:"privateKey"`
	// Specifies the transport Layer Security (TLS). Currently, **TLSv1.0**,
	// **TLSv1.1**, **TLSv1.2**, and **TLSv1.3** are supported. By default, all versions are enabled. You can enable
	// a single version or consecutive versions. To enable multiple versions, use commas (,) to separate versions,
	// for example, **TLSv1.1,TLSv1.2**.
	TlsVersion *string `pulumi:"tlsVersion"`
}

// DomainConfigsHttpsSettingsInput is an input type that accepts DomainConfigsHttpsSettingsArgs and DomainConfigsHttpsSettingsOutput values.
// You can construct a concrete instance of `DomainConfigsHttpsSettingsInput` via:
//
//	DomainConfigsHttpsSettingsArgs{...}
type DomainConfigsHttpsSettingsInput interface {
	pulumi.Input

	ToDomainConfigsHttpsSettingsOutput() DomainConfigsHttpsSettingsOutput
	ToDomainConfigsHttpsSettingsOutputWithContext(context.Context) DomainConfigsHttpsSettingsOutput
}

type DomainConfigsHttpsSettingsArgs struct {
	// Specifies the content of the certificate used by the HTTPS protocol.
	// This parameter is mandatory when a certificate is configured. The value is in PEM format.
	CertificateBody pulumi.StringPtrInput `pulumi:"certificateBody"`
	// Specifies the certificate name. The value contains 3 to 32 characters.
	// This parameter is mandatory when a certificate is configured.
	CertificateName pulumi.StringPtrInput `pulumi:"certificateName"`
	// Specifies the certificate type. Possible values are:
	// + **1**: Huawei-managed certificate.
	// + **0**: your own certificate.
	CertificateSource pulumi.IntPtrInput `pulumi:"certificateSource"`
	// Specifies whether HTTP/2 is used.
	Http2Enabled pulumi.BoolPtrInput   `pulumi:"http2Enabled"`
	Http2Status  pulumi.StringPtrInput `pulumi:"http2Status"`
	// Specifies whether to enable HTTPS.
	HttpsEnabled pulumi.BoolPtrInput   `pulumi:"httpsEnabled"`
	HttpsStatus  pulumi.StringPtrInput `pulumi:"httpsStatus"`
	// Specifies the private key used by the HTTPS protocol. This parameter is mandatory
	// when a certificate is configured. The value is in PEM format.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Specifies the transport Layer Security (TLS). Currently, **TLSv1.0**,
	// **TLSv1.1**, **TLSv1.2**, and **TLSv1.3** are supported. By default, all versions are enabled. You can enable
	// a single version or consecutive versions. To enable multiple versions, use commas (,) to separate versions,
	// for example, **TLSv1.1,TLSv1.2**.
	TlsVersion pulumi.StringPtrInput `pulumi:"tlsVersion"`
}

func (DomainConfigsHttpsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsHttpsSettings)(nil)).Elem()
}

func (i DomainConfigsHttpsSettingsArgs) ToDomainConfigsHttpsSettingsOutput() DomainConfigsHttpsSettingsOutput {
	return i.ToDomainConfigsHttpsSettingsOutputWithContext(context.Background())
}

func (i DomainConfigsHttpsSettingsArgs) ToDomainConfigsHttpsSettingsOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsHttpsSettingsOutput)
}

func (i DomainConfigsHttpsSettingsArgs) ToDomainConfigsHttpsSettingsPtrOutput() DomainConfigsHttpsSettingsPtrOutput {
	return i.ToDomainConfigsHttpsSettingsPtrOutputWithContext(context.Background())
}

func (i DomainConfigsHttpsSettingsArgs) ToDomainConfigsHttpsSettingsPtrOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsHttpsSettingsOutput).ToDomainConfigsHttpsSettingsPtrOutputWithContext(ctx)
}

// DomainConfigsHttpsSettingsPtrInput is an input type that accepts DomainConfigsHttpsSettingsArgs, DomainConfigsHttpsSettingsPtr and DomainConfigsHttpsSettingsPtrOutput values.
// You can construct a concrete instance of `DomainConfigsHttpsSettingsPtrInput` via:
//
//	        DomainConfigsHttpsSettingsArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsHttpsSettingsPtrInput interface {
	pulumi.Input

	ToDomainConfigsHttpsSettingsPtrOutput() DomainConfigsHttpsSettingsPtrOutput
	ToDomainConfigsHttpsSettingsPtrOutputWithContext(context.Context) DomainConfigsHttpsSettingsPtrOutput
}

type domainConfigsHttpsSettingsPtrType DomainConfigsHttpsSettingsArgs

func DomainConfigsHttpsSettingsPtr(v *DomainConfigsHttpsSettingsArgs) DomainConfigsHttpsSettingsPtrInput {
	return (*domainConfigsHttpsSettingsPtrType)(v)
}

func (*domainConfigsHttpsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsHttpsSettings)(nil)).Elem()
}

func (i *domainConfigsHttpsSettingsPtrType) ToDomainConfigsHttpsSettingsPtrOutput() DomainConfigsHttpsSettingsPtrOutput {
	return i.ToDomainConfigsHttpsSettingsPtrOutputWithContext(context.Background())
}

func (i *domainConfigsHttpsSettingsPtrType) ToDomainConfigsHttpsSettingsPtrOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsHttpsSettingsPtrOutput)
}

type DomainConfigsHttpsSettingsOutput struct{ *pulumi.OutputState }

func (DomainConfigsHttpsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsHttpsSettings)(nil)).Elem()
}

func (o DomainConfigsHttpsSettingsOutput) ToDomainConfigsHttpsSettingsOutput() DomainConfigsHttpsSettingsOutput {
	return o
}

func (o DomainConfigsHttpsSettingsOutput) ToDomainConfigsHttpsSettingsOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsOutput {
	return o
}

func (o DomainConfigsHttpsSettingsOutput) ToDomainConfigsHttpsSettingsPtrOutput() DomainConfigsHttpsSettingsPtrOutput {
	return o.ToDomainConfigsHttpsSettingsPtrOutputWithContext(context.Background())
}

func (o DomainConfigsHttpsSettingsOutput) ToDomainConfigsHttpsSettingsPtrOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigsHttpsSettings) *DomainConfigsHttpsSettings {
		return &v
	}).(DomainConfigsHttpsSettingsPtrOutput)
}

// Specifies the content of the certificate used by the HTTPS protocol.
// This parameter is mandatory when a certificate is configured. The value is in PEM format.
func (o DomainConfigsHttpsSettingsOutput) CertificateBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.CertificateBody }).(pulumi.StringPtrOutput)
}

// Specifies the certificate name. The value contains 3 to 32 characters.
// This parameter is mandatory when a certificate is configured.
func (o DomainConfigsHttpsSettingsOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// Specifies the certificate type. Possible values are:
// + **1**: Huawei-managed certificate.
// + **0**: your own certificate.
func (o DomainConfigsHttpsSettingsOutput) CertificateSource() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *int { return v.CertificateSource }).(pulumi.IntPtrOutput)
}

// Specifies whether HTTP/2 is used.
func (o DomainConfigsHttpsSettingsOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *bool { return v.Http2Enabled }).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsHttpsSettingsOutput) Http2Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.Http2Status }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable HTTPS.
func (o DomainConfigsHttpsSettingsOutput) HttpsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *bool { return v.HttpsEnabled }).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsHttpsSettingsOutput) HttpsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.HttpsStatus }).(pulumi.StringPtrOutput)
}

// Specifies the private key used by the HTTPS protocol. This parameter is mandatory
// when a certificate is configured. The value is in PEM format.
func (o DomainConfigsHttpsSettingsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Specifies the transport Layer Security (TLS). Currently, **TLSv1.0**,
// **TLSv1.1**, **TLSv1.2**, and **TLSv1.3** are supported. By default, all versions are enabled. You can enable
// a single version or consecutive versions. To enable multiple versions, use commas (,) to separate versions,
// for example, **TLSv1.1,TLSv1.2**.
func (o DomainConfigsHttpsSettingsOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsHttpsSettings) *string { return v.TlsVersion }).(pulumi.StringPtrOutput)
}

type DomainConfigsHttpsSettingsPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsHttpsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsHttpsSettings)(nil)).Elem()
}

func (o DomainConfigsHttpsSettingsPtrOutput) ToDomainConfigsHttpsSettingsPtrOutput() DomainConfigsHttpsSettingsPtrOutput {
	return o
}

func (o DomainConfigsHttpsSettingsPtrOutput) ToDomainConfigsHttpsSettingsPtrOutputWithContext(ctx context.Context) DomainConfigsHttpsSettingsPtrOutput {
	return o
}

func (o DomainConfigsHttpsSettingsPtrOutput) Elem() DomainConfigsHttpsSettingsOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) DomainConfigsHttpsSettings {
		if v != nil {
			return *v
		}
		var ret DomainConfigsHttpsSettings
		return ret
	}).(DomainConfigsHttpsSettingsOutput)
}

// Specifies the content of the certificate used by the HTTPS protocol.
// This parameter is mandatory when a certificate is configured. The value is in PEM format.
func (o DomainConfigsHttpsSettingsPtrOutput) CertificateBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificateBody
	}).(pulumi.StringPtrOutput)
}

// Specifies the certificate name. The value contains 3 to 32 characters.
// This parameter is mandatory when a certificate is configured.
func (o DomainConfigsHttpsSettingsPtrOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificateName
	}).(pulumi.StringPtrOutput)
}

// Specifies the certificate type. Possible values are:
// + **1**: Huawei-managed certificate.
// + **0**: your own certificate.
func (o DomainConfigsHttpsSettingsPtrOutput) CertificateSource() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *int {
		if v == nil {
			return nil
		}
		return v.CertificateSource
	}).(pulumi.IntPtrOutput)
}

// Specifies whether HTTP/2 is used.
func (o DomainConfigsHttpsSettingsPtrOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Http2Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsHttpsSettingsPtrOutput) Http2Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Http2Status
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable HTTPS.
func (o DomainConfigsHttpsSettingsPtrOutput) HttpsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainConfigsHttpsSettingsPtrOutput) HttpsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.HttpsStatus
	}).(pulumi.StringPtrOutput)
}

// Specifies the private key used by the HTTPS protocol. This parameter is mandatory
// when a certificate is configured. The value is in PEM format.
func (o DomainConfigsHttpsSettingsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the transport Layer Security (TLS). Currently, **TLSv1.0**,
// **TLSv1.1**, **TLSv1.2**, and **TLSv1.3** are supported. By default, all versions are enabled. You can enable
// a single version or consecutive versions. To enable multiple versions, use commas (,) to separate versions,
// for example, **TLSv1.1,TLSv1.2**.
func (o DomainConfigsHttpsSettingsPtrOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsHttpsSettings) *string {
		if v == nil {
			return nil
		}
		return v.TlsVersion
	}).(pulumi.StringPtrOutput)
}

type DomainConfigsRetrievalRequestHeader struct {
	// Specifies the operation type of request or response
	Action string `pulumi:"action"`
	// Specifies the request or response header.
	Name string `pulumi:"name"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value *string `pulumi:"value"`
}

// DomainConfigsRetrievalRequestHeaderInput is an input type that accepts DomainConfigsRetrievalRequestHeaderArgs and DomainConfigsRetrievalRequestHeaderOutput values.
// You can construct a concrete instance of `DomainConfigsRetrievalRequestHeaderInput` via:
//
//	DomainConfigsRetrievalRequestHeaderArgs{...}
type DomainConfigsRetrievalRequestHeaderInput interface {
	pulumi.Input

	ToDomainConfigsRetrievalRequestHeaderOutput() DomainConfigsRetrievalRequestHeaderOutput
	ToDomainConfigsRetrievalRequestHeaderOutputWithContext(context.Context) DomainConfigsRetrievalRequestHeaderOutput
}

type DomainConfigsRetrievalRequestHeaderArgs struct {
	// Specifies the operation type of request or response
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies the request or response header.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the parameter values. Multiple values are separated by semicolons (;).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainConfigsRetrievalRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsRetrievalRequestHeader)(nil)).Elem()
}

func (i DomainConfigsRetrievalRequestHeaderArgs) ToDomainConfigsRetrievalRequestHeaderOutput() DomainConfigsRetrievalRequestHeaderOutput {
	return i.ToDomainConfigsRetrievalRequestHeaderOutputWithContext(context.Background())
}

func (i DomainConfigsRetrievalRequestHeaderArgs) ToDomainConfigsRetrievalRequestHeaderOutputWithContext(ctx context.Context) DomainConfigsRetrievalRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsRetrievalRequestHeaderOutput)
}

// DomainConfigsRetrievalRequestHeaderArrayInput is an input type that accepts DomainConfigsRetrievalRequestHeaderArray and DomainConfigsRetrievalRequestHeaderArrayOutput values.
// You can construct a concrete instance of `DomainConfigsRetrievalRequestHeaderArrayInput` via:
//
//	DomainConfigsRetrievalRequestHeaderArray{ DomainConfigsRetrievalRequestHeaderArgs{...} }
type DomainConfigsRetrievalRequestHeaderArrayInput interface {
	pulumi.Input

	ToDomainConfigsRetrievalRequestHeaderArrayOutput() DomainConfigsRetrievalRequestHeaderArrayOutput
	ToDomainConfigsRetrievalRequestHeaderArrayOutputWithContext(context.Context) DomainConfigsRetrievalRequestHeaderArrayOutput
}

type DomainConfigsRetrievalRequestHeaderArray []DomainConfigsRetrievalRequestHeaderInput

func (DomainConfigsRetrievalRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigsRetrievalRequestHeader)(nil)).Elem()
}

func (i DomainConfigsRetrievalRequestHeaderArray) ToDomainConfigsRetrievalRequestHeaderArrayOutput() DomainConfigsRetrievalRequestHeaderArrayOutput {
	return i.ToDomainConfigsRetrievalRequestHeaderArrayOutputWithContext(context.Background())
}

func (i DomainConfigsRetrievalRequestHeaderArray) ToDomainConfigsRetrievalRequestHeaderArrayOutputWithContext(ctx context.Context) DomainConfigsRetrievalRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsRetrievalRequestHeaderArrayOutput)
}

type DomainConfigsRetrievalRequestHeaderOutput struct{ *pulumi.OutputState }

func (DomainConfigsRetrievalRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsRetrievalRequestHeader)(nil)).Elem()
}

func (o DomainConfigsRetrievalRequestHeaderOutput) ToDomainConfigsRetrievalRequestHeaderOutput() DomainConfigsRetrievalRequestHeaderOutput {
	return o
}

func (o DomainConfigsRetrievalRequestHeaderOutput) ToDomainConfigsRetrievalRequestHeaderOutputWithContext(ctx context.Context) DomainConfigsRetrievalRequestHeaderOutput {
	return o
}

// Specifies the operation type of request or response
func (o DomainConfigsRetrievalRequestHeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigsRetrievalRequestHeader) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies the request or response header.
func (o DomainConfigsRetrievalRequestHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigsRetrievalRequestHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parameter values. Multiple values are separated by semicolons (;).
func (o DomainConfigsRetrievalRequestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsRetrievalRequestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainConfigsRetrievalRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (DomainConfigsRetrievalRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigsRetrievalRequestHeader)(nil)).Elem()
}

func (o DomainConfigsRetrievalRequestHeaderArrayOutput) ToDomainConfigsRetrievalRequestHeaderArrayOutput() DomainConfigsRetrievalRequestHeaderArrayOutput {
	return o
}

func (o DomainConfigsRetrievalRequestHeaderArrayOutput) ToDomainConfigsRetrievalRequestHeaderArrayOutputWithContext(ctx context.Context) DomainConfigsRetrievalRequestHeaderArrayOutput {
	return o
}

func (o DomainConfigsRetrievalRequestHeaderArrayOutput) Index(i pulumi.IntInput) DomainConfigsRetrievalRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainConfigsRetrievalRequestHeader {
		return vs[0].([]DomainConfigsRetrievalRequestHeader)[vs[1].(int)]
	}).(DomainConfigsRetrievalRequestHeaderOutput)
}

type DomainConfigsUrlSigning struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled bool `pulumi:"enabled"`
	// Specifies the expiration time. The value ranges from **0** to **31536000**,
	// in seconds.
	ExpireTime *int `pulumi:"expireTime"`
	// Specifies the authentication key contains 6 to 32 characters, including letters and digits.
	Key    *string `pulumi:"key"`
	Status *string `pulumi:"status"`
	// Specifies the time format. Possible values are:
	// **dec**: Decimal, can be used in Method A, Method B and Method C2.
	// **hex**: Hexadecimal, can be used in Method C1 and Method C2.
	TimeFormat *string `pulumi:"timeFormat"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type *string `pulumi:"type"`
}

// DomainConfigsUrlSigningInput is an input type that accepts DomainConfigsUrlSigningArgs and DomainConfigsUrlSigningOutput values.
// You can construct a concrete instance of `DomainConfigsUrlSigningInput` via:
//
//	DomainConfigsUrlSigningArgs{...}
type DomainConfigsUrlSigningInput interface {
	pulumi.Input

	ToDomainConfigsUrlSigningOutput() DomainConfigsUrlSigningOutput
	ToDomainConfigsUrlSigningOutputWithContext(context.Context) DomainConfigsUrlSigningOutput
}

type DomainConfigsUrlSigningArgs struct {
	// Specifies the whether to enable force redirect or smart compression.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the expiration time. The value ranges from **0** to **31536000**,
	// in seconds.
	ExpireTime pulumi.IntPtrInput `pulumi:"expireTime"`
	// Specifies the authentication key contains 6 to 32 characters, including letters and digits.
	Key    pulumi.StringPtrInput `pulumi:"key"`
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the time format. Possible values are:
	// **dec**: Decimal, can be used in Method A, Method B and Method C2.
	// **hex**: Hexadecimal, can be used in Method C1 and Method C2.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Specifies the operation type for caching URL parameters. Posiible values are:
	// **full_url**: cache all parameters
	// **ignore_url_params**: ignore all parameters
	// **del_args**: ignore specific URL parameters
	// **reserve_args**: reserve specified URL parameters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DomainConfigsUrlSigningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsUrlSigning)(nil)).Elem()
}

func (i DomainConfigsUrlSigningArgs) ToDomainConfigsUrlSigningOutput() DomainConfigsUrlSigningOutput {
	return i.ToDomainConfigsUrlSigningOutputWithContext(context.Background())
}

func (i DomainConfigsUrlSigningArgs) ToDomainConfigsUrlSigningOutputWithContext(ctx context.Context) DomainConfigsUrlSigningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsUrlSigningOutput)
}

func (i DomainConfigsUrlSigningArgs) ToDomainConfigsUrlSigningPtrOutput() DomainConfigsUrlSigningPtrOutput {
	return i.ToDomainConfigsUrlSigningPtrOutputWithContext(context.Background())
}

func (i DomainConfigsUrlSigningArgs) ToDomainConfigsUrlSigningPtrOutputWithContext(ctx context.Context) DomainConfigsUrlSigningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsUrlSigningOutput).ToDomainConfigsUrlSigningPtrOutputWithContext(ctx)
}

// DomainConfigsUrlSigningPtrInput is an input type that accepts DomainConfigsUrlSigningArgs, DomainConfigsUrlSigningPtr and DomainConfigsUrlSigningPtrOutput values.
// You can construct a concrete instance of `DomainConfigsUrlSigningPtrInput` via:
//
//	        DomainConfigsUrlSigningArgs{...}
//
//	or:
//
//	        nil
type DomainConfigsUrlSigningPtrInput interface {
	pulumi.Input

	ToDomainConfigsUrlSigningPtrOutput() DomainConfigsUrlSigningPtrOutput
	ToDomainConfigsUrlSigningPtrOutputWithContext(context.Context) DomainConfigsUrlSigningPtrOutput
}

type domainConfigsUrlSigningPtrType DomainConfigsUrlSigningArgs

func DomainConfigsUrlSigningPtr(v *DomainConfigsUrlSigningArgs) DomainConfigsUrlSigningPtrInput {
	return (*domainConfigsUrlSigningPtrType)(v)
}

func (*domainConfigsUrlSigningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsUrlSigning)(nil)).Elem()
}

func (i *domainConfigsUrlSigningPtrType) ToDomainConfigsUrlSigningPtrOutput() DomainConfigsUrlSigningPtrOutput {
	return i.ToDomainConfigsUrlSigningPtrOutputWithContext(context.Background())
}

func (i *domainConfigsUrlSigningPtrType) ToDomainConfigsUrlSigningPtrOutputWithContext(ctx context.Context) DomainConfigsUrlSigningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigsUrlSigningPtrOutput)
}

type DomainConfigsUrlSigningOutput struct{ *pulumi.OutputState }

func (DomainConfigsUrlSigningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigsUrlSigning)(nil)).Elem()
}

func (o DomainConfigsUrlSigningOutput) ToDomainConfigsUrlSigningOutput() DomainConfigsUrlSigningOutput {
	return o
}

func (o DomainConfigsUrlSigningOutput) ToDomainConfigsUrlSigningOutputWithContext(ctx context.Context) DomainConfigsUrlSigningOutput {
	return o
}

func (o DomainConfigsUrlSigningOutput) ToDomainConfigsUrlSigningPtrOutput() DomainConfigsUrlSigningPtrOutput {
	return o.ToDomainConfigsUrlSigningPtrOutputWithContext(context.Background())
}

func (o DomainConfigsUrlSigningOutput) ToDomainConfigsUrlSigningPtrOutputWithContext(ctx context.Context) DomainConfigsUrlSigningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfigsUrlSigning) *DomainConfigsUrlSigning {
		return &v
	}).(DomainConfigsUrlSigningPtrOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsUrlSigningOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the expiration time. The value ranges from **0** to **31536000**,
// in seconds.
func (o DomainConfigsUrlSigningOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) *int { return v.ExpireTime }).(pulumi.IntPtrOutput)
}

// Specifies the authentication key contains 6 to 32 characters, including letters and digits.
func (o DomainConfigsUrlSigningOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DomainConfigsUrlSigningOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the time format. Possible values are:
// **dec**: Decimal, can be used in Method A, Method B and Method C2.
// **hex**: Hexadecimal, can be used in Method C1 and Method C2.
func (o DomainConfigsUrlSigningOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsUrlSigningOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConfigsUrlSigning) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DomainConfigsUrlSigningPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigsUrlSigningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfigsUrlSigning)(nil)).Elem()
}

func (o DomainConfigsUrlSigningPtrOutput) ToDomainConfigsUrlSigningPtrOutput() DomainConfigsUrlSigningPtrOutput {
	return o
}

func (o DomainConfigsUrlSigningPtrOutput) ToDomainConfigsUrlSigningPtrOutputWithContext(ctx context.Context) DomainConfigsUrlSigningPtrOutput {
	return o
}

func (o DomainConfigsUrlSigningPtrOutput) Elem() DomainConfigsUrlSigningOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) DomainConfigsUrlSigning {
		if v != nil {
			return *v
		}
		var ret DomainConfigsUrlSigning
		return ret
	}).(DomainConfigsUrlSigningOutput)
}

// Specifies the whether to enable force redirect or smart compression.
func (o DomainConfigsUrlSigningPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the expiration time. The value ranges from **0** to **31536000**,
// in seconds.
func (o DomainConfigsUrlSigningPtrOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *int {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.IntPtrOutput)
}

// Specifies the authentication key contains 6 to 32 characters, including letters and digits.
func (o DomainConfigsUrlSigningPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o DomainConfigsUrlSigningPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the time format. Possible values are:
// **dec**: Decimal, can be used in Method A, Method B and Method C2.
// **hex**: Hexadecimal, can be used in Method C1 and Method C2.
func (o DomainConfigsUrlSigningPtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Specifies the operation type for caching URL parameters. Posiible values are:
// **full_url**: cache all parameters
// **ignore_url_params**: ignore all parameters
// **del_args**: ignore specific URL parameters
// **reserve_args**: reserve specified URL parameters
func (o DomainConfigsUrlSigningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfigsUrlSigning) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DomainSource struct {
	// Whether an origin server is active or standby (1: active; 0: standby). The default value is
	// 1.
	Active *int `pulumi:"active"`
	// Specifies the HTTP port. Default value: **80**.
	HttpPort *int `pulumi:"httpPort"`
	// Specifies the HTTPS port. Default value: **443**.
	HttpsPort *int `pulumi:"httpsPort"`
	// Whether to enable static website hosting for the OBS bucket.
	// This parameter is mandatory when the `originType` is **obs_bucket**.
	ObsWebHostingEnabled *bool `pulumi:"obsWebHostingEnabled"`
	// The domain name or IP address of the origin server.
	Origin string `pulumi:"origin"`
	// The origin server type. The valid values are 'ipaddr', 'domain', and 'obs_bucket'.
	OriginType string `pulumi:"originType"`
	// Specifies the retrieval host. The default value is the acceleration domain name.
	RetrievalHost *string `pulumi:"retrievalHost"`
}

// DomainSourceInput is an input type that accepts DomainSourceArgs and DomainSourceOutput values.
// You can construct a concrete instance of `DomainSourceInput` via:
//
//	DomainSourceArgs{...}
type DomainSourceInput interface {
	pulumi.Input

	ToDomainSourceOutput() DomainSourceOutput
	ToDomainSourceOutputWithContext(context.Context) DomainSourceOutput
}

type DomainSourceArgs struct {
	// Whether an origin server is active or standby (1: active; 0: standby). The default value is
	// 1.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Specifies the HTTP port. Default value: **80**.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Specifies the HTTPS port. Default value: **443**.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// Whether to enable static website hosting for the OBS bucket.
	// This parameter is mandatory when the `originType` is **obs_bucket**.
	ObsWebHostingEnabled pulumi.BoolPtrInput `pulumi:"obsWebHostingEnabled"`
	// The domain name or IP address of the origin server.
	Origin pulumi.StringInput `pulumi:"origin"`
	// The origin server type. The valid values are 'ipaddr', 'domain', and 'obs_bucket'.
	OriginType pulumi.StringInput `pulumi:"originType"`
	// Specifies the retrieval host. The default value is the acceleration domain name.
	RetrievalHost pulumi.StringPtrInput `pulumi:"retrievalHost"`
}

func (DomainSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSource)(nil)).Elem()
}

func (i DomainSourceArgs) ToDomainSourceOutput() DomainSourceOutput {
	return i.ToDomainSourceOutputWithContext(context.Background())
}

func (i DomainSourceArgs) ToDomainSourceOutputWithContext(ctx context.Context) DomainSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSourceOutput)
}

// DomainSourceArrayInput is an input type that accepts DomainSourceArray and DomainSourceArrayOutput values.
// You can construct a concrete instance of `DomainSourceArrayInput` via:
//
//	DomainSourceArray{ DomainSourceArgs{...} }
type DomainSourceArrayInput interface {
	pulumi.Input

	ToDomainSourceArrayOutput() DomainSourceArrayOutput
	ToDomainSourceArrayOutputWithContext(context.Context) DomainSourceArrayOutput
}

type DomainSourceArray []DomainSourceInput

func (DomainSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSource)(nil)).Elem()
}

func (i DomainSourceArray) ToDomainSourceArrayOutput() DomainSourceArrayOutput {
	return i.ToDomainSourceArrayOutputWithContext(context.Background())
}

func (i DomainSourceArray) ToDomainSourceArrayOutputWithContext(ctx context.Context) DomainSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSourceArrayOutput)
}

type DomainSourceOutput struct{ *pulumi.OutputState }

func (DomainSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSource)(nil)).Elem()
}

func (o DomainSourceOutput) ToDomainSourceOutput() DomainSourceOutput {
	return o
}

func (o DomainSourceOutput) ToDomainSourceOutputWithContext(ctx context.Context) DomainSourceOutput {
	return o
}

// Whether an origin server is active or standby (1: active; 0: standby). The default value is
// 1.
func (o DomainSourceOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainSource) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Specifies the HTTP port. Default value: **80**.
func (o DomainSourceOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainSource) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Specifies the HTTPS port. Default value: **443**.
func (o DomainSourceOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainSource) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// Whether to enable static website hosting for the OBS bucket.
// This parameter is mandatory when the `originType` is **obs_bucket**.
func (o DomainSourceOutput) ObsWebHostingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainSource) *bool { return v.ObsWebHostingEnabled }).(pulumi.BoolPtrOutput)
}

// The domain name or IP address of the origin server.
func (o DomainSourceOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v DomainSource) string { return v.Origin }).(pulumi.StringOutput)
}

// The origin server type. The valid values are 'ipaddr', 'domain', and 'obs_bucket'.
func (o DomainSourceOutput) OriginType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainSource) string { return v.OriginType }).(pulumi.StringOutput)
}

// Specifies the retrieval host. The default value is the acceleration domain name.
func (o DomainSourceOutput) RetrievalHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSource) *string { return v.RetrievalHost }).(pulumi.StringPtrOutput)
}

type DomainSourceArrayOutput struct{ *pulumi.OutputState }

func (DomainSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSource)(nil)).Elem()
}

func (o DomainSourceArrayOutput) ToDomainSourceArrayOutput() DomainSourceArrayOutput {
	return o
}

func (o DomainSourceArrayOutput) ToDomainSourceArrayOutputWithContext(ctx context.Context) DomainSourceArrayOutput {
	return o
}

func (o DomainSourceArrayOutput) Index(i pulumi.IntInput) DomainSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainSource {
		return vs[0].([]DomainSource)[vs[1].(int)]
	}).(DomainSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheSettingsInput)(nil)).Elem(), DomainCacheSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheSettingsPtrInput)(nil)).Elem(), DomainCacheSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheSettingsRuleInput)(nil)).Elem(), DomainCacheSettingsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheSettingsRuleArrayInput)(nil)).Elem(), DomainCacheSettingsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsInput)(nil)).Elem(), DomainConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsPtrInput)(nil)).Elem(), DomainConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsCacheUrlParameterFilterInput)(nil)).Elem(), DomainConfigsCacheUrlParameterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsCacheUrlParameterFilterPtrInput)(nil)).Elem(), DomainConfigsCacheUrlParameterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsCompressInput)(nil)).Elem(), DomainConfigsCompressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsCompressPtrInput)(nil)).Elem(), DomainConfigsCompressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsForceRedirectInput)(nil)).Elem(), DomainConfigsForceRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsForceRedirectPtrInput)(nil)).Elem(), DomainConfigsForceRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsHttpResponseHeaderInput)(nil)).Elem(), DomainConfigsHttpResponseHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsHttpResponseHeaderArrayInput)(nil)).Elem(), DomainConfigsHttpResponseHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsHttpsSettingsInput)(nil)).Elem(), DomainConfigsHttpsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsHttpsSettingsPtrInput)(nil)).Elem(), DomainConfigsHttpsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsRetrievalRequestHeaderInput)(nil)).Elem(), DomainConfigsRetrievalRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsRetrievalRequestHeaderArrayInput)(nil)).Elem(), DomainConfigsRetrievalRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsUrlSigningInput)(nil)).Elem(), DomainConfigsUrlSigningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigsUrlSigningPtrInput)(nil)).Elem(), DomainConfigsUrlSigningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSourceInput)(nil)).Elem(), DomainSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSourceArrayInput)(nil)).Elem(), DomainSourceArray{})
	pulumi.RegisterOutputType(DomainCacheSettingsOutput{})
	pulumi.RegisterOutputType(DomainCacheSettingsPtrOutput{})
	pulumi.RegisterOutputType(DomainCacheSettingsRuleOutput{})
	pulumi.RegisterOutputType(DomainCacheSettingsRuleArrayOutput{})
	pulumi.RegisterOutputType(DomainConfigsOutput{})
	pulumi.RegisterOutputType(DomainConfigsPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigsCacheUrlParameterFilterOutput{})
	pulumi.RegisterOutputType(DomainConfigsCacheUrlParameterFilterPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigsCompressOutput{})
	pulumi.RegisterOutputType(DomainConfigsCompressPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigsForceRedirectOutput{})
	pulumi.RegisterOutputType(DomainConfigsForceRedirectPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigsHttpResponseHeaderOutput{})
	pulumi.RegisterOutputType(DomainConfigsHttpResponseHeaderArrayOutput{})
	pulumi.RegisterOutputType(DomainConfigsHttpsSettingsOutput{})
	pulumi.RegisterOutputType(DomainConfigsHttpsSettingsPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigsRetrievalRequestHeaderOutput{})
	pulumi.RegisterOutputType(DomainConfigsRetrievalRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(DomainConfigsUrlSigningOutput{})
	pulumi.RegisterOutputType(DomainConfigsUrlSigningPtrOutput{})
	pulumi.RegisterOutputType(DomainSourceOutput{})
	pulumi.RegisterOutputType(DomainSourceArrayOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package drs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages DRS job resource within HuaweiCloud.
//
// ## Example Usage
//
// ## Import
//
// The DRS job can be imported by `id`. e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Drs/job:Job test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`enterprise_project_id`, `force_destroy`, `source_db.0.password`, `destination_db.0.password`, `source_db.0.ip`, `destination_db.0.ip`, `source_db.0.kafka_security_config.0.trust_store_password`, `destination_db.0.kafka_security_config.0.trust_store_password`, `source_db.0.kafka_security_config.0.key_store_password`,`destination_db.0.kafka_security_config.0.key_store_password`, `source_db.0.kafka_security_config.0.key_password`, `destination_db.0.kafka_security_config.0.key_password`, `action`, `is_sync_re_edit`, `pause_mode`, `auto_renew`, `alarm_notify.0.topic_urn`, `policy_config`, `engine_type`, `public_ip_list`, `start_time`. It is generally recommended running **terraform plan** after importing a job. You can then decide if changes should be applied to the job, or the resource definition should be updated to align with the job. Also you can ignore changes as below. hcl resource "huaweicloud_drs_job" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	source_db.0.password, destination_db.0.password, action,
//
//	]
//
//	} }
type Job struct {
	pulumi.CustomResourceState

	// Specifies the action of job. The options are as follows:
	// + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
	//   **INCRE_TRANSFER_STARTED**.
	// + **restart**: Continue the job. Available when job status is **PAUSING**.
	// + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
	// + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Specifies the information body for setting task exception notification.
	// Changing this parameter will create a new resource.
	// The alarmNotify structure is documented below.
	AlarmNotify JobAlarmNotifyOutput `pulumi:"alarmNotify"`
	// schema: Internal
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// schema: Internal
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the list of the databases which the job migrates or synchronizes. Means to
	// transfer database level data. This parameter conflicts with `tables`.
	Databases pulumi.StringArrayOutput `pulumi:"databases"`
	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the destination database configuration.
	// The dbInfo structure of the `destinationDb` is documented below.
	// Changing this parameter will create a new resource.
	DestinationDb JobDestinationDbOutput `pulumi:"destinationDb"`
	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. Changing this parameter will create a new resource.
	DestinationDbReadnoly pulumi.BoolPtrOutput `pulumi:"destinationDbReadnoly"`
	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// + **up**: To the cloud. The destination database must be a database in the current cloud.
	// + **down**: Out of the cloud. The source database must be a database in the current cloud.
	// + **non-dbs**: self-built database.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Specifies the engine type of database. Changing this parameter will
	// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
	// **kafka**, **postgresql**.
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// Specifies the enterprise project id.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
	ExpiredDays pulumi.IntPtrOutput `pulumi:"expiredDays"`
	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is **false**.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
	// for MariaDB. Defaults to **false**.
	// Changing this parameter will create a new resource.
	IsOpenFastClean pulumi.BoolOutput `pulumi:"isOpenFastClean"`
	// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
	IsSyncReEdit pulumi.BoolPtrOutput `pulumi:"isSyncReEdit"`
	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
	// below. Changing this parameter will create a new resource.
	LimitSpeeds JobLimitSpeedArrayOutput `pulumi:"limitSpeeds"`
	// Specifies the AZ where the primary task is located.
	// Changing this parameter will create a new resource.
	MasterAz pulumi.StringPtrOutput `pulumi:"masterAz"`
	// The master job ID which will return if job is dual-AZ.
	MasterJobId pulumi.StringOutput `pulumi:"masterJobId"`
	// Specifies whether to migrate the definers of all source database
	// objects to the `user` of `destinationDb`. The default value is **true**.
	// Changing this parameter will create a new resource.
	MigrateDefiner pulumi.BoolPtrOutput `pulumi:"migrateDefiner"`
	// Specifies migration type.
	// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
	// + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
	//   objects and data, in a non-system database, to a destination database at a time.
	// + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
	//   destination cloud database, or from one cloud database to another in a different region.
	// + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
	//   migration initializes the destination database, an incremental migration parses logs to ensure data consistency
	//   between the source and destination databases.
	MigrationType pulumi.StringPtrOutput `pulumi:"migrationType"`
	// Specifies whether to enable multi write. It is mandatory when `type`
	// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
	// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
	MultiWrite pulumi.BoolPtrOutput `pulumi:"multiWrite"`
	// Specifies the name of database.
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the network type.
	// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
	// + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
	//   An EIP will be automatically bound to the replication instance and released after the replication task is complete.
	// + **vpc**: suitable for migration from one cloud database to another.
	// + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
	//   or from one cloud database to another in a different region.
	NetType pulumi.StringPtrOutput `pulumi:"netType"`
	// Specifies the node flavor type. Valid values are **micro**, **small**,
	// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
	NodeType pulumi.StringPtrOutput `pulumi:"nodeType"`
	// The order ID which will return if `chargingMode` is **prePaid**.
	OrderId pulumi.StringOutput `pulumi:"orderId"`
	// The original job direction.
	OriginalJobDirection pulumi.StringOutput `pulumi:"originalJobDirection"`
	// Specifies the stop type of job. It's valid when `action` is **stop**.
	// Default value is **target**. The options are as follows:
	// + **target**: Stop playback.
	// + **all**: Stop log capture and playback.
	PauseMode pulumi.StringPtrOutput `pulumi:"pauseMode"`
	// schema: Internal
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// schema: Internal
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the policy information used to configure migration and
	// synchronization policies. The policyConfig structure is documented below.
	// Changing this parameter will create a new resource.
	PolicyConfig JobPolicyConfigPtrOutput `pulumi:"policyConfig"`
	// Private IP.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Progress.
	Progress pulumi.StringOutput `pulumi:"progress"`
	// Specifies public IP.
	// Changing this parameter will create a new resource.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// Specifies the public IP list.
	// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
	// Changing this parameter will create a new resource.
	// The publicIpList structure is documented below.
	PublicIpLists JobPublicIpListArrayOutput `pulumi:"publicIpLists"`
	// Specifies the region which the database belongs when it is a RDS database.
	// Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The security group ID to which the databese instance belongs.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Specifies the AZ where the standby task is located.
	// Changing this parameter will create a new resource.
	SlaveAz pulumi.StringPtrOutput `pulumi:"slaveAz"`
	// The slave job ID which will return if job is dual-AZ.
	SlaveJobId pulumi.StringOutput `pulumi:"slaveJobId"`
	// Specifies the source database configuration.
	// The dbInfo structure of the `sourceDb` is documented below.
	// Changing this parameter will create a new resource.
	SourceDb JobSourceDbOutput `pulumi:"sourceDb"`
	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// Status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies subnet ID of database when it is a RDS database.
	// It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
	// table level data. This parameter conflicts with `databases`.
	// The tables structure is documented below.
	Tables JobTableArrayOutput `pulumi:"tables"`
	// Specifies the key/value pairs to associate with the DRS job.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the type of a task with an EIP bound.
	// Valid values are **master** and **slave**.
	// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
	// + In other cases, the value is fixed to **master**.
	Type pulumi.StringOutput `pulumi:"type"`
	// Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies vpc ID of database.
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationDb == nil {
		return nil, errors.New("invalid value for required argument 'DestinationDb'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.SourceDb == nil {
		return nil, errors.New("invalid value for required argument 'SourceDb'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("huaweicloud:Drs/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("huaweicloud:Drs/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Specifies the action of job. The options are as follows:
	// + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
	//   **INCRE_TRANSFER_STARTED**.
	// + **restart**: Continue the job. Available when job status is **PAUSING**.
	// + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
	// + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
	Action *string `pulumi:"action"`
	// Specifies the information body for setting task exception notification.
	// Changing this parameter will create a new resource.
	// The alarmNotify structure is documented below.
	AlarmNotify *JobAlarmNotify `pulumi:"alarmNotify"`
	// schema: Internal
	AutoRenew *string `pulumi:"autoRenew"`
	// schema: Internal
	ChargingMode *string `pulumi:"chargingMode"`
	// Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the list of the databases which the job migrates or synchronizes. Means to
	// transfer database level data. This parameter conflicts with `tables`.
	Databases []string `pulumi:"databases"`
	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the destination database configuration.
	// The dbInfo structure of the `destinationDb` is documented below.
	// Changing this parameter will create a new resource.
	DestinationDb *JobDestinationDb `pulumi:"destinationDb"`
	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. Changing this parameter will create a new resource.
	DestinationDbReadnoly *bool `pulumi:"destinationDbReadnoly"`
	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// + **up**: To the cloud. The destination database must be a database in the current cloud.
	// + **down**: Out of the cloud. The source database must be a database in the current cloud.
	// + **non-dbs**: self-built database.
	Direction *string `pulumi:"direction"`
	// Specifies the engine type of database. Changing this parameter will
	// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
	// **kafka**, **postgresql**.
	EngineType *string `pulumi:"engineType"`
	// Specifies the enterprise project id.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
	ExpiredDays *int `pulumi:"expiredDays"`
	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is **false**.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
	// for MariaDB. Defaults to **false**.
	// Changing this parameter will create a new resource.
	IsOpenFastClean *bool `pulumi:"isOpenFastClean"`
	// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
	IsSyncReEdit *bool `pulumi:"isSyncReEdit"`
	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
	// below. Changing this parameter will create a new resource.
	LimitSpeeds []JobLimitSpeed `pulumi:"limitSpeeds"`
	// Specifies the AZ where the primary task is located.
	// Changing this parameter will create a new resource.
	MasterAz *string `pulumi:"masterAz"`
	// The master job ID which will return if job is dual-AZ.
	MasterJobId *string `pulumi:"masterJobId"`
	// Specifies whether to migrate the definers of all source database
	// objects to the `user` of `destinationDb`. The default value is **true**.
	// Changing this parameter will create a new resource.
	MigrateDefiner *bool `pulumi:"migrateDefiner"`
	// Specifies migration type.
	// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
	// + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
	//   objects and data, in a non-system database, to a destination database at a time.
	// + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
	//   destination cloud database, or from one cloud database to another in a different region.
	// + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
	//   migration initializes the destination database, an incremental migration parses logs to ensure data consistency
	//   between the source and destination databases.
	MigrationType *string `pulumi:"migrationType"`
	// Specifies whether to enable multi write. It is mandatory when `type`
	// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
	// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
	MultiWrite *bool `pulumi:"multiWrite"`
	// Specifies the name of database.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the network type.
	// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
	// + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
	//   An EIP will be automatically bound to the replication instance and released after the replication task is complete.
	// + **vpc**: suitable for migration from one cloud database to another.
	// + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
	//   or from one cloud database to another in a different region.
	NetType *string `pulumi:"netType"`
	// Specifies the node flavor type. Valid values are **micro**, **small**,
	// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
	NodeType *string `pulumi:"nodeType"`
	// The order ID which will return if `chargingMode` is **prePaid**.
	OrderId *string `pulumi:"orderId"`
	// The original job direction.
	OriginalJobDirection *string `pulumi:"originalJobDirection"`
	// Specifies the stop type of job. It's valid when `action` is **stop**.
	// Default value is **target**. The options are as follows:
	// + **target**: Stop playback.
	// + **all**: Stop log capture and playback.
	PauseMode *string `pulumi:"pauseMode"`
	// schema: Internal
	Period *int `pulumi:"period"`
	// schema: Internal
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the policy information used to configure migration and
	// synchronization policies. The policyConfig structure is documented below.
	// Changing this parameter will create a new resource.
	PolicyConfig *JobPolicyConfig `pulumi:"policyConfig"`
	// Private IP.
	PrivateIp *string `pulumi:"privateIp"`
	// Progress.
	Progress *string `pulumi:"progress"`
	// Specifies public IP.
	// Changing this parameter will create a new resource.
	PublicIp *string `pulumi:"publicIp"`
	// Specifies the public IP list.
	// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
	// Changing this parameter will create a new resource.
	// The publicIpList structure is documented below.
	PublicIpLists []JobPublicIpList `pulumi:"publicIpLists"`
	// Specifies the region which the database belongs when it is a RDS database.
	// Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The security group ID to which the databese instance belongs.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Specifies the AZ where the standby task is located.
	// Changing this parameter will create a new resource.
	SlaveAz *string `pulumi:"slaveAz"`
	// The slave job ID which will return if job is dual-AZ.
	SlaveJobId *string `pulumi:"slaveJobId"`
	// Specifies the source database configuration.
	// The dbInfo structure of the `sourceDb` is documented below.
	// Changing this parameter will create a new resource.
	SourceDb *JobSourceDb `pulumi:"sourceDb"`
	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime *string `pulumi:"startTime"`
	// Status.
	Status *string `pulumi:"status"`
	// Specifies subnet ID of database when it is a RDS database.
	// It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
	// table level data. This parameter conflicts with `databases`.
	// The tables structure is documented below.
	Tables []JobTable `pulumi:"tables"`
	// Specifies the key/value pairs to associate with the DRS job.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the type of a task with an EIP bound.
	// Valid values are **master** and **slave**.
	// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
	// + In other cases, the value is fixed to **master**.
	Type *string `pulumi:"type"`
	// Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies vpc ID of database.
	// Changing this parameter will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type JobState struct {
	// Specifies the action of job. The options are as follows:
	// + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
	//   **INCRE_TRANSFER_STARTED**.
	// + **restart**: Continue the job. Available when job status is **PAUSING**.
	// + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
	// + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
	Action pulumi.StringPtrInput
	// Specifies the information body for setting task exception notification.
	// Changing this parameter will create a new resource.
	// The alarmNotify structure is documented below.
	AlarmNotify JobAlarmNotifyPtrInput
	// schema: Internal
	AutoRenew pulumi.StringPtrInput
	// schema: Internal
	ChargingMode pulumi.StringPtrInput
	// Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	CreatedAt pulumi.StringPtrInput
	// Specifies the list of the databases which the job migrates or synchronizes. Means to
	// transfer database level data. This parameter conflicts with `tables`.
	Databases pulumi.StringArrayInput
	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the destination database configuration.
	// The dbInfo structure of the `destinationDb` is documented below.
	// Changing this parameter will create a new resource.
	DestinationDb JobDestinationDbPtrInput
	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. Changing this parameter will create a new resource.
	DestinationDbReadnoly pulumi.BoolPtrInput
	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// + **up**: To the cloud. The destination database must be a database in the current cloud.
	// + **down**: Out of the cloud. The source database must be a database in the current cloud.
	// + **non-dbs**: self-built database.
	Direction pulumi.StringPtrInput
	// Specifies the engine type of database. Changing this parameter will
	// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
	// **kafka**, **postgresql**.
	EngineType pulumi.StringPtrInput
	// Specifies the enterprise project id.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
	ExpiredDays pulumi.IntPtrInput
	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is **false**.
	ForceDestroy pulumi.BoolPtrInput
	// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
	// for MariaDB. Defaults to **false**.
	// Changing this parameter will create a new resource.
	IsOpenFastClean pulumi.BoolPtrInput
	// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
	IsSyncReEdit pulumi.BoolPtrInput
	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
	// below. Changing this parameter will create a new resource.
	LimitSpeeds JobLimitSpeedArrayInput
	// Specifies the AZ where the primary task is located.
	// Changing this parameter will create a new resource.
	MasterAz pulumi.StringPtrInput
	// The master job ID which will return if job is dual-AZ.
	MasterJobId pulumi.StringPtrInput
	// Specifies whether to migrate the definers of all source database
	// objects to the `user` of `destinationDb`. The default value is **true**.
	// Changing this parameter will create a new resource.
	MigrateDefiner pulumi.BoolPtrInput
	// Specifies migration type.
	// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
	// + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
	//   objects and data, in a non-system database, to a destination database at a time.
	// + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
	//   destination cloud database, or from one cloud database to another in a different region.
	// + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
	//   migration initializes the destination database, an incremental migration parses logs to ensure data consistency
	//   between the source and destination databases.
	MigrationType pulumi.StringPtrInput
	// Specifies whether to enable multi write. It is mandatory when `type`
	// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
	// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
	MultiWrite pulumi.BoolPtrInput
	// Specifies the name of database.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the network type.
	// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
	// + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
	//   An EIP will be automatically bound to the replication instance and released after the replication task is complete.
	// + **vpc**: suitable for migration from one cloud database to another.
	// + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
	//   or from one cloud database to another in a different region.
	NetType pulumi.StringPtrInput
	// Specifies the node flavor type. Valid values are **micro**, **small**,
	// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
	NodeType pulumi.StringPtrInput
	// The order ID which will return if `chargingMode` is **prePaid**.
	OrderId pulumi.StringPtrInput
	// The original job direction.
	OriginalJobDirection pulumi.StringPtrInput
	// Specifies the stop type of job. It's valid when `action` is **stop**.
	// Default value is **target**. The options are as follows:
	// + **target**: Stop playback.
	// + **all**: Stop log capture and playback.
	PauseMode pulumi.StringPtrInput
	// schema: Internal
	Period pulumi.IntPtrInput
	// schema: Internal
	PeriodUnit pulumi.StringPtrInput
	// Specifies the policy information used to configure migration and
	// synchronization policies. The policyConfig structure is documented below.
	// Changing this parameter will create a new resource.
	PolicyConfig JobPolicyConfigPtrInput
	// Private IP.
	PrivateIp pulumi.StringPtrInput
	// Progress.
	Progress pulumi.StringPtrInput
	// Specifies public IP.
	// Changing this parameter will create a new resource.
	PublicIp pulumi.StringPtrInput
	// Specifies the public IP list.
	// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
	// Changing this parameter will create a new resource.
	// The publicIpList structure is documented below.
	PublicIpLists JobPublicIpListArrayInput
	// Specifies the region which the database belongs when it is a RDS database.
	// Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The security group ID to which the databese instance belongs.
	SecurityGroupId pulumi.StringPtrInput
	// Specifies the AZ where the standby task is located.
	// Changing this parameter will create a new resource.
	SlaveAz pulumi.StringPtrInput
	// The slave job ID which will return if job is dual-AZ.
	SlaveJobId pulumi.StringPtrInput
	// Specifies the source database configuration.
	// The dbInfo structure of the `sourceDb` is documented below.
	// Changing this parameter will create a new resource.
	SourceDb JobSourceDbPtrInput
	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime pulumi.StringPtrInput
	// Status.
	Status pulumi.StringPtrInput
	// Specifies subnet ID of database when it is a RDS database.
	// It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
	// table level data. This parameter conflicts with `databases`.
	// The tables structure is documented below.
	Tables JobTableArrayInput
	// Specifies the key/value pairs to associate with the DRS job.
	Tags pulumi.StringMapInput
	// Specifies the type of a task with an EIP bound.
	// Valid values are **master** and **slave**.
	// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
	// + In other cases, the value is fixed to **master**.
	Type pulumi.StringPtrInput
	// Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
	UpdatedAt pulumi.StringPtrInput
	// Specifies vpc ID of database.
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Specifies the action of job. The options are as follows:
	// + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
	//   **INCRE_TRANSFER_STARTED**.
	// + **restart**: Continue the job. Available when job status is **PAUSING**.
	// + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
	// + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
	Action *string `pulumi:"action"`
	// Specifies the information body for setting task exception notification.
	// Changing this parameter will create a new resource.
	// The alarmNotify structure is documented below.
	AlarmNotify *JobAlarmNotify `pulumi:"alarmNotify"`
	// schema: Internal
	AutoRenew *string `pulumi:"autoRenew"`
	// schema: Internal
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the list of the databases which the job migrates or synchronizes. Means to
	// transfer database level data. This parameter conflicts with `tables`.
	Databases []string `pulumi:"databases"`
	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the destination database configuration.
	// The dbInfo structure of the `destinationDb` is documented below.
	// Changing this parameter will create a new resource.
	DestinationDb JobDestinationDb `pulumi:"destinationDb"`
	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. Changing this parameter will create a new resource.
	DestinationDbReadnoly *bool `pulumi:"destinationDbReadnoly"`
	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// + **up**: To the cloud. The destination database must be a database in the current cloud.
	// + **down**: Out of the cloud. The source database must be a database in the current cloud.
	// + **non-dbs**: self-built database.
	Direction string `pulumi:"direction"`
	// Specifies the engine type of database. Changing this parameter will
	// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
	// **kafka**, **postgresql**.
	EngineType string `pulumi:"engineType"`
	// Specifies the enterprise project id.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
	ExpiredDays *int `pulumi:"expiredDays"`
	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is **false**.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
	// for MariaDB. Defaults to **false**.
	// Changing this parameter will create a new resource.
	IsOpenFastClean *bool `pulumi:"isOpenFastClean"`
	// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
	IsSyncReEdit *bool `pulumi:"isSyncReEdit"`
	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
	// below. Changing this parameter will create a new resource.
	LimitSpeeds []JobLimitSpeed `pulumi:"limitSpeeds"`
	// Specifies the AZ where the primary task is located.
	// Changing this parameter will create a new resource.
	MasterAz *string `pulumi:"masterAz"`
	// Specifies whether to migrate the definers of all source database
	// objects to the `user` of `destinationDb`. The default value is **true**.
	// Changing this parameter will create a new resource.
	MigrateDefiner *bool `pulumi:"migrateDefiner"`
	// Specifies migration type.
	// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
	// + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
	//   objects and data, in a non-system database, to a destination database at a time.
	// + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
	//   destination cloud database, or from one cloud database to another in a different region.
	// + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
	//   migration initializes the destination database, an incremental migration parses logs to ensure data consistency
	//   between the source and destination databases.
	MigrationType *string `pulumi:"migrationType"`
	// Specifies whether to enable multi write. It is mandatory when `type`
	// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
	// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
	MultiWrite *bool `pulumi:"multiWrite"`
	// Specifies the name of database.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the network type.
	// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
	// + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
	//   An EIP will be automatically bound to the replication instance and released after the replication task is complete.
	// + **vpc**: suitable for migration from one cloud database to another.
	// + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
	//   or from one cloud database to another in a different region.
	NetType *string `pulumi:"netType"`
	// Specifies the node flavor type. Valid values are **micro**, **small**,
	// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
	NodeType *string `pulumi:"nodeType"`
	// Specifies the stop type of job. It's valid when `action` is **stop**.
	// Default value is **target**. The options are as follows:
	// + **target**: Stop playback.
	// + **all**: Stop log capture and playback.
	PauseMode *string `pulumi:"pauseMode"`
	// schema: Internal
	Period *int `pulumi:"period"`
	// schema: Internal
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the policy information used to configure migration and
	// synchronization policies. The policyConfig structure is documented below.
	// Changing this parameter will create a new resource.
	PolicyConfig *JobPolicyConfig `pulumi:"policyConfig"`
	// Specifies the public IP list.
	// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
	// Changing this parameter will create a new resource.
	// The publicIpList structure is documented below.
	PublicIpLists []JobPublicIpList `pulumi:"publicIpLists"`
	// Specifies the region which the database belongs when it is a RDS database.
	// Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the AZ where the standby task is located.
	// Changing this parameter will create a new resource.
	SlaveAz *string `pulumi:"slaveAz"`
	// Specifies the source database configuration.
	// The dbInfo structure of the `sourceDb` is documented below.
	// Changing this parameter will create a new resource.
	SourceDb JobSourceDb `pulumi:"sourceDb"`
	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime *string `pulumi:"startTime"`
	// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
	// table level data. This parameter conflicts with `databases`.
	// The tables structure is documented below.
	Tables []JobTable `pulumi:"tables"`
	// Specifies the key/value pairs to associate with the DRS job.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the type of a task with an EIP bound.
	// Valid values are **master** and **slave**.
	// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
	// + In other cases, the value is fixed to **master**.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Specifies the action of job. The options are as follows:
	// + **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
	//   **INCRE_TRANSFER_STARTED**.
	// + **restart**: Continue the job. Available when job status is **PAUSING**.
	// + **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
	// + **start**: Start the job. Available when job status is **WAITING_FOR_START**.
	Action pulumi.StringPtrInput
	// Specifies the information body for setting task exception notification.
	// Changing this parameter will create a new resource.
	// The alarmNotify structure is documented below.
	AlarmNotify JobAlarmNotifyPtrInput
	// schema: Internal
	AutoRenew pulumi.StringPtrInput
	// schema: Internal
	ChargingMode pulumi.StringPtrInput
	// Specifies the list of the databases which the job migrates or synchronizes. Means to
	// transfer database level data. This parameter conflicts with `tables`.
	Databases pulumi.StringArrayInput
	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the destination database configuration.
	// The dbInfo structure of the `destinationDb` is documented below.
	// Changing this parameter will create a new resource.
	DestinationDb JobDestinationDbInput
	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. Changing this parameter will create a new resource.
	DestinationDbReadnoly pulumi.BoolPtrInput
	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// + **up**: To the cloud. The destination database must be a database in the current cloud.
	// + **down**: Out of the cloud. The source database must be a database in the current cloud.
	// + **non-dbs**: self-built database.
	Direction pulumi.StringInput
	// Specifies the engine type of database. Changing this parameter will
	// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
	// **kafka**, **postgresql**.
	EngineType pulumi.StringInput
	// Specifies the enterprise project id.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
	ExpiredDays pulumi.IntPtrInput
	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is **false**.
	ForceDestroy pulumi.BoolPtrInput
	// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
	// for MariaDB. Defaults to **false**.
	// Changing this parameter will create a new resource.
	IsOpenFastClean pulumi.BoolPtrInput
	// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
	IsSyncReEdit pulumi.BoolPtrInput
	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
	// below. Changing this parameter will create a new resource.
	LimitSpeeds JobLimitSpeedArrayInput
	// Specifies the AZ where the primary task is located.
	// Changing this parameter will create a new resource.
	MasterAz pulumi.StringPtrInput
	// Specifies whether to migrate the definers of all source database
	// objects to the `user` of `destinationDb`. The default value is **true**.
	// Changing this parameter will create a new resource.
	MigrateDefiner pulumi.BoolPtrInput
	// Specifies migration type.
	// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
	// + **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
	//   objects and data, in a non-system database, to a destination database at a time.
	// + **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
	//   destination cloud database, or from one cloud database to another in a different region.
	// + **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
	//   migration initializes the destination database, an incremental migration parses logs to ensure data consistency
	//   between the source and destination databases.
	MigrationType pulumi.StringPtrInput
	// Specifies whether to enable multi write. It is mandatory when `type`
	// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
	// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
	MultiWrite pulumi.BoolPtrInput
	// Specifies the name of database.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the network type.
	// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
	// + **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
	//   An EIP will be automatically bound to the replication instance and released after the replication task is complete.
	// + **vpc**: suitable for migration from one cloud database to another.
	// + **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
	//   or from one cloud database to another in a different region.
	NetType pulumi.StringPtrInput
	// Specifies the node flavor type. Valid values are **micro**, **small**,
	// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
	NodeType pulumi.StringPtrInput
	// Specifies the stop type of job. It's valid when `action` is **stop**.
	// Default value is **target**. The options are as follows:
	// + **target**: Stop playback.
	// + **all**: Stop log capture and playback.
	PauseMode pulumi.StringPtrInput
	// schema: Internal
	Period pulumi.IntPtrInput
	// schema: Internal
	PeriodUnit pulumi.StringPtrInput
	// Specifies the policy information used to configure migration and
	// synchronization policies. The policyConfig structure is documented below.
	// Changing this parameter will create a new resource.
	PolicyConfig JobPolicyConfigPtrInput
	// Specifies the public IP list.
	// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
	// Changing this parameter will create a new resource.
	// The publicIpList structure is documented below.
	PublicIpLists JobPublicIpListArrayInput
	// Specifies the region which the database belongs when it is a RDS database.
	// Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the AZ where the standby task is located.
	// Changing this parameter will create a new resource.
	SlaveAz pulumi.StringPtrInput
	// Specifies the source database configuration.
	// The dbInfo structure of the `sourceDb` is documented below.
	// Changing this parameter will create a new resource.
	SourceDb JobSourceDbInput
	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime pulumi.StringPtrInput
	// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
	// table level data. This parameter conflicts with `databases`.
	// The tables structure is documented below.
	Tables JobTableArrayInput
	// Specifies the key/value pairs to associate with the DRS job.
	Tags pulumi.StringMapInput
	// Specifies the type of a task with an EIP bound.
	// Valid values are **master** and **slave**.
	// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
	// + In other cases, the value is fixed to **master**.
	Type pulumi.StringInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Specifies the action of job. The options are as follows:
//   - **stop**: Stop the job. Available when job status is **FULL_TRANSFER_STARTED**, **FULL_TRANSFER_COMPLETE** or
//     **INCRE_TRANSFER_STARTED**.
//   - **restart**: Continue the job. Available when job status is **PAUSING**.
//   - **reset**: Retry the job. Available when job status is **FULL_TRANSFER_FAILED** or **INCRE_TRANSFER_FAILED**.
//   - **start**: Start the job. Available when job status is **WAITING_FOR_START**.
func (o JobOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the information body for setting task exception notification.
// Changing this parameter will create a new resource.
// The alarmNotify structure is documented below.
func (o JobOutput) AlarmNotify() JobAlarmNotifyOutput {
	return o.ApplyT(func(v *Job) JobAlarmNotifyOutput { return v.AlarmNotify }).(JobAlarmNotifyOutput)
}

// schema: Internal
func (o JobOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o JobOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
func (o JobOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the list of the databases which the job migrates or synchronizes. Means to
// transfer database level data. This parameter conflicts with `tables`.
func (o JobOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Job) pulumi.StringArrayOutput { return v.Databases }).(pulumi.StringArrayOutput)
}

// Specifies the description of the job, which contain a
// maximum of 256 characters, and certain special characters (including !<>&'"\\) are not allowed.
func (o JobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the destination database configuration.
// The dbInfo structure of the `destinationDb` is documented below.
// Changing this parameter will create a new resource.
func (o JobOutput) DestinationDb() JobDestinationDbOutput {
	return o.ApplyT(func(v *Job) JobDestinationDbOutput { return v.DestinationDb }).(JobDestinationDbOutput)
}

// Specifies the destination DB instance as read-only helps
// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
// Read/Write. Changing this parameter will create a new resource.
func (o JobOutput) DestinationDbReadnoly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.DestinationDbReadnoly }).(pulumi.BoolPtrOutput)
}

// Specifies the direction of data flow.
// Changing this parameter will create a new resource. The options are as follows:
// + **up**: To the cloud. The destination database must be a database in the current cloud.
// + **down**: Out of the cloud. The source database must be a database in the current cloud.
// + **non-dbs**: self-built database.
func (o JobOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Specifies the engine type of database. Changing this parameter will
// create a new resource. The options are as follows: **mysql**, **mongodb**, **gaussdbv5**, **taurus**, **gaussdbv5ha**,
// **kafka**, **postgresql**.
func (o JobOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// Specifies the enterprise project id.
// Changing this parameter will create a new resource.
func (o JobOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies how many days after the task is abnormal, it will automatically
// end. The value ranges from 14 to 100. the default value is `14`. Changing this parameter will create a new resource.
func (o JobOutput) ExpiredDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.ExpiredDays }).(pulumi.IntPtrOutput)
}

// Specifies whether to forcibly destroy the job even if it is running.
// The default value is **false**.
func (o JobOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable binlog clearing for RDS for MySQL or RDS
// for MariaDB. Defaults to **false**.
// Changing this parameter will create a new resource.
func (o JobOutput) IsOpenFastClean() pulumi.BoolOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolOutput { return v.IsOpenFastClean }).(pulumi.BoolOutput)
}

// Specifies whether to start the sync re-edit job. It's valid when `action` is **restart**.
func (o JobOutput) IsSyncReEdit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.IsSyncReEdit }).(pulumi.BoolPtrOutput)
}

// Specifies the migration speed by setting a time period.
// The default is no speed limit. The maximum length is 3. The limitSpeed structure is documented
// below. Changing this parameter will create a new resource.
func (o JobOutput) LimitSpeeds() JobLimitSpeedArrayOutput {
	return o.ApplyT(func(v *Job) JobLimitSpeedArrayOutput { return v.LimitSpeeds }).(JobLimitSpeedArrayOutput)
}

// Specifies the AZ where the primary task is located.
// Changing this parameter will create a new resource.
func (o JobOutput) MasterAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.MasterAz }).(pulumi.StringPtrOutput)
}

// The master job ID which will return if job is dual-AZ.
func (o JobOutput) MasterJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.MasterJobId }).(pulumi.StringOutput)
}

// Specifies whether to migrate the definers of all source database
// objects to the `user` of `destinationDb`. The default value is **true**.
// Changing this parameter will create a new resource.
func (o JobOutput) MigrateDefiner() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.MigrateDefiner }).(pulumi.BoolPtrOutput)
}

// Specifies migration type.
// Changing this parameter will create a new resource. The default value is **FULL_INCR_TRANS**. The options are as follows:
//   - **FULL_TRANS**: Full migration. Suitable for scenarios where services can be interrupted. It migrates all database
//     objects and data, in a non-system database, to a destination database at a time.
//   - **INCR_TRANS**: Incremental migration. Suitable for migration from an on-premises self-built database to a
//     destination cloud database, or from one cloud database to another in a different region.
//   - **FULL_INCR_TRANS**:  Full+Incremental migration. This allows to migrate data with minimal downtime. After a full
//     migration initializes the destination database, an incremental migration parses logs to ensure data consistency
//     between the source and destination databases.
func (o JobOutput) MigrationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.MigrationType }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable multi write. It is mandatory when `type`
// is **cloudDataGuard**. When the disaster recovery type is dual-active disaster recovery, set `multiWrite` to **true**,
// otherwise to **false**. The default value is **false**. Changing this parameter will create a new resource.
func (o JobOutput) MultiWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.MultiWrite }).(pulumi.BoolPtrOutput)
}

// Specifies the name of database.
// Changing this parameter will create a new resource.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the network type.
// Changing this parameter will create a new resource. The default value is **eip**. The options are as follows:
//   - **eip**: suitable for migration from an on-premises or other cloud database to a destination cloud database.
//     An EIP will be automatically bound to the replication instance and released after the replication task is complete.
//   - **vpc**: suitable for migration from one cloud database to another.
//   - **vpn**: suitable for migration from an on-premises self-built database to a destination cloud database,
//     or from one cloud database to another in a different region.
func (o JobOutput) NetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.NetType }).(pulumi.StringPtrOutput)
}

// Specifies the node flavor type. Valid values are **micro**, **small**,
// **medium**, **high**, **xlarge**, **2xlarge**. Default to **high**.
func (o JobOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The order ID which will return if `chargingMode` is **prePaid**.
func (o JobOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.OrderId }).(pulumi.StringOutput)
}

// The original job direction.
func (o JobOutput) OriginalJobDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.OriginalJobDirection }).(pulumi.StringOutput)
}

// Specifies the stop type of job. It's valid when `action` is **stop**.
// Default value is **target**. The options are as follows:
// + **target**: Stop playback.
// + **all**: Stop log capture and playback.
func (o JobOutput) PauseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.PauseMode }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o JobOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// schema: Internal
func (o JobOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the policy information used to configure migration and
// synchronization policies. The policyConfig structure is documented below.
// Changing this parameter will create a new resource.
func (o JobOutput) PolicyConfig() JobPolicyConfigPtrOutput {
	return o.ApplyT(func(v *Job) JobPolicyConfigPtrOutput { return v.PolicyConfig }).(JobPolicyConfigPtrOutput)
}

// Private IP.
func (o JobOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Progress.
func (o JobOutput) Progress() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Progress }).(pulumi.StringOutput)
}

// Specifies public IP.
// Changing this parameter will create a new resource.
func (o JobOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// Specifies the public IP list.
// It can be specified when `netType` is **eip**, and if it's not specified, DRS job will automatically bind a public IP.
// Changing this parameter will create a new resource.
// The publicIpList structure is documented below.
func (o JobOutput) PublicIpLists() JobPublicIpListArrayOutput {
	return o.ApplyT(func(v *Job) JobPublicIpListArrayOutput { return v.PublicIpLists }).(JobPublicIpListArrayOutput)
}

// Specifies the region which the database belongs when it is a RDS database.
// Changing this parameter will create a new resource.
func (o JobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The security group ID to which the databese instance belongs.
func (o JobOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Specifies the AZ where the standby task is located.
// Changing this parameter will create a new resource.
func (o JobOutput) SlaveAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.SlaveAz }).(pulumi.StringPtrOutput)
}

// The slave job ID which will return if job is dual-AZ.
func (o JobOutput) SlaveJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SlaveJobId }).(pulumi.StringOutput)
}

// Specifies the source database configuration.
// The dbInfo structure of the `sourceDb` is documented below.
// Changing this parameter will create a new resource.
func (o JobOutput) SourceDb() JobSourceDbOutput {
	return o.ApplyT(func(v *Job) JobSourceDbOutput { return v.SourceDb }).(JobSourceDbOutput)
}

// Specifies the time to start speed limit, this time is UTC time. The start
// time is the whole hour, if there is a minute, it will be ignored, the format is **hh:mm**, and the hour number
// is two digits, for example: 01:00. Changing this parameter will create a new resource.
func (o JobOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Status.
func (o JobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies subnet ID of database when it is a RDS database.
// It is mandatory when `direction` is **down**. Changing this parameter will create a new resource.
func (o JobOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the list of the tables which the job migrates or synchronizes. Means to transfer
// table level data. This parameter conflicts with `databases`.
// The tables structure is documented below.
func (o JobOutput) Tables() JobTableArrayOutput {
	return o.ApplyT(func(v *Job) JobTableArrayOutput { return v.Tables }).(JobTableArrayOutput)
}

// Specifies the key/value pairs to associate with the DRS job.
func (o JobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the type of a task with an EIP bound.
// Valid values are **master** and **slave**.
// + In a primary/standby task, **master** indicates the primary task, and **slave** indicates the standby task.
// + In other cases, the value is fixed to **master**.
func (o JobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Update time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ.
func (o JobOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies vpc ID of database.
// Changing this parameter will create a new resource.
func (o JobOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}

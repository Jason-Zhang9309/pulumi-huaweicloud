// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bcs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Instance struct {
	pulumi.CustomResourceState

	// The agent addresses and port numbers on the user data plane of the BCS service.
	// * `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
	// * `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
	//   `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
	// * `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
	//   the organization, and the numerator is the number of normal peers.
	// * `peer_orgs/address/domain_port` - The domain name address.
	// * `peer_orgs/address/ip_port` - The IP address.
	// * `kafka/name` - The Kafka instance name.
	AgentPortalAddresses pulumi.StringArrayOutput `pulumi:"agentPortalAddresses"`
	// Specifies the configuration of block generation. The blockInfo object
	// structure is documented below.
	BlockInfo InstanceBlockInfoPtrOutput `pulumi:"blockInfo"`
	// Specifies the blockchain type of the BCS instance. Valid values
	// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
	BlockchainType pulumi.StringOutput `pulumi:"blockchainType"`
	// Specifies the ID of the CCE cluster to attach to the BCS instance. The
	// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
	// deploying the BCS service. Changing this will create a new instance.
	CceClusterId pulumi.StringOutput `pulumi:"cceClusterId"`
	// Specifies an array of one or more channels to attach to the BCS instance. If
	// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
	// instance. The channels object structure is documented below.
	Channels    InstanceChannelArrayOutput `pulumi:"channels"`
	ClusterType pulumi.StringOutput        `pulumi:"clusterType"`
	// Specifies the consensus algorithm used by the BCS instance. The valid
	// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
	// and `etcdraft`. Changing this will create a new instance.
	Consensus pulumi.StringOutput `pulumi:"consensus"`
	// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
	// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
	// object structure is documented below.
	Couchdb InstanceCouchdbPtrOutput `pulumi:"couchdb"`
	// Whether the BCS instance is deployed across regions.
	CrossRegionSupport pulumi.BoolOutput   `pulumi:"crossRegionSupport"`
	DatabaseType       pulumi.StringOutput `pulumi:"databaseType"`
	// Specified whether to delete the associated OBS bucket when deleting BCS instance.
	// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
	DeleteObs pulumi.BoolPtrOutput `pulumi:"deleteObs"`
	// Specified whether to delete the associated SFS resources when deleting BCS
	// instance. Default is false.
	DeleteStorage pulumi.BoolPtrOutput `pulumi:"deleteStorage"`
	// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
	// . Changing this will create a new instance.
	Edition pulumi.IntOutput `pulumi:"edition"`
	// Specifies whether to use the EIP of the CCE to bind the BCS instance.
	// Changing this will create a new instance. Defalut is true.
	EipEnable pulumi.BoolPtrOutput `pulumi:"eipEnable"`
	// Specifies the ID of the enterprise project that the BCS
	// instance belong to. Changing this will create a new instance.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies version of fabric for the BCS instance. Valid values
	// are `1.4` and `2.0`
	// Changing this will create a new instance.
	FabricVersion pulumi.StringOutput `pulumi:"fabricVersion"`
	// Specifies the kafka configuration for the BCS instance. Changing this will create
	// a new instance. The kafka object structure is documented below.
	Kafka InstanceKafkaPtrOutput `pulumi:"kafka"`
	// Specifies the name of the channel. Changing this creates a new instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of an old BCS service.
	OldServiceVersion pulumi.StringOutput `pulumi:"oldServiceVersion"`
	// Specifies the number of peers in the orderer organizaion. Changing this
	// will create a new instance.
	OrdererNodeNum pulumi.IntOutput `pulumi:"ordererNodeNum"`
	// Specifies the storage capacity of peer organization. Changing this will
	// create a new instance.
	// + The minimum storage capacity of `efs` volume type is 500GB.
	OrgDiskSize pulumi.IntOutput `pulumi:"orgDiskSize"`
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password pulumi.StringOutput `pulumi:"password"`
	// Specifies an array of one or more Peer organizations to attach to the BCS
	// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
	// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
	PeerOrgs InstancePeerOrgArrayOutput `pulumi:"peerOrgs"`
	// The deployment type of the BCS instance.
	PurchaseType pulumi.StringOutput `pulumi:"purchaseType"`
	// Specifies the region in which to create the instance. If omitted, the
	// provider-level region will be used. Changing this will create a new instance.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specified whether to add RESTful API support. Changing this will
	// create a new instance.
	RestfulApiSupport pulumi.BoolOutput `pulumi:"restfulApiSupport"`
	// Whether rollback is supported when the BCS service fails to br upgraded.
	RollbackSupport pulumi.BoolOutput `pulumi:"rollbackSupport"`
	// Specifies the secutity mechanism used by the BCS instance. Valid
	// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
	// algorithm). Default is `ECDSA`. Changing this will create a new instance.
	SecurityMechanism pulumi.StringOutput `pulumi:"securityMechanism"`
	// Specifies the information about the SFS Turbo file system. Changing this will
	// create a new instance. The sfsTurbo object structure is documented below.
	SfsTurbo InstanceSfsTurboPtrOutput `pulumi:"sfsTurbo"`
	// The status of the BCS instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specified whether to add Trusted computing platform. Changing this will create
	// a new instance.
	Tc3Need pulumi.BoolOutput `pulumi:"tc3Need"`
	// The service verison of the BCS instance.
	Version pulumi.StringOutput `pulumi:"version"`
	// Specifies the storage volume type to attach to each organization of the
	// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CceClusterId == nil {
		return nil, errors.New("invalid value for required argument 'CceClusterId'")
	}
	if args.Consensus == nil {
		return nil, errors.New("invalid value for required argument 'Consensus'")
	}
	if args.Edition == nil {
		return nil, errors.New("invalid value for required argument 'Edition'")
	}
	if args.EnterpriseProjectId == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseProjectId'")
	}
	if args.FabricVersion == nil {
		return nil, errors.New("invalid value for required argument 'FabricVersion'")
	}
	if args.OrdererNodeNum == nil {
		return nil, errors.New("invalid value for required argument 'OrdererNodeNum'")
	}
	if args.OrgDiskSize == nil {
		return nil, errors.New("invalid value for required argument 'OrgDiskSize'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	var resource Instance
	err := ctx.RegisterResource("huaweicloud:Bcs/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("huaweicloud:Bcs/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The agent addresses and port numbers on the user data plane of the BCS service.
	// * `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
	// * `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
	//   `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
	// * `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
	//   the organization, and the numerator is the number of normal peers.
	// * `peer_orgs/address/domain_port` - The domain name address.
	// * `peer_orgs/address/ip_port` - The IP address.
	// * `kafka/name` - The Kafka instance name.
	AgentPortalAddresses []string `pulumi:"agentPortalAddresses"`
	// Specifies the configuration of block generation. The blockInfo object
	// structure is documented below.
	BlockInfo *InstanceBlockInfo `pulumi:"blockInfo"`
	// Specifies the blockchain type of the BCS instance. Valid values
	// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
	BlockchainType *string `pulumi:"blockchainType"`
	// Specifies the ID of the CCE cluster to attach to the BCS instance. The
	// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
	// deploying the BCS service. Changing this will create a new instance.
	CceClusterId *string `pulumi:"cceClusterId"`
	// Specifies an array of one or more channels to attach to the BCS instance. If
	// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
	// instance. The channels object structure is documented below.
	Channels    []InstanceChannel `pulumi:"channels"`
	ClusterType *string           `pulumi:"clusterType"`
	// Specifies the consensus algorithm used by the BCS instance. The valid
	// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
	// and `etcdraft`. Changing this will create a new instance.
	Consensus *string `pulumi:"consensus"`
	// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
	// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
	// object structure is documented below.
	Couchdb *InstanceCouchdb `pulumi:"couchdb"`
	// Whether the BCS instance is deployed across regions.
	CrossRegionSupport *bool   `pulumi:"crossRegionSupport"`
	DatabaseType       *string `pulumi:"databaseType"`
	// Specified whether to delete the associated OBS bucket when deleting BCS instance.
	// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
	DeleteObs *bool `pulumi:"deleteObs"`
	// Specified whether to delete the associated SFS resources when deleting BCS
	// instance. Default is false.
	DeleteStorage *bool `pulumi:"deleteStorage"`
	// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
	// . Changing this will create a new instance.
	Edition *int `pulumi:"edition"`
	// Specifies whether to use the EIP of the CCE to bind the BCS instance.
	// Changing this will create a new instance. Defalut is true.
	EipEnable *bool `pulumi:"eipEnable"`
	// Specifies the ID of the enterprise project that the BCS
	// instance belong to. Changing this will create a new instance.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies version of fabric for the BCS instance. Valid values
	// are `1.4` and `2.0`
	// Changing this will create a new instance.
	FabricVersion *string `pulumi:"fabricVersion"`
	// Specifies the kafka configuration for the BCS instance. Changing this will create
	// a new instance. The kafka object structure is documented below.
	Kafka *InstanceKafka `pulumi:"kafka"`
	// Specifies the name of the channel. Changing this creates a new instance.
	Name *string `pulumi:"name"`
	// The version of an old BCS service.
	OldServiceVersion *string `pulumi:"oldServiceVersion"`
	// Specifies the number of peers in the orderer organizaion. Changing this
	// will create a new instance.
	OrdererNodeNum *int `pulumi:"ordererNodeNum"`
	// Specifies the storage capacity of peer organization. Changing this will
	// create a new instance.
	// + The minimum storage capacity of `efs` volume type is 500GB.
	OrgDiskSize *int `pulumi:"orgDiskSize"`
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password *string `pulumi:"password"`
	// Specifies an array of one or more Peer organizations to attach to the BCS
	// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
	// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
	PeerOrgs []InstancePeerOrg `pulumi:"peerOrgs"`
	// The deployment type of the BCS instance.
	PurchaseType *string `pulumi:"purchaseType"`
	// Specifies the region in which to create the instance. If omitted, the
	// provider-level region will be used. Changing this will create a new instance.
	Region *string `pulumi:"region"`
	// Specified whether to add RESTful API support. Changing this will
	// create a new instance.
	RestfulApiSupport *bool `pulumi:"restfulApiSupport"`
	// Whether rollback is supported when the BCS service fails to br upgraded.
	RollbackSupport *bool `pulumi:"rollbackSupport"`
	// Specifies the secutity mechanism used by the BCS instance. Valid
	// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
	// algorithm). Default is `ECDSA`. Changing this will create a new instance.
	SecurityMechanism *string `pulumi:"securityMechanism"`
	// Specifies the information about the SFS Turbo file system. Changing this will
	// create a new instance. The sfsTurbo object structure is documented below.
	SfsTurbo *InstanceSfsTurbo `pulumi:"sfsTurbo"`
	// The status of the BCS instance.
	Status *string `pulumi:"status"`
	// Specified whether to add Trusted computing platform. Changing this will create
	// a new instance.
	Tc3Need *bool `pulumi:"tc3Need"`
	// The service verison of the BCS instance.
	Version *string `pulumi:"version"`
	// Specifies the storage volume type to attach to each organization of the
	// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
	VolumeType *string `pulumi:"volumeType"`
}

type InstanceState struct {
	// The agent addresses and port numbers on the user data plane of the BCS service.
	// * `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
	// * `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
	//   `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
	// * `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
	//   the organization, and the numerator is the number of normal peers.
	// * `peer_orgs/address/domain_port` - The domain name address.
	// * `peer_orgs/address/ip_port` - The IP address.
	// * `kafka/name` - The Kafka instance name.
	AgentPortalAddresses pulumi.StringArrayInput
	// Specifies the configuration of block generation. The blockInfo object
	// structure is documented below.
	BlockInfo InstanceBlockInfoPtrInput
	// Specifies the blockchain type of the BCS instance. Valid values
	// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
	BlockchainType pulumi.StringPtrInput
	// Specifies the ID of the CCE cluster to attach to the BCS instance. The
	// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
	// deploying the BCS service. Changing this will create a new instance.
	CceClusterId pulumi.StringPtrInput
	// Specifies an array of one or more channels to attach to the BCS instance. If
	// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
	// instance. The channels object structure is documented below.
	Channels    InstanceChannelArrayInput
	ClusterType pulumi.StringPtrInput
	// Specifies the consensus algorithm used by the BCS instance. The valid
	// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
	// and `etcdraft`. Changing this will create a new instance.
	Consensus pulumi.StringPtrInput
	// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
	// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
	// object structure is documented below.
	Couchdb InstanceCouchdbPtrInput
	// Whether the BCS instance is deployed across regions.
	CrossRegionSupport pulumi.BoolPtrInput
	DatabaseType       pulumi.StringPtrInput
	// Specified whether to delete the associated OBS bucket when deleting BCS instance.
	// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
	DeleteObs pulumi.BoolPtrInput
	// Specified whether to delete the associated SFS resources when deleting BCS
	// instance. Default is false.
	DeleteStorage pulumi.BoolPtrInput
	// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
	// . Changing this will create a new instance.
	Edition pulumi.IntPtrInput
	// Specifies whether to use the EIP of the CCE to bind the BCS instance.
	// Changing this will create a new instance. Defalut is true.
	EipEnable pulumi.BoolPtrInput
	// Specifies the ID of the enterprise project that the BCS
	// instance belong to. Changing this will create a new instance.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies version of fabric for the BCS instance. Valid values
	// are `1.4` and `2.0`
	// Changing this will create a new instance.
	FabricVersion pulumi.StringPtrInput
	// Specifies the kafka configuration for the BCS instance. Changing this will create
	// a new instance. The kafka object structure is documented below.
	Kafka InstanceKafkaPtrInput
	// Specifies the name of the channel. Changing this creates a new instance.
	Name pulumi.StringPtrInput
	// The version of an old BCS service.
	OldServiceVersion pulumi.StringPtrInput
	// Specifies the number of peers in the orderer organizaion. Changing this
	// will create a new instance.
	OrdererNodeNum pulumi.IntPtrInput
	// Specifies the storage capacity of peer organization. Changing this will
	// create a new instance.
	// + The minimum storage capacity of `efs` volume type is 500GB.
	OrgDiskSize pulumi.IntPtrInput
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password pulumi.StringPtrInput
	// Specifies an array of one or more Peer organizations to attach to the BCS
	// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
	// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
	PeerOrgs InstancePeerOrgArrayInput
	// The deployment type of the BCS instance.
	PurchaseType pulumi.StringPtrInput
	// Specifies the region in which to create the instance. If omitted, the
	// provider-level region will be used. Changing this will create a new instance.
	Region pulumi.StringPtrInput
	// Specified whether to add RESTful API support. Changing this will
	// create a new instance.
	RestfulApiSupport pulumi.BoolPtrInput
	// Whether rollback is supported when the BCS service fails to br upgraded.
	RollbackSupport pulumi.BoolPtrInput
	// Specifies the secutity mechanism used by the BCS instance. Valid
	// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
	// algorithm). Default is `ECDSA`. Changing this will create a new instance.
	SecurityMechanism pulumi.StringPtrInput
	// Specifies the information about the SFS Turbo file system. Changing this will
	// create a new instance. The sfsTurbo object structure is documented below.
	SfsTurbo InstanceSfsTurboPtrInput
	// The status of the BCS instance.
	Status pulumi.StringPtrInput
	// Specified whether to add Trusted computing platform. Changing this will create
	// a new instance.
	Tc3Need pulumi.BoolPtrInput
	// The service verison of the BCS instance.
	Version pulumi.StringPtrInput
	// Specifies the storage volume type to attach to each organization of the
	// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
	VolumeType pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Specifies the configuration of block generation. The blockInfo object
	// structure is documented below.
	BlockInfo *InstanceBlockInfo `pulumi:"blockInfo"`
	// Specifies the blockchain type of the BCS instance. Valid values
	// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
	BlockchainType *string `pulumi:"blockchainType"`
	// Specifies the ID of the CCE cluster to attach to the BCS instance. The
	// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
	// deploying the BCS service. Changing this will create a new instance.
	CceClusterId string `pulumi:"cceClusterId"`
	// Specifies an array of one or more channels to attach to the BCS instance. If
	// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
	// instance. The channels object structure is documented below.
	Channels []InstanceChannel `pulumi:"channels"`
	// Specifies the consensus algorithm used by the BCS instance. The valid
	// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
	// and `etcdraft`. Changing this will create a new instance.
	Consensus string `pulumi:"consensus"`
	// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
	// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
	// object structure is documented below.
	Couchdb      *InstanceCouchdb `pulumi:"couchdb"`
	DatabaseType *string          `pulumi:"databaseType"`
	// Specified whether to delete the associated OBS bucket when deleting BCS instance.
	// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
	DeleteObs *bool `pulumi:"deleteObs"`
	// Specified whether to delete the associated SFS resources when deleting BCS
	// instance. Default is false.
	DeleteStorage *bool `pulumi:"deleteStorage"`
	// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
	// . Changing this will create a new instance.
	Edition int `pulumi:"edition"`
	// Specifies whether to use the EIP of the CCE to bind the BCS instance.
	// Changing this will create a new instance. Defalut is true.
	EipEnable *bool `pulumi:"eipEnable"`
	// Specifies the ID of the enterprise project that the BCS
	// instance belong to. Changing this will create a new instance.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Specifies version of fabric for the BCS instance. Valid values
	// are `1.4` and `2.0`
	// Changing this will create a new instance.
	FabricVersion string `pulumi:"fabricVersion"`
	// Specifies the kafka configuration for the BCS instance. Changing this will create
	// a new instance. The kafka object structure is documented below.
	Kafka *InstanceKafka `pulumi:"kafka"`
	// Specifies the name of the channel. Changing this creates a new instance.
	Name *string `pulumi:"name"`
	// Specifies the number of peers in the orderer organizaion. Changing this
	// will create a new instance.
	OrdererNodeNum int `pulumi:"ordererNodeNum"`
	// Specifies the storage capacity of peer organization. Changing this will
	// create a new instance.
	// + The minimum storage capacity of `efs` volume type is 500GB.
	OrgDiskSize int `pulumi:"orgDiskSize"`
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password string `pulumi:"password"`
	// Specifies an array of one or more Peer organizations to attach to the BCS
	// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
	// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
	PeerOrgs []InstancePeerOrg `pulumi:"peerOrgs"`
	// Specifies the region in which to create the instance. If omitted, the
	// provider-level region will be used. Changing this will create a new instance.
	Region *string `pulumi:"region"`
	// Specified whether to add RESTful API support. Changing this will
	// create a new instance.
	RestfulApiSupport *bool `pulumi:"restfulApiSupport"`
	// Specifies the secutity mechanism used by the BCS instance. Valid
	// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
	// algorithm). Default is `ECDSA`. Changing this will create a new instance.
	SecurityMechanism *string `pulumi:"securityMechanism"`
	// Specifies the information about the SFS Turbo file system. Changing this will
	// create a new instance. The sfsTurbo object structure is documented below.
	SfsTurbo *InstanceSfsTurbo `pulumi:"sfsTurbo"`
	// Specified whether to add Trusted computing platform. Changing this will create
	// a new instance.
	Tc3Need *bool `pulumi:"tc3Need"`
	// Specifies the storage volume type to attach to each organization of the
	// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
	VolumeType string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Specifies the configuration of block generation. The blockInfo object
	// structure is documented below.
	BlockInfo InstanceBlockInfoPtrInput
	// Specifies the blockchain type of the BCS instance. Valid values
	// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
	BlockchainType pulumi.StringPtrInput
	// Specifies the ID of the CCE cluster to attach to the BCS instance. The
	// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
	// deploying the BCS service. Changing this will create a new instance.
	CceClusterId pulumi.StringInput
	// Specifies an array of one or more channels to attach to the BCS instance. If
	// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
	// instance. The channels object structure is documented below.
	Channels InstanceChannelArrayInput
	// Specifies the consensus algorithm used by the BCS instance. The valid
	// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
	// and `etcdraft`. Changing this will create a new instance.
	Consensus pulumi.StringInput
	// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
	// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
	// object structure is documented below.
	Couchdb      InstanceCouchdbPtrInput
	DatabaseType pulumi.StringPtrInput
	// Specified whether to delete the associated OBS bucket when deleting BCS instance.
	// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
	DeleteObs pulumi.BoolPtrInput
	// Specified whether to delete the associated SFS resources when deleting BCS
	// instance. Default is false.
	DeleteStorage pulumi.BoolPtrInput
	// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
	// . Changing this will create a new instance.
	Edition pulumi.IntInput
	// Specifies whether to use the EIP of the CCE to bind the BCS instance.
	// Changing this will create a new instance. Defalut is true.
	EipEnable pulumi.BoolPtrInput
	// Specifies the ID of the enterprise project that the BCS
	// instance belong to. Changing this will create a new instance.
	EnterpriseProjectId pulumi.StringInput
	// Specifies version of fabric for the BCS instance. Valid values
	// are `1.4` and `2.0`
	// Changing this will create a new instance.
	FabricVersion pulumi.StringInput
	// Specifies the kafka configuration for the BCS instance. Changing this will create
	// a new instance. The kafka object structure is documented below.
	Kafka InstanceKafkaPtrInput
	// Specifies the name of the channel. Changing this creates a new instance.
	Name pulumi.StringPtrInput
	// Specifies the number of peers in the orderer organizaion. Changing this
	// will create a new instance.
	OrdererNodeNum pulumi.IntInput
	// Specifies the storage capacity of peer organization. Changing this will
	// create a new instance.
	// + The minimum storage capacity of `efs` volume type is 500GB.
	OrgDiskSize pulumi.IntInput
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password pulumi.StringInput
	// Specifies an array of one or more Peer organizations to attach to the BCS
	// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
	// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
	PeerOrgs InstancePeerOrgArrayInput
	// Specifies the region in which to create the instance. If omitted, the
	// provider-level region will be used. Changing this will create a new instance.
	Region pulumi.StringPtrInput
	// Specified whether to add RESTful API support. Changing this will
	// create a new instance.
	RestfulApiSupport pulumi.BoolPtrInput
	// Specifies the secutity mechanism used by the BCS instance. Valid
	// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
	// algorithm). Default is `ECDSA`. Changing this will create a new instance.
	SecurityMechanism pulumi.StringPtrInput
	// Specifies the information about the SFS Turbo file system. Changing this will
	// create a new instance. The sfsTurbo object structure is documented below.
	SfsTurbo InstanceSfsTurboPtrInput
	// Specified whether to add Trusted computing platform. Changing this will create
	// a new instance.
	Tc3Need pulumi.BoolPtrInput
	// Specifies the storage volume type to attach to each organization of the
	// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
	VolumeType pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The agent addresses and port numbers on the user data plane of the BCS service.
//   - `peer_orgs/pvc_name` - The name of the PersistenetVolumeClaim (PVC) used by the peer.
//   - `peer_orgs/status` - The peer status. The value contains `IsCreating`, `IsUpgrading`, `Adding/IsScaling`,
//     `Isdeleting`, `Normal`, `AbNormal` and `Unknown`.
//   - `peer_orgs/status_detail` - The peer status in the format like `1/1`. The denominator is the total number of peers in
//     the organization, and the numerator is the number of normal peers.
//   - `peer_orgs/address/domain_port` - The domain name address.
//   - `peer_orgs/address/ip_port` - The IP address.
//   - `kafka/name` - The Kafka instance name.
func (o InstanceOutput) AgentPortalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.AgentPortalAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the configuration of block generation. The blockInfo object
// structure is documented below.
func (o InstanceOutput) BlockInfo() InstanceBlockInfoPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceBlockInfoPtrOutput { return v.BlockInfo }).(InstanceBlockInfoPtrOutput)
}

// Specifies the blockchain type of the BCS instance. Valid values
// are `private` and  `union`. Default is `private`. Changing this will create a new instance.
func (o InstanceOutput) BlockchainType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.BlockchainType }).(pulumi.StringOutput)
}

// Specifies the ID of the CCE cluster to attach to the BCS instance. The
// BCS service needs to exclusively occupy the CCE cluster. Please make sure that the CCE cluster is not occupied before
// deploying the BCS service. Changing this will create a new instance.
func (o InstanceOutput) CceClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CceClusterId }).(pulumi.StringOutput)
}

// Specifies an array of one or more channels to attach to the BCS instance. If
// omitted, the bcs instance will create a `channels` named `channel` by default. Changing this will create a new
// instance. The channels object structure is documented below.
func (o InstanceOutput) Channels() InstanceChannelArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceChannelArrayOutput { return v.Channels }).(InstanceChannelArrayOutput)
}

func (o InstanceOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// Specifies the consensus algorithm used by the BCS instance. The valid
// values of fabric 1.4 are `solo`, `kafka` and `SFLIC`, and the valid values of fabric 2.0 are `SFLIC`
// and `etcdraft`. Changing this will create a new instance.
func (o InstanceOutput) Consensus() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Consensus }).(pulumi.StringOutput)
}

// Specifies the NoSQL database used by BCS instance. If omitted, the bcs instance
// will create a `goleveldb`(File Database) database by default. Changing this will create a new instance. The couchdb
// object structure is documented below.
func (o InstanceOutput) Couchdb() InstanceCouchdbPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceCouchdbPtrOutput { return v.Couchdb }).(InstanceCouchdbPtrOutput)
}

// Whether the BCS instance is deployed across regions.
func (o InstanceOutput) CrossRegionSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.CrossRegionSupport }).(pulumi.BoolOutput)
}

func (o InstanceOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// Specified whether to delete the associated OBS bucket when deleting BCS instance.
// `deleteObs` is used to delete the OBS created by the BCS instance of the Kafka consensus strategy. Default is false.
func (o InstanceOutput) DeleteObs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DeleteObs }).(pulumi.BoolPtrOutput)
}

// Specified whether to delete the associated SFS resources when deleting BCS
// instance. Default is false.
func (o InstanceOutput) DeleteStorage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DeleteStorage }).(pulumi.BoolPtrOutput)
}

// Specifies Service edition of the BCS instance. Valid values are `1`, `2` and `4`
// . Changing this will create a new instance.
func (o InstanceOutput) Edition() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Edition }).(pulumi.IntOutput)
}

// Specifies whether to use the EIP of the CCE to bind the BCS instance.
// Changing this will create a new instance. Defalut is true.
func (o InstanceOutput) EipEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.EipEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the enterprise project that the BCS
// instance belong to. Changing this will create a new instance.
func (o InstanceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies version of fabric for the BCS instance. Valid values
// are `1.4` and `2.0`
// Changing this will create a new instance.
func (o InstanceOutput) FabricVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.FabricVersion }).(pulumi.StringOutput)
}

// Specifies the kafka configuration for the BCS instance. Changing this will create
// a new instance. The kafka object structure is documented below.
func (o InstanceOutput) Kafka() InstanceKafkaPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceKafkaPtrOutput { return v.Kafka }).(InstanceKafkaPtrOutput)
}

// Specifies the name of the channel. Changing this creates a new instance.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of an old BCS service.
func (o InstanceOutput) OldServiceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OldServiceVersion }).(pulumi.StringOutput)
}

// Specifies the number of peers in the orderer organizaion. Changing this
// will create a new instance.
func (o InstanceOutput) OrdererNodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.OrdererNodeNum }).(pulumi.IntOutput)
}

// Specifies the storage capacity of peer organization. Changing this will
// create a new instance.
// + The minimum storage capacity of `efs` volume type is 500GB.
func (o InstanceOutput) OrgDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.OrgDiskSize }).(pulumi.IntOutput)
}

// Specifies the password of the couch datebase. The password consists of 8 to
// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
// charactors(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
func (o InstanceOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Specifies an array of one or more Peer organizations to attach to the BCS
// instance. Changing this will create a new instance. If omitted, the bcs instance will create a `peerOrgs`
// named `organization` by default and the node count is 2. The peerOrgs object structure is documented below.
func (o InstanceOutput) PeerOrgs() InstancePeerOrgArrayOutput {
	return o.ApplyT(func(v *Instance) InstancePeerOrgArrayOutput { return v.PeerOrgs }).(InstancePeerOrgArrayOutput)
}

// The deployment type of the BCS instance.
func (o InstanceOutput) PurchaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PurchaseType }).(pulumi.StringOutput)
}

// Specifies the region in which to create the instance. If omitted, the
// provider-level region will be used. Changing this will create a new instance.
func (o InstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specified whether to add RESTful API support. Changing this will
// create a new instance.
func (o InstanceOutput) RestfulApiSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.RestfulApiSupport }).(pulumi.BoolOutput)
}

// Whether rollback is supported when the BCS service fails to br upgraded.
func (o InstanceOutput) RollbackSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.RollbackSupport }).(pulumi.BoolOutput)
}

// Specifies the secutity mechanism used by the BCS instance. Valid
// values are `ECDSA` and `SM2`(Chinese cryptographic algorithms, The basic and professional don't support this
// algorithm). Default is `ECDSA`. Changing this will create a new instance.
func (o InstanceOutput) SecurityMechanism() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SecurityMechanism }).(pulumi.StringOutput)
}

// Specifies the information about the SFS Turbo file system. Changing this will
// create a new instance. The sfsTurbo object structure is documented below.
func (o InstanceOutput) SfsTurbo() InstanceSfsTurboPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceSfsTurboPtrOutput { return v.SfsTurbo }).(InstanceSfsTurboPtrOutput)
}

// The status of the BCS instance.
func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specified whether to add Trusted computing platform. Changing this will create
// a new instance.
func (o InstanceOutput) Tc3Need() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.Tc3Need }).(pulumi.BoolOutput)
}

// The service verison of the BCS instance.
func (o InstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Specifies the storage volume type to attach to each organization of the
// BCS instance. Valid values are `nfs` (SFS) and `efs` (SFS Turbo). Changing this will create a new instance.
func (o InstanceOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}

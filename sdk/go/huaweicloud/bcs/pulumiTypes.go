// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bcs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceBlockInfo struct {
	// Specifies the volume of the block, the unit is MB. The default value is 2.
	// Changing this creates a new instance.
	BlockSize *int `pulumi:"blockSize"`
	// Specifies the block generation time, the unit is second. The defalt
	// value is 2. Changing this creates a new instance.
	GenerationInterval *int `pulumi:"generationInterval"`
	// Specifies the number of transactions included in the block. The
	// defalt value is 500. Changing this creates a new instance.
	TransactionQuantity *int `pulumi:"transactionQuantity"`
}

// InstanceBlockInfoInput is an input type that accepts InstanceBlockInfoArgs and InstanceBlockInfoOutput values.
// You can construct a concrete instance of `InstanceBlockInfoInput` via:
//
//	InstanceBlockInfoArgs{...}
type InstanceBlockInfoInput interface {
	pulumi.Input

	ToInstanceBlockInfoOutput() InstanceBlockInfoOutput
	ToInstanceBlockInfoOutputWithContext(context.Context) InstanceBlockInfoOutput
}

type InstanceBlockInfoArgs struct {
	// Specifies the volume of the block, the unit is MB. The default value is 2.
	// Changing this creates a new instance.
	BlockSize pulumi.IntPtrInput `pulumi:"blockSize"`
	// Specifies the block generation time, the unit is second. The defalt
	// value is 2. Changing this creates a new instance.
	GenerationInterval pulumi.IntPtrInput `pulumi:"generationInterval"`
	// Specifies the number of transactions included in the block. The
	// defalt value is 500. Changing this creates a new instance.
	TransactionQuantity pulumi.IntPtrInput `pulumi:"transactionQuantity"`
}

func (InstanceBlockInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBlockInfo)(nil)).Elem()
}

func (i InstanceBlockInfoArgs) ToInstanceBlockInfoOutput() InstanceBlockInfoOutput {
	return i.ToInstanceBlockInfoOutputWithContext(context.Background())
}

func (i InstanceBlockInfoArgs) ToInstanceBlockInfoOutputWithContext(ctx context.Context) InstanceBlockInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBlockInfoOutput)
}

func (i InstanceBlockInfoArgs) ToInstanceBlockInfoPtrOutput() InstanceBlockInfoPtrOutput {
	return i.ToInstanceBlockInfoPtrOutputWithContext(context.Background())
}

func (i InstanceBlockInfoArgs) ToInstanceBlockInfoPtrOutputWithContext(ctx context.Context) InstanceBlockInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBlockInfoOutput).ToInstanceBlockInfoPtrOutputWithContext(ctx)
}

// InstanceBlockInfoPtrInput is an input type that accepts InstanceBlockInfoArgs, InstanceBlockInfoPtr and InstanceBlockInfoPtrOutput values.
// You can construct a concrete instance of `InstanceBlockInfoPtrInput` via:
//
//	        InstanceBlockInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceBlockInfoPtrInput interface {
	pulumi.Input

	ToInstanceBlockInfoPtrOutput() InstanceBlockInfoPtrOutput
	ToInstanceBlockInfoPtrOutputWithContext(context.Context) InstanceBlockInfoPtrOutput
}

type instanceBlockInfoPtrType InstanceBlockInfoArgs

func InstanceBlockInfoPtr(v *InstanceBlockInfoArgs) InstanceBlockInfoPtrInput {
	return (*instanceBlockInfoPtrType)(v)
}

func (*instanceBlockInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBlockInfo)(nil)).Elem()
}

func (i *instanceBlockInfoPtrType) ToInstanceBlockInfoPtrOutput() InstanceBlockInfoPtrOutput {
	return i.ToInstanceBlockInfoPtrOutputWithContext(context.Background())
}

func (i *instanceBlockInfoPtrType) ToInstanceBlockInfoPtrOutputWithContext(ctx context.Context) InstanceBlockInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBlockInfoPtrOutput)
}

type InstanceBlockInfoOutput struct{ *pulumi.OutputState }

func (InstanceBlockInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBlockInfo)(nil)).Elem()
}

func (o InstanceBlockInfoOutput) ToInstanceBlockInfoOutput() InstanceBlockInfoOutput {
	return o
}

func (o InstanceBlockInfoOutput) ToInstanceBlockInfoOutputWithContext(ctx context.Context) InstanceBlockInfoOutput {
	return o
}

func (o InstanceBlockInfoOutput) ToInstanceBlockInfoPtrOutput() InstanceBlockInfoPtrOutput {
	return o.ToInstanceBlockInfoPtrOutputWithContext(context.Background())
}

func (o InstanceBlockInfoOutput) ToInstanceBlockInfoPtrOutputWithContext(ctx context.Context) InstanceBlockInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceBlockInfo) *InstanceBlockInfo {
		return &v
	}).(InstanceBlockInfoPtrOutput)
}

// Specifies the volume of the block, the unit is MB. The default value is 2.
// Changing this creates a new instance.
func (o InstanceBlockInfoOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBlockInfo) *int { return v.BlockSize }).(pulumi.IntPtrOutput)
}

// Specifies the block generation time, the unit is second. The defalt
// value is 2. Changing this creates a new instance.
func (o InstanceBlockInfoOutput) GenerationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBlockInfo) *int { return v.GenerationInterval }).(pulumi.IntPtrOutput)
}

// Specifies the number of transactions included in the block. The
// defalt value is 500. Changing this creates a new instance.
func (o InstanceBlockInfoOutput) TransactionQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBlockInfo) *int { return v.TransactionQuantity }).(pulumi.IntPtrOutput)
}

type InstanceBlockInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceBlockInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBlockInfo)(nil)).Elem()
}

func (o InstanceBlockInfoPtrOutput) ToInstanceBlockInfoPtrOutput() InstanceBlockInfoPtrOutput {
	return o
}

func (o InstanceBlockInfoPtrOutput) ToInstanceBlockInfoPtrOutputWithContext(ctx context.Context) InstanceBlockInfoPtrOutput {
	return o
}

func (o InstanceBlockInfoPtrOutput) Elem() InstanceBlockInfoOutput {
	return o.ApplyT(func(v *InstanceBlockInfo) InstanceBlockInfo {
		if v != nil {
			return *v
		}
		var ret InstanceBlockInfo
		return ret
	}).(InstanceBlockInfoOutput)
}

// Specifies the volume of the block, the unit is MB. The default value is 2.
// Changing this creates a new instance.
func (o InstanceBlockInfoPtrOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBlockInfo) *int {
		if v == nil {
			return nil
		}
		return v.BlockSize
	}).(pulumi.IntPtrOutput)
}

// Specifies the block generation time, the unit is second. The defalt
// value is 2. Changing this creates a new instance.
func (o InstanceBlockInfoPtrOutput) GenerationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBlockInfo) *int {
		if v == nil {
			return nil
		}
		return v.GenerationInterval
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of transactions included in the block. The
// defalt value is 500. Changing this creates a new instance.
func (o InstanceBlockInfoPtrOutput) TransactionQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBlockInfo) *int {
		if v == nil {
			return nil
		}
		return v.TransactionQuantity
	}).(pulumi.IntPtrOutput)
}

type InstanceChannel struct {
	// Specifies the name of the channel. Changing this creates a new instance.
	Name string `pulumi:"name"`
	// Specifies the name of the peer organization. Changing this creates a new
	// instance.
	OrgNames []string `pulumi:"orgNames"`
}

// InstanceChannelInput is an input type that accepts InstanceChannelArgs and InstanceChannelOutput values.
// You can construct a concrete instance of `InstanceChannelInput` via:
//
//	InstanceChannelArgs{...}
type InstanceChannelInput interface {
	pulumi.Input

	ToInstanceChannelOutput() InstanceChannelOutput
	ToInstanceChannelOutputWithContext(context.Context) InstanceChannelOutput
}

type InstanceChannelArgs struct {
	// Specifies the name of the channel. Changing this creates a new instance.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the peer organization. Changing this creates a new
	// instance.
	OrgNames pulumi.StringArrayInput `pulumi:"orgNames"`
}

func (InstanceChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChannel)(nil)).Elem()
}

func (i InstanceChannelArgs) ToInstanceChannelOutput() InstanceChannelOutput {
	return i.ToInstanceChannelOutputWithContext(context.Background())
}

func (i InstanceChannelArgs) ToInstanceChannelOutputWithContext(ctx context.Context) InstanceChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChannelOutput)
}

// InstanceChannelArrayInput is an input type that accepts InstanceChannelArray and InstanceChannelArrayOutput values.
// You can construct a concrete instance of `InstanceChannelArrayInput` via:
//
//	InstanceChannelArray{ InstanceChannelArgs{...} }
type InstanceChannelArrayInput interface {
	pulumi.Input

	ToInstanceChannelArrayOutput() InstanceChannelArrayOutput
	ToInstanceChannelArrayOutputWithContext(context.Context) InstanceChannelArrayOutput
}

type InstanceChannelArray []InstanceChannelInput

func (InstanceChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChannel)(nil)).Elem()
}

func (i InstanceChannelArray) ToInstanceChannelArrayOutput() InstanceChannelArrayOutput {
	return i.ToInstanceChannelArrayOutputWithContext(context.Background())
}

func (i InstanceChannelArray) ToInstanceChannelArrayOutputWithContext(ctx context.Context) InstanceChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChannelArrayOutput)
}

type InstanceChannelOutput struct{ *pulumi.OutputState }

func (InstanceChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChannel)(nil)).Elem()
}

func (o InstanceChannelOutput) ToInstanceChannelOutput() InstanceChannelOutput {
	return o
}

func (o InstanceChannelOutput) ToInstanceChannelOutputWithContext(ctx context.Context) InstanceChannelOutput {
	return o
}

// Specifies the name of the channel. Changing this creates a new instance.
func (o InstanceChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChannel) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the peer organization. Changing this creates a new
// instance.
func (o InstanceChannelOutput) OrgNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceChannel) []string { return v.OrgNames }).(pulumi.StringArrayOutput)
}

type InstanceChannelArrayOutput struct{ *pulumi.OutputState }

func (InstanceChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChannel)(nil)).Elem()
}

func (o InstanceChannelArrayOutput) ToInstanceChannelArrayOutput() InstanceChannelArrayOutput {
	return o
}

func (o InstanceChannelArrayOutput) ToInstanceChannelArrayOutputWithContext(ctx context.Context) InstanceChannelArrayOutput {
	return o
}

func (o InstanceChannelArrayOutput) Index(i pulumi.IntInput) InstanceChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceChannel {
		return vs[0].([]InstanceChannel)[vs[1].(int)]
	}).(InstanceChannelOutput)
}

type InstanceCouchdb struct {
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password string `pulumi:"password"`
	// Specifies the user name of the couch datebase. Changing this creates a new
	// instance.
	UserName string `pulumi:"userName"`
}

// InstanceCouchdbInput is an input type that accepts InstanceCouchdbArgs and InstanceCouchdbOutput values.
// You can construct a concrete instance of `InstanceCouchdbInput` via:
//
//	InstanceCouchdbArgs{...}
type InstanceCouchdbInput interface {
	pulumi.Input

	ToInstanceCouchdbOutput() InstanceCouchdbOutput
	ToInstanceCouchdbOutputWithContext(context.Context) InstanceCouchdbOutput
}

type InstanceCouchdbArgs struct {
	// Specifies the password of the couch datebase. The password consists of 8 to
	// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
	// characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the user name of the couch datebase. Changing this creates a new
	// instance.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (InstanceCouchdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCouchdb)(nil)).Elem()
}

func (i InstanceCouchdbArgs) ToInstanceCouchdbOutput() InstanceCouchdbOutput {
	return i.ToInstanceCouchdbOutputWithContext(context.Background())
}

func (i InstanceCouchdbArgs) ToInstanceCouchdbOutputWithContext(ctx context.Context) InstanceCouchdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCouchdbOutput)
}

func (i InstanceCouchdbArgs) ToInstanceCouchdbPtrOutput() InstanceCouchdbPtrOutput {
	return i.ToInstanceCouchdbPtrOutputWithContext(context.Background())
}

func (i InstanceCouchdbArgs) ToInstanceCouchdbPtrOutputWithContext(ctx context.Context) InstanceCouchdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCouchdbOutput).ToInstanceCouchdbPtrOutputWithContext(ctx)
}

// InstanceCouchdbPtrInput is an input type that accepts InstanceCouchdbArgs, InstanceCouchdbPtr and InstanceCouchdbPtrOutput values.
// You can construct a concrete instance of `InstanceCouchdbPtrInput` via:
//
//	        InstanceCouchdbArgs{...}
//
//	or:
//
//	        nil
type InstanceCouchdbPtrInput interface {
	pulumi.Input

	ToInstanceCouchdbPtrOutput() InstanceCouchdbPtrOutput
	ToInstanceCouchdbPtrOutputWithContext(context.Context) InstanceCouchdbPtrOutput
}

type instanceCouchdbPtrType InstanceCouchdbArgs

func InstanceCouchdbPtr(v *InstanceCouchdbArgs) InstanceCouchdbPtrInput {
	return (*instanceCouchdbPtrType)(v)
}

func (*instanceCouchdbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCouchdb)(nil)).Elem()
}

func (i *instanceCouchdbPtrType) ToInstanceCouchdbPtrOutput() InstanceCouchdbPtrOutput {
	return i.ToInstanceCouchdbPtrOutputWithContext(context.Background())
}

func (i *instanceCouchdbPtrType) ToInstanceCouchdbPtrOutputWithContext(ctx context.Context) InstanceCouchdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCouchdbPtrOutput)
}

type InstanceCouchdbOutput struct{ *pulumi.OutputState }

func (InstanceCouchdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCouchdb)(nil)).Elem()
}

func (o InstanceCouchdbOutput) ToInstanceCouchdbOutput() InstanceCouchdbOutput {
	return o
}

func (o InstanceCouchdbOutput) ToInstanceCouchdbOutputWithContext(ctx context.Context) InstanceCouchdbOutput {
	return o
}

func (o InstanceCouchdbOutput) ToInstanceCouchdbPtrOutput() InstanceCouchdbPtrOutput {
	return o.ToInstanceCouchdbPtrOutputWithContext(context.Background())
}

func (o InstanceCouchdbOutput) ToInstanceCouchdbPtrOutputWithContext(ctx context.Context) InstanceCouchdbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCouchdb) *InstanceCouchdb {
		return &v
	}).(InstanceCouchdbPtrOutput)
}

// Specifies the password of the couch datebase. The password consists of 8 to
// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
// characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
func (o InstanceCouchdbOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCouchdb) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the user name of the couch datebase. Changing this creates a new
// instance.
func (o InstanceCouchdbOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCouchdb) string { return v.UserName }).(pulumi.StringOutput)
}

type InstanceCouchdbPtrOutput struct{ *pulumi.OutputState }

func (InstanceCouchdbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCouchdb)(nil)).Elem()
}

func (o InstanceCouchdbPtrOutput) ToInstanceCouchdbPtrOutput() InstanceCouchdbPtrOutput {
	return o
}

func (o InstanceCouchdbPtrOutput) ToInstanceCouchdbPtrOutputWithContext(ctx context.Context) InstanceCouchdbPtrOutput {
	return o
}

func (o InstanceCouchdbPtrOutput) Elem() InstanceCouchdbOutput {
	return o.ApplyT(func(v *InstanceCouchdb) InstanceCouchdb {
		if v != nil {
			return *v
		}
		var ret InstanceCouchdb
		return ret
	}).(InstanceCouchdbOutput)
}

// Specifies the password of the couch datebase. The password consists of 8 to
// 26 characters and must consist at least three of following: uppercase letters, lowercase letters, digits, special
// characters(!@$%^-_=+[{}]:,./?). Changing this creates a new instance.
func (o InstanceCouchdbPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceCouchdb) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies the user name of the couch datebase. Changing this creates a new
// instance.
func (o InstanceCouchdbPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceCouchdb) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

type InstanceKafka struct {
	// Specifies the availability zone in which to create the kafka. The
	// list must contain one or more than three availability zone. Please
	// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
	// new instance.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the kafka flavor type. Changing this creates a new instance.
	// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
	// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
	// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
	// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
	Flavor string `pulumi:"flavor"`
	// Specifies the name of the channel. Changing this creates a new instance.
	Name *string `pulumi:"name"`
	// Specifies the kafka storage capacity. The storage capacity must be an
	// integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
	// + The minimum storage capacity of mini type is 600GB.
	// + The minimum storage capacity of small type is 1200GB.
	// + The minimum storage capacity of middle type is 2400GB.
	// + The minimum storage capacity of high type is 4800GB.
	StorageSize int `pulumi:"storageSize"`
}

// InstanceKafkaInput is an input type that accepts InstanceKafkaArgs and InstanceKafkaOutput values.
// You can construct a concrete instance of `InstanceKafkaInput` via:
//
//	InstanceKafkaArgs{...}
type InstanceKafkaInput interface {
	pulumi.Input

	ToInstanceKafkaOutput() InstanceKafkaOutput
	ToInstanceKafkaOutputWithContext(context.Context) InstanceKafkaOutput
}

type InstanceKafkaArgs struct {
	// Specifies the availability zone in which to create the kafka. The
	// list must contain one or more than three availability zone. Please
	// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
	// new instance.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Specifies the kafka flavor type. Changing this creates a new instance.
	// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
	// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
	// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
	// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
	Flavor pulumi.StringInput `pulumi:"flavor"`
	// Specifies the name of the channel. Changing this creates a new instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the kafka storage capacity. The storage capacity must be an
	// integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
	// + The minimum storage capacity of mini type is 600GB.
	// + The minimum storage capacity of small type is 1200GB.
	// + The minimum storage capacity of middle type is 2400GB.
	// + The minimum storage capacity of high type is 4800GB.
	StorageSize pulumi.IntInput `pulumi:"storageSize"`
}

func (InstanceKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceKafka)(nil)).Elem()
}

func (i InstanceKafkaArgs) ToInstanceKafkaOutput() InstanceKafkaOutput {
	return i.ToInstanceKafkaOutputWithContext(context.Background())
}

func (i InstanceKafkaArgs) ToInstanceKafkaOutputWithContext(ctx context.Context) InstanceKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceKafkaOutput)
}

func (i InstanceKafkaArgs) ToInstanceKafkaPtrOutput() InstanceKafkaPtrOutput {
	return i.ToInstanceKafkaPtrOutputWithContext(context.Background())
}

func (i InstanceKafkaArgs) ToInstanceKafkaPtrOutputWithContext(ctx context.Context) InstanceKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceKafkaOutput).ToInstanceKafkaPtrOutputWithContext(ctx)
}

// InstanceKafkaPtrInput is an input type that accepts InstanceKafkaArgs, InstanceKafkaPtr and InstanceKafkaPtrOutput values.
// You can construct a concrete instance of `InstanceKafkaPtrInput` via:
//
//	        InstanceKafkaArgs{...}
//
//	or:
//
//	        nil
type InstanceKafkaPtrInput interface {
	pulumi.Input

	ToInstanceKafkaPtrOutput() InstanceKafkaPtrOutput
	ToInstanceKafkaPtrOutputWithContext(context.Context) InstanceKafkaPtrOutput
}

type instanceKafkaPtrType InstanceKafkaArgs

func InstanceKafkaPtr(v *InstanceKafkaArgs) InstanceKafkaPtrInput {
	return (*instanceKafkaPtrType)(v)
}

func (*instanceKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceKafka)(nil)).Elem()
}

func (i *instanceKafkaPtrType) ToInstanceKafkaPtrOutput() InstanceKafkaPtrOutput {
	return i.ToInstanceKafkaPtrOutputWithContext(context.Background())
}

func (i *instanceKafkaPtrType) ToInstanceKafkaPtrOutputWithContext(ctx context.Context) InstanceKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceKafkaPtrOutput)
}

type InstanceKafkaOutput struct{ *pulumi.OutputState }

func (InstanceKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceKafka)(nil)).Elem()
}

func (o InstanceKafkaOutput) ToInstanceKafkaOutput() InstanceKafkaOutput {
	return o
}

func (o InstanceKafkaOutput) ToInstanceKafkaOutputWithContext(ctx context.Context) InstanceKafkaOutput {
	return o
}

func (o InstanceKafkaOutput) ToInstanceKafkaPtrOutput() InstanceKafkaPtrOutput {
	return o.ToInstanceKafkaPtrOutputWithContext(context.Background())
}

func (o InstanceKafkaOutput) ToInstanceKafkaPtrOutputWithContext(ctx context.Context) InstanceKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceKafka) *InstanceKafka {
		return &v
	}).(InstanceKafkaPtrOutput)
}

// Specifies the availability zone in which to create the kafka. The
// list must contain one or more than three availability zone. Please
// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
// new instance.
func (o InstanceKafkaOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceKafka) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Specifies the kafka flavor type. Changing this creates a new instance.
// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
func (o InstanceKafkaOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceKafka) string { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the name of the channel. Changing this creates a new instance.
func (o InstanceKafkaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceKafka) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the kafka storage capacity. The storage capacity must be an
// integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
// + The minimum storage capacity of mini type is 600GB.
// + The minimum storage capacity of small type is 1200GB.
// + The minimum storage capacity of middle type is 2400GB.
// + The minimum storage capacity of high type is 4800GB.
func (o InstanceKafkaOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceKafka) int { return v.StorageSize }).(pulumi.IntOutput)
}

type InstanceKafkaPtrOutput struct{ *pulumi.OutputState }

func (InstanceKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceKafka)(nil)).Elem()
}

func (o InstanceKafkaPtrOutput) ToInstanceKafkaPtrOutput() InstanceKafkaPtrOutput {
	return o
}

func (o InstanceKafkaPtrOutput) ToInstanceKafkaPtrOutputWithContext(ctx context.Context) InstanceKafkaPtrOutput {
	return o
}

func (o InstanceKafkaPtrOutput) Elem() InstanceKafkaOutput {
	return o.ApplyT(func(v *InstanceKafka) InstanceKafka {
		if v != nil {
			return *v
		}
		var ret InstanceKafka
		return ret
	}).(InstanceKafkaOutput)
}

// Specifies the availability zone in which to create the kafka. The
// list must contain one or more than three availability zone. Please
// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
// new instance.
func (o InstanceKafkaPtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceKafka) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// Specifies the kafka flavor type. Changing this creates a new instance.
// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
func (o InstanceKafkaPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceKafka) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the channel. Changing this creates a new instance.
func (o InstanceKafkaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceKafka) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the kafka storage capacity. The storage capacity must be an
// integral multiple of 100 and the maximum is 90000GB. Changing this creates a new instance.
// + The minimum storage capacity of mini type is 600GB.
// + The minimum storage capacity of small type is 1200GB.
// + The minimum storage capacity of middle type is 2400GB.
// + The minimum storage capacity of high type is 4800GB.
func (o InstanceKafkaPtrOutput) StorageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceKafka) *int {
		if v == nil {
			return nil
		}
		return &v.StorageSize
	}).(pulumi.IntPtrOutput)
}

type InstancePeerOrg struct {
	Addresses []InstancePeerOrgAddress `pulumi:"addresses"`
	// Specifies the number of peers in organization. Changing this creates a new
	// instance.
	Count int `pulumi:"count"`
	// Specifies the name of the peer organization. Changing this creates a new
	// instance.
	OrgName string  `pulumi:"orgName"`
	PvcName *string `pulumi:"pvcName"`
	// The status of the BCS instance.
	Status       *string `pulumi:"status"`
	StatusDetail *string `pulumi:"statusDetail"`
}

// InstancePeerOrgInput is an input type that accepts InstancePeerOrgArgs and InstancePeerOrgOutput values.
// You can construct a concrete instance of `InstancePeerOrgInput` via:
//
//	InstancePeerOrgArgs{...}
type InstancePeerOrgInput interface {
	pulumi.Input

	ToInstancePeerOrgOutput() InstancePeerOrgOutput
	ToInstancePeerOrgOutputWithContext(context.Context) InstancePeerOrgOutput
}

type InstancePeerOrgArgs struct {
	Addresses InstancePeerOrgAddressArrayInput `pulumi:"addresses"`
	// Specifies the number of peers in organization. Changing this creates a new
	// instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Specifies the name of the peer organization. Changing this creates a new
	// instance.
	OrgName pulumi.StringInput    `pulumi:"orgName"`
	PvcName pulumi.StringPtrInput `pulumi:"pvcName"`
	// The status of the BCS instance.
	Status       pulumi.StringPtrInput `pulumi:"status"`
	StatusDetail pulumi.StringPtrInput `pulumi:"statusDetail"`
}

func (InstancePeerOrgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePeerOrg)(nil)).Elem()
}

func (i InstancePeerOrgArgs) ToInstancePeerOrgOutput() InstancePeerOrgOutput {
	return i.ToInstancePeerOrgOutputWithContext(context.Background())
}

func (i InstancePeerOrgArgs) ToInstancePeerOrgOutputWithContext(ctx context.Context) InstancePeerOrgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePeerOrgOutput)
}

// InstancePeerOrgArrayInput is an input type that accepts InstancePeerOrgArray and InstancePeerOrgArrayOutput values.
// You can construct a concrete instance of `InstancePeerOrgArrayInput` via:
//
//	InstancePeerOrgArray{ InstancePeerOrgArgs{...} }
type InstancePeerOrgArrayInput interface {
	pulumi.Input

	ToInstancePeerOrgArrayOutput() InstancePeerOrgArrayOutput
	ToInstancePeerOrgArrayOutputWithContext(context.Context) InstancePeerOrgArrayOutput
}

type InstancePeerOrgArray []InstancePeerOrgInput

func (InstancePeerOrgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePeerOrg)(nil)).Elem()
}

func (i InstancePeerOrgArray) ToInstancePeerOrgArrayOutput() InstancePeerOrgArrayOutput {
	return i.ToInstancePeerOrgArrayOutputWithContext(context.Background())
}

func (i InstancePeerOrgArray) ToInstancePeerOrgArrayOutputWithContext(ctx context.Context) InstancePeerOrgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePeerOrgArrayOutput)
}

type InstancePeerOrgOutput struct{ *pulumi.OutputState }

func (InstancePeerOrgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePeerOrg)(nil)).Elem()
}

func (o InstancePeerOrgOutput) ToInstancePeerOrgOutput() InstancePeerOrgOutput {
	return o
}

func (o InstancePeerOrgOutput) ToInstancePeerOrgOutputWithContext(ctx context.Context) InstancePeerOrgOutput {
	return o
}

func (o InstancePeerOrgOutput) Addresses() InstancePeerOrgAddressArrayOutput {
	return o.ApplyT(func(v InstancePeerOrg) []InstancePeerOrgAddress { return v.Addresses }).(InstancePeerOrgAddressArrayOutput)
}

// Specifies the number of peers in organization. Changing this creates a new
// instance.
func (o InstancePeerOrgOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstancePeerOrg) int { return v.Count }).(pulumi.IntOutput)
}

// Specifies the name of the peer organization. Changing this creates a new
// instance.
func (o InstancePeerOrgOutput) OrgName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePeerOrg) string { return v.OrgName }).(pulumi.StringOutput)
}

func (o InstancePeerOrgOutput) PvcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePeerOrg) *string { return v.PvcName }).(pulumi.StringPtrOutput)
}

// The status of the BCS instance.
func (o InstancePeerOrgOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePeerOrg) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o InstancePeerOrgOutput) StatusDetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePeerOrg) *string { return v.StatusDetail }).(pulumi.StringPtrOutput)
}

type InstancePeerOrgArrayOutput struct{ *pulumi.OutputState }

func (InstancePeerOrgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePeerOrg)(nil)).Elem()
}

func (o InstancePeerOrgArrayOutput) ToInstancePeerOrgArrayOutput() InstancePeerOrgArrayOutput {
	return o
}

func (o InstancePeerOrgArrayOutput) ToInstancePeerOrgArrayOutputWithContext(ctx context.Context) InstancePeerOrgArrayOutput {
	return o
}

func (o InstancePeerOrgArrayOutput) Index(i pulumi.IntInput) InstancePeerOrgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePeerOrg {
		return vs[0].([]InstancePeerOrg)[vs[1].(int)]
	}).(InstancePeerOrgOutput)
}

type InstancePeerOrgAddress struct {
	DomainPort *string `pulumi:"domainPort"`
	IpPort     *string `pulumi:"ipPort"`
}

// InstancePeerOrgAddressInput is an input type that accepts InstancePeerOrgAddressArgs and InstancePeerOrgAddressOutput values.
// You can construct a concrete instance of `InstancePeerOrgAddressInput` via:
//
//	InstancePeerOrgAddressArgs{...}
type InstancePeerOrgAddressInput interface {
	pulumi.Input

	ToInstancePeerOrgAddressOutput() InstancePeerOrgAddressOutput
	ToInstancePeerOrgAddressOutputWithContext(context.Context) InstancePeerOrgAddressOutput
}

type InstancePeerOrgAddressArgs struct {
	DomainPort pulumi.StringPtrInput `pulumi:"domainPort"`
	IpPort     pulumi.StringPtrInput `pulumi:"ipPort"`
}

func (InstancePeerOrgAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePeerOrgAddress)(nil)).Elem()
}

func (i InstancePeerOrgAddressArgs) ToInstancePeerOrgAddressOutput() InstancePeerOrgAddressOutput {
	return i.ToInstancePeerOrgAddressOutputWithContext(context.Background())
}

func (i InstancePeerOrgAddressArgs) ToInstancePeerOrgAddressOutputWithContext(ctx context.Context) InstancePeerOrgAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePeerOrgAddressOutput)
}

// InstancePeerOrgAddressArrayInput is an input type that accepts InstancePeerOrgAddressArray and InstancePeerOrgAddressArrayOutput values.
// You can construct a concrete instance of `InstancePeerOrgAddressArrayInput` via:
//
//	InstancePeerOrgAddressArray{ InstancePeerOrgAddressArgs{...} }
type InstancePeerOrgAddressArrayInput interface {
	pulumi.Input

	ToInstancePeerOrgAddressArrayOutput() InstancePeerOrgAddressArrayOutput
	ToInstancePeerOrgAddressArrayOutputWithContext(context.Context) InstancePeerOrgAddressArrayOutput
}

type InstancePeerOrgAddressArray []InstancePeerOrgAddressInput

func (InstancePeerOrgAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePeerOrgAddress)(nil)).Elem()
}

func (i InstancePeerOrgAddressArray) ToInstancePeerOrgAddressArrayOutput() InstancePeerOrgAddressArrayOutput {
	return i.ToInstancePeerOrgAddressArrayOutputWithContext(context.Background())
}

func (i InstancePeerOrgAddressArray) ToInstancePeerOrgAddressArrayOutputWithContext(ctx context.Context) InstancePeerOrgAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePeerOrgAddressArrayOutput)
}

type InstancePeerOrgAddressOutput struct{ *pulumi.OutputState }

func (InstancePeerOrgAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePeerOrgAddress)(nil)).Elem()
}

func (o InstancePeerOrgAddressOutput) ToInstancePeerOrgAddressOutput() InstancePeerOrgAddressOutput {
	return o
}

func (o InstancePeerOrgAddressOutput) ToInstancePeerOrgAddressOutputWithContext(ctx context.Context) InstancePeerOrgAddressOutput {
	return o
}

func (o InstancePeerOrgAddressOutput) DomainPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePeerOrgAddress) *string { return v.DomainPort }).(pulumi.StringPtrOutput)
}

func (o InstancePeerOrgAddressOutput) IpPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePeerOrgAddress) *string { return v.IpPort }).(pulumi.StringPtrOutput)
}

type InstancePeerOrgAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancePeerOrgAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePeerOrgAddress)(nil)).Elem()
}

func (o InstancePeerOrgAddressArrayOutput) ToInstancePeerOrgAddressArrayOutput() InstancePeerOrgAddressArrayOutput {
	return o
}

func (o InstancePeerOrgAddressArrayOutput) ToInstancePeerOrgAddressArrayOutputWithContext(ctx context.Context) InstancePeerOrgAddressArrayOutput {
	return o
}

func (o InstancePeerOrgAddressArrayOutput) Index(i pulumi.IntInput) InstancePeerOrgAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePeerOrgAddress {
		return vs[0].([]InstancePeerOrgAddress)[vs[1].(int)]
	}).(InstancePeerOrgAddressOutput)
}

type InstanceSfsTurbo struct {
	// Specifies the availability zone in which to create the kafka. The
	// list must contain one or more than three availability zone. Please
	// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
	// new instance.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the kafka flavor type. Changing this creates a new instance.
	// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
	// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
	// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
	// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
	Flavor *string `pulumi:"flavor"`
	// Specifies the share type of the SFS turbo. Changing this creates a new
	// instance.
	ShareType *string `pulumi:"shareType"`
	// Specifies the type of SFS turbo. Changing this creates a new instance.
	Type *string `pulumi:"type"`
}

// InstanceSfsTurboInput is an input type that accepts InstanceSfsTurboArgs and InstanceSfsTurboOutput values.
// You can construct a concrete instance of `InstanceSfsTurboInput` via:
//
//	InstanceSfsTurboArgs{...}
type InstanceSfsTurboInput interface {
	pulumi.Input

	ToInstanceSfsTurboOutput() InstanceSfsTurboOutput
	ToInstanceSfsTurboOutputWithContext(context.Context) InstanceSfsTurboOutput
}

type InstanceSfsTurboArgs struct {
	// Specifies the availability zone in which to create the kafka. The
	// list must contain one or more than three availability zone. Please
	// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
	// new instance.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// Specifies the kafka flavor type. Changing this creates a new instance.
	// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
	// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
	// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
	// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
	Flavor pulumi.StringPtrInput `pulumi:"flavor"`
	// Specifies the share type of the SFS turbo. Changing this creates a new
	// instance.
	ShareType pulumi.StringPtrInput `pulumi:"shareType"`
	// Specifies the type of SFS turbo. Changing this creates a new instance.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceSfsTurboArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSfsTurbo)(nil)).Elem()
}

func (i InstanceSfsTurboArgs) ToInstanceSfsTurboOutput() InstanceSfsTurboOutput {
	return i.ToInstanceSfsTurboOutputWithContext(context.Background())
}

func (i InstanceSfsTurboArgs) ToInstanceSfsTurboOutputWithContext(ctx context.Context) InstanceSfsTurboOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSfsTurboOutput)
}

func (i InstanceSfsTurboArgs) ToInstanceSfsTurboPtrOutput() InstanceSfsTurboPtrOutput {
	return i.ToInstanceSfsTurboPtrOutputWithContext(context.Background())
}

func (i InstanceSfsTurboArgs) ToInstanceSfsTurboPtrOutputWithContext(ctx context.Context) InstanceSfsTurboPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSfsTurboOutput).ToInstanceSfsTurboPtrOutputWithContext(ctx)
}

// InstanceSfsTurboPtrInput is an input type that accepts InstanceSfsTurboArgs, InstanceSfsTurboPtr and InstanceSfsTurboPtrOutput values.
// You can construct a concrete instance of `InstanceSfsTurboPtrInput` via:
//
//	        InstanceSfsTurboArgs{...}
//
//	or:
//
//	        nil
type InstanceSfsTurboPtrInput interface {
	pulumi.Input

	ToInstanceSfsTurboPtrOutput() InstanceSfsTurboPtrOutput
	ToInstanceSfsTurboPtrOutputWithContext(context.Context) InstanceSfsTurboPtrOutput
}

type instanceSfsTurboPtrType InstanceSfsTurboArgs

func InstanceSfsTurboPtr(v *InstanceSfsTurboArgs) InstanceSfsTurboPtrInput {
	return (*instanceSfsTurboPtrType)(v)
}

func (*instanceSfsTurboPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSfsTurbo)(nil)).Elem()
}

func (i *instanceSfsTurboPtrType) ToInstanceSfsTurboPtrOutput() InstanceSfsTurboPtrOutput {
	return i.ToInstanceSfsTurboPtrOutputWithContext(context.Background())
}

func (i *instanceSfsTurboPtrType) ToInstanceSfsTurboPtrOutputWithContext(ctx context.Context) InstanceSfsTurboPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSfsTurboPtrOutput)
}

type InstanceSfsTurboOutput struct{ *pulumi.OutputState }

func (InstanceSfsTurboOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSfsTurbo)(nil)).Elem()
}

func (o InstanceSfsTurboOutput) ToInstanceSfsTurboOutput() InstanceSfsTurboOutput {
	return o
}

func (o InstanceSfsTurboOutput) ToInstanceSfsTurboOutputWithContext(ctx context.Context) InstanceSfsTurboOutput {
	return o
}

func (o InstanceSfsTurboOutput) ToInstanceSfsTurboPtrOutput() InstanceSfsTurboPtrOutput {
	return o.ToInstanceSfsTurboPtrOutputWithContext(context.Background())
}

func (o InstanceSfsTurboOutput) ToInstanceSfsTurboPtrOutputWithContext(ctx context.Context) InstanceSfsTurboPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceSfsTurbo) *InstanceSfsTurbo {
		return &v
	}).(InstanceSfsTurboPtrOutput)
}

// Specifies the availability zone in which to create the kafka. The
// list must contain one or more than three availability zone. Please
// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
// new instance.
func (o InstanceSfsTurboOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSfsTurbo) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Specifies the kafka flavor type. Changing this creates a new instance.
// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
func (o InstanceSfsTurboOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSfsTurbo) *string { return v.Flavor }).(pulumi.StringPtrOutput)
}

// Specifies the share type of the SFS turbo. Changing this creates a new
// instance.
func (o InstanceSfsTurboOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSfsTurbo) *string { return v.ShareType }).(pulumi.StringPtrOutput)
}

// Specifies the type of SFS turbo. Changing this creates a new instance.
func (o InstanceSfsTurboOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSfsTurbo) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceSfsTurboPtrOutput struct{ *pulumi.OutputState }

func (InstanceSfsTurboPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSfsTurbo)(nil)).Elem()
}

func (o InstanceSfsTurboPtrOutput) ToInstanceSfsTurboPtrOutput() InstanceSfsTurboPtrOutput {
	return o
}

func (o InstanceSfsTurboPtrOutput) ToInstanceSfsTurboPtrOutputWithContext(ctx context.Context) InstanceSfsTurboPtrOutput {
	return o
}

func (o InstanceSfsTurboPtrOutput) Elem() InstanceSfsTurboOutput {
	return o.ApplyT(func(v *InstanceSfsTurbo) InstanceSfsTurbo {
		if v != nil {
			return *v
		}
		var ret InstanceSfsTurbo
		return ret
	}).(InstanceSfsTurboOutput)
}

// Specifies the availability zone in which to create the kafka. The
// list must contain one or more than three availability zone. Please
// following [reference](https://developer.huaweicloud.com/en-us/endpoint/?all) for the values. Changing this creates a
// new instance.
func (o InstanceSfsTurboPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSfsTurbo) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the kafka flavor type. Changing this creates a new instance.
// + `c3.mini` : Mini type, the reference bandwidth is 100MB/s.
// + `c3.small.2` : Small type, the reference bandwidth is 300MB/s.
// + `c3.middle.2` : Middle type, the reference bandwidth is 600MB/s.
// + `c3.high.2` : High type, the reference bandwidth is 1200MB/s.
func (o InstanceSfsTurboPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSfsTurbo) *string {
		if v == nil {
			return nil
		}
		return v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the share type of the SFS turbo. Changing this creates a new
// instance.
func (o InstanceSfsTurboPtrOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSfsTurbo) *string {
		if v == nil {
			return nil
		}
		return v.ShareType
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of SFS turbo. Changing this creates a new instance.
func (o InstanceSfsTurboPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSfsTurbo) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBlockInfoInput)(nil)).Elem(), InstanceBlockInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBlockInfoPtrInput)(nil)).Elem(), InstanceBlockInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChannelInput)(nil)).Elem(), InstanceChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChannelArrayInput)(nil)).Elem(), InstanceChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCouchdbInput)(nil)).Elem(), InstanceCouchdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCouchdbPtrInput)(nil)).Elem(), InstanceCouchdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceKafkaInput)(nil)).Elem(), InstanceKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceKafkaPtrInput)(nil)).Elem(), InstanceKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePeerOrgInput)(nil)).Elem(), InstancePeerOrgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePeerOrgArrayInput)(nil)).Elem(), InstancePeerOrgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePeerOrgAddressInput)(nil)).Elem(), InstancePeerOrgAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePeerOrgAddressArrayInput)(nil)).Elem(), InstancePeerOrgAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSfsTurboInput)(nil)).Elem(), InstanceSfsTurboArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSfsTurboPtrInput)(nil)).Elem(), InstanceSfsTurboArgs{})
	pulumi.RegisterOutputType(InstanceBlockInfoOutput{})
	pulumi.RegisterOutputType(InstanceBlockInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceChannelOutput{})
	pulumi.RegisterOutputType(InstanceChannelArrayOutput{})
	pulumi.RegisterOutputType(InstanceCouchdbOutput{})
	pulumi.RegisterOutputType(InstanceCouchdbPtrOutput{})
	pulumi.RegisterOutputType(InstanceKafkaOutput{})
	pulumi.RegisterOutputType(InstanceKafkaPtrOutput{})
	pulumi.RegisterOutputType(InstancePeerOrgOutput{})
	pulumi.RegisterOutputType(InstancePeerOrgArrayOutput{})
	pulumi.RegisterOutputType(InstancePeerOrgAddressOutput{})
	pulumi.RegisterOutputType(InstancePeerOrgAddressArrayOutput{})
	pulumi.RegisterOutputType(InstanceSfsTurboOutput{})
	pulumi.RegisterOutputType(InstanceSfsTurboPtrOutput{})
}

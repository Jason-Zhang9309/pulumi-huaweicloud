// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package live

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a callback configuration within HuaweiCloud Live.
//
// > Only one callback configuration can be created for an ingestion domain name.
//
// ## Example Usage
// ### Create a callback configuration for an ingest domain name
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Live"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			ingestDomainName := cfg.RequireObject("ingestDomainName")
//			_, err := Live.NewDomain(ctx, "ingestDomain", &Live.DomainArgs{
//				Type: pulumi.String("push"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Live.NewRecordCallback(ctx, "callback", &Live.RecordCallbackArgs{
//				DomainName: pulumi.Any(ingestDomainName),
//				Url:        pulumi.String("http://mycallback.com.cn/record_notify"),
//				Types: pulumi.StringArray{
//					pulumi.String("RECORD_NEW_FILE_START"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Callback configurations can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Live/recordCallback:RecordCallback test 55534eaa-533a-419d-9b40-ec427ea7195a
//
// ```
type RecordCallback struct {
	pulumi.CustomResourceState

	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the types of recording notifications. The options are as follows:
	// + **RECORD_NEW_FILE_START**: Recording started.
	// + **RECORD_FILE_COMPLETE**: Recording file generated.
	// + **RECORD_OVER**: Recording completed.
	// + **RECORD_FAILED**: Recording failed.
	Types pulumi.StringArrayOutput `pulumi:"types"`
	// Specifies the callback URL for sending recording notifications, which must start with
	// `http://` or `https://`, and cannot contain message headers or parameters.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewRecordCallback registers a new resource with the given unique name, arguments, and options.
func NewRecordCallback(ctx *pulumi.Context,
	name string, args *RecordCallbackArgs, opts ...pulumi.ResourceOption) (*RecordCallback, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Types == nil {
		return nil, errors.New("invalid value for required argument 'Types'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RecordCallback
	err := ctx.RegisterResource("huaweicloud:Live/recordCallback:RecordCallback", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordCallback gets an existing RecordCallback resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordCallback(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordCallbackState, opts ...pulumi.ResourceOption) (*RecordCallback, error) {
	var resource RecordCallback
	err := ctx.ReadResource("huaweicloud:Live/recordCallback:RecordCallback", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordCallback resources.
type recordCallbackState struct {
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName *string `pulumi:"domainName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the types of recording notifications. The options are as follows:
	// + **RECORD_NEW_FILE_START**: Recording started.
	// + **RECORD_FILE_COMPLETE**: Recording file generated.
	// + **RECORD_OVER**: Recording completed.
	// + **RECORD_FAILED**: Recording failed.
	Types []string `pulumi:"types"`
	// Specifies the callback URL for sending recording notifications, which must start with
	// `http://` or `https://`, and cannot contain message headers or parameters.
	Url *string `pulumi:"url"`
}

type RecordCallbackState struct {
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the types of recording notifications. The options are as follows:
	// + **RECORD_NEW_FILE_START**: Recording started.
	// + **RECORD_FILE_COMPLETE**: Recording file generated.
	// + **RECORD_OVER**: Recording completed.
	// + **RECORD_FAILED**: Recording failed.
	Types pulumi.StringArrayInput
	// Specifies the callback URL for sending recording notifications, which must start with
	// `http://` or `https://`, and cannot contain message headers or parameters.
	Url pulumi.StringPtrInput
}

func (RecordCallbackState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordCallbackState)(nil)).Elem()
}

type recordCallbackArgs struct {
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName string `pulumi:"domainName"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the types of recording notifications. The options are as follows:
	// + **RECORD_NEW_FILE_START**: Recording started.
	// + **RECORD_FILE_COMPLETE**: Recording file generated.
	// + **RECORD_OVER**: Recording completed.
	// + **RECORD_FAILED**: Recording failed.
	Types []string `pulumi:"types"`
	// Specifies the callback URL for sending recording notifications, which must start with
	// `http://` or `https://`, and cannot contain message headers or parameters.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a RecordCallback resource.
type RecordCallbackArgs struct {
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the types of recording notifications. The options are as follows:
	// + **RECORD_NEW_FILE_START**: Recording started.
	// + **RECORD_FILE_COMPLETE**: Recording file generated.
	// + **RECORD_OVER**: Recording completed.
	// + **RECORD_FAILED**: Recording failed.
	Types pulumi.StringArrayInput
	// Specifies the callback URL for sending recording notifications, which must start with
	// `http://` or `https://`, and cannot contain message headers or parameters.
	Url pulumi.StringInput
}

func (RecordCallbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordCallbackArgs)(nil)).Elem()
}

type RecordCallbackInput interface {
	pulumi.Input

	ToRecordCallbackOutput() RecordCallbackOutput
	ToRecordCallbackOutputWithContext(ctx context.Context) RecordCallbackOutput
}

func (*RecordCallback) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCallback)(nil)).Elem()
}

func (i *RecordCallback) ToRecordCallbackOutput() RecordCallbackOutput {
	return i.ToRecordCallbackOutputWithContext(context.Background())
}

func (i *RecordCallback) ToRecordCallbackOutputWithContext(ctx context.Context) RecordCallbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCallbackOutput)
}

// RecordCallbackArrayInput is an input type that accepts RecordCallbackArray and RecordCallbackArrayOutput values.
// You can construct a concrete instance of `RecordCallbackArrayInput` via:
//
//	RecordCallbackArray{ RecordCallbackArgs{...} }
type RecordCallbackArrayInput interface {
	pulumi.Input

	ToRecordCallbackArrayOutput() RecordCallbackArrayOutput
	ToRecordCallbackArrayOutputWithContext(context.Context) RecordCallbackArrayOutput
}

type RecordCallbackArray []RecordCallbackInput

func (RecordCallbackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordCallback)(nil)).Elem()
}

func (i RecordCallbackArray) ToRecordCallbackArrayOutput() RecordCallbackArrayOutput {
	return i.ToRecordCallbackArrayOutputWithContext(context.Background())
}

func (i RecordCallbackArray) ToRecordCallbackArrayOutputWithContext(ctx context.Context) RecordCallbackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCallbackArrayOutput)
}

// RecordCallbackMapInput is an input type that accepts RecordCallbackMap and RecordCallbackMapOutput values.
// You can construct a concrete instance of `RecordCallbackMapInput` via:
//
//	RecordCallbackMap{ "key": RecordCallbackArgs{...} }
type RecordCallbackMapInput interface {
	pulumi.Input

	ToRecordCallbackMapOutput() RecordCallbackMapOutput
	ToRecordCallbackMapOutputWithContext(context.Context) RecordCallbackMapOutput
}

type RecordCallbackMap map[string]RecordCallbackInput

func (RecordCallbackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordCallback)(nil)).Elem()
}

func (i RecordCallbackMap) ToRecordCallbackMapOutput() RecordCallbackMapOutput {
	return i.ToRecordCallbackMapOutputWithContext(context.Background())
}

func (i RecordCallbackMap) ToRecordCallbackMapOutputWithContext(ctx context.Context) RecordCallbackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCallbackMapOutput)
}

type RecordCallbackOutput struct{ *pulumi.OutputState }

func (RecordCallbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCallback)(nil)).Elem()
}

func (o RecordCallbackOutput) ToRecordCallbackOutput() RecordCallbackOutput {
	return o
}

func (o RecordCallbackOutput) ToRecordCallbackOutputWithContext(ctx context.Context) RecordCallbackOutput {
	return o
}

// Specifies the ingest domain name.
// Changing this parameter will create a new resource.
func (o RecordCallbackOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordCallback) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o RecordCallbackOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordCallback) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the types of recording notifications. The options are as follows:
// + **RECORD_NEW_FILE_START**: Recording started.
// + **RECORD_FILE_COMPLETE**: Recording file generated.
// + **RECORD_OVER**: Recording completed.
// + **RECORD_FAILED**: Recording failed.
func (o RecordCallbackOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecordCallback) pulumi.StringArrayOutput { return v.Types }).(pulumi.StringArrayOutput)
}

// Specifies the callback URL for sending recording notifications, which must start with
// `http://` or `https://`, and cannot contain message headers or parameters.
func (o RecordCallbackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordCallback) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type RecordCallbackArrayOutput struct{ *pulumi.OutputState }

func (RecordCallbackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordCallback)(nil)).Elem()
}

func (o RecordCallbackArrayOutput) ToRecordCallbackArrayOutput() RecordCallbackArrayOutput {
	return o
}

func (o RecordCallbackArrayOutput) ToRecordCallbackArrayOutputWithContext(ctx context.Context) RecordCallbackArrayOutput {
	return o
}

func (o RecordCallbackArrayOutput) Index(i pulumi.IntInput) RecordCallbackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordCallback {
		return vs[0].([]*RecordCallback)[vs[1].(int)]
	}).(RecordCallbackOutput)
}

type RecordCallbackMapOutput struct{ *pulumi.OutputState }

func (RecordCallbackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordCallback)(nil)).Elem()
}

func (o RecordCallbackMapOutput) ToRecordCallbackMapOutput() RecordCallbackMapOutput {
	return o
}

func (o RecordCallbackMapOutput) ToRecordCallbackMapOutputWithContext(ctx context.Context) RecordCallbackMapOutput {
	return o
}

func (o RecordCallbackMapOutput) MapIndex(k pulumi.StringInput) RecordCallbackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordCallback {
		return vs[0].(map[string]*RecordCallback)[vs[1].(string)]
	}).(RecordCallbackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCallbackInput)(nil)).Elem(), &RecordCallback{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCallbackArrayInput)(nil)).Elem(), RecordCallbackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCallbackMapInput)(nil)).Elem(), RecordCallbackMap{})
	pulumi.RegisterOutputType(RecordCallbackOutput{})
	pulumi.RegisterOutputType(RecordCallbackArrayOutput{})
	pulumi.RegisterOutputType(RecordCallbackMapOutput{})
}

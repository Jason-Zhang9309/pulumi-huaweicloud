// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package live

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecordingFlv struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming *string `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength *int `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength int `pulumi:"recordingLength"`
}

// RecordingFlvInput is an input type that accepts RecordingFlvArgs and RecordingFlvOutput values.
// You can construct a concrete instance of `RecordingFlvInput` via:
//
//	RecordingFlvArgs{...}
type RecordingFlvInput interface {
	pulumi.Input

	ToRecordingFlvOutput() RecordingFlvOutput
	ToRecordingFlvOutputWithContext(context.Context) RecordingFlvOutput
}

type RecordingFlvArgs struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming pulumi.StringPtrInput `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength pulumi.IntPtrInput `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength pulumi.IntInput `pulumi:"recordingLength"`
}

func (RecordingFlvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingFlv)(nil)).Elem()
}

func (i RecordingFlvArgs) ToRecordingFlvOutput() RecordingFlvOutput {
	return i.ToRecordingFlvOutputWithContext(context.Background())
}

func (i RecordingFlvArgs) ToRecordingFlvOutputWithContext(ctx context.Context) RecordingFlvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingFlvOutput)
}

func (i RecordingFlvArgs) ToRecordingFlvPtrOutput() RecordingFlvPtrOutput {
	return i.ToRecordingFlvPtrOutputWithContext(context.Background())
}

func (i RecordingFlvArgs) ToRecordingFlvPtrOutputWithContext(ctx context.Context) RecordingFlvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingFlvOutput).ToRecordingFlvPtrOutputWithContext(ctx)
}

// RecordingFlvPtrInput is an input type that accepts RecordingFlvArgs, RecordingFlvPtr and RecordingFlvPtrOutput values.
// You can construct a concrete instance of `RecordingFlvPtrInput` via:
//
//	        RecordingFlvArgs{...}
//
//	or:
//
//	        nil
type RecordingFlvPtrInput interface {
	pulumi.Input

	ToRecordingFlvPtrOutput() RecordingFlvPtrOutput
	ToRecordingFlvPtrOutputWithContext(context.Context) RecordingFlvPtrOutput
}

type recordingFlvPtrType RecordingFlvArgs

func RecordingFlvPtr(v *RecordingFlvArgs) RecordingFlvPtrInput {
	return (*recordingFlvPtrType)(v)
}

func (*recordingFlvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingFlv)(nil)).Elem()
}

func (i *recordingFlvPtrType) ToRecordingFlvPtrOutput() RecordingFlvPtrOutput {
	return i.ToRecordingFlvPtrOutputWithContext(context.Background())
}

func (i *recordingFlvPtrType) ToRecordingFlvPtrOutputWithContext(ctx context.Context) RecordingFlvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingFlvPtrOutput)
}

type RecordingFlvOutput struct{ *pulumi.OutputState }

func (RecordingFlvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingFlv)(nil)).Elem()
}

func (o RecordingFlvOutput) ToRecordingFlvOutput() RecordingFlvOutput {
	return o
}

func (o RecordingFlvOutput) ToRecordingFlvOutputWithContext(ctx context.Context) RecordingFlvOutput {
	return o
}

func (o RecordingFlvOutput) ToRecordingFlvPtrOutput() RecordingFlvPtrOutput {
	return o.ToRecordingFlvPtrOutputWithContext(context.Background())
}

func (o RecordingFlvOutput) ToRecordingFlvPtrOutputWithContext(ctx context.Context) RecordingFlvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingFlv) *RecordingFlv {
		return &v
	}).(RecordingFlvPtrOutput)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingFlvOutput) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingFlv) *string { return v.FileNaming }).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingFlvOutput) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingFlv) *int { return v.MaxStreamPauseLength }).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingFlvOutput) RecordingLength() pulumi.IntOutput {
	return o.ApplyT(func(v RecordingFlv) int { return v.RecordingLength }).(pulumi.IntOutput)
}

type RecordingFlvPtrOutput struct{ *pulumi.OutputState }

func (RecordingFlvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingFlv)(nil)).Elem()
}

func (o RecordingFlvPtrOutput) ToRecordingFlvPtrOutput() RecordingFlvPtrOutput {
	return o
}

func (o RecordingFlvPtrOutput) ToRecordingFlvPtrOutputWithContext(ctx context.Context) RecordingFlvPtrOutput {
	return o
}

func (o RecordingFlvPtrOutput) Elem() RecordingFlvOutput {
	return o.ApplyT(func(v *RecordingFlv) RecordingFlv {
		if v != nil {
			return *v
		}
		var ret RecordingFlv
		return ret
	}).(RecordingFlvOutput)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingFlvPtrOutput) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingFlv) *string {
		if v == nil {
			return nil
		}
		return v.FileNaming
	}).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingFlvPtrOutput) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingFlv) *int {
		if v == nil {
			return nil
		}
		return v.MaxStreamPauseLength
	}).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingFlvPtrOutput) RecordingLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingFlv) *int {
		if v == nil {
			return nil
		}
		return &v.RecordingLength
	}).(pulumi.IntPtrOutput)
}

type RecordingHls struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming *string `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength *int `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength int `pulumi:"recordingLength"`
	// Specifies TS file name prefix.
	// The default value is `{file_start_time_unix}_{file_end_time_unix}_{ts_sequence_number}`.
	TsFileNaming *string `pulumi:"tsFileNaming"`
}

// RecordingHlsInput is an input type that accepts RecordingHlsArgs and RecordingHlsOutput values.
// You can construct a concrete instance of `RecordingHlsInput` via:
//
//	RecordingHlsArgs{...}
type RecordingHlsInput interface {
	pulumi.Input

	ToRecordingHlsOutput() RecordingHlsOutput
	ToRecordingHlsOutputWithContext(context.Context) RecordingHlsOutput
}

type RecordingHlsArgs struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming pulumi.StringPtrInput `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength pulumi.IntPtrInput `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength pulumi.IntInput `pulumi:"recordingLength"`
	// Specifies TS file name prefix.
	// The default value is `{file_start_time_unix}_{file_end_time_unix}_{ts_sequence_number}`.
	TsFileNaming pulumi.StringPtrInput `pulumi:"tsFileNaming"`
}

func (RecordingHlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingHls)(nil)).Elem()
}

func (i RecordingHlsArgs) ToRecordingHlsOutput() RecordingHlsOutput {
	return i.ToRecordingHlsOutputWithContext(context.Background())
}

func (i RecordingHlsArgs) ToRecordingHlsOutputWithContext(ctx context.Context) RecordingHlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingHlsOutput)
}

func (i RecordingHlsArgs) ToRecordingHlsPtrOutput() RecordingHlsPtrOutput {
	return i.ToRecordingHlsPtrOutputWithContext(context.Background())
}

func (i RecordingHlsArgs) ToRecordingHlsPtrOutputWithContext(ctx context.Context) RecordingHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingHlsOutput).ToRecordingHlsPtrOutputWithContext(ctx)
}

// RecordingHlsPtrInput is an input type that accepts RecordingHlsArgs, RecordingHlsPtr and RecordingHlsPtrOutput values.
// You can construct a concrete instance of `RecordingHlsPtrInput` via:
//
//	        RecordingHlsArgs{...}
//
//	or:
//
//	        nil
type RecordingHlsPtrInput interface {
	pulumi.Input

	ToRecordingHlsPtrOutput() RecordingHlsPtrOutput
	ToRecordingHlsPtrOutputWithContext(context.Context) RecordingHlsPtrOutput
}

type recordingHlsPtrType RecordingHlsArgs

func RecordingHlsPtr(v *RecordingHlsArgs) RecordingHlsPtrInput {
	return (*recordingHlsPtrType)(v)
}

func (*recordingHlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingHls)(nil)).Elem()
}

func (i *recordingHlsPtrType) ToRecordingHlsPtrOutput() RecordingHlsPtrOutput {
	return i.ToRecordingHlsPtrOutputWithContext(context.Background())
}

func (i *recordingHlsPtrType) ToRecordingHlsPtrOutputWithContext(ctx context.Context) RecordingHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingHlsPtrOutput)
}

type RecordingHlsOutput struct{ *pulumi.OutputState }

func (RecordingHlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingHls)(nil)).Elem()
}

func (o RecordingHlsOutput) ToRecordingHlsOutput() RecordingHlsOutput {
	return o
}

func (o RecordingHlsOutput) ToRecordingHlsOutputWithContext(ctx context.Context) RecordingHlsOutput {
	return o
}

func (o RecordingHlsOutput) ToRecordingHlsPtrOutput() RecordingHlsPtrOutput {
	return o.ToRecordingHlsPtrOutputWithContext(context.Background())
}

func (o RecordingHlsOutput) ToRecordingHlsPtrOutputWithContext(ctx context.Context) RecordingHlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingHls) *RecordingHls {
		return &v
	}).(RecordingHlsPtrOutput)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingHlsOutput) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingHls) *string { return v.FileNaming }).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingHlsOutput) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingHls) *int { return v.MaxStreamPauseLength }).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingHlsOutput) RecordingLength() pulumi.IntOutput {
	return o.ApplyT(func(v RecordingHls) int { return v.RecordingLength }).(pulumi.IntOutput)
}

// Specifies TS file name prefix.
// The default value is `{file_start_time_unix}_{file_end_time_unix}_{ts_sequence_number}`.
func (o RecordingHlsOutput) TsFileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingHls) *string { return v.TsFileNaming }).(pulumi.StringPtrOutput)
}

type RecordingHlsPtrOutput struct{ *pulumi.OutputState }

func (RecordingHlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingHls)(nil)).Elem()
}

func (o RecordingHlsPtrOutput) ToRecordingHlsPtrOutput() RecordingHlsPtrOutput {
	return o
}

func (o RecordingHlsPtrOutput) ToRecordingHlsPtrOutputWithContext(ctx context.Context) RecordingHlsPtrOutput {
	return o
}

func (o RecordingHlsPtrOutput) Elem() RecordingHlsOutput {
	return o.ApplyT(func(v *RecordingHls) RecordingHls {
		if v != nil {
			return *v
		}
		var ret RecordingHls
		return ret
	}).(RecordingHlsOutput)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingHlsPtrOutput) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingHls) *string {
		if v == nil {
			return nil
		}
		return v.FileNaming
	}).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingHlsPtrOutput) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingHls) *int {
		if v == nil {
			return nil
		}
		return v.MaxStreamPauseLength
	}).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingHlsPtrOutput) RecordingLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingHls) *int {
		if v == nil {
			return nil
		}
		return &v.RecordingLength
	}).(pulumi.IntPtrOutput)
}

// Specifies TS file name prefix.
// The default value is `{file_start_time_unix}_{file_end_time_unix}_{ts_sequence_number}`.
func (o RecordingHlsPtrOutput) TsFileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingHls) *string {
		if v == nil {
			return nil
		}
		return v.TsFileNaming
	}).(pulumi.StringPtrOutput)
}

type RecordingMp4 struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming *string `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength *int `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength int `pulumi:"recordingLength"`
}

// RecordingMp4Input is an input type that accepts RecordingMp4Args and RecordingMp4Output values.
// You can construct a concrete instance of `RecordingMp4Input` via:
//
//	RecordingMp4Args{...}
type RecordingMp4Input interface {
	pulumi.Input

	ToRecordingMp4Output() RecordingMp4Output
	ToRecordingMp4OutputWithContext(context.Context) RecordingMp4Output
}

type RecordingMp4Args struct {
	// Specifies the path and file name prefix of a recording file. The default value is
	// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
	FileNaming pulumi.StringPtrInput `pulumi:"fileNaming"`
	// Specifies the interval threshold for combining recording chunks. If the
	// stream pause length exceeds the value of this parameter, a new recording is generated.
	// Value range: 0 ~ 300, unit: `second`.
	// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
	MaxStreamPauseLength pulumi.IntPtrInput `pulumi:"maxStreamPauseLength"`
	// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
	// A stream exceeding the recording length will generate a new recording.
	RecordingLength pulumi.IntInput `pulumi:"recordingLength"`
}

func (RecordingMp4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingMp4)(nil)).Elem()
}

func (i RecordingMp4Args) ToRecordingMp4Output() RecordingMp4Output {
	return i.ToRecordingMp4OutputWithContext(context.Background())
}

func (i RecordingMp4Args) ToRecordingMp4OutputWithContext(ctx context.Context) RecordingMp4Output {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingMp4Output)
}

func (i RecordingMp4Args) ToRecordingMp4PtrOutput() RecordingMp4PtrOutput {
	return i.ToRecordingMp4PtrOutputWithContext(context.Background())
}

func (i RecordingMp4Args) ToRecordingMp4PtrOutputWithContext(ctx context.Context) RecordingMp4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingMp4Output).ToRecordingMp4PtrOutputWithContext(ctx)
}

// RecordingMp4PtrInput is an input type that accepts RecordingMp4Args, RecordingMp4Ptr and RecordingMp4PtrOutput values.
// You can construct a concrete instance of `RecordingMp4PtrInput` via:
//
//	        RecordingMp4Args{...}
//
//	or:
//
//	        nil
type RecordingMp4PtrInput interface {
	pulumi.Input

	ToRecordingMp4PtrOutput() RecordingMp4PtrOutput
	ToRecordingMp4PtrOutputWithContext(context.Context) RecordingMp4PtrOutput
}

type recordingMp4PtrType RecordingMp4Args

func RecordingMp4Ptr(v *RecordingMp4Args) RecordingMp4PtrInput {
	return (*recordingMp4PtrType)(v)
}

func (*recordingMp4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingMp4)(nil)).Elem()
}

func (i *recordingMp4PtrType) ToRecordingMp4PtrOutput() RecordingMp4PtrOutput {
	return i.ToRecordingMp4PtrOutputWithContext(context.Background())
}

func (i *recordingMp4PtrType) ToRecordingMp4PtrOutputWithContext(ctx context.Context) RecordingMp4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingMp4PtrOutput)
}

type RecordingMp4Output struct{ *pulumi.OutputState }

func (RecordingMp4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingMp4)(nil)).Elem()
}

func (o RecordingMp4Output) ToRecordingMp4Output() RecordingMp4Output {
	return o
}

func (o RecordingMp4Output) ToRecordingMp4OutputWithContext(ctx context.Context) RecordingMp4Output {
	return o
}

func (o RecordingMp4Output) ToRecordingMp4PtrOutput() RecordingMp4PtrOutput {
	return o.ToRecordingMp4PtrOutputWithContext(context.Background())
}

func (o RecordingMp4Output) ToRecordingMp4PtrOutputWithContext(ctx context.Context) RecordingMp4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingMp4) *RecordingMp4 {
		return &v
	}).(RecordingMp4PtrOutput)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingMp4Output) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingMp4) *string { return v.FileNaming }).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingMp4Output) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingMp4) *int { return v.MaxStreamPauseLength }).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingMp4Output) RecordingLength() pulumi.IntOutput {
	return o.ApplyT(func(v RecordingMp4) int { return v.RecordingLength }).(pulumi.IntOutput)
}

type RecordingMp4PtrOutput struct{ *pulumi.OutputState }

func (RecordingMp4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingMp4)(nil)).Elem()
}

func (o RecordingMp4PtrOutput) ToRecordingMp4PtrOutput() RecordingMp4PtrOutput {
	return o
}

func (o RecordingMp4PtrOutput) ToRecordingMp4PtrOutputWithContext(ctx context.Context) RecordingMp4PtrOutput {
	return o
}

func (o RecordingMp4PtrOutput) Elem() RecordingMp4Output {
	return o.ApplyT(func(v *RecordingMp4) RecordingMp4 {
		if v != nil {
			return *v
		}
		var ret RecordingMp4
		return ret
	}).(RecordingMp4Output)
}

// Specifies the path and file name prefix of a recording file. The default value is
// `Record/{publish_domain}/{app}/{record_type}/{record_format}/{stream}_{file_start_time}/{file_start_time}`.
func (o RecordingMp4PtrOutput) FileNaming() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingMp4) *string {
		if v == nil {
			return nil
		}
		return v.FileNaming
	}).(pulumi.StringPtrOutput)
}

// Specifies the interval threshold for combining recording chunks. If the
// stream pause length exceeds the value of this parameter, a new recording is generated.
// Value range: 0 ~ 300, unit: `second`.
// If the value is set to `0`, a new file will be generated once the stream is interrupted. Defaults to `0`.
func (o RecordingMp4PtrOutput) MaxStreamPauseLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingMp4) *int {
		if v == nil {
			return nil
		}
		return v.MaxStreamPauseLength
	}).(pulumi.IntPtrOutput)
}

// Specifies the recording length. Value range: 15 ~ 180, unit: `minute`.
// A stream exceeding the recording length will generate a new recording.
func (o RecordingMp4PtrOutput) RecordingLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingMp4) *int {
		if v == nil {
			return nil
		}
		return &v.RecordingLength
	}).(pulumi.IntPtrOutput)
}

type RecordingObs struct {
	// Specifies OBS bucket.
	Bucket string `pulumi:"bucket"`
	// Specifies OBS object path. If omitted, recordings will be saved to the root directory.
	Object *string `pulumi:"object"`
	// Specifies the region of OBS.
	Region string `pulumi:"region"`
}

// RecordingObsInput is an input type that accepts RecordingObsArgs and RecordingObsOutput values.
// You can construct a concrete instance of `RecordingObsInput` via:
//
//	RecordingObsArgs{...}
type RecordingObsInput interface {
	pulumi.Input

	ToRecordingObsOutput() RecordingObsOutput
	ToRecordingObsOutputWithContext(context.Context) RecordingObsOutput
}

type RecordingObsArgs struct {
	// Specifies OBS bucket.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Specifies OBS object path. If omitted, recordings will be saved to the root directory.
	Object pulumi.StringPtrInput `pulumi:"object"`
	// Specifies the region of OBS.
	Region pulumi.StringInput `pulumi:"region"`
}

func (RecordingObsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingObs)(nil)).Elem()
}

func (i RecordingObsArgs) ToRecordingObsOutput() RecordingObsOutput {
	return i.ToRecordingObsOutputWithContext(context.Background())
}

func (i RecordingObsArgs) ToRecordingObsOutputWithContext(ctx context.Context) RecordingObsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingObsOutput)
}

func (i RecordingObsArgs) ToRecordingObsPtrOutput() RecordingObsPtrOutput {
	return i.ToRecordingObsPtrOutputWithContext(context.Background())
}

func (i RecordingObsArgs) ToRecordingObsPtrOutputWithContext(ctx context.Context) RecordingObsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingObsOutput).ToRecordingObsPtrOutputWithContext(ctx)
}

// RecordingObsPtrInput is an input type that accepts RecordingObsArgs, RecordingObsPtr and RecordingObsPtrOutput values.
// You can construct a concrete instance of `RecordingObsPtrInput` via:
//
//	        RecordingObsArgs{...}
//
//	or:
//
//	        nil
type RecordingObsPtrInput interface {
	pulumi.Input

	ToRecordingObsPtrOutput() RecordingObsPtrOutput
	ToRecordingObsPtrOutputWithContext(context.Context) RecordingObsPtrOutput
}

type recordingObsPtrType RecordingObsArgs

func RecordingObsPtr(v *RecordingObsArgs) RecordingObsPtrInput {
	return (*recordingObsPtrType)(v)
}

func (*recordingObsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingObs)(nil)).Elem()
}

func (i *recordingObsPtrType) ToRecordingObsPtrOutput() RecordingObsPtrOutput {
	return i.ToRecordingObsPtrOutputWithContext(context.Background())
}

func (i *recordingObsPtrType) ToRecordingObsPtrOutputWithContext(ctx context.Context) RecordingObsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingObsPtrOutput)
}

type RecordingObsOutput struct{ *pulumi.OutputState }

func (RecordingObsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingObs)(nil)).Elem()
}

func (o RecordingObsOutput) ToRecordingObsOutput() RecordingObsOutput {
	return o
}

func (o RecordingObsOutput) ToRecordingObsOutputWithContext(ctx context.Context) RecordingObsOutput {
	return o
}

func (o RecordingObsOutput) ToRecordingObsPtrOutput() RecordingObsPtrOutput {
	return o.ToRecordingObsPtrOutputWithContext(context.Background())
}

func (o RecordingObsOutput) ToRecordingObsPtrOutputWithContext(ctx context.Context) RecordingObsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingObs) *RecordingObs {
		return &v
	}).(RecordingObsPtrOutput)
}

// Specifies OBS bucket.
func (o RecordingObsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingObs) string { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies OBS object path. If omitted, recordings will be saved to the root directory.
func (o RecordingObsOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingObs) *string { return v.Object }).(pulumi.StringPtrOutput)
}

// Specifies the region of OBS.
func (o RecordingObsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingObs) string { return v.Region }).(pulumi.StringOutput)
}

type RecordingObsPtrOutput struct{ *pulumi.OutputState }

func (RecordingObsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingObs)(nil)).Elem()
}

func (o RecordingObsPtrOutput) ToRecordingObsPtrOutput() RecordingObsPtrOutput {
	return o
}

func (o RecordingObsPtrOutput) ToRecordingObsPtrOutputWithContext(ctx context.Context) RecordingObsPtrOutput {
	return o
}

func (o RecordingObsPtrOutput) Elem() RecordingObsOutput {
	return o.ApplyT(func(v *RecordingObs) RecordingObs {
		if v != nil {
			return *v
		}
		var ret RecordingObs
		return ret
	}).(RecordingObsOutput)
}

// Specifies OBS bucket.
func (o RecordingObsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingObs) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Specifies OBS object path. If omitted, recordings will be saved to the root directory.
func (o RecordingObsPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingObs) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Specifies the region of OBS.
func (o RecordingObsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingObs) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type TranscodingTemplate struct {
	// Specifies the bitrate of a transcoded video, in kbit/s. Value range: 40 ~ 30000.
	Bitrate int `pulumi:"bitrate"`
	// Specifies the frame rate of the transcoded video, in fps. Value range: 0 ~ 30.
	// Value 0 indicates that the frame rate remains unchanged.
	FrameRate *int `pulumi:"frameRate"`
	// Specifies video height (unit: pixel).
	// + **When the video encoding is H264**, value range: 32 ~ 2160 and must be a multiple of 2.
	// + **When the video encoding is H265**, value range: 240 ~ 2160 and must be a multiple of 4.
	Height int `pulumi:"height"`
	// Specifies the template name. The name can contain a maximum of 64 characters, and only
	// contains letters, digits and hyphens (-).
	Name string `pulumi:"name"`
	// Specifies video width (unit: pixel).
	// + **When the video encoding is H264**, value range: 32 ~ 3840 and must be a multiple of 2.
	// + **When the video encoding is H265**, value range: 320 ~ 3840 and must be a multiple of 4.
	Width int `pulumi:"width"`
}

// TranscodingTemplateInput is an input type that accepts TranscodingTemplateArgs and TranscodingTemplateOutput values.
// You can construct a concrete instance of `TranscodingTemplateInput` via:
//
//	TranscodingTemplateArgs{...}
type TranscodingTemplateInput interface {
	pulumi.Input

	ToTranscodingTemplateOutput() TranscodingTemplateOutput
	ToTranscodingTemplateOutputWithContext(context.Context) TranscodingTemplateOutput
}

type TranscodingTemplateArgs struct {
	// Specifies the bitrate of a transcoded video, in kbit/s. Value range: 40 ~ 30000.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
	// Specifies the frame rate of the transcoded video, in fps. Value range: 0 ~ 30.
	// Value 0 indicates that the frame rate remains unchanged.
	FrameRate pulumi.IntPtrInput `pulumi:"frameRate"`
	// Specifies video height (unit: pixel).
	// + **When the video encoding is H264**, value range: 32 ~ 2160 and must be a multiple of 2.
	// + **When the video encoding is H265**, value range: 240 ~ 2160 and must be a multiple of 4.
	Height pulumi.IntInput `pulumi:"height"`
	// Specifies the template name. The name can contain a maximum of 64 characters, and only
	// contains letters, digits and hyphens (-).
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies video width (unit: pixel).
	// + **When the video encoding is H264**, value range: 32 ~ 3840 and must be a multiple of 2.
	// + **When the video encoding is H265**, value range: 320 ~ 3840 and must be a multiple of 4.
	Width pulumi.IntInput `pulumi:"width"`
}

func (TranscodingTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TranscodingTemplate)(nil)).Elem()
}

func (i TranscodingTemplateArgs) ToTranscodingTemplateOutput() TranscodingTemplateOutput {
	return i.ToTranscodingTemplateOutputWithContext(context.Background())
}

func (i TranscodingTemplateArgs) ToTranscodingTemplateOutputWithContext(ctx context.Context) TranscodingTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscodingTemplateOutput)
}

// TranscodingTemplateArrayInput is an input type that accepts TranscodingTemplateArray and TranscodingTemplateArrayOutput values.
// You can construct a concrete instance of `TranscodingTemplateArrayInput` via:
//
//	TranscodingTemplateArray{ TranscodingTemplateArgs{...} }
type TranscodingTemplateArrayInput interface {
	pulumi.Input

	ToTranscodingTemplateArrayOutput() TranscodingTemplateArrayOutput
	ToTranscodingTemplateArrayOutputWithContext(context.Context) TranscodingTemplateArrayOutput
}

type TranscodingTemplateArray []TranscodingTemplateInput

func (TranscodingTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TranscodingTemplate)(nil)).Elem()
}

func (i TranscodingTemplateArray) ToTranscodingTemplateArrayOutput() TranscodingTemplateArrayOutput {
	return i.ToTranscodingTemplateArrayOutputWithContext(context.Background())
}

func (i TranscodingTemplateArray) ToTranscodingTemplateArrayOutputWithContext(ctx context.Context) TranscodingTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscodingTemplateArrayOutput)
}

type TranscodingTemplateOutput struct{ *pulumi.OutputState }

func (TranscodingTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TranscodingTemplate)(nil)).Elem()
}

func (o TranscodingTemplateOutput) ToTranscodingTemplateOutput() TranscodingTemplateOutput {
	return o
}

func (o TranscodingTemplateOutput) ToTranscodingTemplateOutputWithContext(ctx context.Context) TranscodingTemplateOutput {
	return o
}

// Specifies the bitrate of a transcoded video, in kbit/s. Value range: 40 ~ 30000.
func (o TranscodingTemplateOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v TranscodingTemplate) int { return v.Bitrate }).(pulumi.IntOutput)
}

// Specifies the frame rate of the transcoded video, in fps. Value range: 0 ~ 30.
// Value 0 indicates that the frame rate remains unchanged.
func (o TranscodingTemplateOutput) FrameRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TranscodingTemplate) *int { return v.FrameRate }).(pulumi.IntPtrOutput)
}

// Specifies video height (unit: pixel).
// + **When the video encoding is H264**, value range: 32 ~ 2160 and must be a multiple of 2.
// + **When the video encoding is H265**, value range: 240 ~ 2160 and must be a multiple of 4.
func (o TranscodingTemplateOutput) Height() pulumi.IntOutput {
	return o.ApplyT(func(v TranscodingTemplate) int { return v.Height }).(pulumi.IntOutput)
}

// Specifies the template name. The name can contain a maximum of 64 characters, and only
// contains letters, digits and hyphens (-).
func (o TranscodingTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TranscodingTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies video width (unit: pixel).
// + **When the video encoding is H264**, value range: 32 ~ 3840 and must be a multiple of 2.
// + **When the video encoding is H265**, value range: 320 ~ 3840 and must be a multiple of 4.
func (o TranscodingTemplateOutput) Width() pulumi.IntOutput {
	return o.ApplyT(func(v TranscodingTemplate) int { return v.Width }).(pulumi.IntOutput)
}

type TranscodingTemplateArrayOutput struct{ *pulumi.OutputState }

func (TranscodingTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TranscodingTemplate)(nil)).Elem()
}

func (o TranscodingTemplateArrayOutput) ToTranscodingTemplateArrayOutput() TranscodingTemplateArrayOutput {
	return o
}

func (o TranscodingTemplateArrayOutput) ToTranscodingTemplateArrayOutputWithContext(ctx context.Context) TranscodingTemplateArrayOutput {
	return o
}

func (o TranscodingTemplateArrayOutput) Index(i pulumi.IntInput) TranscodingTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TranscodingTemplate {
		return vs[0].([]TranscodingTemplate)[vs[1].(int)]
	}).(TranscodingTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingFlvInput)(nil)).Elem(), RecordingFlvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingFlvPtrInput)(nil)).Elem(), RecordingFlvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingHlsInput)(nil)).Elem(), RecordingHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingHlsPtrInput)(nil)).Elem(), RecordingHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingMp4Input)(nil)).Elem(), RecordingMp4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingMp4PtrInput)(nil)).Elem(), RecordingMp4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingObsInput)(nil)).Elem(), RecordingObsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingObsPtrInput)(nil)).Elem(), RecordingObsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TranscodingTemplateInput)(nil)).Elem(), TranscodingTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TranscodingTemplateArrayInput)(nil)).Elem(), TranscodingTemplateArray{})
	pulumi.RegisterOutputType(RecordingFlvOutput{})
	pulumi.RegisterOutputType(RecordingFlvPtrOutput{})
	pulumi.RegisterOutputType(RecordingHlsOutput{})
	pulumi.RegisterOutputType(RecordingHlsPtrOutput{})
	pulumi.RegisterOutputType(RecordingMp4Output{})
	pulumi.RegisterOutputType(RecordingMp4PtrOutput{})
	pulumi.RegisterOutputType(RecordingObsOutput{})
	pulumi.RegisterOutputType(RecordingObsPtrOutput{})
	pulumi.RegisterOutputType(TranscodingTemplateOutput{})
	pulumi.RegisterOutputType(TranscodingTemplateArrayOutput{})
}

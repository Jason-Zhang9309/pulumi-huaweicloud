// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package live

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Live transcoding within HuaweiCloud.
//
// ## Example Usage
// ### Create a transcoding
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Live"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Live"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			ingestDomainName := cfg.RequireObject("ingestDomainName")
//			ingestDomain, err := Live.NewDomain(ctx, "ingestDomain", &Live.DomainArgs{
//				Type: pulumi.String("push"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Live.NewTranscoding(ctx, "test", &Live.TranscodingArgs{
//				DomainName:    ingestDomain.Name,
//				AppName:       pulumi.String("live"),
//				VideoEncoding: pulumi.String("H264"),
//				Templates: live.TranscodingTemplateArray{
//					&live.TranscodingTemplateArgs{
//						Name:    pulumi.String("L"),
//						Width:   pulumi.Int(300),
//						Height:  pulumi.Int(400),
//						Bitrate: pulumi.Int(300),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Transcodings can be imported using the `domain_name` and `app_name`, separated by a slash. e.g.
//
// ```sh
//
//	$ pulumi import huaweicloud:Live/transcoding:Transcoding test play.example.demo.com/live
//
// ```
type Transcoding struct {
	pulumi.CustomResourceState

	// Specifies the application name.
	// Changing this parameter will create a new resource.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies whether to enable low bitrate HD rates. If enabled
	// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
	LowBitrateHd pulumi.BoolOutput `pulumi:"lowBitrateHd"`
	// Specifies the region in which to create this resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the video quality templates.
	// The object structure is documented below. A maximum of 4 templates can be added.
	// For resolution and bitrate settings in the presets,
	// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
	Templates TranscodingTemplateArrayOutput `pulumi:"templates"`
	// Specifies the video codec. The valid values are **H264** and **H265**.
	VideoEncoding pulumi.StringOutput `pulumi:"videoEncoding"`
}

// NewTranscoding registers a new resource with the given unique name, arguments, and options.
func NewTranscoding(ctx *pulumi.Context,
	name string, args *TranscodingArgs, opts ...pulumi.ResourceOption) (*Transcoding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Templates == nil {
		return nil, errors.New("invalid value for required argument 'Templates'")
	}
	if args.VideoEncoding == nil {
		return nil, errors.New("invalid value for required argument 'VideoEncoding'")
	}
	var resource Transcoding
	err := ctx.RegisterResource("huaweicloud:Live/transcoding:Transcoding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTranscoding gets an existing Transcoding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTranscoding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TranscodingState, opts ...pulumi.ResourceOption) (*Transcoding, error) {
	var resource Transcoding
	err := ctx.ReadResource("huaweicloud:Live/transcoding:Transcoding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transcoding resources.
type transcodingState struct {
	// Specifies the application name.
	// Changing this parameter will create a new resource.
	AppName *string `pulumi:"appName"`
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName *string `pulumi:"domainName"`
	// Specifies whether to enable low bitrate HD rates. If enabled
	// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
	LowBitrateHd *bool `pulumi:"lowBitrateHd"`
	// Specifies the region in which to create this resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the video quality templates.
	// The object structure is documented below. A maximum of 4 templates can be added.
	// For resolution and bitrate settings in the presets,
	// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
	Templates []TranscodingTemplate `pulumi:"templates"`
	// Specifies the video codec. The valid values are **H264** and **H265**.
	VideoEncoding *string `pulumi:"videoEncoding"`
}

type TranscodingState struct {
	// Specifies the application name.
	// Changing this parameter will create a new resource.
	AppName pulumi.StringPtrInput
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringPtrInput
	// Specifies whether to enable low bitrate HD rates. If enabled
	// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
	LowBitrateHd pulumi.BoolPtrInput
	// Specifies the region in which to create this resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the video quality templates.
	// The object structure is documented below. A maximum of 4 templates can be added.
	// For resolution and bitrate settings in the presets,
	// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
	Templates TranscodingTemplateArrayInput
	// Specifies the video codec. The valid values are **H264** and **H265**.
	VideoEncoding pulumi.StringPtrInput
}

func (TranscodingState) ElementType() reflect.Type {
	return reflect.TypeOf((*transcodingState)(nil)).Elem()
}

type transcodingArgs struct {
	// Specifies the application name.
	// Changing this parameter will create a new resource.
	AppName string `pulumi:"appName"`
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName string `pulumi:"domainName"`
	// Specifies whether to enable low bitrate HD rates. If enabled
	// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
	LowBitrateHd *bool `pulumi:"lowBitrateHd"`
	// Specifies the region in which to create this resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the video quality templates.
	// The object structure is documented below. A maximum of 4 templates can be added.
	// For resolution and bitrate settings in the presets,
	// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
	Templates []TranscodingTemplate `pulumi:"templates"`
	// Specifies the video codec. The valid values are **H264** and **H265**.
	VideoEncoding string `pulumi:"videoEncoding"`
}

// The set of arguments for constructing a Transcoding resource.
type TranscodingArgs struct {
	// Specifies the application name.
	// Changing this parameter will create a new resource.
	AppName pulumi.StringInput
	// Specifies the ingest domain name.
	// Changing this parameter will create a new resource.
	DomainName pulumi.StringInput
	// Specifies whether to enable low bitrate HD rates. If enabled
	// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
	LowBitrateHd pulumi.BoolPtrInput
	// Specifies the region in which to create this resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the video quality templates.
	// The object structure is documented below. A maximum of 4 templates can be added.
	// For resolution and bitrate settings in the presets,
	// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
	Templates TranscodingTemplateArrayInput
	// Specifies the video codec. The valid values are **H264** and **H265**.
	VideoEncoding pulumi.StringInput
}

func (TranscodingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transcodingArgs)(nil)).Elem()
}

type TranscodingInput interface {
	pulumi.Input

	ToTranscodingOutput() TranscodingOutput
	ToTranscodingOutputWithContext(ctx context.Context) TranscodingOutput
}

func (*Transcoding) ElementType() reflect.Type {
	return reflect.TypeOf((**Transcoding)(nil)).Elem()
}

func (i *Transcoding) ToTranscodingOutput() TranscodingOutput {
	return i.ToTranscodingOutputWithContext(context.Background())
}

func (i *Transcoding) ToTranscodingOutputWithContext(ctx context.Context) TranscodingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscodingOutput)
}

// TranscodingArrayInput is an input type that accepts TranscodingArray and TranscodingArrayOutput values.
// You can construct a concrete instance of `TranscodingArrayInput` via:
//
//	TranscodingArray{ TranscodingArgs{...} }
type TranscodingArrayInput interface {
	pulumi.Input

	ToTranscodingArrayOutput() TranscodingArrayOutput
	ToTranscodingArrayOutputWithContext(context.Context) TranscodingArrayOutput
}

type TranscodingArray []TranscodingInput

func (TranscodingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Transcoding)(nil)).Elem()
}

func (i TranscodingArray) ToTranscodingArrayOutput() TranscodingArrayOutput {
	return i.ToTranscodingArrayOutputWithContext(context.Background())
}

func (i TranscodingArray) ToTranscodingArrayOutputWithContext(ctx context.Context) TranscodingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscodingArrayOutput)
}

// TranscodingMapInput is an input type that accepts TranscodingMap and TranscodingMapOutput values.
// You can construct a concrete instance of `TranscodingMapInput` via:
//
//	TranscodingMap{ "key": TranscodingArgs{...} }
type TranscodingMapInput interface {
	pulumi.Input

	ToTranscodingMapOutput() TranscodingMapOutput
	ToTranscodingMapOutputWithContext(context.Context) TranscodingMapOutput
}

type TranscodingMap map[string]TranscodingInput

func (TranscodingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Transcoding)(nil)).Elem()
}

func (i TranscodingMap) ToTranscodingMapOutput() TranscodingMapOutput {
	return i.ToTranscodingMapOutputWithContext(context.Background())
}

func (i TranscodingMap) ToTranscodingMapOutputWithContext(ctx context.Context) TranscodingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscodingMapOutput)
}

type TranscodingOutput struct{ *pulumi.OutputState }

func (TranscodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transcoding)(nil)).Elem()
}

func (o TranscodingOutput) ToTranscodingOutput() TranscodingOutput {
	return o
}

func (o TranscodingOutput) ToTranscodingOutputWithContext(ctx context.Context) TranscodingOutput {
	return o
}

// Specifies the application name.
// Changing this parameter will create a new resource.
func (o TranscodingOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *Transcoding) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Specifies the ingest domain name.
// Changing this parameter will create a new resource.
func (o TranscodingOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Transcoding) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies whether to enable low bitrate HD rates. If enabled
// the output media will have a lower bitrate with the same image quality. Defaults to `false`.
func (o TranscodingOutput) LowBitrateHd() pulumi.BoolOutput {
	return o.ApplyT(func(v *Transcoding) pulumi.BoolOutput { return v.LowBitrateHd }).(pulumi.BoolOutput)
}

// Specifies the region in which to create this resource. If omitted,
// the provider-level region will be used. Changing this parameter will create a new resource.
func (o TranscodingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Transcoding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the video quality templates.
// The object structure is documented below. A maximum of 4 templates can be added.
// For resolution and bitrate settings in the presets,
// please refer to the [document](https://support.huaweicloud.com/intl/en-us/usermanual-live/live01000802.html).
func (o TranscodingOutput) Templates() TranscodingTemplateArrayOutput {
	return o.ApplyT(func(v *Transcoding) TranscodingTemplateArrayOutput { return v.Templates }).(TranscodingTemplateArrayOutput)
}

// Specifies the video codec. The valid values are **H264** and **H265**.
func (o TranscodingOutput) VideoEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v *Transcoding) pulumi.StringOutput { return v.VideoEncoding }).(pulumi.StringOutput)
}

type TranscodingArrayOutput struct{ *pulumi.OutputState }

func (TranscodingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Transcoding)(nil)).Elem()
}

func (o TranscodingArrayOutput) ToTranscodingArrayOutput() TranscodingArrayOutput {
	return o
}

func (o TranscodingArrayOutput) ToTranscodingArrayOutputWithContext(ctx context.Context) TranscodingArrayOutput {
	return o
}

func (o TranscodingArrayOutput) Index(i pulumi.IntInput) TranscodingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Transcoding {
		return vs[0].([]*Transcoding)[vs[1].(int)]
	}).(TranscodingOutput)
}

type TranscodingMapOutput struct{ *pulumi.OutputState }

func (TranscodingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Transcoding)(nil)).Elem()
}

func (o TranscodingMapOutput) ToTranscodingMapOutput() TranscodingMapOutput {
	return o
}

func (o TranscodingMapOutput) ToTranscodingMapOutputWithContext(ctx context.Context) TranscodingMapOutput {
	return o
}

func (o TranscodingMapOutput) MapIndex(k pulumi.StringInput) TranscodingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Transcoding {
		return vs[0].(map[string]*Transcoding)[vs[1].(string)]
	}).(TranscodingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TranscodingInput)(nil)).Elem(), &Transcoding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TranscodingArrayInput)(nil)).Elem(), TranscodingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TranscodingMapInput)(nil)).Elem(), TranscodingMap{})
	pulumi.RegisterOutputType(TranscodingOutput{})
	pulumi.RegisterOutputType(TranscodingArrayOutput{})
	pulumi.RegisterOutputType(TranscodingMapOutput{})
}
